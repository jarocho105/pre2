/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.nomina.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.nomina.util.DatoGeneralEmpleadoConstantesFunciones;
import com.bydan.erp.nomina.util.DatoGeneralEmpleadoParameterReturnGeneral;
//import com.bydan.erp.nomina.util.DatoGeneralEmpleadoParameterGeneral;
//import com.bydan.erp.nomina.presentation.report.source.DatoGeneralEmpleadoBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.nomina.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.nomina.resources.reportes.AuxiliarReportes;


import com.bydan.erp.nomina.util.*;
import com.bydan.erp.nomina.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;
import com.bydan.erp.tesoreria.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.nomina.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.nomina.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.tesoreria.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class DatoGeneralEmpleadoBeanSwingJInternalFrame extends DatoGeneralEmpleadoJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(DatoGeneralEmpleadoBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<DatoGeneralEmpleado> datogeneralempleadoValidator = new ClassValidator<DatoGeneralEmpleado>(DatoGeneralEmpleado.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public DatoGeneralEmpleado datogeneralempleado;	
	public DatoGeneralEmpleado datogeneralempleadoAux;
	public DatoGeneralEmpleado datogeneralempleadoAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public DatoGeneralEmpleado datogeneralempleadoTotales;
	public Long idDatoGeneralEmpleadoActual;
	public Long iIdNuevoDatoGeneralEmpleado=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpleado="";

	public List<Empleado> empleadosForeignKey;

	public List<Empleado> getempleadosForeignKey() {
		return empleadosForeignKey;
	}

	public void setempleadosForeignKey(List<Empleado> empleadosForeignKey) {
		this.empleadosForeignKey = empleadosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadoForeignKey;

	public Empleado getempleadoForeignKey() {
		return empleadoForeignKey;
	}

	public void setempleadoForeignKey(Empleado empleadoForeignKey) {
		this.empleadoForeignKey = empleadoForeignKey;
	}

	public String sFinalQueryComboNumeroPatronal="";

	public List<NumeroPatronal> numeropatronalsForeignKey;

	public List<NumeroPatronal> getnumeropatronalsForeignKey() {
		return numeropatronalsForeignKey;
	}

	public void setnumeropatronalsForeignKey(List<NumeroPatronal> numeropatronalsForeignKey) {
		this.numeropatronalsForeignKey = numeropatronalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public NumeroPatronal numeropatronalForeignKey;

	public NumeroPatronal getnumeropatronalForeignKey() {
		return numeropatronalForeignKey;
	}

	public void setnumeropatronalForeignKey(NumeroPatronal numeropatronalForeignKey) {
		this.numeropatronalForeignKey = numeropatronalForeignKey;
	}

	public String sFinalQueryComboTipoAfiliacion="";

	public List<TipoAfiliacion> tipoafiliacionsForeignKey;

	public List<TipoAfiliacion> gettipoafiliacionsForeignKey() {
		return tipoafiliacionsForeignKey;
	}

	public void settipoafiliacionsForeignKey(List<TipoAfiliacion> tipoafiliacionsForeignKey) {
		this.tipoafiliacionsForeignKey = tipoafiliacionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoAfiliacion tipoafiliacionForeignKey;

	public TipoAfiliacion gettipoafiliacionForeignKey() {
		return tipoafiliacionForeignKey;
	}

	public void settipoafiliacionForeignKey(TipoAfiliacion tipoafiliacionForeignKey) {
		this.tipoafiliacionForeignKey = tipoafiliacionForeignKey;
	}

	public String sFinalQueryComboPais="";

	public List<Pais> paissForeignKey;

	public List<Pais> getpaissForeignKey() {
		return paissForeignKey;
	}

	public void setpaissForeignKey(List<Pais> paissForeignKey) {
		this.paissForeignKey = paissForeignKey;
	}

	//OBJETO FK ACTUAL
	public Pais paisForeignKey;

	public Pais getpaisForeignKey() {
		return paisForeignKey;
	}

	public void setpaisForeignKey(Pais paisForeignKey) {
		this.paisForeignKey = paisForeignKey;
	}

	public String sFinalQueryComboProvincia="";

	public List<Provincia> provinciasForeignKey;

	public List<Provincia> getprovinciasForeignKey() {
		return provinciasForeignKey;
	}

	public void setprovinciasForeignKey(List<Provincia> provinciasForeignKey) {
		this.provinciasForeignKey = provinciasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Provincia provinciaForeignKey;

	public Provincia getprovinciaForeignKey() {
		return provinciaForeignKey;
	}

	public void setprovinciaForeignKey(Provincia provinciaForeignKey) {
		this.provinciaForeignKey = provinciaForeignKey;
	}

	public String sFinalQueryComboCanton="";

	public List<Canton> cantonsForeignKey;

	public List<Canton> getcantonsForeignKey() {
		return cantonsForeignKey;
	}

	public void setcantonsForeignKey(List<Canton> cantonsForeignKey) {
		this.cantonsForeignKey = cantonsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Canton cantonForeignKey;

	public Canton getcantonForeignKey() {
		return cantonForeignKey;
	}

	public void setcantonForeignKey(Canton cantonForeignKey) {
		this.cantonForeignKey = cantonForeignKey;
	}

	public String sFinalQueryComboParroquia="";

	public List<Parroquia> parroquiasForeignKey;

	public List<Parroquia> getparroquiasForeignKey() {
		return parroquiasForeignKey;
	}

	public void setparroquiasForeignKey(List<Parroquia> parroquiasForeignKey) {
		this.parroquiasForeignKey = parroquiasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Parroquia parroquiaForeignKey;

	public Parroquia getparroquiaForeignKey() {
		return parroquiaForeignKey;
	}

	public void setparroquiaForeignKey(Parroquia parroquiaForeignKey) {
		this.parroquiaForeignKey = parroquiaForeignKey;
	}

	public String sFinalQueryComboMoneda="";

	public List<Moneda> monedasForeignKey;

	public List<Moneda> getmonedasForeignKey() {
		return monedasForeignKey;
	}

	public void setmonedasForeignKey(List<Moneda> monedasForeignKey) {
		this.monedasForeignKey = monedasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Moneda monedaForeignKey;

	public Moneda getmonedaForeignKey() {
		return monedaForeignKey;
	}

	public void setmonedaForeignKey(Moneda monedaForeignKey) {
		this.monedaForeignKey = monedaForeignKey;
	}

	public String sFinalQueryComboTipoContrato="";

	public List<TipoContrato> tipocontratosForeignKey;

	public List<TipoContrato> gettipocontratosForeignKey() {
		return tipocontratosForeignKey;
	}

	public void settipocontratosForeignKey(List<TipoContrato> tipocontratosForeignKey) {
		this.tipocontratosForeignKey = tipocontratosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoContrato tipocontratoForeignKey;

	public TipoContrato gettipocontratoForeignKey() {
		return tipocontratoForeignKey;
	}

	public void settipocontratoForeignKey(TipoContrato tipocontratoForeignKey) {
		this.tipocontratoForeignKey = tipocontratoForeignKey;
	}

	public String sFinalQueryComboTipoLibretaMili="";

	public List<TipoLibretaMili> tipolibretamilisForeignKey;

	public List<TipoLibretaMili> gettipolibretamilisForeignKey() {
		return tipolibretamilisForeignKey;
	}

	public void settipolibretamilisForeignKey(List<TipoLibretaMili> tipolibretamilisForeignKey) {
		this.tipolibretamilisForeignKey = tipolibretamilisForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoLibretaMili tipolibretamiliForeignKey;

	public TipoLibretaMili gettipolibretamiliForeignKey() {
		return tipolibretamiliForeignKey;
	}

	public void settipolibretamiliForeignKey(TipoLibretaMili tipolibretamiliForeignKey) {
		this.tipolibretamiliForeignKey = tipolibretamiliForeignKey;
	}

	public String sFinalQueryComboTipoGrupoFormaPago="";

	public List<TipoGrupoFormaPago> tipogrupoformapagosForeignKey;

	public List<TipoGrupoFormaPago> gettipogrupoformapagosForeignKey() {
		return tipogrupoformapagosForeignKey;
	}

	public void settipogrupoformapagosForeignKey(List<TipoGrupoFormaPago> tipogrupoformapagosForeignKey) {
		this.tipogrupoformapagosForeignKey = tipogrupoformapagosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoGrupoFormaPago tipogrupoformapagoForeignKey;

	public TipoGrupoFormaPago gettipogrupoformapagoForeignKey() {
		return tipogrupoformapagoForeignKey;
	}

	public void settipogrupoformapagoForeignKey(TipoGrupoFormaPago tipogrupoformapagoForeignKey) {
		this.tipogrupoformapagoForeignKey = tipogrupoformapagoForeignKey;
	}

	public String sFinalQueryComboBanco="";

	public List<Banco> bancosForeignKey;

	public List<Banco> getbancosForeignKey() {
		return bancosForeignKey;
	}

	public void setbancosForeignKey(List<Banco> bancosForeignKey) {
		this.bancosForeignKey = bancosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Banco bancoForeignKey;

	public Banco getbancoForeignKey() {
		return bancoForeignKey;
	}

	public void setbancoForeignKey(Banco bancoForeignKey) {
		this.bancoForeignKey = bancoForeignKey;
	}

	public String sFinalQueryComboTipoCuentaBancoGlobal="";

	public List<TipoCuentaBancoGlobal> tipocuentabancoglobalsForeignKey;

	public List<TipoCuentaBancoGlobal> gettipocuentabancoglobalsForeignKey() {
		return tipocuentabancoglobalsForeignKey;
	}

	public void settipocuentabancoglobalsForeignKey(List<TipoCuentaBancoGlobal> tipocuentabancoglobalsForeignKey) {
		this.tipocuentabancoglobalsForeignKey = tipocuentabancoglobalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoCuentaBancoGlobal tipocuentabancoglobalForeignKey;

	public TipoCuentaBancoGlobal gettipocuentabancoglobalForeignKey() {
		return tipocuentabancoglobalForeignKey;
	}

	public void settipocuentabancoglobalForeignKey(TipoCuentaBancoGlobal tipocuentabancoglobalForeignKey) {
		this.tipocuentabancoglobalForeignKey = tipocuentabancoglobalForeignKey;
	}

	public String sFinalQueryComboTipoSangre="";

	public List<TipoSangre> tiposangresForeignKey;

	public List<TipoSangre> gettiposangresForeignKey() {
		return tiposangresForeignKey;
	}

	public void settiposangresForeignKey(List<TipoSangre> tiposangresForeignKey) {
		this.tiposangresForeignKey = tiposangresForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoSangre tiposangreForeignKey;

	public TipoSangre gettiposangreForeignKey() {
		return tiposangreForeignKey;
	}

	public void settiposangreForeignKey(TipoSangre tiposangreForeignKey) {
		this.tiposangreForeignKey = tiposangreForeignKey;
	}

		
	
	
	
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoDatoGeneralEmpleado;
	public Boolean isPermisoNuevoDatoGeneralEmpleado;
	public Boolean isPermisoActualizarDatoGeneralEmpleado;
	public Boolean isPermisoActualizarOriginalDatoGeneralEmpleado;
	public Boolean isPermisoEliminarDatoGeneralEmpleado;
	public Boolean isPermisoGuardarCambiosDatoGeneralEmpleado;
	public Boolean isPermisoConsultaDatoGeneralEmpleado;
	public Boolean isPermisoBusquedaDatoGeneralEmpleado;
	public Boolean isPermisoReporteDatoGeneralEmpleado;
	public Boolean isPermisoPaginacionMedioDatoGeneralEmpleado;
	public Boolean isPermisoPaginacionAltoDatoGeneralEmpleado;
	public Boolean isPermisoPaginacionTodoDatoGeneralEmpleado;
	public Boolean isPermisoCopiarDatoGeneralEmpleado;
	public Boolean isPermisoVerFormDatoGeneralEmpleado;
	public Boolean isPermisoDuplicarDatoGeneralEmpleado;
	public Boolean isPermisoOrdenDatoGeneralEmpleado;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public DatoGeneralEmpleadoParameterReturnGeneral datogeneralempleadoReturnGeneral;
	public DatoGeneralEmpleadoParameterReturnGeneral datogeneralempleadoParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoDatoGeneralEmpleado=false;
	public Boolean esParaAccionDesdeFormularioDatoGeneralEmpleado=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected DatoGeneralEmpleadoSessionBeanAdditional datogeneralempleadoSessionBeanAdditional=null;
	
	public DatoGeneralEmpleadoSessionBeanAdditional getDatoGeneralEmpleadoSessionBeanAdditional() {
		return this.datogeneralempleadoSessionBeanAdditional;
	}
	
	public void setDatoGeneralEmpleadoSessionBeanAdditional(DatoGeneralEmpleadoSessionBeanAdditional datogeneralempleadoSessionBeanAdditional) {
		try {
			this.datogeneralempleadoSessionBeanAdditional=datogeneralempleadoSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional datogeneralempleadoBeanSwingJInternalFrameAdditional=null;
	//public class DatoGeneralEmpleadoBeanSwingJInternalFrame
	
	public DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional getDatoGeneralEmpleadoBeanSwingJInternalFrameAdditional() {
		return this.datogeneralempleadoBeanSwingJInternalFrameAdditional;
	}
	
	public void setDatoGeneralEmpleadoBeanSwingJInternalFrameAdditional(DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional datogeneralempleadoBeanSwingJInternalFrameAdditional) {
		try {
			this.datogeneralempleadoBeanSwingJInternalFrameAdditional=datogeneralempleadoBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public DatoGeneralEmpleadoLogic datogeneralempleadoLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public DatoGeneralEmpleado datogeneralempleadoBean;
	public DatoGeneralEmpleadoConstantesFunciones datogeneralempleadoConstantesFunciones;
	//public DatoGeneralEmpleadoParameterReturnGeneral datogeneralempleadoReturnGeneral;
	
	//FK
	
	public EmpleadoLogic empleadoLogic;
	public NumeroPatronalLogic numeropatronalLogic;
	public TipoAfiliacionLogic tipoafiliacionLogic;
	public PaisLogic paisLogic;
	public ProvinciaLogic provinciaLogic;
	public CantonLogic cantonLogic;
	public ParroquiaLogic parroquiaLogic;
	public MonedaLogic monedaLogic;
	public TipoContratoLogic tipocontratoLogic;
	public TipoLibretaMiliLogic tipolibretamiliLogic;
	public TipoGrupoFormaPagoLogic tipogrupoformapagoLogic;
	public BancoLogic bancoLogic;
	public TipoCuentaBancoGlobalLogic tipocuentabancoglobalLogic;
	public TipoSangreLogic tiposangreLogic;
	
	//PARAMETROS
	
	
	//public List<DatoGeneralEmpleado> datogeneralempleados;	
	//public List<DatoGeneralEmpleado> datogeneralempleadosEliminados;
	//public List<DatoGeneralEmpleado> datogeneralempleadosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoDatoGeneralEmpleado=false;
	public Boolean isVisibilidadCeldaDuplicarDatoGeneralEmpleado=true;
	public Boolean isVisibilidadCeldaCopiarDatoGeneralEmpleado=true;
	public Boolean isVisibilidadCeldaVerFormDatoGeneralEmpleado=true;
	public Boolean isVisibilidadCeldaOrdenDatoGeneralEmpleado=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=false;
	public Boolean isVisibilidadCeldaModificarDatoGeneralEmpleado=false;
	public Boolean isVisibilidadCeldaActualizarDatoGeneralEmpleado=false;
	public Boolean isVisibilidadCeldaEliminarDatoGeneralEmpleado=false;
	public Boolean isVisibilidadCeldaCancelarDatoGeneralEmpleado=false;
	public Boolean isVisibilidadCeldaGuardarDatoGeneralEmpleado=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=false;	
	
	
	public Boolean isVisibilidadFK_IdBanco=false;
	public Boolean isVisibilidadFK_IdCanton=false;
	public Boolean isVisibilidadFK_IdEmpleado=false;
	public Boolean isVisibilidadFK_IdMoneda=false;
	public Boolean isVisibilidadFK_IdNumeroPatronal=false;
	public Boolean isVisibilidadFK_IdPais=false;
	public Boolean isVisibilidadFK_IdParroquia=false;
	public Boolean isVisibilidadFK_IdProvincia=false;
	public Boolean isVisibilidadFK_IdTipoAfiliacion=false;
	public Boolean isVisibilidadFK_IdTipoContrato=false;
	public Boolean isVisibilidadFK_IdTipoCuentaBancoGlobal=false;
	public Boolean isVisibilidadFK_IdTipoGrupoFormaPago=false;
	public Boolean isVisibilidadFK_IdTipoLibretaMili=false;
	public Boolean isVisibilidadFK_IdTipoSangre=false;
	
	public Long getiIdNuevoDatoGeneralEmpleado() {
		return this.iIdNuevoDatoGeneralEmpleado;
	}

	public void setiIdNuevoDatoGeneralEmpleado(Long iIdNuevoDatoGeneralEmpleado) {
		this.iIdNuevoDatoGeneralEmpleado = iIdNuevoDatoGeneralEmpleado;
	}
	
	public Long getidDatoGeneralEmpleadoActual() {
		return this.idDatoGeneralEmpleadoActual;
	}

	public void setidDatoGeneralEmpleadoActual(Long idDatoGeneralEmpleadoActual) {
		this.idDatoGeneralEmpleadoActual = idDatoGeneralEmpleadoActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public DatoGeneralEmpleado getdatogeneralempleado() {
		return this.datogeneralempleado;
	}

	public void setdatogeneralempleado(DatoGeneralEmpleado datogeneralempleado) {
		this.datogeneralempleado = datogeneralempleado;
	}
	
	public DatoGeneralEmpleado getdatogeneralempleadoAux() {
		return this.datogeneralempleadoAux;
	}

	public void setdatogeneralempleadoAux(DatoGeneralEmpleado datogeneralempleadoAux) {
		this.datogeneralempleadoAux = datogeneralempleadoAux;
	}				
	
	public DatoGeneralEmpleado getdatogeneralempleadoAnterior() {
		return this.datogeneralempleadoAnterior;
	}

	public void setdatogeneralempleadoAnterior(DatoGeneralEmpleado datogeneralempleadoAnterior) {
		this.datogeneralempleadoAnterior = datogeneralempleadoAnterior;
	}	
	
	public DatoGeneralEmpleado getdatogeneralempleadoTotales() {
		return this.datogeneralempleadoTotales;
	}

	public void setdatogeneralempleadoTotales(DatoGeneralEmpleado datogeneralempleadoTotales) {
		this.datogeneralempleadoTotales = datogeneralempleadoTotales;
	}	
	
	public DatoGeneralEmpleado getdatogeneralempleadoBean() {
		return this.datogeneralempleadoBean;
	}

	public void setdatogeneralempleadoBean(DatoGeneralEmpleado datogeneralempleadoBean) {
		this.datogeneralempleadoBean = datogeneralempleadoBean;
	}	
	
	public DatoGeneralEmpleadoParameterReturnGeneral getdatogeneralempleadoReturnGeneral() {
		return this.datogeneralempleadoReturnGeneral;
	}

	public void setdatogeneralempleadoReturnGeneral(DatoGeneralEmpleadoParameterReturnGeneral datogeneralempleadoReturnGeneral) {
		this.datogeneralempleadoReturnGeneral = datogeneralempleadoReturnGeneral;
	}	
	
	
	public Long id_bancoFK_IdBanco=-1L;

	public Long getid_bancoFK_IdBanco() {
		return this.id_bancoFK_IdBanco;
	}

	public void setid_bancoFK_IdBanco(Long id_bancoFK_IdBanco) {
		this.id_bancoFK_IdBanco = id_bancoFK_IdBanco;
	}

	public Long id_cantonFK_IdCanton=-1L;

	public Long getid_cantonFK_IdCanton() {
		return this.id_cantonFK_IdCanton;
	}

	public void setid_cantonFK_IdCanton(Long id_cantonFK_IdCanton) {
		this.id_cantonFK_IdCanton = id_cantonFK_IdCanton;
	}

	public Long id_empleadoFK_IdEmpleado=-1L;

	public Long getid_empleadoFK_IdEmpleado() {
		return this.id_empleadoFK_IdEmpleado;
	}

	public void setid_empleadoFK_IdEmpleado(Long id_empleadoFK_IdEmpleado) {
		this.id_empleadoFK_IdEmpleado = id_empleadoFK_IdEmpleado;
	}

	public Long id_monedaFK_IdMoneda=-1L;

	public Long getid_monedaFK_IdMoneda() {
		return this.id_monedaFK_IdMoneda;
	}

	public void setid_monedaFK_IdMoneda(Long id_monedaFK_IdMoneda) {
		this.id_monedaFK_IdMoneda = id_monedaFK_IdMoneda;
	}

	public Long id_numero_patronalFK_IdNumeroPatronal=-1L;

	public Long getid_numero_patronalFK_IdNumeroPatronal() {
		return this.id_numero_patronalFK_IdNumeroPatronal;
	}

	public void setid_numero_patronalFK_IdNumeroPatronal(Long id_numero_patronalFK_IdNumeroPatronal) {
		this.id_numero_patronalFK_IdNumeroPatronal = id_numero_patronalFK_IdNumeroPatronal;
	}

	public Long id_paisFK_IdPais=-1L;

	public Long getid_paisFK_IdPais() {
		return this.id_paisFK_IdPais;
	}

	public void setid_paisFK_IdPais(Long id_paisFK_IdPais) {
		this.id_paisFK_IdPais = id_paisFK_IdPais;
	}

	public Long id_parroquiaFK_IdParroquia=-1L;

	public Long getid_parroquiaFK_IdParroquia() {
		return this.id_parroquiaFK_IdParroquia;
	}

	public void setid_parroquiaFK_IdParroquia(Long id_parroquiaFK_IdParroquia) {
		this.id_parroquiaFK_IdParroquia = id_parroquiaFK_IdParroquia;
	}

	public Long id_provinciaFK_IdProvincia=-1L;

	public Long getid_provinciaFK_IdProvincia() {
		return this.id_provinciaFK_IdProvincia;
	}

	public void setid_provinciaFK_IdProvincia(Long id_provinciaFK_IdProvincia) {
		this.id_provinciaFK_IdProvincia = id_provinciaFK_IdProvincia;
	}

	public Long id_tipo_afiliacionFK_IdTipoAfiliacion=-1L;

	public Long getid_tipo_afiliacionFK_IdTipoAfiliacion() {
		return this.id_tipo_afiliacionFK_IdTipoAfiliacion;
	}

	public void setid_tipo_afiliacionFK_IdTipoAfiliacion(Long id_tipo_afiliacionFK_IdTipoAfiliacion) {
		this.id_tipo_afiliacionFK_IdTipoAfiliacion = id_tipo_afiliacionFK_IdTipoAfiliacion;
	}

	public Long id_tipo_contratoFK_IdTipoContrato=-1L;

	public Long getid_tipo_contratoFK_IdTipoContrato() {
		return this.id_tipo_contratoFK_IdTipoContrato;
	}

	public void setid_tipo_contratoFK_IdTipoContrato(Long id_tipo_contratoFK_IdTipoContrato) {
		this.id_tipo_contratoFK_IdTipoContrato = id_tipo_contratoFK_IdTipoContrato;
	}

	public Long id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal=-1L;

	public Long getid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal() {
		return this.id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal;
	}

	public void setid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal(Long id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal) {
		this.id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal = id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal;
	}

	public Long id_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago=-1L;

	public Long getid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago() {
		return this.id_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago;
	}

	public void setid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago(Long id_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago) {
		this.id_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago = id_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago;
	}

	public Long id_tipo_libreta_miliFK_IdTipoLibretaMili=-1L;

	public Long getid_tipo_libreta_miliFK_IdTipoLibretaMili() {
		return this.id_tipo_libreta_miliFK_IdTipoLibretaMili;
	}

	public void setid_tipo_libreta_miliFK_IdTipoLibretaMili(Long id_tipo_libreta_miliFK_IdTipoLibretaMili) {
		this.id_tipo_libreta_miliFK_IdTipoLibretaMili = id_tipo_libreta_miliFK_IdTipoLibretaMili;
	}

	public Long id_tipo_sangreFK_IdTipoSangre=-1L;

	public Long getid_tipo_sangreFK_IdTipoSangre() {
		return this.id_tipo_sangreFK_IdTipoSangre;
	}

	public void setid_tipo_sangreFK_IdTipoSangre(Long id_tipo_sangreFK_IdTipoSangre) {
		this.id_tipo_sangreFK_IdTipoSangre = id_tipo_sangreFK_IdTipoSangre;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public DatoGeneralEmpleadoLogic getDatoGeneralEmpleadoLogic()	{		
		return datogeneralempleadoLogic;
	}

	public void setDatoGeneralEmpleadoLogic(DatoGeneralEmpleadoLogic datogeneralempleadoLogic) {
		this.datogeneralempleadoLogic = datogeneralempleadoLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoDatoGeneralEmpleado() {
		return isEsNuevoDatoGeneralEmpleado;
	}

	public void setIsEsNuevoDatoGeneralEmpleado(Boolean isEsNuevoDatoGeneralEmpleado) {
		this.isEsNuevoDatoGeneralEmpleado = isEsNuevoDatoGeneralEmpleado;
	}

	public Boolean getEsParaAccionDesdeFormularioDatoGeneralEmpleado() {
		return esParaAccionDesdeFormularioDatoGeneralEmpleado;
	}
	
	public void setEsParaAccionDesdeFormularioDatoGeneralEmpleado(Boolean esParaAccionDesdeFormularioDatoGeneralEmpleado) {
		this.esParaAccionDesdeFormularioDatoGeneralEmpleado = esParaAccionDesdeFormularioDatoGeneralEmpleado;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpleadosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleado(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidEmpleadoActual());
					this.empleadosForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosNumeroPatronalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.numeropatronalsForeignKey=new ArrayList<NumeroPatronal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			NumeroPatronalLogic numeropatronalLogic=new NumeroPatronalLogic();

			numeropatronalLogic.getNumeroPatronalDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionNumeroPatronal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					numeropatronalLogic.getNumeroPatronalDataAccess().setIsForForeingKeyData(true);

					numeropatronalLogic.getTodosNumeroPatronalsWithConnection(sFinalQuery,new Pagination());

					this.numeropatronalsForeignKey=numeropatronalLogic.getNumeroPatronals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaNumeroPatronal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					numeropatronalLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidNumeroPatronalActual());
					this.numeropatronalsForeignKey.add(numeropatronalLogic.getNumeroPatronal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoAfiliacionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipoafiliacionsForeignKey=new ArrayList<TipoAfiliacion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoAfiliacionLogic tipoafiliacionLogic=new TipoAfiliacionLogic();

			tipoafiliacionLogic.getTipoAfiliacionDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoAfiliacion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoafiliacionLogic.getTipoAfiliacionDataAccess().setIsForForeingKeyData(true);

					tipoafiliacionLogic.getTodosTipoAfiliacionsWithConnection(sFinalQuery,new Pagination());

					this.tipoafiliacionsForeignKey=tipoafiliacionLogic.getTipoAfiliacions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoAfiliacion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoafiliacionLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidTipoAfiliacionActual());
					this.tipoafiliacionsForeignKey.add(tipoafiliacionLogic.getTipoAfiliacion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPaissForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.paissForeignKey=new ArrayList<Pais>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PaisLogic paisLogic=new PaisLogic();

			paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

					paisLogic.getTodosPaissWithConnection(sFinalQuery,new Pagination());

					this.paissForeignKey=paisLogic.getPaiss();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPais(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					paisLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidPaisActual());
					this.paissForeignKey.add(paisLogic.getPais());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosProvinciasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.provinciasForeignKey=new ArrayList<Provincia>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ProvinciaLogic provinciaLogic=new ProvinciaLogic();

			provinciaLogic.getProvinciaDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionProvincia()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					provinciaLogic.getProvinciaDataAccess().setIsForForeingKeyData(true);

					provinciaLogic.getTodosProvinciasWithConnection(sFinalQuery,new Pagination());

					this.provinciasForeignKey=provinciaLogic.getProvincias();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaProvincia(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					provinciaLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidProvinciaActual());
					this.provinciasForeignKey.add(provinciaLogic.getProvincia());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCantonsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cantonsForeignKey=new ArrayList<Canton>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CantonLogic cantonLogic=new CantonLogic();

			cantonLogic.getCantonDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionCanton()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cantonLogic.getCantonDataAccess().setIsForForeingKeyData(true);

					cantonLogic.getTodosCantonsWithConnection(sFinalQuery,new Pagination());

					this.cantonsForeignKey=cantonLogic.getCantons();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCanton(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cantonLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidCantonActual());
					this.cantonsForeignKey.add(cantonLogic.getCanton());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosParroquiasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.parroquiasForeignKey=new ArrayList<Parroquia>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ParroquiaLogic parroquiaLogic=new ParroquiaLogic();

			parroquiaLogic.getParroquiaDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionParroquia()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parroquiaLogic.getParroquiaDataAccess().setIsForForeingKeyData(true);

					parroquiaLogic.getTodosParroquiasWithConnection(sFinalQuery,new Pagination());

					this.parroquiasForeignKey=parroquiaLogic.getParroquias();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaParroquia(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					parroquiaLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidParroquiaActual());
					this.parroquiasForeignKey.add(parroquiaLogic.getParroquia());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMonedasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.monedasForeignKey=new ArrayList<Moneda>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MonedaLogic monedaLogic=new MonedaLogic();

			//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

					monedaLogic.getTodosMonedasWithConnection(sFinalQuery,new Pagination());

					this.monedasForeignKey=monedaLogic.getMonedas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMoneda(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					monedaLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidMonedaActual());
					this.monedasForeignKey.add(monedaLogic.getMoneda());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoContratosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocontratosForeignKey=new ArrayList<TipoContrato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoContratoLogic tipocontratoLogic=new TipoContratoLogic();

			//tipocontratoLogic.getTipoContratoDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoContrato()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocontratoLogic.getTipoContratoDataAccess().setIsForForeingKeyData(true);

					tipocontratoLogic.getTodosTipoContratosWithConnection(sFinalQuery,new Pagination());

					this.tipocontratosForeignKey=tipocontratoLogic.getTipoContratos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoContrato(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocontratoLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidTipoContratoActual());
					this.tipocontratosForeignKey.add(tipocontratoLogic.getTipoContrato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoLibretaMilisForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipolibretamilisForeignKey=new ArrayList<TipoLibretaMili>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoLibretaMiliLogic tipolibretamiliLogic=new TipoLibretaMiliLogic();

			//tipolibretamiliLogic.getTipoLibretaMiliDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoLibretaMili()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipolibretamiliLogic.getTipoLibretaMiliDataAccess().setIsForForeingKeyData(true);

					tipolibretamiliLogic.getTodosTipoLibretaMilisWithConnection(sFinalQuery,new Pagination());

					this.tipolibretamilisForeignKey=tipolibretamiliLogic.getTipoLibretaMilis();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoLibretaMili(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipolibretamiliLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidTipoLibretaMiliActual());
					this.tipolibretamilisForeignKey.add(tipolibretamiliLogic.getTipoLibretaMili());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoGrupoFormaPagosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipogrupoformapagosForeignKey=new ArrayList<TipoGrupoFormaPago>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoGrupoFormaPagoLogic tipogrupoformapagoLogic=new TipoGrupoFormaPagoLogic();

			//tipogrupoformapagoLogic.getTipoGrupoFormaPagoDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoGrupoFormaPago()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipogrupoformapagoLogic.getTipoGrupoFormaPagoDataAccess().setIsForForeingKeyData(true);

					tipogrupoformapagoLogic.getTodosTipoGrupoFormaPagosWithConnection(sFinalQuery,new Pagination());

					this.tipogrupoformapagosForeignKey=tipogrupoformapagoLogic.getTipoGrupoFormaPagos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoGrupoFormaPago(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipogrupoformapagoLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidTipoGrupoFormaPagoActual());
					this.tipogrupoformapagosForeignKey.add(tipogrupoformapagoLogic.getTipoGrupoFormaPago());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBancosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bancosForeignKey=new ArrayList<Banco>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BancoLogic bancoLogic=new BancoLogic();

			//bancoLogic.getBancoDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bancoLogic.getBancoDataAccess().setIsForForeingKeyData(true);

					bancoLogic.getTodosBancosWithConnection(sFinalQuery,new Pagination());

					this.bancosForeignKey=bancoLogic.getBancos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBanco(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bancoLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidBancoActual());
					this.bancosForeignKey.add(bancoLogic.getBanco());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoCuentaBancoGlobalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocuentabancoglobalsForeignKey=new ArrayList<TipoCuentaBancoGlobal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoCuentaBancoGlobalLogic tipocuentabancoglobalLogic=new TipoCuentaBancoGlobalLogic();

			//tipocuentabancoglobalLogic.getTipoCuentaBancoGlobalDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoCuentaBancoGlobal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocuentabancoglobalLogic.getTipoCuentaBancoGlobalDataAccess().setIsForForeingKeyData(true);

					tipocuentabancoglobalLogic.getTodosTipoCuentaBancoGlobalsWithConnection(sFinalQuery,new Pagination());

					this.tipocuentabancoglobalsForeignKey=tipocuentabancoglobalLogic.getTipoCuentaBancoGlobals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoCuentaBancoGlobal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocuentabancoglobalLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidTipoCuentaBancoGlobalActual());
					this.tipocuentabancoglobalsForeignKey.add(tipocuentabancoglobalLogic.getTipoCuentaBancoGlobal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoSangresForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiposangresForeignKey=new ArrayList<TipoSangre>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoSangreLogic tiposangreLogic=new TipoSangreLogic();

			//tiposangreLogic.getTipoSangreDataAccess().setIsForForeingKeyData(true);

			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoSangre()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiposangreLogic.getTipoSangreDataAccess().setIsForForeingKeyData(true);

					tiposangreLogic.getTodosTipoSangresWithConnection(sFinalQuery,new Pagination());

					this.tiposangresForeignKey=tiposangreLogic.getTipoSangres();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoSangre(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiposangreLogic.getEntityWithConnection(datogeneralempleadoSessionBean.getlidTipoSangreActual());
					this.tiposangresForeignKey.add(tiposangreLogic.getTipoSangre());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpleadoForeignKey(Long idEmpleadoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadoTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setEmpleado(empleadoTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_empleadoDatoGeneralEmpleado.setSelectedItem(empleadoTemp);
					}
				} else {
					//jComboBoxid_empleadoDatoGeneralEmpleado.setSelectedItem(empleadoTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_empleadoDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_empleadoDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){
					if(empleadoTemp!=null && jComboBoxid_empleadoFK_IdEmpleadoDatoGeneralEmpleado!=null) {
						jComboBoxid_empleadoFK_IdEmpleadoDatoGeneralEmpleado.setSelectedItem(empleadoTemp);
					} else {
						if(jComboBoxid_empleadoFK_IdEmpleadoDatoGeneralEmpleado!=null) {
							//jComboBoxid_empleadoFK_IdEmpleadoDatoGeneralEmpleado.setSelectedItem(empleadoTemp);
							if(jComboBoxid_empleadoFK_IdEmpleadoDatoGeneralEmpleado.getItemCount()>0) {
								jComboBoxid_empleadoFK_IdEmpleadoDatoGeneralEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoForeignKeyDescripcion(Long idEmpleadoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoForeignKeyGenerico(Long idEmpleadoSeleccionado,JComboBox jComboBoxid_empleadoDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(empleadoTemp!=null) {
				jComboBoxid_empleadoDatoGeneralEmpleadoGenerico.setSelectedItem(empleadoTemp);
			} else {
				if(jComboBoxid_empleadoDatoGeneralEmpleadoGenerico!=null && jComboBoxid_empleadoDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_empleadoDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualNumeroPatronalForeignKey(Long idNumeroPatronalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			NumeroPatronal  numeropatronalTemp=null;

			for(NumeroPatronal numeropatronalAux:numeropatronalsForeignKey) {
				if(numeropatronalAux.getId()!=null && numeropatronalAux.getId().equals(idNumeroPatronalSeleccionado)) {
					numeropatronalTemp=numeropatronalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(numeropatronalTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setNumeroPatronal(numeropatronalTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.setSelectedItem(numeropatronalTemp);
					}
				} else {
					//jComboBoxid_numero_patronalDatoGeneralEmpleado.setSelectedItem(numeropatronalTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdNumeroPatronal") || sFormularioTipoBusqueda.equals("Todos")){
					if(numeropatronalTemp!=null && jComboBoxid_numero_patronalFK_IdNumeroPatronalDatoGeneralEmpleado!=null) {
						jComboBoxid_numero_patronalFK_IdNumeroPatronalDatoGeneralEmpleado.setSelectedItem(numeropatronalTemp);
					} else {
						if(jComboBoxid_numero_patronalFK_IdNumeroPatronalDatoGeneralEmpleado!=null) {
							//jComboBoxid_numero_patronalFK_IdNumeroPatronalDatoGeneralEmpleado.setSelectedItem(numeropatronalTemp);
							if(jComboBoxid_numero_patronalFK_IdNumeroPatronalDatoGeneralEmpleado.getItemCount()>0) {
								jComboBoxid_numero_patronalFK_IdNumeroPatronalDatoGeneralEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualNumeroPatronalForeignKeyDescripcion(Long idNumeroPatronalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			NumeroPatronal  numeropatronalTemp=null;

			for(NumeroPatronal numeropatronalAux:numeropatronalsForeignKey) {
				if(numeropatronalAux.getId()!=null && numeropatronalAux.getId().equals(idNumeroPatronalSeleccionado)) {
					numeropatronalTemp=numeropatronalAux;
					break;
				}
			}


			sDescripcion=NumeroPatronalConstantesFunciones.getNumeroPatronalDescripcion(numeropatronalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualNumeroPatronalForeignKeyGenerico(Long idNumeroPatronalSeleccionado,JComboBox jComboBoxid_numero_patronalDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			NumeroPatronal  numeropatronalTemp=null;

			for(NumeroPatronal numeropatronalAux:numeropatronalsForeignKey) {
				if(numeropatronalAux.getId()!=null && numeropatronalAux.getId().equals(idNumeroPatronalSeleccionado)) {
					numeropatronalTemp=numeropatronalAux;
					break;
				}
			}

			if(numeropatronalTemp!=null) {
				jComboBoxid_numero_patronalDatoGeneralEmpleadoGenerico.setSelectedItem(numeropatronalTemp);
			} else {
				if(jComboBoxid_numero_patronalDatoGeneralEmpleadoGenerico!=null && jComboBoxid_numero_patronalDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_numero_patronalDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoAfiliacionForeignKey(Long idTipoAfiliacionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoAfiliacion  tipoafiliacionTemp=null;

			for(TipoAfiliacion tipoafiliacionAux:tipoafiliacionsForeignKey) {
				if(tipoafiliacionAux.getId()!=null && tipoafiliacionAux.getId().equals(idTipoAfiliacionSeleccionado)) {
					tipoafiliacionTemp=tipoafiliacionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoafiliacionTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setTipoAfiliacion(tipoafiliacionTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.setSelectedItem(tipoafiliacionTemp);
					}
				} else {
					//jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.setSelectedItem(tipoafiliacionTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoAfiliacion") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoafiliacionTemp!=null && jComboBoxid_tipo_afiliacionFK_IdTipoAfiliacionDatoGeneralEmpleado!=null) {
						jComboBoxid_tipo_afiliacionFK_IdTipoAfiliacionDatoGeneralEmpleado.setSelectedItem(tipoafiliacionTemp);
					} else {
						if(jComboBoxid_tipo_afiliacionFK_IdTipoAfiliacionDatoGeneralEmpleado!=null) {
							//jComboBoxid_tipo_afiliacionFK_IdTipoAfiliacionDatoGeneralEmpleado.setSelectedItem(tipoafiliacionTemp);
							if(jComboBoxid_tipo_afiliacionFK_IdTipoAfiliacionDatoGeneralEmpleado.getItemCount()>0) {
								jComboBoxid_tipo_afiliacionFK_IdTipoAfiliacionDatoGeneralEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoAfiliacionForeignKeyDescripcion(Long idTipoAfiliacionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoAfiliacion  tipoafiliacionTemp=null;

			for(TipoAfiliacion tipoafiliacionAux:tipoafiliacionsForeignKey) {
				if(tipoafiliacionAux.getId()!=null && tipoafiliacionAux.getId().equals(idTipoAfiliacionSeleccionado)) {
					tipoafiliacionTemp=tipoafiliacionAux;
					break;
				}
			}


			sDescripcion=TipoAfiliacionConstantesFunciones.getTipoAfiliacionDescripcion(tipoafiliacionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoAfiliacionForeignKeyGenerico(Long idTipoAfiliacionSeleccionado,JComboBox jComboBoxid_tipo_afiliacionDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			TipoAfiliacion  tipoafiliacionTemp=null;

			for(TipoAfiliacion tipoafiliacionAux:tipoafiliacionsForeignKey) {
				if(tipoafiliacionAux.getId()!=null && tipoafiliacionAux.getId().equals(idTipoAfiliacionSeleccionado)) {
					tipoafiliacionTemp=tipoafiliacionAux;
					break;
				}
			}

			if(tipoafiliacionTemp!=null) {
				jComboBoxid_tipo_afiliacionDatoGeneralEmpleadoGenerico.setSelectedItem(tipoafiliacionTemp);
			} else {
				if(jComboBoxid_tipo_afiliacionDatoGeneralEmpleadoGenerico!=null && jComboBoxid_tipo_afiliacionDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_afiliacionDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPaisForeignKey(Long idPaisSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(paisTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setPais(paisTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.setSelectedItem(paisTemp);
					}
				} else {
					//jComboBoxid_paisDatoGeneralEmpleado.setSelectedItem(paisTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdPais") || sFormularioTipoBusqueda.equals("Todos")){
					if(paisTemp!=null && jComboBoxid_paisFK_IdPaisDatoGeneralEmpleado!=null) {
						jComboBoxid_paisFK_IdPaisDatoGeneralEmpleado.setSelectedItem(paisTemp);
					} else {
						if(jComboBoxid_paisFK_IdPaisDatoGeneralEmpleado!=null) {
							//jComboBoxid_paisFK_IdPaisDatoGeneralEmpleado.setSelectedItem(paisTemp);
							if(jComboBoxid_paisFK_IdPaisDatoGeneralEmpleado.getItemCount()>0) {
								jComboBoxid_paisFK_IdPaisDatoGeneralEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPaisForeignKeyDescripcion(Long idPaisSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}


			sDescripcion=PaisConstantesFunciones.getPaisDescripcion(paisTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPaisForeignKeyGenerico(Long idPaisSeleccionado,JComboBox jComboBoxid_paisDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(paisTemp!=null) {
				jComboBoxid_paisDatoGeneralEmpleadoGenerico.setSelectedItem(paisTemp);
			} else {
				if(jComboBoxid_paisDatoGeneralEmpleadoGenerico!=null && jComboBoxid_paisDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_paisDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualProvinciaForeignKey(Long idProvinciaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Provincia  provinciaTemp=null;

			for(Provincia provinciaAux:provinciasForeignKey) {
				if(provinciaAux.getId()!=null && provinciaAux.getId().equals(idProvinciaSeleccionado)) {
					provinciaTemp=provinciaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(provinciaTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setProvincia(provinciaTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.setSelectedItem(provinciaTemp);
					}
				} else {
					//jComboBoxid_provinciaDatoGeneralEmpleado.setSelectedItem(provinciaTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdProvincia") || sFormularioTipoBusqueda.equals("Todos")){
					if(provinciaTemp!=null && jComboBoxid_provinciaFK_IdProvinciaDatoGeneralEmpleado!=null) {
						jComboBoxid_provinciaFK_IdProvinciaDatoGeneralEmpleado.setSelectedItem(provinciaTemp);
					} else {
						if(jComboBoxid_provinciaFK_IdProvinciaDatoGeneralEmpleado!=null) {
							//jComboBoxid_provinciaFK_IdProvinciaDatoGeneralEmpleado.setSelectedItem(provinciaTemp);
							if(jComboBoxid_provinciaFK_IdProvinciaDatoGeneralEmpleado.getItemCount()>0) {
								jComboBoxid_provinciaFK_IdProvinciaDatoGeneralEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualProvinciaForeignKeyDescripcion(Long idProvinciaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Provincia  provinciaTemp=null;

			for(Provincia provinciaAux:provinciasForeignKey) {
				if(provinciaAux.getId()!=null && provinciaAux.getId().equals(idProvinciaSeleccionado)) {
					provinciaTemp=provinciaAux;
					break;
				}
			}


			sDescripcion=ProvinciaConstantesFunciones.getProvinciaDescripcion(provinciaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualProvinciaForeignKeyGenerico(Long idProvinciaSeleccionado,JComboBox jComboBoxid_provinciaDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Provincia  provinciaTemp=null;

			for(Provincia provinciaAux:provinciasForeignKey) {
				if(provinciaAux.getId()!=null && provinciaAux.getId().equals(idProvinciaSeleccionado)) {
					provinciaTemp=provinciaAux;
					break;
				}
			}

			if(provinciaTemp!=null) {
				jComboBoxid_provinciaDatoGeneralEmpleadoGenerico.setSelectedItem(provinciaTemp);
			} else {
				if(jComboBoxid_provinciaDatoGeneralEmpleadoGenerico!=null && jComboBoxid_provinciaDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_provinciaDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCantonForeignKey(Long idCantonSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Canton  cantonTemp=null;

			for(Canton cantonAux:cantonsForeignKey) {
				if(cantonAux.getId()!=null && cantonAux.getId().equals(idCantonSeleccionado)) {
					cantonTemp=cantonAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cantonTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setCanton(cantonTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.setSelectedItem(cantonTemp);
					}
				} else {
					//jComboBoxid_cantonDatoGeneralEmpleado.setSelectedItem(cantonTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCanton") || sFormularioTipoBusqueda.equals("Todos")){
					if(cantonTemp!=null && jComboBoxid_cantonFK_IdCantonDatoGeneralEmpleado!=null) {
						jComboBoxid_cantonFK_IdCantonDatoGeneralEmpleado.setSelectedItem(cantonTemp);
					} else {
						if(jComboBoxid_cantonFK_IdCantonDatoGeneralEmpleado!=null) {
							//jComboBoxid_cantonFK_IdCantonDatoGeneralEmpleado.setSelectedItem(cantonTemp);
							if(jComboBoxid_cantonFK_IdCantonDatoGeneralEmpleado.getItemCount()>0) {
								jComboBoxid_cantonFK_IdCantonDatoGeneralEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCantonForeignKeyDescripcion(Long idCantonSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Canton  cantonTemp=null;

			for(Canton cantonAux:cantonsForeignKey) {
				if(cantonAux.getId()!=null && cantonAux.getId().equals(idCantonSeleccionado)) {
					cantonTemp=cantonAux;
					break;
				}
			}


			sDescripcion=CantonConstantesFunciones.getCantonDescripcion(cantonTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCantonForeignKeyGenerico(Long idCantonSeleccionado,JComboBox jComboBoxid_cantonDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Canton  cantonTemp=null;

			for(Canton cantonAux:cantonsForeignKey) {
				if(cantonAux.getId()!=null && cantonAux.getId().equals(idCantonSeleccionado)) {
					cantonTemp=cantonAux;
					break;
				}
			}

			if(cantonTemp!=null) {
				jComboBoxid_cantonDatoGeneralEmpleadoGenerico.setSelectedItem(cantonTemp);
			} else {
				if(jComboBoxid_cantonDatoGeneralEmpleadoGenerico!=null && jComboBoxid_cantonDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_cantonDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualParroquiaForeignKey(Long idParroquiaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Parroquia  parroquiaTemp=null;

			for(Parroquia parroquiaAux:parroquiasForeignKey) {
				if(parroquiaAux.getId()!=null && parroquiaAux.getId().equals(idParroquiaSeleccionado)) {
					parroquiaTemp=parroquiaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(parroquiaTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setParroquia(parroquiaTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.setSelectedItem(parroquiaTemp);
					}
				} else {
					//jComboBoxid_parroquiaDatoGeneralEmpleado.setSelectedItem(parroquiaTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdParroquia") || sFormularioTipoBusqueda.equals("Todos")){
					if(parroquiaTemp!=null && jComboBoxid_parroquiaFK_IdParroquiaDatoGeneralEmpleado!=null) {
						jComboBoxid_parroquiaFK_IdParroquiaDatoGeneralEmpleado.setSelectedItem(parroquiaTemp);
					} else {
						if(jComboBoxid_parroquiaFK_IdParroquiaDatoGeneralEmpleado!=null) {
							//jComboBoxid_parroquiaFK_IdParroquiaDatoGeneralEmpleado.setSelectedItem(parroquiaTemp);
							if(jComboBoxid_parroquiaFK_IdParroquiaDatoGeneralEmpleado.getItemCount()>0) {
								jComboBoxid_parroquiaFK_IdParroquiaDatoGeneralEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualParroquiaForeignKeyDescripcion(Long idParroquiaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Parroquia  parroquiaTemp=null;

			for(Parroquia parroquiaAux:parroquiasForeignKey) {
				if(parroquiaAux.getId()!=null && parroquiaAux.getId().equals(idParroquiaSeleccionado)) {
					parroquiaTemp=parroquiaAux;
					break;
				}
			}


			sDescripcion=ParroquiaConstantesFunciones.getParroquiaDescripcion(parroquiaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualParroquiaForeignKeyGenerico(Long idParroquiaSeleccionado,JComboBox jComboBoxid_parroquiaDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Parroquia  parroquiaTemp=null;

			for(Parroquia parroquiaAux:parroquiasForeignKey) {
				if(parroquiaAux.getId()!=null && parroquiaAux.getId().equals(idParroquiaSeleccionado)) {
					parroquiaTemp=parroquiaAux;
					break;
				}
			}

			if(parroquiaTemp!=null) {
				jComboBoxid_parroquiaDatoGeneralEmpleadoGenerico.setSelectedItem(parroquiaTemp);
			} else {
				if(jComboBoxid_parroquiaDatoGeneralEmpleadoGenerico!=null && jComboBoxid_parroquiaDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_parroquiaDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMonedaForeignKey(Long idMonedaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(monedaTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setMoneda(monedaTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.setSelectedItem(monedaTemp);
					}
				} else {
					//jComboBoxid_monedaDatoGeneralEmpleado.setSelectedItem(monedaTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMonedaForeignKeyDescripcion(Long idMonedaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}


			sDescripcion=MonedaConstantesFunciones.getMonedaDescripcion(monedaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMonedaForeignKeyGenerico(Long idMonedaSeleccionado,JComboBox jComboBoxid_monedaDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(monedaTemp!=null) {
				jComboBoxid_monedaDatoGeneralEmpleadoGenerico.setSelectedItem(monedaTemp);
			} else {
				if(jComboBoxid_monedaDatoGeneralEmpleadoGenerico!=null && jComboBoxid_monedaDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_monedaDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoContratoForeignKey(Long idTipoContratoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoContrato  tipocontratoTemp=null;

			for(TipoContrato tipocontratoAux:tipocontratosForeignKey) {
				if(tipocontratoAux.getId()!=null && tipocontratoAux.getId().equals(idTipoContratoSeleccionado)) {
					tipocontratoTemp=tipocontratoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocontratoTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setTipoContrato(tipocontratoTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.setSelectedItem(tipocontratoTemp);
					}
				} else {
					//jComboBoxid_tipo_contratoDatoGeneralEmpleado.setSelectedItem(tipocontratoTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoContrato") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipocontratoTemp!=null && jComboBoxid_tipo_contratoFK_IdTipoContratoDatoGeneralEmpleado!=null) {
						jComboBoxid_tipo_contratoFK_IdTipoContratoDatoGeneralEmpleado.setSelectedItem(tipocontratoTemp);
					} else {
						if(jComboBoxid_tipo_contratoFK_IdTipoContratoDatoGeneralEmpleado!=null) {
							//jComboBoxid_tipo_contratoFK_IdTipoContratoDatoGeneralEmpleado.setSelectedItem(tipocontratoTemp);
							if(jComboBoxid_tipo_contratoFK_IdTipoContratoDatoGeneralEmpleado.getItemCount()>0) {
								jComboBoxid_tipo_contratoFK_IdTipoContratoDatoGeneralEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoContratoForeignKeyDescripcion(Long idTipoContratoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoContrato  tipocontratoTemp=null;

			for(TipoContrato tipocontratoAux:tipocontratosForeignKey) {
				if(tipocontratoAux.getId()!=null && tipocontratoAux.getId().equals(idTipoContratoSeleccionado)) {
					tipocontratoTemp=tipocontratoAux;
					break;
				}
			}


			sDescripcion=TipoContratoConstantesFunciones.getTipoContratoDescripcion(tipocontratoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoContratoForeignKeyGenerico(Long idTipoContratoSeleccionado,JComboBox jComboBoxid_tipo_contratoDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			TipoContrato  tipocontratoTemp=null;

			for(TipoContrato tipocontratoAux:tipocontratosForeignKey) {
				if(tipocontratoAux.getId()!=null && tipocontratoAux.getId().equals(idTipoContratoSeleccionado)) {
					tipocontratoTemp=tipocontratoAux;
					break;
				}
			}

			if(tipocontratoTemp!=null) {
				jComboBoxid_tipo_contratoDatoGeneralEmpleadoGenerico.setSelectedItem(tipocontratoTemp);
			} else {
				if(jComboBoxid_tipo_contratoDatoGeneralEmpleadoGenerico!=null && jComboBoxid_tipo_contratoDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_contratoDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoLibretaMiliForeignKey(Long idTipoLibretaMiliSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoLibretaMili  tipolibretamiliTemp=null;

			for(TipoLibretaMili tipolibretamiliAux:tipolibretamilisForeignKey) {
				if(tipolibretamiliAux.getId()!=null && tipolibretamiliAux.getId().equals(idTipoLibretaMiliSeleccionado)) {
					tipolibretamiliTemp=tipolibretamiliAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipolibretamiliTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setTipoLibretaMili(tipolibretamiliTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.setSelectedItem(tipolibretamiliTemp);
					}
				} else {
					//jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.setSelectedItem(tipolibretamiliTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoLibretaMili") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipolibretamiliTemp!=null && jComboBoxid_tipo_libreta_miliFK_IdTipoLibretaMiliDatoGeneralEmpleado!=null) {
						jComboBoxid_tipo_libreta_miliFK_IdTipoLibretaMiliDatoGeneralEmpleado.setSelectedItem(tipolibretamiliTemp);
					} else {
						if(jComboBoxid_tipo_libreta_miliFK_IdTipoLibretaMiliDatoGeneralEmpleado!=null) {
							//jComboBoxid_tipo_libreta_miliFK_IdTipoLibretaMiliDatoGeneralEmpleado.setSelectedItem(tipolibretamiliTemp);
							if(jComboBoxid_tipo_libreta_miliFK_IdTipoLibretaMiliDatoGeneralEmpleado.getItemCount()>0) {
								jComboBoxid_tipo_libreta_miliFK_IdTipoLibretaMiliDatoGeneralEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoLibretaMiliForeignKeyDescripcion(Long idTipoLibretaMiliSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoLibretaMili  tipolibretamiliTemp=null;

			for(TipoLibretaMili tipolibretamiliAux:tipolibretamilisForeignKey) {
				if(tipolibretamiliAux.getId()!=null && tipolibretamiliAux.getId().equals(idTipoLibretaMiliSeleccionado)) {
					tipolibretamiliTemp=tipolibretamiliAux;
					break;
				}
			}


			sDescripcion=TipoLibretaMiliConstantesFunciones.getTipoLibretaMiliDescripcion(tipolibretamiliTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoLibretaMiliForeignKeyGenerico(Long idTipoLibretaMiliSeleccionado,JComboBox jComboBoxid_tipo_libreta_miliDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			TipoLibretaMili  tipolibretamiliTemp=null;

			for(TipoLibretaMili tipolibretamiliAux:tipolibretamilisForeignKey) {
				if(tipolibretamiliAux.getId()!=null && tipolibretamiliAux.getId().equals(idTipoLibretaMiliSeleccionado)) {
					tipolibretamiliTemp=tipolibretamiliAux;
					break;
				}
			}

			if(tipolibretamiliTemp!=null) {
				jComboBoxid_tipo_libreta_miliDatoGeneralEmpleadoGenerico.setSelectedItem(tipolibretamiliTemp);
			} else {
				if(jComboBoxid_tipo_libreta_miliDatoGeneralEmpleadoGenerico!=null && jComboBoxid_tipo_libreta_miliDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_libreta_miliDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoGrupoFormaPagoForeignKey(Long idTipoGrupoFormaPagoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoGrupoFormaPago  tipogrupoformapagoTemp=null;

			for(TipoGrupoFormaPago tipogrupoformapagoAux:tipogrupoformapagosForeignKey) {
				if(tipogrupoformapagoAux.getId()!=null && tipogrupoformapagoAux.getId().equals(idTipoGrupoFormaPagoSeleccionado)) {
					tipogrupoformapagoTemp=tipogrupoformapagoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipogrupoformapagoTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setTipoGrupoFormaPago(tipogrupoformapagoTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.setSelectedItem(tipogrupoformapagoTemp);
					}
				} else {
					//jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.setSelectedItem(tipogrupoformapagoTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoGrupoFormaPago") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipogrupoformapagoTemp!=null && jComboBoxid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado!=null) {
						jComboBoxid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado.setSelectedItem(tipogrupoformapagoTemp);
					} else {
						if(jComboBoxid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado!=null) {
							//jComboBoxid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado.setSelectedItem(tipogrupoformapagoTemp);
							if(jComboBoxid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado.getItemCount()>0) {
								jComboBoxid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoGrupoFormaPagoForeignKeyDescripcion(Long idTipoGrupoFormaPagoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoGrupoFormaPago  tipogrupoformapagoTemp=null;

			for(TipoGrupoFormaPago tipogrupoformapagoAux:tipogrupoformapagosForeignKey) {
				if(tipogrupoformapagoAux.getId()!=null && tipogrupoformapagoAux.getId().equals(idTipoGrupoFormaPagoSeleccionado)) {
					tipogrupoformapagoTemp=tipogrupoformapagoAux;
					break;
				}
			}


			sDescripcion=TipoGrupoFormaPagoConstantesFunciones.getTipoGrupoFormaPagoDescripcion(tipogrupoformapagoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoGrupoFormaPagoForeignKeyGenerico(Long idTipoGrupoFormaPagoSeleccionado,JComboBox jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			TipoGrupoFormaPago  tipogrupoformapagoTemp=null;

			for(TipoGrupoFormaPago tipogrupoformapagoAux:tipogrupoformapagosForeignKey) {
				if(tipogrupoformapagoAux.getId()!=null && tipogrupoformapagoAux.getId().equals(idTipoGrupoFormaPagoSeleccionado)) {
					tipogrupoformapagoTemp=tipogrupoformapagoAux;
					break;
				}
			}

			if(tipogrupoformapagoTemp!=null) {
				jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleadoGenerico.setSelectedItem(tipogrupoformapagoTemp);
			} else {
				if(jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleadoGenerico!=null && jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBancoForeignKey(Long idBancoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bancoTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setBanco(bancoTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.setSelectedItem(bancoTemp);
					}
				} else {
					//jComboBoxid_bancoDatoGeneralEmpleado.setSelectedItem(bancoTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBanco") || sFormularioTipoBusqueda.equals("Todos")){
					if(bancoTemp!=null && jComboBoxid_bancoFK_IdBancoDatoGeneralEmpleado!=null) {
						jComboBoxid_bancoFK_IdBancoDatoGeneralEmpleado.setSelectedItem(bancoTemp);
					} else {
						if(jComboBoxid_bancoFK_IdBancoDatoGeneralEmpleado!=null) {
							//jComboBoxid_bancoFK_IdBancoDatoGeneralEmpleado.setSelectedItem(bancoTemp);
							if(jComboBoxid_bancoFK_IdBancoDatoGeneralEmpleado.getItemCount()>0) {
								jComboBoxid_bancoFK_IdBancoDatoGeneralEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBancoForeignKeyDescripcion(Long idBancoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}


			sDescripcion=BancoConstantesFunciones.getBancoDescripcion(bancoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBancoForeignKeyGenerico(Long idBancoSeleccionado,JComboBox jComboBoxid_bancoDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}

			if(bancoTemp!=null) {
				jComboBoxid_bancoDatoGeneralEmpleadoGenerico.setSelectedItem(bancoTemp);
			} else {
				if(jComboBoxid_bancoDatoGeneralEmpleadoGenerico!=null && jComboBoxid_bancoDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_bancoDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoCuentaBancoGlobalForeignKey(Long idTipoCuentaBancoGlobalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoCuentaBancoGlobal  tipocuentabancoglobalTemp=null;

			for(TipoCuentaBancoGlobal tipocuentabancoglobalAux:tipocuentabancoglobalsForeignKey) {
				if(tipocuentabancoglobalAux.getId()!=null && tipocuentabancoglobalAux.getId().equals(idTipoCuentaBancoGlobalSeleccionado)) {
					tipocuentabancoglobalTemp=tipocuentabancoglobalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocuentabancoglobalTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setTipoCuentaBancoGlobal(tipocuentabancoglobalTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.setSelectedItem(tipocuentabancoglobalTemp);
					}
				} else {
					//jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.setSelectedItem(tipocuentabancoglobalTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoCuentaBancoGlobal") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipocuentabancoglobalTemp!=null && jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado!=null) {
						jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado.setSelectedItem(tipocuentabancoglobalTemp);
					} else {
						if(jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado!=null) {
							//jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado.setSelectedItem(tipocuentabancoglobalTemp);
							if(jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado.getItemCount()>0) {
								jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoCuentaBancoGlobalForeignKeyDescripcion(Long idTipoCuentaBancoGlobalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoCuentaBancoGlobal  tipocuentabancoglobalTemp=null;

			for(TipoCuentaBancoGlobal tipocuentabancoglobalAux:tipocuentabancoglobalsForeignKey) {
				if(tipocuentabancoglobalAux.getId()!=null && tipocuentabancoglobalAux.getId().equals(idTipoCuentaBancoGlobalSeleccionado)) {
					tipocuentabancoglobalTemp=tipocuentabancoglobalAux;
					break;
				}
			}


			sDescripcion=TipoCuentaBancoGlobalConstantesFunciones.getTipoCuentaBancoGlobalDescripcion(tipocuentabancoglobalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoCuentaBancoGlobalForeignKeyGenerico(Long idTipoCuentaBancoGlobalSeleccionado,JComboBox jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			TipoCuentaBancoGlobal  tipocuentabancoglobalTemp=null;

			for(TipoCuentaBancoGlobal tipocuentabancoglobalAux:tipocuentabancoglobalsForeignKey) {
				if(tipocuentabancoglobalAux.getId()!=null && tipocuentabancoglobalAux.getId().equals(idTipoCuentaBancoGlobalSeleccionado)) {
					tipocuentabancoglobalTemp=tipocuentabancoglobalAux;
					break;
				}
			}

			if(tipocuentabancoglobalTemp!=null) {
				jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleadoGenerico.setSelectedItem(tipocuentabancoglobalTemp);
			} else {
				if(jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleadoGenerico!=null && jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoSangreForeignKey(Long idTipoSangreSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoSangre  tiposangreTemp=null;

			for(TipoSangre tiposangreAux:tiposangresForeignKey) {
				if(tiposangreAux.getId()!=null && tiposangreAux.getId().equals(idTipoSangreSeleccionado)) {
					tiposangreTemp=tiposangreAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiposangreTemp!=null) {

					if(this.datogeneralempleado!=null) {
						this.datogeneralempleado.setTipoSangre(tiposangreTemp);
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.setSelectedItem(tiposangreTemp);
					}
				} else {
					//jComboBoxid_tipo_sangreDatoGeneralEmpleado.setSelectedItem(tiposangreTemp);
					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoSangre") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiposangreTemp!=null && jComboBoxid_tipo_sangreFK_IdTipoSangreDatoGeneralEmpleado!=null) {
						jComboBoxid_tipo_sangreFK_IdTipoSangreDatoGeneralEmpleado.setSelectedItem(tiposangreTemp);
					} else {
						if(jComboBoxid_tipo_sangreFK_IdTipoSangreDatoGeneralEmpleado!=null) {
							//jComboBoxid_tipo_sangreFK_IdTipoSangreDatoGeneralEmpleado.setSelectedItem(tiposangreTemp);
							if(jComboBoxid_tipo_sangreFK_IdTipoSangreDatoGeneralEmpleado.getItemCount()>0) {
								jComboBoxid_tipo_sangreFK_IdTipoSangreDatoGeneralEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoSangreForeignKeyDescripcion(Long idTipoSangreSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoSangre  tiposangreTemp=null;

			for(TipoSangre tiposangreAux:tiposangresForeignKey) {
				if(tiposangreAux.getId()!=null && tiposangreAux.getId().equals(idTipoSangreSeleccionado)) {
					tiposangreTemp=tiposangreAux;
					break;
				}
			}


			sDescripcion=TipoSangreConstantesFunciones.getTipoSangreDescripcion(tiposangreTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoSangreForeignKeyGenerico(Long idTipoSangreSeleccionado,JComboBox jComboBoxid_tipo_sangreDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			TipoSangre  tiposangreTemp=null;

			for(TipoSangre tiposangreAux:tiposangresForeignKey) {
				if(tiposangreAux.getId()!=null && tiposangreAux.getId().equals(idTipoSangreSeleccionado)) {
					tiposangreTemp=tiposangreAux;
					break;
				}
			}

			if(tiposangreTemp!=null) {
				jComboBoxid_tipo_sangreDatoGeneralEmpleadoGenerico.setSelectedItem(tiposangreTemp);
			} else {
				if(jComboBoxid_tipo_sangreDatoGeneralEmpleadoGenerico!=null && jComboBoxid_tipo_sangreDatoGeneralEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_sangreDatoGeneralEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_empleadoDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleadoDatoGeneralEmpleadoGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_empleadoDatoGeneralEmpleado.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleadoDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(empleadoAux!=null && empleadoAux.getId()!=null) {
				datogeneralempleado.setid_empleado(empleadoAux.getId());
				datogeneralempleado.setempleado_descripcion(DatoGeneralEmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadoAux));
				datogeneralempleado.setEmpleado(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarNumeroPatronalForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_numero_patronalDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			NumeroPatronal  numeropatronalAux=new NumeroPatronal();

			if(jComboBoxid_numero_patronalDatoGeneralEmpleadoGenerico==null) {
				numeropatronalAux=(NumeroPatronal)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.getSelectedItem();
			} else {
				numeropatronalAux=(NumeroPatronal)jComboBoxid_numero_patronalDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(numeropatronalAux!=null && numeropatronalAux.getId()!=null) {
				datogeneralempleado.setid_numero_patronal(numeropatronalAux.getId());
				datogeneralempleado.setnumeropatronal_descripcion(DatoGeneralEmpleadoConstantesFunciones.getNumeroPatronalDescripcion(numeropatronalAux));
				datogeneralempleado.setNumeroPatronal(numeropatronalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoAfiliacionForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_tipo_afiliacionDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			TipoAfiliacion  tipoafiliacionAux=new TipoAfiliacion();

			if(jComboBoxid_tipo_afiliacionDatoGeneralEmpleadoGenerico==null) {
				tipoafiliacionAux=(TipoAfiliacion)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.getSelectedItem();
			} else {
				tipoafiliacionAux=(TipoAfiliacion)jComboBoxid_tipo_afiliacionDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(tipoafiliacionAux!=null && tipoafiliacionAux.getId()!=null) {
				datogeneralempleado.setid_tipo_afiliacion(tipoafiliacionAux.getId());
				datogeneralempleado.settipoafiliacion_descripcion(DatoGeneralEmpleadoConstantesFunciones.getTipoAfiliacionDescripcion(tipoafiliacionAux));
				datogeneralempleado.setTipoAfiliacion(tipoafiliacionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPaisForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_paisDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Pais  paisAux=new Pais();

			if(jComboBoxid_paisDatoGeneralEmpleadoGenerico==null) {
				paisAux=(Pais)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.getSelectedItem();
			} else {
				paisAux=(Pais)jComboBoxid_paisDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(paisAux!=null && paisAux.getId()!=null) {
				datogeneralempleado.setid_pais(paisAux.getId());
				datogeneralempleado.setpais_descripcion(DatoGeneralEmpleadoConstantesFunciones.getPaisDescripcion(paisAux));
				datogeneralempleado.setPais(paisAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarProvinciaForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_provinciaDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Provincia  provinciaAux=new Provincia();

			if(jComboBoxid_provinciaDatoGeneralEmpleadoGenerico==null) {
				provinciaAux=(Provincia)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.getSelectedItem();
			} else {
				provinciaAux=(Provincia)jComboBoxid_provinciaDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(provinciaAux!=null && provinciaAux.getId()!=null) {
				datogeneralempleado.setid_provincia(provinciaAux.getId());
				datogeneralempleado.setprovincia_descripcion(DatoGeneralEmpleadoConstantesFunciones.getProvinciaDescripcion(provinciaAux));
				datogeneralempleado.setProvincia(provinciaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCantonForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_cantonDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Canton  cantonAux=new Canton();

			if(jComboBoxid_cantonDatoGeneralEmpleadoGenerico==null) {
				cantonAux=(Canton)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.getSelectedItem();
			} else {
				cantonAux=(Canton)jComboBoxid_cantonDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(cantonAux!=null && cantonAux.getId()!=null) {
				datogeneralempleado.setid_canton(cantonAux.getId());
				datogeneralempleado.setcanton_descripcion(DatoGeneralEmpleadoConstantesFunciones.getCantonDescripcion(cantonAux));
				datogeneralempleado.setCanton(cantonAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarParroquiaForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_parroquiaDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Parroquia  parroquiaAux=new Parroquia();

			if(jComboBoxid_parroquiaDatoGeneralEmpleadoGenerico==null) {
				parroquiaAux=(Parroquia)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.getSelectedItem();
			} else {
				parroquiaAux=(Parroquia)jComboBoxid_parroquiaDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(parroquiaAux!=null && parroquiaAux.getId()!=null) {
				datogeneralempleado.setid_parroquia(parroquiaAux.getId());
				datogeneralempleado.setparroquia_descripcion(DatoGeneralEmpleadoConstantesFunciones.getParroquiaDescripcion(parroquiaAux));
				datogeneralempleado.setParroquia(parroquiaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMonedaForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_monedaDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Moneda  monedaAux=new Moneda();

			if(jComboBoxid_monedaDatoGeneralEmpleadoGenerico==null) {
				monedaAux=(Moneda)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.getSelectedItem();
			} else {
				monedaAux=(Moneda)jComboBoxid_monedaDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(monedaAux!=null && monedaAux.getId()!=null) {
				datogeneralempleado.setid_moneda(monedaAux.getId());
				datogeneralempleado.setmoneda_descripcion(DatoGeneralEmpleadoConstantesFunciones.getMonedaDescripcion(monedaAux));
				datogeneralempleado.setMoneda(monedaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoContratoForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_tipo_contratoDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			TipoContrato  tipocontratoAux=new TipoContrato();

			if(jComboBoxid_tipo_contratoDatoGeneralEmpleadoGenerico==null) {
				tipocontratoAux=(TipoContrato)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.getSelectedItem();
			} else {
				tipocontratoAux=(TipoContrato)jComboBoxid_tipo_contratoDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(tipocontratoAux!=null && tipocontratoAux.getId()!=null) {
				datogeneralempleado.setid_tipo_contrato(tipocontratoAux.getId());
				datogeneralempleado.settipocontrato_descripcion(DatoGeneralEmpleadoConstantesFunciones.getTipoContratoDescripcion(tipocontratoAux));
				datogeneralempleado.setTipoContrato(tipocontratoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoLibretaMiliForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_tipo_libreta_miliDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			TipoLibretaMili  tipolibretamiliAux=new TipoLibretaMili();

			if(jComboBoxid_tipo_libreta_miliDatoGeneralEmpleadoGenerico==null) {
				tipolibretamiliAux=(TipoLibretaMili)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.getSelectedItem();
			} else {
				tipolibretamiliAux=(TipoLibretaMili)jComboBoxid_tipo_libreta_miliDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(tipolibretamiliAux!=null && tipolibretamiliAux.getId()!=null) {
				datogeneralempleado.setid_tipo_libreta_mili(tipolibretamiliAux.getId());
				datogeneralempleado.settipolibretamili_descripcion(DatoGeneralEmpleadoConstantesFunciones.getTipoLibretaMiliDescripcion(tipolibretamiliAux));
				datogeneralempleado.setTipoLibretaMili(tipolibretamiliAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoGrupoFormaPagoForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			TipoGrupoFormaPago  tipogrupoformapagoAux=new TipoGrupoFormaPago();

			if(jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleadoGenerico==null) {
				tipogrupoformapagoAux=(TipoGrupoFormaPago)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.getSelectedItem();
			} else {
				tipogrupoformapagoAux=(TipoGrupoFormaPago)jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(tipogrupoformapagoAux!=null && tipogrupoformapagoAux.getId()!=null) {
				datogeneralempleado.setid_tipo_grupo_forma_pago(tipogrupoformapagoAux.getId());
				datogeneralempleado.settipogrupoformapago_descripcion(DatoGeneralEmpleadoConstantesFunciones.getTipoGrupoFormaPagoDescripcion(tipogrupoformapagoAux));
				datogeneralempleado.setTipoGrupoFormaPago(tipogrupoformapagoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBancoForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_bancoDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			Banco  bancoAux=new Banco();

			if(jComboBoxid_bancoDatoGeneralEmpleadoGenerico==null) {
				bancoAux=(Banco)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.getSelectedItem();
			} else {
				bancoAux=(Banco)jComboBoxid_bancoDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(bancoAux!=null && bancoAux.getId()!=null) {
				datogeneralempleado.setid_banco(bancoAux.getId());
				datogeneralempleado.setbanco_descripcion(DatoGeneralEmpleadoConstantesFunciones.getBancoDescripcion(bancoAux));
				datogeneralempleado.setBanco(bancoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoCuentaBancoGlobalForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			TipoCuentaBancoGlobal  tipocuentabancoglobalAux=new TipoCuentaBancoGlobal();

			if(jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleadoGenerico==null) {
				tipocuentabancoglobalAux=(TipoCuentaBancoGlobal)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.getSelectedItem();
			} else {
				tipocuentabancoglobalAux=(TipoCuentaBancoGlobal)jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(tipocuentabancoglobalAux!=null && tipocuentabancoglobalAux.getId()!=null) {
				datogeneralempleado.setid_tipo_cuenta_banco_global(tipocuentabancoglobalAux.getId());
				datogeneralempleado.settipocuentabancoglobal_descripcion(DatoGeneralEmpleadoConstantesFunciones.getTipoCuentaBancoGlobalDescripcion(tipocuentabancoglobalAux));
				datogeneralempleado.setTipoCuentaBancoGlobal(tipocuentabancoglobalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoSangreForeignKey(DatoGeneralEmpleado datogeneralempleado,JComboBox jComboBoxid_tipo_sangreDatoGeneralEmpleadoGenerico)throws Exception
	{
		try
		{
			TipoSangre  tiposangreAux=new TipoSangre();

			if(jComboBoxid_tipo_sangreDatoGeneralEmpleadoGenerico==null) {
				tiposangreAux=(TipoSangre)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.getSelectedItem();
			} else {
				tiposangreAux=(TipoSangre)jComboBoxid_tipo_sangreDatoGeneralEmpleadoGenerico.getSelectedItem();
			}

			if(tiposangreAux!=null && tiposangreAux.getId()!=null) {
				datogeneralempleado.setid_tipo_sangre(tiposangreAux.getId());
				datogeneralempleado.settiposangre_descripcion(DatoGeneralEmpleadoConstantesFunciones.getTipoSangreDescripcion(tiposangreAux));
				datogeneralempleado.setTipoSangre(tiposangreAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_empleadoDatoGeneralEmpleado.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_empleadoDatoGeneralEmpleado.addItem(empleado);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoDatoGeneralEmpleado.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jComboBoxid_empleadoFK_IdEmpleadoDatoGeneralEmpleado.addItem(empleado);
							}
						}

						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameNumeroPatronalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingNumeroPatronal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.removeAllItems();

							for(NumeroPatronal numeropatronal:this.numeropatronalsForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.addItem(numeropatronal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdNumeroPatronal") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_numero_patronalFK_IdNumeroPatronalDatoGeneralEmpleado.removeAllItems();

							for(NumeroPatronal numeropatronal:this.numeropatronalsForeignKey) {
								this.jComboBoxid_numero_patronalFK_IdNumeroPatronalDatoGeneralEmpleado.addItem(numeropatronal);
							}
						}

						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoAfiliacionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoAfiliacion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.removeAllItems();

							for(TipoAfiliacion tipoafiliacion:this.tipoafiliacionsForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.addItem(tipoafiliacion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoAfiliacion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_afiliacionFK_IdTipoAfiliacionDatoGeneralEmpleado.removeAllItems();

							for(TipoAfiliacion tipoafiliacion:this.tipoafiliacionsForeignKey) {
								this.jComboBoxid_tipo_afiliacionFK_IdTipoAfiliacionDatoGeneralEmpleado.addItem(tipoafiliacion);
							}
						}

						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePaissForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPais=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.removeAllItems();

							for(Pais pais:this.paissForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.addItem(pais);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdPais") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_paisFK_IdPaisDatoGeneralEmpleado.removeAllItems();

							for(Pais pais:this.paissForeignKey) {
								this.jComboBoxid_paisFK_IdPaisDatoGeneralEmpleado.addItem(pais);
							}
						}

						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameProvinciasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingProvincia=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.removeAllItems();

							for(Provincia provincia:this.provinciasForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.addItem(provincia);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdProvincia") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_provinciaFK_IdProvinciaDatoGeneralEmpleado.removeAllItems();

							for(Provincia provincia:this.provinciasForeignKey) {
								this.jComboBoxid_provinciaFK_IdProvinciaDatoGeneralEmpleado.addItem(provincia);
							}
						}

						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCantonsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCanton=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.removeAllItems();

							for(Canton canton:this.cantonsForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.addItem(canton);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCanton") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cantonFK_IdCantonDatoGeneralEmpleado.removeAllItems();

							for(Canton canton:this.cantonsForeignKey) {
								this.jComboBoxid_cantonFK_IdCantonDatoGeneralEmpleado.addItem(canton);
							}
						}

						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameParroquiasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingParroquia=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.removeAllItems();

							for(Parroquia parroquia:this.parroquiasForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.addItem(parroquia);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdParroquia") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_parroquiaFK_IdParroquiaDatoGeneralEmpleado.removeAllItems();

							for(Parroquia parroquia:this.parroquiasForeignKey) {
								this.jComboBoxid_parroquiaFK_IdParroquiaDatoGeneralEmpleado.addItem(parroquia);
							}
						}

						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMonedasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMoneda=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.removeAllItems();

							for(Moneda moneda:this.monedasForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.addItem(moneda);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoContratosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoContrato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.removeAllItems();

							for(TipoContrato tipocontrato:this.tipocontratosForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.addItem(tipocontrato);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoContrato") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_contratoFK_IdTipoContratoDatoGeneralEmpleado.removeAllItems();

							for(TipoContrato tipocontrato:this.tipocontratosForeignKey) {
								this.jComboBoxid_tipo_contratoFK_IdTipoContratoDatoGeneralEmpleado.addItem(tipocontrato);
							}
						}

						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoLibretaMilisForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoLibretaMili=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.removeAllItems();

							for(TipoLibretaMili tipolibretamili:this.tipolibretamilisForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.addItem(tipolibretamili);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoLibretaMili") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_libreta_miliFK_IdTipoLibretaMiliDatoGeneralEmpleado.removeAllItems();

							for(TipoLibretaMili tipolibretamili:this.tipolibretamilisForeignKey) {
								this.jComboBoxid_tipo_libreta_miliFK_IdTipoLibretaMiliDatoGeneralEmpleado.addItem(tipolibretamili);
							}
						}

						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoGrupoFormaPagosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoGrupoFormaPago=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.removeAllItems();

							for(TipoGrupoFormaPago tipogrupoformapago:this.tipogrupoformapagosForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.addItem(tipogrupoformapago);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoGrupoFormaPago") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado.removeAllItems();

							for(TipoGrupoFormaPago tipogrupoformapago:this.tipogrupoformapagosForeignKey) {
								this.jComboBoxid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado.addItem(tipogrupoformapago);
							}
						}

						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBancosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBanco=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.removeAllItems();

							for(Banco banco:this.bancosForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.addItem(banco);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBanco") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bancoFK_IdBancoDatoGeneralEmpleado.removeAllItems();

							for(Banco banco:this.bancosForeignKey) {
								this.jComboBoxid_bancoFK_IdBancoDatoGeneralEmpleado.addItem(banco);
							}
						}

						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoCuentaBancoGlobalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoCuentaBancoGlobal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.removeAllItems();

							for(TipoCuentaBancoGlobal tipocuentabancoglobal:this.tipocuentabancoglobalsForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.addItem(tipocuentabancoglobal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoCuentaBancoGlobal") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado.removeAllItems();

							for(TipoCuentaBancoGlobal tipocuentabancoglobal:this.tipocuentabancoglobalsForeignKey) {
								this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado.addItem(tipocuentabancoglobal);
							}
						}

						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoSangresForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoSangre=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.removeAllItems();

							for(TipoSangre tiposangre:this.tiposangresForeignKey) {
								this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.addItem(tiposangre);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { 
					}

					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoSangre") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_sangreFK_IdTipoSangreDatoGeneralEmpleado.removeAllItems();

							for(TipoSangre tiposangre:this.tiposangresForeignKey) {
								this.jComboBoxid_tipo_sangreFK_IdTipoSangreDatoGeneralEmpleado.addItem(tiposangre);
							}
						}

						if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpleadoForeignKey(Empleado empleado,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_empleadoDatoGeneralEmpleado.setSelectedItem(empleado);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_empleadoDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_empleadoFK_IdEmpleadoDatoGeneralEmpleado.setSelectedItem(empleado);
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameNumeroPatronalForeignKey(NumeroPatronal numeropatronal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.setSelectedItem(numeropatronal);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_numero_patronalFK_IdNumeroPatronalDatoGeneralEmpleado.setSelectedItem(numeropatronal);
						} else {
							this.jComboBoxid_numero_patronalFK_IdNumeroPatronalDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoAfiliacionForeignKey(TipoAfiliacion tipoafiliacion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.setSelectedItem(tipoafiliacion);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_afiliacionFK_IdTipoAfiliacionDatoGeneralEmpleado.setSelectedItem(tipoafiliacion);
						} else {
							this.jComboBoxid_tipo_afiliacionFK_IdTipoAfiliacionDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePaisForeignKey(Pais pais,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.setSelectedItem(pais);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_paisFK_IdPaisDatoGeneralEmpleado.setSelectedItem(pais);
						} else {
							this.jComboBoxid_paisFK_IdPaisDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameProvinciaForeignKey(Provincia provincia,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.setSelectedItem(provincia);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_provinciaFK_IdProvinciaDatoGeneralEmpleado.setSelectedItem(provincia);
						} else {
							this.jComboBoxid_provinciaFK_IdProvinciaDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCantonForeignKey(Canton canton,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.setSelectedItem(canton);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cantonFK_IdCantonDatoGeneralEmpleado.setSelectedItem(canton);
						} else {
							this.jComboBoxid_cantonFK_IdCantonDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameParroquiaForeignKey(Parroquia parroquia,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.setSelectedItem(parroquia);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_parroquiaFK_IdParroquiaDatoGeneralEmpleado.setSelectedItem(parroquia);
						} else {
							this.jComboBoxid_parroquiaFK_IdParroquiaDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMonedaForeignKey(Moneda moneda,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.setSelectedItem(moneda);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoContratoForeignKey(TipoContrato tipocontrato,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.setSelectedItem(tipocontrato);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_contratoFK_IdTipoContratoDatoGeneralEmpleado.setSelectedItem(tipocontrato);
						} else {
							this.jComboBoxid_tipo_contratoFK_IdTipoContratoDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoLibretaMiliForeignKey(TipoLibretaMili tipolibretamili,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.setSelectedItem(tipolibretamili);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_libreta_miliFK_IdTipoLibretaMiliDatoGeneralEmpleado.setSelectedItem(tipolibretamili);
						} else {
							this.jComboBoxid_tipo_libreta_miliFK_IdTipoLibretaMiliDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoGrupoFormaPagoForeignKey(TipoGrupoFormaPago tipogrupoformapago,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.setSelectedItem(tipogrupoformapago);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado.setSelectedItem(tipogrupoformapago);
						} else {
							this.jComboBoxid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBancoForeignKey(Banco banco,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.setSelectedItem(banco);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bancoFK_IdBancoDatoGeneralEmpleado.setSelectedItem(banco);
						} else {
							this.jComboBoxid_bancoFK_IdBancoDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoCuentaBancoGlobalForeignKey(TipoCuentaBancoGlobal tipocuentabancoglobal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.setSelectedItem(tipocuentabancoglobal);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado.setSelectedItem(tipocuentabancoglobal);
						} else {
							this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoSangreForeignKey(TipoSangre tiposangre,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.setSelectedItem(tiposangre);
						}
					} else {
						if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_sangreFK_IdTipoSangreDatoGeneralEmpleado.setSelectedItem(tiposangre);
						} else {
							this.jComboBoxid_tipo_sangreFK_IdTipoSangreDatoGeneralEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesDatoGeneralEmpleado() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			DatoGeneralEmpleadoConstantesFunciones.refrescarForeignKeysDescripcionesDatoGeneralEmpleado(this.datogeneralempleadoLogic.getDatoGeneralEmpleados());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			DatoGeneralEmpleadoConstantesFunciones.refrescarForeignKeysDescripcionesDatoGeneralEmpleado(this.datogeneralempleados);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empleado.class));
		classes.add(new Classe(NumeroPatronal.class));
		classes.add(new Classe(TipoAfiliacion.class));
		classes.add(new Classe(Pais.class));
		classes.add(new Classe(Provincia.class));
		classes.add(new Classe(Canton.class));
		classes.add(new Classe(Parroquia.class));
		classes.add(new Classe(Moneda.class));
		classes.add(new Classe(TipoContrato.class));
		classes.add(new Classe(TipoLibretaMili.class));
		classes.add(new Classe(TipoGrupoFormaPago.class));
		classes.add(new Classe(Banco.class));
		classes.add(new Classe(TipoCuentaBancoGlobal.class));
		classes.add(new Classe(TipoSangre.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//datogeneralempleadoLogic.setDatoGeneralEmpleados(this.datogeneralempleados);
			datogeneralempleadoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public DatoGeneralEmpleadoParameterReturnGeneral getDatoGeneralEmpleadoParameterGeneral() {
		return this.datogeneralempleadoParameterGeneral;
	}
	
	public void setDatoGeneralEmpleadoParameterGeneral(DatoGeneralEmpleadoParameterReturnGeneral datogeneralempleadoParameterGeneral) {
		this.datogeneralempleadoParameterGeneral = datogeneralempleadoParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoDatoGeneralEmpleado() {
		return isPermisoTodoDatoGeneralEmpleado;
	}

	public void setIsPermisoTodoDatoGeneralEmpleado(Boolean isPermisoTodoDatoGeneralEmpleado) {
		this.isPermisoTodoDatoGeneralEmpleado = isPermisoTodoDatoGeneralEmpleado;
	}

	public Boolean getIsPermisoNuevoDatoGeneralEmpleado() {
		return isPermisoNuevoDatoGeneralEmpleado;
	}

	public void setIsPermisoNuevoDatoGeneralEmpleado(Boolean isPermisoNuevoDatoGeneralEmpleado) {
		this.isPermisoNuevoDatoGeneralEmpleado = isPermisoNuevoDatoGeneralEmpleado;
	}

	public Boolean getIsPermisoActualizarDatoGeneralEmpleado() {
		return isPermisoActualizarDatoGeneralEmpleado;
	}

	public void setIsPermisoActualizarDatoGeneralEmpleado(Boolean isPermisoActualizarDatoGeneralEmpleado) {
		this.isPermisoActualizarDatoGeneralEmpleado = isPermisoActualizarDatoGeneralEmpleado;
	}

	public Boolean getIsPermisoEliminarDatoGeneralEmpleado() {
		return isPermisoEliminarDatoGeneralEmpleado;
	}

	public void setIsPermisoEliminarDatoGeneralEmpleado(Boolean isPermisoEliminarDatoGeneralEmpleado) {
		this.isPermisoEliminarDatoGeneralEmpleado = isPermisoEliminarDatoGeneralEmpleado;
	}

	public Boolean getIsPermisoGuardarCambiosDatoGeneralEmpleado() {
		return isPermisoGuardarCambiosDatoGeneralEmpleado;
	}

	public void setIsPermisoGuardarCambiosDatoGeneralEmpleado(Boolean isPermisoGuardarCambiosDatoGeneralEmpleado) {
		this.isPermisoGuardarCambiosDatoGeneralEmpleado = isPermisoGuardarCambiosDatoGeneralEmpleado;
	}
	
	public Boolean getIsPermisoConsultaDatoGeneralEmpleado() {
		return isPermisoConsultaDatoGeneralEmpleado;
	}

	public void setIsPermisoConsultaDatoGeneralEmpleado(Boolean isPermisoConsultaDatoGeneralEmpleado) {
		this.isPermisoConsultaDatoGeneralEmpleado = isPermisoConsultaDatoGeneralEmpleado;
	}

	public Boolean getIsPermisoBusquedaDatoGeneralEmpleado() {
		return isPermisoBusquedaDatoGeneralEmpleado;
	}

	public void setIsPermisoBusquedaDatoGeneralEmpleado(Boolean isPermisoBusquedaDatoGeneralEmpleado) {
		this.isPermisoBusquedaDatoGeneralEmpleado = isPermisoBusquedaDatoGeneralEmpleado;
	}

	public Boolean getIsPermisoReporteDatoGeneralEmpleado() {
		return isPermisoReporteDatoGeneralEmpleado;
	}

	public void setIsPermisoReporteDatoGeneralEmpleado(Boolean isPermisoReporteDatoGeneralEmpleado) {
		this.isPermisoReporteDatoGeneralEmpleado = isPermisoReporteDatoGeneralEmpleado;
	}
	
	public Boolean getIsPermisoPaginacionMedioDatoGeneralEmpleado() {
		return isPermisoPaginacionMedioDatoGeneralEmpleado;
	}

	public void setIsPermisoPaginacionMedioDatoGeneralEmpleado(Boolean isPermisoPaginacionMedioDatoGeneralEmpleado) {
		this.isPermisoPaginacionMedioDatoGeneralEmpleado = isPermisoPaginacionMedioDatoGeneralEmpleado;
	}
	
	public Boolean getIsPermisoPaginacionTodoDatoGeneralEmpleado() {
		return isPermisoPaginacionTodoDatoGeneralEmpleado;
	}

	public void setIsPermisoPaginacionTodoDatoGeneralEmpleado(Boolean isPermisoPaginacionTodoDatoGeneralEmpleado) {
		this.isPermisoPaginacionTodoDatoGeneralEmpleado = isPermisoPaginacionTodoDatoGeneralEmpleado;
	}
	
	public Boolean getIsPermisoPaginacionAltoDatoGeneralEmpleado() {
		return isPermisoPaginacionAltoDatoGeneralEmpleado;
	}

	public void setIsPermisoPaginacionAltoDatoGeneralEmpleado(Boolean isPermisoPaginacionAltoDatoGeneralEmpleado) {
		this.isPermisoPaginacionAltoDatoGeneralEmpleado = isPermisoPaginacionAltoDatoGeneralEmpleado;
	}
	
	public Boolean getIsPermisoCopiarDatoGeneralEmpleado() {
		return isPermisoCopiarDatoGeneralEmpleado;
	}

	public void setIsPermisoCopiarDatoGeneralEmpleado(Boolean isPermisoCopiarDatoGeneralEmpleado) {
		this.isPermisoCopiarDatoGeneralEmpleado = isPermisoCopiarDatoGeneralEmpleado;
	}
	
	public Boolean getIsPermisoVerFormDatoGeneralEmpleado() {
		return isPermisoVerFormDatoGeneralEmpleado;
	}

	public void setIsPermisoVerFormDatoGeneralEmpleado(Boolean isPermisoVerFormDatoGeneralEmpleado) {
		this.isPermisoVerFormDatoGeneralEmpleado = isPermisoVerFormDatoGeneralEmpleado;
	}
	
	public Boolean getIsPermisoDuplicarDatoGeneralEmpleado() {
		return isPermisoDuplicarDatoGeneralEmpleado;
	}

	public void setIsPermisoDuplicarDatoGeneralEmpleado(Boolean isPermisoDuplicarDatoGeneralEmpleado) {
		this.isPermisoDuplicarDatoGeneralEmpleado = isPermisoDuplicarDatoGeneralEmpleado;
	}
	
	public Boolean getIsPermisoOrdenDatoGeneralEmpleado() {
		return isPermisoOrdenDatoGeneralEmpleado;
	}

	public void setIsPermisoOrdenDatoGeneralEmpleado(Boolean isPermisoOrdenDatoGeneralEmpleado) {
		this.isPermisoOrdenDatoGeneralEmpleado = isPermisoOrdenDatoGeneralEmpleado;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoDatoGeneralEmpleado() {
		return isVisibilidadCeldaNuevoDatoGeneralEmpleado;
	}

	public void setIsVisibilidadCeldaNuevoDatoGeneralEmpleado(Boolean isVisibilidadCeldaNuevoDatoGeneralEmpleado) {
		this.isVisibilidadCeldaNuevoDatoGeneralEmpleado = isVisibilidadCeldaNuevoDatoGeneralEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarDatoGeneralEmpleado() {
		return isVisibilidadCeldaDuplicarDatoGeneralEmpleado;
	}

	public void setIsVisibilidadCeldaDuplicarDatoGeneralEmpleado(Boolean isVisibilidadCeldaDuplicarDatoGeneralEmpleado) {
		this.isVisibilidadCeldaDuplicarDatoGeneralEmpleado = isVisibilidadCeldaDuplicarDatoGeneralEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarDatoGeneralEmpleado() {
		return isVisibilidadCeldaCopiarDatoGeneralEmpleado;
	}

	public void setIsVisibilidadCeldaCopiarDatoGeneralEmpleado(Boolean isVisibilidadCeldaCopiarDatoGeneralEmpleado) {
		this.isVisibilidadCeldaCopiarDatoGeneralEmpleado = isVisibilidadCeldaCopiarDatoGeneralEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormDatoGeneralEmpleado() {
		return isVisibilidadCeldaVerFormDatoGeneralEmpleado;
	}

	public void setIsVisibilidadCeldaVerFormDatoGeneralEmpleado(Boolean isVisibilidadCeldaVerFormDatoGeneralEmpleado) {
		this.isVisibilidadCeldaVerFormDatoGeneralEmpleado = isVisibilidadCeldaVerFormDatoGeneralEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenDatoGeneralEmpleado() {
		return isVisibilidadCeldaOrdenDatoGeneralEmpleado;
	}

	public void setIsVisibilidadCeldaOrdenDatoGeneralEmpleado(Boolean isVisibilidadCeldaOrdenDatoGeneralEmpleado) {
		this.isVisibilidadCeldaOrdenDatoGeneralEmpleado = isVisibilidadCeldaOrdenDatoGeneralEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado() {
		return isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado(Boolean isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado) {
		this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado = isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaModificarDatoGeneralEmpleado() {
		return isVisibilidadCeldaModificarDatoGeneralEmpleado;
	}

	public void setIsVisibilidadCeldaModificarDatoGeneralEmpleado(Boolean isVisibilidadCeldaModificarDatoGeneralEmpleado) {
		this.isVisibilidadCeldaModificarDatoGeneralEmpleado = isVisibilidadCeldaModificarDatoGeneralEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarDatoGeneralEmpleado() {
		return isVisibilidadCeldaActualizarDatoGeneralEmpleado;
	}

	public void setIsVisibilidadCeldaActualizarDatoGeneralEmpleado(Boolean isVisibilidadCeldaActualizarDatoGeneralEmpleado) {
		this.isVisibilidadCeldaActualizarDatoGeneralEmpleado = isVisibilidadCeldaActualizarDatoGeneralEmpleado;
	}

	public Boolean getIsVisibilidadCeldaEliminarDatoGeneralEmpleado() {
		return isVisibilidadCeldaEliminarDatoGeneralEmpleado;
	}

	public void setIsVisibilidadCeldaEliminarDatoGeneralEmpleado(Boolean isVisibilidadCeldaEliminarDatoGeneralEmpleado) {
		this.isVisibilidadCeldaEliminarDatoGeneralEmpleado = isVisibilidadCeldaEliminarDatoGeneralEmpleado;
	}

	public Boolean getIsVisibilidadCeldaCancelarDatoGeneralEmpleado() {
		return isVisibilidadCeldaCancelarDatoGeneralEmpleado;
	}

	public void setIsVisibilidadCeldaCancelarDatoGeneralEmpleado(Boolean isVisibilidadCeldaCancelarDatoGeneralEmpleado) {
		this.isVisibilidadCeldaCancelarDatoGeneralEmpleado = isVisibilidadCeldaCancelarDatoGeneralEmpleado;
	}

	public Boolean getIsVisibilidadCeldaGuardarDatoGeneralEmpleado() {
		return isVisibilidadCeldaGuardarDatoGeneralEmpleado;
	}

	public void setIsVisibilidadCeldaGuardarDatoGeneralEmpleado(Boolean isVisibilidadCeldaGuardarDatoGeneralEmpleado) {
		this.isVisibilidadCeldaGuardarDatoGeneralEmpleado = isVisibilidadCeldaGuardarDatoGeneralEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado() {
		return isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado;
	}

	public void setIsVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado(Boolean isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado) {
		this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado = isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado;
	}
		
	public DatoGeneralEmpleadoSessionBean getdatogeneralempleadoSessionBean() {
		return this.datogeneralempleadoSessionBean;
	}
	
	public void setdatogeneralempleadoSessionBean(DatoGeneralEmpleadoSessionBean datogeneralempleadoSessionBean) {
		this.datogeneralempleadoSessionBean=datogeneralempleadoSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdBanco() {
		return this.isVisibilidadFK_IdBanco;
	}

	public void setisVisibilidadFK_IdBanco(Boolean isVisibilidadFK_IdBanco) {
		this.isVisibilidadFK_IdBanco=isVisibilidadFK_IdBanco;
	}

	public Boolean getisVisibilidadFK_IdCanton() {
		return this.isVisibilidadFK_IdCanton;
	}

	public void setisVisibilidadFK_IdCanton(Boolean isVisibilidadFK_IdCanton) {
		this.isVisibilidadFK_IdCanton=isVisibilidadFK_IdCanton;
	}

	public Boolean getisVisibilidadFK_IdEmpleado() {
		return this.isVisibilidadFK_IdEmpleado;
	}

	public void setisVisibilidadFK_IdEmpleado(Boolean isVisibilidadFK_IdEmpleado) {
		this.isVisibilidadFK_IdEmpleado=isVisibilidadFK_IdEmpleado;
	}

	public Boolean getisVisibilidadFK_IdMoneda() {
		return this.isVisibilidadFK_IdMoneda;
	}

	public void setisVisibilidadFK_IdMoneda(Boolean isVisibilidadFK_IdMoneda) {
		this.isVisibilidadFK_IdMoneda=isVisibilidadFK_IdMoneda;
	}

	public Boolean getisVisibilidadFK_IdNumeroPatronal() {
		return this.isVisibilidadFK_IdNumeroPatronal;
	}

	public void setisVisibilidadFK_IdNumeroPatronal(Boolean isVisibilidadFK_IdNumeroPatronal) {
		this.isVisibilidadFK_IdNumeroPatronal=isVisibilidadFK_IdNumeroPatronal;
	}

	public Boolean getisVisibilidadFK_IdPais() {
		return this.isVisibilidadFK_IdPais;
	}

	public void setisVisibilidadFK_IdPais(Boolean isVisibilidadFK_IdPais) {
		this.isVisibilidadFK_IdPais=isVisibilidadFK_IdPais;
	}

	public Boolean getisVisibilidadFK_IdParroquia() {
		return this.isVisibilidadFK_IdParroquia;
	}

	public void setisVisibilidadFK_IdParroquia(Boolean isVisibilidadFK_IdParroquia) {
		this.isVisibilidadFK_IdParroquia=isVisibilidadFK_IdParroquia;
	}

	public Boolean getisVisibilidadFK_IdProvincia() {
		return this.isVisibilidadFK_IdProvincia;
	}

	public void setisVisibilidadFK_IdProvincia(Boolean isVisibilidadFK_IdProvincia) {
		this.isVisibilidadFK_IdProvincia=isVisibilidadFK_IdProvincia;
	}

	public Boolean getisVisibilidadFK_IdTipoAfiliacion() {
		return this.isVisibilidadFK_IdTipoAfiliacion;
	}

	public void setisVisibilidadFK_IdTipoAfiliacion(Boolean isVisibilidadFK_IdTipoAfiliacion) {
		this.isVisibilidadFK_IdTipoAfiliacion=isVisibilidadFK_IdTipoAfiliacion;
	}

	public Boolean getisVisibilidadFK_IdTipoContrato() {
		return this.isVisibilidadFK_IdTipoContrato;
	}

	public void setisVisibilidadFK_IdTipoContrato(Boolean isVisibilidadFK_IdTipoContrato) {
		this.isVisibilidadFK_IdTipoContrato=isVisibilidadFK_IdTipoContrato;
	}

	public Boolean getisVisibilidadFK_IdTipoCuentaBancoGlobal() {
		return this.isVisibilidadFK_IdTipoCuentaBancoGlobal;
	}

	public void setisVisibilidadFK_IdTipoCuentaBancoGlobal(Boolean isVisibilidadFK_IdTipoCuentaBancoGlobal) {
		this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isVisibilidadFK_IdTipoCuentaBancoGlobal;
	}

	public Boolean getisVisibilidadFK_IdTipoGrupoFormaPago() {
		return this.isVisibilidadFK_IdTipoGrupoFormaPago;
	}

	public void setisVisibilidadFK_IdTipoGrupoFormaPago(Boolean isVisibilidadFK_IdTipoGrupoFormaPago) {
		this.isVisibilidadFK_IdTipoGrupoFormaPago=isVisibilidadFK_IdTipoGrupoFormaPago;
	}

	public Boolean getisVisibilidadFK_IdTipoLibretaMili() {
		return this.isVisibilidadFK_IdTipoLibretaMili;
	}

	public void setisVisibilidadFK_IdTipoLibretaMili(Boolean isVisibilidadFK_IdTipoLibretaMili) {
		this.isVisibilidadFK_IdTipoLibretaMili=isVisibilidadFK_IdTipoLibretaMili;
	}

	public Boolean getisVisibilidadFK_IdTipoSangre() {
		return this.isVisibilidadFK_IdTipoSangre;
	}

	public void setisVisibilidadFK_IdTipoSangre(Boolean isVisibilidadFK_IdTipoSangre) {
		this.isVisibilidadFK_IdTipoSangre=isVisibilidadFK_IdTipoSangre;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado)throws Exception {
		try {
			
				this.setActualParaGuardarEmpleadoForeignKey(datogeneralempleado,null);
				this.setActualParaGuardarNumeroPatronalForeignKey(datogeneralempleado,null);
				this.setActualParaGuardarTipoAfiliacionForeignKey(datogeneralempleado,null);
				this.setActualParaGuardarPaisForeignKey(datogeneralempleado,null);
				this.setActualParaGuardarProvinciaForeignKey(datogeneralempleado,null);
				this.setActualParaGuardarCantonForeignKey(datogeneralempleado,null);
				this.setActualParaGuardarParroquiaForeignKey(datogeneralempleado,null);
				this.setActualParaGuardarMonedaForeignKey(datogeneralempleado,null);
				this.setActualParaGuardarTipoContratoForeignKey(datogeneralempleado,null);
				this.setActualParaGuardarTipoLibretaMiliForeignKey(datogeneralempleado,null);
				this.setActualParaGuardarTipoGrupoFormaPagoForeignKey(datogeneralempleado,null);
				this.setActualParaGuardarBancoForeignKey(datogeneralempleado,null);
				this.setActualParaGuardarTipoCuentaBancoGlobalForeignKey(datogeneralempleado,null);
				this.setActualParaGuardarTipoSangreForeignKey(datogeneralempleado,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(DatoGeneralEmpleado datogeneralempleado,DatoGeneralEmpleado datogeneralempleadoAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalDatoGeneralEmpleado(datogeneralempleado);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		datogeneralempleadoAux.setId(datogeneralempleado.getId());
		datogeneralempleadoAux.setVersionRow(datogeneralempleado.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessDatoGeneralEmpleado();
		
			int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = datogeneralempleadoValidator.getInvalidValues(this.datogeneralempleado);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			datogeneralempleadoLogic.setDatosCliente(datosCliente);
			datogeneralempleadoLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				datogeneralempleadoAux=new  DatoGeneralEmpleado();
				
				datogeneralempleadoAux.setIsNew(true);
				datogeneralempleadoAux.setIsChanged(true);
				
				datogeneralempleadoAux.setDatoGeneralEmpleadoOriginal(this.datogeneralempleado);
				
				datogeneralempleadoAux.setId(this.datogeneralempleado.getId());	
				datogeneralempleadoAux.setVersionRow(this.datogeneralempleado.getVersionRow());	
				datogeneralempleadoAux.setid_numero_patronal(this.datogeneralempleado.getid_numero_patronal());	
				datogeneralempleadoAux.setid_tipo_afiliacion(this.datogeneralempleado.getid_tipo_afiliacion());	
				datogeneralempleadoAux.setcarnet_iess(this.datogeneralempleado.getcarnet_iess());	
				datogeneralempleadoAux.setsectorial_iess(this.datogeneralempleado.getsectorial_iess());	
				datogeneralempleadoAux.setid_pais(this.datogeneralempleado.getid_pais());	
				datogeneralempleadoAux.setid_provincia(this.datogeneralempleado.getid_provincia());	
				datogeneralempleadoAux.setid_canton(this.datogeneralempleado.getid_canton());	
				datogeneralempleadoAux.setid_parroquia(this.datogeneralempleado.getid_parroquia());	
				datogeneralempleadoAux.setfecha_nacimiento(this.datogeneralempleado.getfecha_nacimiento());	
				datogeneralempleadoAux.setfecha_fallece(this.datogeneralempleado.getfecha_fallece());	
				datogeneralempleadoAux.setvalor_evaluacion(this.datogeneralempleado.getvalor_evaluacion());	
				datogeneralempleadoAux.setnumero_horas(this.datogeneralempleado.getnumero_horas());	
				datogeneralempleadoAux.setvalor_hora(this.datogeneralempleado.getvalor_hora());	
				datogeneralempleadoAux.setsalario(this.datogeneralempleado.getsalario());	
				datogeneralempleadoAux.setid_moneda(this.datogeneralempleado.getid_moneda());	
				datogeneralempleadoAux.setnumero_contrato(this.datogeneralempleado.getnumero_contrato());	
				datogeneralempleadoAux.setid_tipo_contrato(this.datogeneralempleado.getid_tipo_contrato());	
				datogeneralempleadoAux.setvalor1(this.datogeneralempleado.getvalor1());	
				datogeneralempleadoAux.setvalor2(this.datogeneralempleado.getvalor2());	
				datogeneralempleadoAux.setvalor3(this.datogeneralempleado.getvalor3());	
				datogeneralempleadoAux.setvalor4(this.datogeneralempleado.getvalor4());	
				datogeneralempleadoAux.setvalor5(this.datogeneralempleado.getvalor5());	
				datogeneralempleadoAux.setvalor6(this.datogeneralempleado.getvalor6());	
				datogeneralempleadoAux.setcon_aporta_seguro_social(this.datogeneralempleado.getcon_aporta_seguro_social());	
				datogeneralempleadoAux.setcon_recibe_horas_extras(this.datogeneralempleado.getcon_recibe_horas_extras());	
				datogeneralempleadoAux.setcon_descuento_impuestos(this.datogeneralempleado.getcon_descuento_impuestos());	
				datogeneralempleadoAux.setpension_alimenticia(this.datogeneralempleado.getpension_alimenticia());	
				datogeneralempleadoAux.setcon_pago_por_horas(this.datogeneralempleado.getcon_pago_por_horas());	
				datogeneralempleadoAux.setcon_anticipo(this.datogeneralempleado.getcon_anticipo());	
				datogeneralempleadoAux.setid_tipo_libreta_mili(this.datogeneralempleado.getid_tipo_libreta_mili());	
				datogeneralempleadoAux.setlibreta_militar(this.datogeneralempleado.getlibreta_militar());	
				datogeneralempleadoAux.setid_tipo_grupo_forma_pago(this.datogeneralempleado.getid_tipo_grupo_forma_pago());	
				datogeneralempleadoAux.setid_banco(this.datogeneralempleado.getid_banco());	
				datogeneralempleadoAux.setid_tipo_cuenta_banco_global(this.datogeneralempleado.getid_tipo_cuenta_banco_global());	
				datogeneralempleadoAux.setnumero_cuenta(this.datogeneralempleado.getnumero_cuenta());	
				datogeneralempleadoAux.setid_tipo_sangre(this.datogeneralempleado.getid_tipo_sangre());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.datogeneralempleadoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.datogeneralempleadoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(datogeneralempleadoAux,datogeneralempleadoLogic.getDatoGeneralEmpleados());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(datogeneralempleadoAux,datogeneralempleados);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.datogeneralempleadoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.saveDatoGeneralEmpleados();//WithConnection
						//datogeneralempleadoLogic.getSetVersionRowDatoGeneralEmpleados();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.datogeneralempleado,datogeneralempleadoAux);
					
					this.refrescarForeignKeysDescripcionesDatoGeneralEmpleado();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.datogeneralempleadoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				datogeneralempleadoAux=new  DatoGeneralEmpleado();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.datogeneralempleadoSessionBean.getEsGuardarRelacionado() 
					|| (this.datogeneralempleadoSessionBean.getEsGuardarRelacionado() && this.datogeneralempleado.getId()>=0)) {
						
					datogeneralempleadoAux.setIsNew(false);
				}
				
				datogeneralempleadoAux.setIsDeleted(false);
			
				datogeneralempleadoAux.setId(this.datogeneralempleado.getId());	
				datogeneralempleadoAux.setVersionRow(this.datogeneralempleado.getVersionRow());	
				datogeneralempleadoAux.setid_numero_patronal(this.datogeneralempleado.getid_numero_patronal());	
				datogeneralempleadoAux.setid_tipo_afiliacion(this.datogeneralempleado.getid_tipo_afiliacion());	
				datogeneralempleadoAux.setcarnet_iess(this.datogeneralempleado.getcarnet_iess());	
				datogeneralempleadoAux.setsectorial_iess(this.datogeneralempleado.getsectorial_iess());	
				datogeneralempleadoAux.setid_pais(this.datogeneralempleado.getid_pais());	
				datogeneralempleadoAux.setid_provincia(this.datogeneralempleado.getid_provincia());	
				datogeneralempleadoAux.setid_canton(this.datogeneralempleado.getid_canton());	
				datogeneralempleadoAux.setid_parroquia(this.datogeneralempleado.getid_parroquia());	
				datogeneralempleadoAux.setfecha_nacimiento(this.datogeneralempleado.getfecha_nacimiento());	
				datogeneralempleadoAux.setfecha_fallece(this.datogeneralempleado.getfecha_fallece());	
				datogeneralempleadoAux.setvalor_evaluacion(this.datogeneralempleado.getvalor_evaluacion());	
				datogeneralempleadoAux.setnumero_horas(this.datogeneralempleado.getnumero_horas());	
				datogeneralempleadoAux.setvalor_hora(this.datogeneralempleado.getvalor_hora());	
				datogeneralempleadoAux.setsalario(this.datogeneralempleado.getsalario());	
				datogeneralempleadoAux.setid_moneda(this.datogeneralempleado.getid_moneda());	
				datogeneralempleadoAux.setnumero_contrato(this.datogeneralempleado.getnumero_contrato());	
				datogeneralempleadoAux.setid_tipo_contrato(this.datogeneralempleado.getid_tipo_contrato());	
				datogeneralempleadoAux.setvalor1(this.datogeneralempleado.getvalor1());	
				datogeneralempleadoAux.setvalor2(this.datogeneralempleado.getvalor2());	
				datogeneralempleadoAux.setvalor3(this.datogeneralempleado.getvalor3());	
				datogeneralempleadoAux.setvalor4(this.datogeneralempleado.getvalor4());	
				datogeneralempleadoAux.setvalor5(this.datogeneralempleado.getvalor5());	
				datogeneralempleadoAux.setvalor6(this.datogeneralempleado.getvalor6());	
				datogeneralempleadoAux.setcon_aporta_seguro_social(this.datogeneralempleado.getcon_aporta_seguro_social());	
				datogeneralempleadoAux.setcon_recibe_horas_extras(this.datogeneralempleado.getcon_recibe_horas_extras());	
				datogeneralempleadoAux.setcon_descuento_impuestos(this.datogeneralempleado.getcon_descuento_impuestos());	
				datogeneralempleadoAux.setpension_alimenticia(this.datogeneralempleado.getpension_alimenticia());	
				datogeneralempleadoAux.setcon_pago_por_horas(this.datogeneralempleado.getcon_pago_por_horas());	
				datogeneralempleadoAux.setcon_anticipo(this.datogeneralempleado.getcon_anticipo());	
				datogeneralempleadoAux.setid_tipo_libreta_mili(this.datogeneralempleado.getid_tipo_libreta_mili());	
				datogeneralempleadoAux.setlibreta_militar(this.datogeneralempleado.getlibreta_militar());	
				datogeneralempleadoAux.setid_tipo_grupo_forma_pago(this.datogeneralempleado.getid_tipo_grupo_forma_pago());	
				datogeneralempleadoAux.setid_banco(this.datogeneralempleado.getid_banco());	
				datogeneralempleadoAux.setid_tipo_cuenta_banco_global(this.datogeneralempleado.getid_tipo_cuenta_banco_global());	
				datogeneralempleadoAux.setnumero_cuenta(this.datogeneralempleado.getnumero_cuenta());	
				datogeneralempleadoAux.setid_tipo_sangre(this.datogeneralempleado.getid_tipo_sangre());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(datogeneralempleadoAux,datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(datogeneralempleadoAux,datogeneralempleados);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.datogeneralempleadoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.saveDatoGeneralEmpleados();//WithConnection
						//datogeneralempleadoLogic.getSetVersionRowDatoGeneralEmpleados();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.datogeneralempleado,datogeneralempleadoAux);
					
					this.refrescarForeignKeysDescripcionesDatoGeneralEmpleado();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.datogeneralempleadoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				datogeneralempleadoAux=new  DatoGeneralEmpleado();
				
				datogeneralempleadoAux.setIsNew(false);
				datogeneralempleadoAux.setIsChanged(false);
				
				datogeneralempleadoAux.setIsDeleted(true);
				
				datogeneralempleadoAux.setId(this.datogeneralempleado.getId());	
				datogeneralempleadoAux.setVersionRow(this.datogeneralempleado.getVersionRow());	
				datogeneralempleadoAux.setid_numero_patronal(this.datogeneralempleado.getid_numero_patronal());	
				datogeneralempleadoAux.setid_tipo_afiliacion(this.datogeneralempleado.getid_tipo_afiliacion());	
				datogeneralempleadoAux.setcarnet_iess(this.datogeneralempleado.getcarnet_iess());	
				datogeneralempleadoAux.setsectorial_iess(this.datogeneralempleado.getsectorial_iess());	
				datogeneralempleadoAux.setid_pais(this.datogeneralempleado.getid_pais());	
				datogeneralempleadoAux.setid_provincia(this.datogeneralempleado.getid_provincia());	
				datogeneralempleadoAux.setid_canton(this.datogeneralempleado.getid_canton());	
				datogeneralempleadoAux.setid_parroquia(this.datogeneralempleado.getid_parroquia());	
				datogeneralempleadoAux.setfecha_nacimiento(this.datogeneralempleado.getfecha_nacimiento());	
				datogeneralempleadoAux.setfecha_fallece(this.datogeneralempleado.getfecha_fallece());	
				datogeneralempleadoAux.setvalor_evaluacion(this.datogeneralempleado.getvalor_evaluacion());	
				datogeneralempleadoAux.setnumero_horas(this.datogeneralempleado.getnumero_horas());	
				datogeneralempleadoAux.setvalor_hora(this.datogeneralempleado.getvalor_hora());	
				datogeneralempleadoAux.setsalario(this.datogeneralempleado.getsalario());	
				datogeneralempleadoAux.setid_moneda(this.datogeneralempleado.getid_moneda());	
				datogeneralempleadoAux.setnumero_contrato(this.datogeneralempleado.getnumero_contrato());	
				datogeneralempleadoAux.setid_tipo_contrato(this.datogeneralempleado.getid_tipo_contrato());	
				datogeneralempleadoAux.setvalor1(this.datogeneralempleado.getvalor1());	
				datogeneralempleadoAux.setvalor2(this.datogeneralempleado.getvalor2());	
				datogeneralempleadoAux.setvalor3(this.datogeneralempleado.getvalor3());	
				datogeneralempleadoAux.setvalor4(this.datogeneralempleado.getvalor4());	
				datogeneralempleadoAux.setvalor5(this.datogeneralempleado.getvalor5());	
				datogeneralempleadoAux.setvalor6(this.datogeneralempleado.getvalor6());	
				datogeneralempleadoAux.setcon_aporta_seguro_social(this.datogeneralempleado.getcon_aporta_seguro_social());	
				datogeneralempleadoAux.setcon_recibe_horas_extras(this.datogeneralempleado.getcon_recibe_horas_extras());	
				datogeneralempleadoAux.setcon_descuento_impuestos(this.datogeneralempleado.getcon_descuento_impuestos());	
				datogeneralempleadoAux.setpension_alimenticia(this.datogeneralempleado.getpension_alimenticia());	
				datogeneralempleadoAux.setcon_pago_por_horas(this.datogeneralempleado.getcon_pago_por_horas());	
				datogeneralempleadoAux.setcon_anticipo(this.datogeneralempleado.getcon_anticipo());	
				datogeneralempleadoAux.setid_tipo_libreta_mili(this.datogeneralempleado.getid_tipo_libreta_mili());	
				datogeneralempleadoAux.setlibreta_militar(this.datogeneralempleado.getlibreta_militar());	
				datogeneralempleadoAux.setid_tipo_grupo_forma_pago(this.datogeneralempleado.getid_tipo_grupo_forma_pago());	
				datogeneralempleadoAux.setid_banco(this.datogeneralempleado.getid_banco());	
				datogeneralempleadoAux.setid_tipo_cuenta_banco_global(this.datogeneralempleado.getid_tipo_cuenta_banco_global());	
				datogeneralempleadoAux.setnumero_cuenta(this.datogeneralempleado.getnumero_cuenta());	
				datogeneralempleadoAux.setid_tipo_sangre(this.datogeneralempleado.getid_tipo_sangre());	
				
				if(this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.datogeneralempleadoAux.getId()>=0) {	
						this.datogeneralempleadosEliminados.add(datogeneralempleadoAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(datogeneralempleadoAux,datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(datogeneralempleadoAux,datogeneralempleados);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.datogeneralempleadoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.saveDatoGeneralEmpleados();//WithConnection
						//datogeneralempleadoLogic.getSetVersionRowDatoGeneralEmpleados();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.datogeneralempleadoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.datogeneralempleadoSessionBean.getEstaModoGuardarRelaciones() 
								|| this.datogeneralempleadoSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(datogeneralempleadoAux,datogeneralempleadoLogic.getDatoGeneralEmpleados());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(datogeneralempleadoAux,datogeneralempleados);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(this.datogeneralempleadosEliminados);
					
					datogeneralempleadoLogic.saveDatoGeneralEmpleados();//WithConnection
					//datogeneralempleadoLogic.getSetVersionRowDatoGeneralEmpleados();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesDatoGeneralEmpleado();
				
				this.datogeneralempleadosEliminados= new ArrayList<DatoGeneralEmpleado>();		
			}
			
			if(this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Dato General Empleado GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Dato General Empleado",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.datogeneralempleado=datogeneralempleadoAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessDatoGeneralEmpleado();
      	}
		
	}	
	
	public void actualizarRelaciones(DatoGeneralEmpleado datogeneralempleadoLocal) throws Exception {
		
		if(this.datogeneralempleadoSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(DatoGeneralEmpleado datogeneralempleadoLocal) throws Exception {	
		if(this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadoBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadoBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadoBeanSwingJInternalFrameLocal.actualizarLista(empleadoBeanSwingJInternalFrameLocal.empleado,this.empleadosForeignKey);

				empleadoBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadoBeanSwingJInternalFrameLocal.empleado);

				datogeneralempleadoLocal.setEmpleado(empleadoBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey("Formulario");
				this.setActualEmpleadoForeignKey(empleadoBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(NumeroPatronalDetalleFormJInternalFrame.class)) {
				NumeroPatronalBeanSwingJInternalFrame numeropatronalBeanSwingJInternalFrameLocal=(NumeroPatronalBeanSwingJInternalFrame) ((NumeroPatronalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				numeropatronalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoNumeroPatronal(numeropatronalBeanSwingJInternalFrameLocal.getnumeropatronal(),true);
				numeropatronalBeanSwingJInternalFrameLocal.actualizarLista(numeropatronalBeanSwingJInternalFrameLocal.numeropatronal,this.numeropatronalsForeignKey);

				numeropatronalBeanSwingJInternalFrameLocal.actualizarRelaciones(numeropatronalBeanSwingJInternalFrameLocal.numeropatronal);

				datogeneralempleadoLocal.setNumeroPatronal(numeropatronalBeanSwingJInternalFrameLocal.numeropatronal);

				this.addItemDefectoCombosForeignKeyNumeroPatronal();
				this.cargarCombosFrameNumeroPatronalsForeignKey("Formulario");
				this.setActualNumeroPatronalForeignKey(numeropatronalBeanSwingJInternalFrameLocal.numeropatronal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoAfiliacionDetalleFormJInternalFrame.class)) {
				TipoAfiliacionBeanSwingJInternalFrame tipoafiliacionBeanSwingJInternalFrameLocal=(TipoAfiliacionBeanSwingJInternalFrame) ((TipoAfiliacionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoafiliacionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoAfiliacion(tipoafiliacionBeanSwingJInternalFrameLocal.gettipoafiliacion(),true);
				tipoafiliacionBeanSwingJInternalFrameLocal.actualizarLista(tipoafiliacionBeanSwingJInternalFrameLocal.tipoafiliacion,this.tipoafiliacionsForeignKey);

				tipoafiliacionBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoafiliacionBeanSwingJInternalFrameLocal.tipoafiliacion);

				datogeneralempleadoLocal.setTipoAfiliacion(tipoafiliacionBeanSwingJInternalFrameLocal.tipoafiliacion);

				this.addItemDefectoCombosForeignKeyTipoAfiliacion();
				this.cargarCombosFrameTipoAfiliacionsForeignKey("Formulario");
				this.setActualTipoAfiliacionForeignKey(tipoafiliacionBeanSwingJInternalFrameLocal.tipoafiliacion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PaisDetalleFormJInternalFrame.class)) {
				PaisBeanSwingJInternalFrame paisBeanSwingJInternalFrameLocal=(PaisBeanSwingJInternalFrame) ((PaisDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				paisBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPais(paisBeanSwingJInternalFrameLocal.getpais(),true);
				paisBeanSwingJInternalFrameLocal.actualizarLista(paisBeanSwingJInternalFrameLocal.pais,this.paissForeignKey);

				paisBeanSwingJInternalFrameLocal.actualizarRelaciones(paisBeanSwingJInternalFrameLocal.pais);

				datogeneralempleadoLocal.setPais(paisBeanSwingJInternalFrameLocal.pais);

				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey("Formulario");
				this.setActualPaisForeignKey(paisBeanSwingJInternalFrameLocal.pais.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ProvinciaDetalleFormJInternalFrame.class)) {
				ProvinciaBeanSwingJInternalFrame provinciaBeanSwingJInternalFrameLocal=(ProvinciaBeanSwingJInternalFrame) ((ProvinciaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				provinciaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoProvincia(provinciaBeanSwingJInternalFrameLocal.getprovincia(),true);
				provinciaBeanSwingJInternalFrameLocal.actualizarLista(provinciaBeanSwingJInternalFrameLocal.provincia,this.provinciasForeignKey);

				provinciaBeanSwingJInternalFrameLocal.actualizarRelaciones(provinciaBeanSwingJInternalFrameLocal.provincia);

				datogeneralempleadoLocal.setProvincia(provinciaBeanSwingJInternalFrameLocal.provincia);

				this.addItemDefectoCombosForeignKeyProvincia();
				this.cargarCombosFrameProvinciasForeignKey("Formulario");
				this.setActualProvinciaForeignKey(provinciaBeanSwingJInternalFrameLocal.provincia.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CantonDetalleFormJInternalFrame.class)) {
				CantonBeanSwingJInternalFrame cantonBeanSwingJInternalFrameLocal=(CantonBeanSwingJInternalFrame) ((CantonDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cantonBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCanton(cantonBeanSwingJInternalFrameLocal.getcanton(),true);
				cantonBeanSwingJInternalFrameLocal.actualizarLista(cantonBeanSwingJInternalFrameLocal.canton,this.cantonsForeignKey);

				cantonBeanSwingJInternalFrameLocal.actualizarRelaciones(cantonBeanSwingJInternalFrameLocal.canton);

				datogeneralempleadoLocal.setCanton(cantonBeanSwingJInternalFrameLocal.canton);

				this.addItemDefectoCombosForeignKeyCanton();
				this.cargarCombosFrameCantonsForeignKey("Formulario");
				this.setActualCantonForeignKey(cantonBeanSwingJInternalFrameLocal.canton.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ParroquiaDetalleFormJInternalFrame.class)) {
				ParroquiaBeanSwingJInternalFrame parroquiaBeanSwingJInternalFrameLocal=(ParroquiaBeanSwingJInternalFrame) ((ParroquiaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				parroquiaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoParroquia(parroquiaBeanSwingJInternalFrameLocal.getparroquia(),true);
				parroquiaBeanSwingJInternalFrameLocal.actualizarLista(parroquiaBeanSwingJInternalFrameLocal.parroquia,this.parroquiasForeignKey);

				parroquiaBeanSwingJInternalFrameLocal.actualizarRelaciones(parroquiaBeanSwingJInternalFrameLocal.parroquia);

				datogeneralempleadoLocal.setParroquia(parroquiaBeanSwingJInternalFrameLocal.parroquia);

				this.addItemDefectoCombosForeignKeyParroquia();
				this.cargarCombosFrameParroquiasForeignKey("Formulario");
				this.setActualParroquiaForeignKey(parroquiaBeanSwingJInternalFrameLocal.parroquia.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MonedaDetalleFormJInternalFrame.class)) {
				MonedaBeanSwingJInternalFrame monedaBeanSwingJInternalFrameLocal=(MonedaBeanSwingJInternalFrame) ((MonedaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				monedaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMoneda(monedaBeanSwingJInternalFrameLocal.getmoneda(),true);
				monedaBeanSwingJInternalFrameLocal.actualizarLista(monedaBeanSwingJInternalFrameLocal.moneda,this.monedasForeignKey);

				monedaBeanSwingJInternalFrameLocal.actualizarRelaciones(monedaBeanSwingJInternalFrameLocal.moneda);

				datogeneralempleadoLocal.setMoneda(monedaBeanSwingJInternalFrameLocal.moneda);

				this.addItemDefectoCombosForeignKeyMoneda();
				this.cargarCombosFrameMonedasForeignKey("Formulario");
				this.setActualMonedaForeignKey(monedaBeanSwingJInternalFrameLocal.moneda.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoContratoDetalleFormJInternalFrame.class)) {
				TipoContratoBeanSwingJInternalFrame tipocontratoBeanSwingJInternalFrameLocal=(TipoContratoBeanSwingJInternalFrame) ((TipoContratoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocontratoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoContrato(tipocontratoBeanSwingJInternalFrameLocal.gettipocontrato(),true);
				tipocontratoBeanSwingJInternalFrameLocal.actualizarLista(tipocontratoBeanSwingJInternalFrameLocal.tipocontrato,this.tipocontratosForeignKey);

				tipocontratoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocontratoBeanSwingJInternalFrameLocal.tipocontrato);

				datogeneralempleadoLocal.setTipoContrato(tipocontratoBeanSwingJInternalFrameLocal.tipocontrato);

				this.addItemDefectoCombosForeignKeyTipoContrato();
				this.cargarCombosFrameTipoContratosForeignKey("Formulario");
				this.setActualTipoContratoForeignKey(tipocontratoBeanSwingJInternalFrameLocal.tipocontrato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoLibretaMiliDetalleFormJInternalFrame.class)) {
				TipoLibretaMiliBeanSwingJInternalFrame tipolibretamiliBeanSwingJInternalFrameLocal=(TipoLibretaMiliBeanSwingJInternalFrame) ((TipoLibretaMiliDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipolibretamiliBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoLibretaMili(tipolibretamiliBeanSwingJInternalFrameLocal.gettipolibretamili(),true);
				tipolibretamiliBeanSwingJInternalFrameLocal.actualizarLista(tipolibretamiliBeanSwingJInternalFrameLocal.tipolibretamili,this.tipolibretamilisForeignKey);

				tipolibretamiliBeanSwingJInternalFrameLocal.actualizarRelaciones(tipolibretamiliBeanSwingJInternalFrameLocal.tipolibretamili);

				datogeneralempleadoLocal.setTipoLibretaMili(tipolibretamiliBeanSwingJInternalFrameLocal.tipolibretamili);

				this.addItemDefectoCombosForeignKeyTipoLibretaMili();
				this.cargarCombosFrameTipoLibretaMilisForeignKey("Formulario");
				this.setActualTipoLibretaMiliForeignKey(tipolibretamiliBeanSwingJInternalFrameLocal.tipolibretamili.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoGrupoFormaPagoDetalleFormJInternalFrame.class)) {
				TipoGrupoFormaPagoBeanSwingJInternalFrame tipogrupoformapagoBeanSwingJInternalFrameLocal=(TipoGrupoFormaPagoBeanSwingJInternalFrame) ((TipoGrupoFormaPagoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipogrupoformapagoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoGrupoFormaPago(tipogrupoformapagoBeanSwingJInternalFrameLocal.gettipogrupoformapago(),true);
				tipogrupoformapagoBeanSwingJInternalFrameLocal.actualizarLista(tipogrupoformapagoBeanSwingJInternalFrameLocal.tipogrupoformapago,this.tipogrupoformapagosForeignKey);

				tipogrupoformapagoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipogrupoformapagoBeanSwingJInternalFrameLocal.tipogrupoformapago);

				datogeneralempleadoLocal.setTipoGrupoFormaPago(tipogrupoformapagoBeanSwingJInternalFrameLocal.tipogrupoformapago);

				this.addItemDefectoCombosForeignKeyTipoGrupoFormaPago();
				this.cargarCombosFrameTipoGrupoFormaPagosForeignKey("Formulario");
				this.setActualTipoGrupoFormaPagoForeignKey(tipogrupoformapagoBeanSwingJInternalFrameLocal.tipogrupoformapago.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BancoDetalleFormJInternalFrame.class)) {
				BancoBeanSwingJInternalFrame bancoBeanSwingJInternalFrameLocal=(BancoBeanSwingJInternalFrame) ((BancoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bancoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBanco(bancoBeanSwingJInternalFrameLocal.getbanco(),true);
				bancoBeanSwingJInternalFrameLocal.actualizarLista(bancoBeanSwingJInternalFrameLocal.banco,this.bancosForeignKey);

				bancoBeanSwingJInternalFrameLocal.actualizarRelaciones(bancoBeanSwingJInternalFrameLocal.banco);

				datogeneralempleadoLocal.setBanco(bancoBeanSwingJInternalFrameLocal.banco);

				this.addItemDefectoCombosForeignKeyBanco();
				this.cargarCombosFrameBancosForeignKey("Formulario");
				this.setActualBancoForeignKey(bancoBeanSwingJInternalFrameLocal.banco.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoCuentaBancoGlobalDetalleFormJInternalFrame.class)) {
				TipoCuentaBancoGlobalBeanSwingJInternalFrame tipocuentabancoglobalBeanSwingJInternalFrameLocal=(TipoCuentaBancoGlobalBeanSwingJInternalFrame) ((TipoCuentaBancoGlobalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocuentabancoglobalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoCuentaBancoGlobal(tipocuentabancoglobalBeanSwingJInternalFrameLocal.gettipocuentabancoglobal(),true);
				tipocuentabancoglobalBeanSwingJInternalFrameLocal.actualizarLista(tipocuentabancoglobalBeanSwingJInternalFrameLocal.tipocuentabancoglobal,this.tipocuentabancoglobalsForeignKey);

				tipocuentabancoglobalBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocuentabancoglobalBeanSwingJInternalFrameLocal.tipocuentabancoglobal);

				datogeneralempleadoLocal.setTipoCuentaBancoGlobal(tipocuentabancoglobalBeanSwingJInternalFrameLocal.tipocuentabancoglobal);

				this.addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal();
				this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey("Formulario");
				this.setActualTipoCuentaBancoGlobalForeignKey(tipocuentabancoglobalBeanSwingJInternalFrameLocal.tipocuentabancoglobal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoSangreDetalleFormJInternalFrame.class)) {
				TipoSangreBeanSwingJInternalFrame tiposangreBeanSwingJInternalFrameLocal=(TipoSangreBeanSwingJInternalFrame) ((TipoSangreDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiposangreBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoSangre(tiposangreBeanSwingJInternalFrameLocal.gettiposangre(),true);
				tiposangreBeanSwingJInternalFrameLocal.actualizarLista(tiposangreBeanSwingJInternalFrameLocal.tiposangre,this.tiposangresForeignKey);

				tiposangreBeanSwingJInternalFrameLocal.actualizarRelaciones(tiposangreBeanSwingJInternalFrameLocal.tiposangre);

				datogeneralempleadoLocal.setTipoSangre(tiposangreBeanSwingJInternalFrameLocal.tiposangre);

				this.addItemDefectoCombosForeignKeyTipoSangre();
				this.cargarCombosFrameTipoSangresForeignKey("Formulario");
				this.setActualTipoSangreForeignKey(tiposangreBeanSwingJInternalFrameLocal.tiposangre.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarDatoGeneralEmpleadoActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = datogeneralempleadoValidator.getInvalidValues(this.datogeneralempleado);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(DatoGeneralEmpleado datogeneralempleado,List<DatoGeneralEmpleado> datogeneralempleados) throws Exception {
		try	{		
			DatoGeneralEmpleadoConstantesFunciones.actualizarLista(datogeneralempleado,datogeneralempleados,this.datogeneralempleadoSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(DatoGeneralEmpleado datogeneralempleado,List<DatoGeneralEmpleado> datogeneralempleados) throws Exception {
		try	{			
			DatoGeneralEmpleadoConstantesFunciones.actualizarSelectedLista(datogeneralempleado,datogeneralempleados);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<DatoGeneralEmpleado> datogeneralempleadosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				datogeneralempleadosLocal=this.datogeneralempleadoLogic.getDatoGeneralEmpleados();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				datogeneralempleadosLocal=this.datogeneralempleados;
			}
			//ARCHITECTURE
		
			for(DatoGeneralEmpleado datogeneralempleadoLocal:datogeneralempleadosLocal) {
				if(this.permiteMantenimiento(datogeneralempleadoLocal) && datogeneralempleadoLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.getDatoGeneralEmpleadoLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.IDNUMEROPATRONAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_numero_patronalDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.IDTIPOAFILIACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_tipo_afiliacionDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.CARNETIESS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcarnet_iessDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.SECTORIALIESS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelsectorial_iessDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.IDPAIS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_paisDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.IDPROVINCIA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_provinciaDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.IDCANTON)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_cantonDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.IDPARROQUIA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_parroquiaDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.FECHANACIMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelfecha_nacimientoDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.FECHAFALLECE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelfecha_falleceDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.VALOREVALUACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor_evaluacionDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.NUMEROHORAS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelnumero_horasDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.VALORHORA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor_horaDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.SALARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelsalarioDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.IDMONEDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_monedaDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.NUMEROCONTRATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelnumero_contratoDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.IDTIPOCONTRATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_tipo_contratoDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.VALOR1)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor1DatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.VALOR2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor2DatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.VALOR3)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor3DatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.VALOR4)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor4DatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.VALOR5)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor5DatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.VALOR6)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor6DatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.CONAPORTASEGUROSOCIAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_aporta_seguro_socialDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.CONRECIBEHORASEXTRAS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_recibe_horas_extrasDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.CONDESCUENTOIMPUESTOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_descuento_impuestosDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.PENSIONALIMENTICIA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelpension_alimenticiaDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.CONPAGOPORHORAS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_pago_por_horasDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.CONANTICIPO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_anticipoDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.IDTIPOLIBRETAMILI)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_tipo_libreta_miliDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.LIBRETAMILITAR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabellibreta_militarDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.IDTIPOGRUPOFORMAPAGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_tipo_grupo_forma_pagoDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.IDBANCO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_bancoDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.IDTIPOCUENTABANCOGLOBAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_tipo_cuenta_banco_globalDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.NUMEROCUENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelnumero_cuentaDatoGeneralEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DatoGeneralEmpleadoConstantesFunciones.IDTIPOSANGRE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_tipo_sangreDatoGeneralEmpleado,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_numero_patronalDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_tipo_afiliacionDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcarnet_iessDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelsectorial_iessDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_paisDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_provinciaDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_cantonDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_parroquiaDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelfecha_nacimientoDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelfecha_falleceDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor_evaluacionDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelnumero_horasDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor_horaDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelsalarioDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_monedaDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelnumero_contratoDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_tipo_contratoDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor1DatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor2DatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor3DatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor4DatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor5DatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor6DatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_aporta_seguro_socialDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_recibe_horas_extrasDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_descuento_impuestosDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelpension_alimenticiaDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_pago_por_horasDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_anticipoDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_tipo_libreta_miliDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabellibreta_militarDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_tipo_grupo_forma_pagoDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_bancoDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_tipo_cuenta_banco_globalDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelnumero_cuentaDatoGeneralEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_tipo_sangreDatoGeneralEmpleado,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoDatoGeneralEmpleado--;	
		
		
		this.datogeneralempleadoAux=new DatoGeneralEmpleado();
		
		this.datogeneralempleadoAux.setId(this.iIdNuevoDatoGeneralEmpleado);
		this.datogeneralempleadoAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.datogeneralempleadoLogic.getDatoGeneralEmpleados().add(this.datogeneralempleadoAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.datogeneralempleados.add(this.datogeneralempleadoAux);
		}
		//ARCHITECTURE
		
		this.datogeneralempleado=this.datogeneralempleadoAux;
		
		if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioDatoGeneralEmpleado(this.datogeneralempleado);
			this.setVariablesObjetoActualToFormularioForeignKeyDatoGeneralEmpleado(this.datogeneralempleado);
		}
				
		//this.setDefaultControlesDatoGeneralEmpleado();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyDatoGeneralEmpleado();
		
		//PARA RELACION DE UNO A UNO
		this.datogeneralempleado.setId(this.id_empleadoFK_IdEmpleado);
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyDatoGeneralEmpleado();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyDatoGeneralEmpleado();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDatoGeneralEmpleado(this.datogeneralempleadoBean,this.datogeneralempleado,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.datogeneralempleadoSessionBean.getConGuardarRelaciones()) {
			classes=DatoGeneralEmpleadoConstantesFunciones.getClassesRelationshipsOfDatoGeneralEmpleado(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.datogeneralempleadoReturnGeneral=datogeneralempleadoLogic.procesarEventosDatoGeneralEmpleadosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.datogeneralempleadoLogic.getDatoGeneralEmpleados(),this.datogeneralempleado,this.datogeneralempleadoParameterGeneral,this.isEsNuevoDatoGeneralEmpleado,classes);//this.datogeneralempleadoLogic.getDatoGeneralEmpleado()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanDatoGeneralEmpleado(this.datogeneralempleadoReturnGeneral,this.datogeneralempleadoBean,false);
		
		if(this.datogeneralempleadoReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyDatoGeneralEmpleado(this.datogeneralempleadoReturnGeneral.getDatoGeneralEmpleado());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioDatoGeneralEmpleado(this.datogeneralempleadoReturnGeneral.getDatoGeneralEmpleado());
		}
		
		if(this.datogeneralempleadoReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioDatoGeneralEmpleado(this.datogeneralempleadoReturnGeneral.getDatoGeneralEmpleado(),classes);//this.datogeneralempleadoBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyDatoGeneralEmpleado();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyDatoGeneralEmpleado();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.RecargarFormDatoGeneralEmpleado(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingDatoGeneralEmpleado(false);
						
			if(datogeneralempleadoSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDatoGeneralEmpleado();
			}
			
			this.actualizarVisualTableDatosDatoGeneralEmpleado();
			
			this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(this.getIndiceNuevoDatoGeneralEmpleado(), this.getIndiceNuevoDatoGeneralEmpleado());
			
			this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
						
			this.actualizarEstadoCeldasBotonesDatoGeneralEmpleado("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesDatoGeneralEmpleado(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldcarnet_iessDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarcarnet_iessDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsectorial_iessDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarsectorial_iessDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_nacimientoDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarfecha_nacimientoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_falleceDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarfecha_falleceDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_evaluacionDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarvalor_evaluacionDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_horasDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarnumero_horasDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_horaDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarvalor_horaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsalarioDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarsalarioDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_contratoDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarnumero_contratoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor1DatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarvalor1DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor2DatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarvalor2DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor3DatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarvalor3DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor4DatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarvalor4DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor5DatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarvalor5DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor6DatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarvalor6DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_aporta_seguro_socialDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarcon_aporta_seguro_socialDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_recibe_horas_extrasDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarcon_recibe_horas_extrasDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_descuento_impuestosDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarcon_descuento_impuestosDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldpension_alimenticiaDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarpension_alimenticiaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_pago_por_horasDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarcon_pago_por_horasDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_anticipoDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarcon_anticipoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldlibreta_militarDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarlibreta_militarDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_cuentaDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarnumero_cuentaDatoGeneralEmpleado);	
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarid_numero_patronalDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarid_tipo_afiliacionDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarid_paisDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarid_provinciaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarid_cantonDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarid_parroquiaDatoGeneralEmpleado);//
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarid_monedaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarid_tipo_contratoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarid_tipo_libreta_miliDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarid_tipo_grupo_forma_pagoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarid_bancoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarid_tipo_cuenta_banco_globalDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.setEnabled(isHabilitar && this.datogeneralempleadoConstantesFunciones.activarid_tipo_sangreDatoGeneralEmpleado);
	};
	
	public void setDefaultControlesDatoGeneralEmpleado() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoDatoGeneralEmpleado(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.datogeneralempleadoSessionBean.setConGuardarRelaciones(true);			
			this.datogeneralempleadoSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTabbedPaneRelacionesDatoGeneralEmpleado.setVisible(true);
			
					
		} else {
			//this.datogeneralempleadoSessionBean.setConGuardarRelaciones(false);			
			this.datogeneralempleadoSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTabbedPaneRelacionesDatoGeneralEmpleado.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoDatoGeneralEmpleado() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleadoLogic.getDatoGeneralEmpleados()) {
				if(datogeneralempleadoAux.getId().equals(this.iIdNuevoDatoGeneralEmpleado)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleados) {
				if(datogeneralempleadoAux.getId().equals(this.iIdNuevoDatoGeneralEmpleado)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleadoLogic.getDatoGeneralEmpleados()) {
				if(datogeneralempleadoAux.getId().equals(datogeneralempleado.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleados) {
				if(datogeneralempleadoAux.getId().equals(datogeneralempleado.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleadoOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleadoLogic.getDatoGeneralEmpleados()) {
				if(datogeneralempleadoAux.getDatoGeneralEmpleadoOriginal().getId().equals(datogeneralempleadoOriginal.getId())) {
					existe=true;
					datogeneralempleadoOriginal.setId(datogeneralempleadoAux.getId());
					datogeneralempleadoOriginal.setVersionRow(datogeneralempleadoAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleados) {
				if(datogeneralempleadoAux.getDatoGeneralEmpleadoOriginal().getId().equals(datogeneralempleadoOriginal.getId())) {
					existe=true;
					datogeneralempleadoOriginal.setId(datogeneralempleadoAux.getId());
					datogeneralempleadoOriginal.setVersionRow(datogeneralempleadoAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosDatoGeneralEmpleado(Boolean esParaCancelar) throws Exception {
		datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
		datogeneralempleadoAux=new DatoGeneralEmpleado();
		
		if(!this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleadoLogic.getDatoGeneralEmpleados()) {
					if(datogeneralempleadoAux.getId()<0) {
						datogeneralempleadosAux.add(datogeneralempleadoAux);
					}		
				}
				this.iIdNuevoDatoGeneralEmpleado=0L;
				this.datogeneralempleadoLogic.getDatoGeneralEmpleados().removeAll(datogeneralempleadosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleados) {
					if(datogeneralempleadoAux.getId()<0) {
						datogeneralempleadosAux.add(datogeneralempleadoAux);
					}		
				}
				this.iIdNuevoDatoGeneralEmpleado=0L;
				this.datogeneralempleados.removeAll(datogeneralempleadosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoDatoGeneralEmpleado 
					&& this.datogeneralempleadoLogic.getDatoGeneralEmpleados().size()>0
					) {
					datogeneralempleadoAux=this.datogeneralempleadoLogic.getDatoGeneralEmpleados().get(this.datogeneralempleadoLogic.getDatoGeneralEmpleados().size() - 1);
				
					if(datogeneralempleadoAux.getId()<0) {
						this.datogeneralempleadoLogic.getDatoGeneralEmpleados().remove(datogeneralempleadoAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoDatoGeneralEmpleado && this.datogeneralempleados.size()>0) {
					datogeneralempleadoAux=this.datogeneralempleados.get(this.datogeneralempleados.size() - 1);
				
					if(datogeneralempleadoAux.getId()<0) {
						this.datogeneralempleados.remove(datogeneralempleadoAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoDatoGeneralEmpleado(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(datogeneralempleado.getId()<0) {
				this.datogeneralempleadoLogic.getDatoGeneralEmpleados().remove(this.datogeneralempleado);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(datogeneralempleado.getId()<0) {
				this.datogeneralempleados.remove(this.datogeneralempleado);
			}
		}			
	}
	
	public void setEstadosInicialesDatoGeneralEmpleado(List<DatoGeneralEmpleado> datogeneralempleadosAux) throws Exception {
		DatoGeneralEmpleadoConstantesFunciones.setEstadosInicialesDatoGeneralEmpleado(datogeneralempleadosAux);
	}
	
	public void setEstadosInicialesDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleadoAux) throws Exception {
		DatoGeneralEmpleadoConstantesFunciones.setEstadosInicialesDatoGeneralEmpleado(datogeneralempleadoAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarDatoGeneralEmpleadoActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesDatoGeneralEmpleado("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarDatoGeneralEmpleadoActual()) {
				if(!this.isEsNuevoDatoGeneralEmpleado) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesDatoGeneralEmpleado("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoDatoGeneralEmpleado=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarDatoGeneralEmpleadoActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Dato General Empleado ?", "MANTENIMIENTO DE Dato General Empleado", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesDatoGeneralEmpleado("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(DatoGeneralEmpleado datogeneralempleado) throws Exception {
		DatoGeneralEmpleadoConstantesFunciones.seleccionarAsignar(this.datogeneralempleado,datogeneralempleado);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarDatoGeneralEmpleado=this.isPermisoActualizarOriginalDatoGeneralEmpleado;
			
			
			this.seleccionarAsignar(datogeneralempleado);
			
			
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DatoGeneralEmpleadoConstantesFunciones.quitarEspaciosDatoGeneralEmpleado(this.datogeneralempleado,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesDatoGeneralEmpleado("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.datogeneralempleadoSessionBean.setsFuncionBusquedaRapida(this.datogeneralempleadoSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoDatoGeneralEmpleado) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosDatoGeneralEmpleado(esParaCancelar);				
				this.cancelarNuevoDatoGeneralEmpleado(esParaCancelar);								
			}
			
			this.datogeneralempleado=new DatoGeneralEmpleado();
			
			this.inicializarDatoGeneralEmpleado();
			
			this.actualizarEstadoCeldasBotonesDatoGeneralEmpleado("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarDatoGeneralEmpleado() throws Exception {
		try {
			DatoGeneralEmpleadoConstantesFunciones.inicializarDatoGeneralEmpleado(this.datogeneralempleado);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.datogeneralempleadoLogic.getDatoGeneralEmpleados().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteDatoGeneralEmpleados(String sAccionBusqueda,List<DatoGeneralEmpleado> datogeneralempleadosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="DatoGeneralEmpleado"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="DatoGeneralEmpleadoMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("DatoGeneralEmpleadoMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="DatoGeneralEmpleado"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Dato General Empleados");		
		parameters.put("busquedapor", DatoGeneralEmpleadoConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceDatoGeneralEmpleado=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			DatoGeneralEmpleadoConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			DatoGeneralEmpleadoConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceDatoGeneralEmpleado=new JRBeanArrayDataSource(DatoGeneralEmpleadoJInternalFrame.TraerDatoGeneralEmpleadoBeans(datogeneralempleadosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceDatoGeneralEmpleado);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+DatoGeneralEmpleadoConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+DatoGeneralEmpleadoConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(DatoGeneralEmpleadoBean.TraerDatoGeneralEmpleadoBeans(datogeneralempleadosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteDatoGeneralEmpleados(sAccionBusqueda,sTipoArchivoReporte,datogeneralempleadosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalDatoGeneralEmpleados(sAccionBusqueda,sTipoArchivoReporte,datogeneralempleadosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoDatoGeneralEmpleadoActionPerformed(null);
					//this.generarExcelReporteDatoGeneralEmpleados(sAccionBusqueda,sTipoArchivoReporte,datogeneralempleadosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalDatoGeneralEmpleados(sAccionBusqueda,sTipoArchivoReporte,datogeneralempleadosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesDatoGeneralEmpleados(sAccionBusqueda,sTipoArchivoReporte,datogeneralempleadosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesDatoGeneralEmpleados(sAccionBusqueda,sTipoArchivoReporte,datogeneralempleadosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteDatoGeneralEmpleados(String sAccionBusqueda,String sTipoArchivoReporte,List<DatoGeneralEmpleado> datogeneralempleadosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"datogeneralempleado";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DatoGeneralEmpleados");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDatoGeneralEmpleado("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(DatoGeneralEmpleado datogeneralempleado : datogeneralempleadosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			DatoGeneralEmpleadoConstantesFunciones.generarExcelReporteDataDatoGeneralEmpleado("NORMAL",row,workbook,datogeneralempleado,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Dato General Empleado",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderDatoGeneralEmpleado(String sTipo,Row row,Workbook workbook) {
		
		DatoGeneralEmpleadoConstantesFunciones.generarExcelReporteHeaderDatoGeneralEmpleado(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalDatoGeneralEmpleados(String sAccionBusqueda,String sTipoArchivoReporte,List<DatoGeneralEmpleado> datogeneralempleadosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"datogeneralempleado_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DatoGeneralEmpleados");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(DatoGeneralEmpleado datogeneralempleado : datogeneralempleadosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.getDatoGeneralEmpleadoDescripcion(datogeneralempleado));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getnumeropatronal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.gettipoafiliacion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getcarnet_iess());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getsectorial_iess());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getpais_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getprovincia_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getcanton_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getparroquia_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getfecha_nacimiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getfecha_fallece());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getvalor_evaluacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getnumero_horas());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getvalor_hora());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getsalario());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDMONEDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDMONEDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getmoneda_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getnumero_contrato());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.gettipocontrato_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getvalor1());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getvalor2());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getvalor3());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getvalor4());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getvalor5());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getvalor6());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(datogeneralempleado.getcon_aporta_seguro_social()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(datogeneralempleado.getcon_recibe_horas_extras()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(datogeneralempleado.getcon_descuento_impuestos()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getpension_alimenticia());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(datogeneralempleado.getcon_pago_por_horas()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(datogeneralempleado.getcon_anticipo()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.gettipolibretamili_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getlibreta_militar());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.gettipogrupoformapago_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getbanco_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.gettipocuentabancoglobal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.getnumero_cuenta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(datogeneralempleado.gettiposangre_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Dato General Empleado",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesDatoGeneralEmpleados(String sAccionBusqueda,String sTipoArchivoReporte,List<DatoGeneralEmpleado> datogeneralempleadosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<DatoGeneralEmpleado> datogeneralempleadosRespaldo=null;
		
		classes=DatoGeneralEmpleadoConstantesFunciones.getClassesRelationshipsOfDatoGeneralEmpleado(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.datogeneralempleadoLogic.setDatosCliente(this.datosCliente);
		this.datogeneralempleadoLogic.setDatosDeep(this.datosDeep);
		this.datogeneralempleadoLogic.setIsConDeep(true);
		
		datogeneralempleadosRespaldo=this.datogeneralempleadoLogic.getDatoGeneralEmpleados();
		
		this.datogeneralempleadoLogic.setDatoGeneralEmpleados(datogeneralempleadosParaReportes);	
		this.datogeneralempleadoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		datogeneralempleadosParaReportes=this.datogeneralempleadoLogic.getDatoGeneralEmpleados();
		this.datogeneralempleadoLogic.setDatoGeneralEmpleados(datogeneralempleadosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"datogeneralempleado_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DatoGeneralEmpleados");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDatoGeneralEmpleado("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(DatoGeneralEmpleado datogeneralempleado : datogeneralempleadosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderDatoGeneralEmpleado("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			DatoGeneralEmpleadoConstantesFunciones.generarExcelReporteDataDatoGeneralEmpleado("NORMAL",row,workbook,datogeneralempleado,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.getDatoGeneralEmpleadoDescripcion(datogeneralempleado));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Dato General Empleado",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessDatoGeneralEmpleado() throws Exception {		
		this.startProcessDatoGeneralEmpleado(true);
	}
	
	public void startProcessDatoGeneralEmpleado(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasDatoGeneralEmpleado ,this.jPanelParametrosReportesDatoGeneralEmpleado, this.jScrollPanelDatosDatoGeneralEmpleado,this.jPanelPaginacionDatoGeneralEmpleado, this.jScrollPanelDatosEdicionDatoGeneralEmpleado, this.jPanelAccionesDatoGeneralEmpleado,this.jPanelAccionesFormularioDatoGeneralEmpleado,this.jmenuBarDatoGeneralEmpleado,this.jmenuBarDetalleDatoGeneralEmpleado,this.jTtoolBarDatoGeneralEmpleado,this.jTtoolBarDetalleDatoGeneralEmpleado);		
		
		final JTabbedPane jTabbedPaneBusquedasDatoGeneralEmpleado=this.jTabbedPaneBusquedasDatoGeneralEmpleado; 
		
		final JPanel jPanelParametrosReportesDatoGeneralEmpleado=this.jPanelParametrosReportesDatoGeneralEmpleado;
		//final JScrollPane jScrollPanelDatosDatoGeneralEmpleado=this.jScrollPanelDatosDatoGeneralEmpleado;
		final JTable jTableDatosDatoGeneralEmpleado=this.jTableDatosDatoGeneralEmpleado;		
		final JPanel jPanelPaginacionDatoGeneralEmpleado=this.jPanelPaginacionDatoGeneralEmpleado;
		//final JScrollPane jScrollPanelDatosEdicionDatoGeneralEmpleado=this.jScrollPanelDatosEdicionDatoGeneralEmpleado;
		final JPanel jPanelAccionesDatoGeneralEmpleado=this.jPanelAccionesDatoGeneralEmpleado;
		
		JPanel jPanelCamposAuxiliarDatoGeneralEmpleado=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarDatoGeneralEmpleado=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
			jPanelCamposAuxiliarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelCamposDatoGeneralEmpleado;
			jPanelAccionesFormularioAuxiliarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelAccionesFormularioDatoGeneralEmpleado;
		}
		
		final JPanel jPanelCamposDatoGeneralEmpleado=jPanelCamposAuxiliarDatoGeneralEmpleado;
		final JPanel jPanelAccionesFormularioDatoGeneralEmpleado=jPanelAccionesFormularioAuxiliarDatoGeneralEmpleado;
		
		
		final JMenuBar jmenuBarDatoGeneralEmpleado=this.jmenuBarDatoGeneralEmpleado;
		final JToolBar jTtoolBarDatoGeneralEmpleado=this.jTtoolBarDatoGeneralEmpleado;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarDatoGeneralEmpleado=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDatoGeneralEmpleado=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
			jmenuBarDetalleAuxiliarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jmenuBarDetalleDatoGeneralEmpleado;
			jTtoolBarDetalleAuxiliarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTtoolBarDetalleDatoGeneralEmpleado;
		}
		
		final JMenuBar jmenuBarDetalleDatoGeneralEmpleado=jmenuBarDetalleAuxiliarDatoGeneralEmpleado;
		final JToolBar jTtoolBarDetalleDatoGeneralEmpleado=jTtoolBarDetalleAuxiliarDatoGeneralEmpleado;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDatoGeneralEmpleado;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDatoGeneralEmpleado;
			processRunnable.jTableDatos=jTableDatosDatoGeneralEmpleado;
			processRunnable.jPanelCampos=jPanelCamposDatoGeneralEmpleado;
			processRunnable.jPanelPaginacion=jPanelPaginacionDatoGeneralEmpleado;
			processRunnable.jPanelAcciones=jPanelAccionesDatoGeneralEmpleado;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDatoGeneralEmpleado;
			
			
			processRunnable.jmenuBar=jmenuBarDatoGeneralEmpleado;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDatoGeneralEmpleado;
			processRunnable.jTtoolBar=jTtoolBarDatoGeneralEmpleado;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDatoGeneralEmpleado;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDatoGeneralEmpleado ,jPanelParametrosReportesDatoGeneralEmpleado,jTableDatosDatoGeneralEmpleado, /*jScrollPanelDatosDatoGeneralEmpleado,*/jPanelCamposDatoGeneralEmpleado,jPanelPaginacionDatoGeneralEmpleado, /*jScrollPanelDatosEdicionDatoGeneralEmpleado,*/ jPanelAccionesDatoGeneralEmpleado,jPanelAccionesFormularioDatoGeneralEmpleado,jmenuBarDatoGeneralEmpleado,jmenuBarDetalleDatoGeneralEmpleado,jTtoolBarDatoGeneralEmpleado,jTtoolBarDetalleDatoGeneralEmpleado);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDatoGeneralEmpleado ,jPanelParametrosReportesDatoGeneralEmpleado, jScrollPanelDatosDatoGeneralEmpleado,jPanelPaginacionDatoGeneralEmpleado, jScrollPanelDatosEdicionDatoGeneralEmpleado, jPanelAccionesDatoGeneralEmpleado,jPanelAccionesFormularioDatoGeneralEmpleado,jmenuBarDatoGeneralEmpleado,jmenuBarDetalleDatoGeneralEmpleado,jTtoolBarDatoGeneralEmpleado,jTtoolBarDetalleDatoGeneralEmpleado);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessDatoGeneralEmpleado() {// throws Exception 
		this.finishProcessDatoGeneralEmpleado(true);
	}
	
	public void finishProcessDatoGeneralEmpleado(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasDatoGeneralEmpleado ,this.jPanelParametrosReportesDatoGeneralEmpleado, this.jScrollPanelDatosDatoGeneralEmpleado,this.jPanelPaginacionDatoGeneralEmpleado, this.jScrollPanelDatosEdicionDatoGeneralEmpleado, this.jPanelAccionesDatoGeneralEmpleado,this.jPanelAccionesFormularioDatoGeneralEmpleado,this.jmenuBarDatoGeneralEmpleado,this.jmenuBarDetalleDatoGeneralEmpleado,this.jTtoolBarDatoGeneralEmpleado,this.jTtoolBarDetalleDatoGeneralEmpleado);		
		
		final JTabbedPane jTabbedPaneBusquedasDatoGeneralEmpleado=this.jTabbedPaneBusquedasDatoGeneralEmpleado; 
		
		final JPanel jPanelParametrosReportesDatoGeneralEmpleado=this.jPanelParametrosReportesDatoGeneralEmpleado;
		//final JScrollPane jScrollPanelDatosDatoGeneralEmpleado=this.jScrollPanelDatosDatoGeneralEmpleado;
		final JTable jTableDatosDatoGeneralEmpleado=this.jTableDatosDatoGeneralEmpleado;		
		final JPanel jPanelPaginacionDatoGeneralEmpleado=this.jPanelPaginacionDatoGeneralEmpleado;
		//final JScrollPane jScrollPanelDatosEdicionDatoGeneralEmpleado=this.jScrollPanelDatosEdicionDatoGeneralEmpleado;
		final JPanel jPanelAccionesDatoGeneralEmpleado=this.jPanelAccionesDatoGeneralEmpleado;
		
		JPanel jPanelCamposAuxiliarDatoGeneralEmpleado=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarDatoGeneralEmpleado=new JPanel();
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
			jPanelCamposAuxiliarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelCamposDatoGeneralEmpleado;
			jPanelAccionesFormularioAuxiliarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelAccionesFormularioDatoGeneralEmpleado;
		}
		
		final JPanel jPanelCamposDatoGeneralEmpleado=jPanelCamposAuxiliarDatoGeneralEmpleado;
		final JPanel jPanelAccionesFormularioDatoGeneralEmpleado=jPanelAccionesFormularioAuxiliarDatoGeneralEmpleado;
		
		
		final JMenuBar jmenuBarDatoGeneralEmpleado=this.jmenuBarDatoGeneralEmpleado;		
		final JToolBar jTtoolBarDatoGeneralEmpleado=this.jTtoolBarDatoGeneralEmpleado;
				
		JMenuBar jmenuBarDetalleAuxiliarDatoGeneralEmpleado=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDatoGeneralEmpleado=new JToolBar();
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
			jmenuBarDetalleAuxiliarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jmenuBarDetalleDatoGeneralEmpleado;
			jTtoolBarDetalleAuxiliarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTtoolBarDetalleDatoGeneralEmpleado;		
		}
		
		final JMenuBar jmenuBarDetalleDatoGeneralEmpleado=jmenuBarDetalleAuxiliarDatoGeneralEmpleado;
		final JToolBar jTtoolBarDetalleDatoGeneralEmpleado=jTtoolBarDetalleAuxiliarDatoGeneralEmpleado;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDatoGeneralEmpleado;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDatoGeneralEmpleado;
			processRunnable.jTableDatos=jTableDatosDatoGeneralEmpleado;
			processRunnable.jPanelCampos=jPanelCamposDatoGeneralEmpleado;
			processRunnable.jPanelPaginacion=jPanelPaginacionDatoGeneralEmpleado;
			processRunnable.jPanelAcciones=jPanelAccionesDatoGeneralEmpleado;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDatoGeneralEmpleado;
			
			
			processRunnable.jmenuBar=jmenuBarDatoGeneralEmpleado;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDatoGeneralEmpleado;
			processRunnable.jTtoolBar=jTtoolBarDatoGeneralEmpleado;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDatoGeneralEmpleado;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasDatoGeneralEmpleado ,jPanelParametrosReportesDatoGeneralEmpleado, jTableDatosDatoGeneralEmpleado,/*jScrollPanelDatosDatoGeneralEmpleado,*/jPanelCamposDatoGeneralEmpleado,jPanelPaginacionDatoGeneralEmpleado, /*jScrollPanelDatosEdicionDatoGeneralEmpleado,*/ jPanelAccionesDatoGeneralEmpleado,jPanelAccionesFormularioDatoGeneralEmpleado,jmenuBarDatoGeneralEmpleado,jmenuBarDetalleDatoGeneralEmpleado,jTtoolBarDatoGeneralEmpleado,jTtoolBarDetalleDatoGeneralEmpleado));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesDatoGeneralEmpleado(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarDatoGeneralEmpleado(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuDatoGeneralEmpleado(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarDatoGeneralEmpleado(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarDatoGeneralEmpleado,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleDatoGeneralEmpleado,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuDatoGeneralEmpleado(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarDatoGeneralEmpleado,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleDatoGeneralEmpleado,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.datogeneralempleadoConstantesFunciones.getsFinalQueryDatoGeneralEmpleado();
		String  finalQueryPaginacionTodos=this.datogeneralempleadoConstantesFunciones.getsFinalQueryDatoGeneralEmpleado();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=DatoGeneralEmpleadoConstantesFunciones.getArrayColumnasGlobalesNoDatoGeneralEmpleado(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=DatoGeneralEmpleadoConstantesFunciones.getArrayColumnasGlobalesDatoGeneralEmpleado(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,DatoGeneralEmpleadoConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.datogeneralempleadosEliminados= new ArrayList<DatoGeneralEmpleado>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessDatoGeneralEmpleado();
		
				///*DatoGeneralEmpleadoSessionBean*/this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			
			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=DatoGeneralEmpleadoConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=DatoGeneralEmpleadoConstantesFunciones.getClassesForeignKeysOfDatoGeneralEmpleado(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/datogeneralempleado."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			datogeneralempleadosAux= new ArrayList<DatoGeneralEmpleado>();
			
				
			datogeneralempleadoLogic.setDatosCliente(this.datosCliente);
			datogeneralempleadoLogic.setDatosDeep(this.datosDeep);
			datogeneralempleadoLogic.setIsConDeep(true);
			
			
			datogeneralempleadoLogic.getDatoGeneralEmpleadoDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					datogeneralempleadoLogic.getTodosDatoGeneralEmpleados(finalQueryGlobal,pagination);
					
					//datogeneralempleadoLogic.getTodosDatoGeneralEmpleadosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(datogeneralempleadoLogic.getDatoGeneralEmpleados()==null|| datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							datogeneralempleadosAux= new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux= new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							datogeneralempleadoLogic.getTodosDatoGeneralEmpleados(finalQueryGlobal+"",this.pagination);												
							
							//datogeneralempleadoLogic.getTodosDatoGeneralEmpleadosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteDatoGeneralEmpleados("Todos",datogeneralempleadoLogic.getDatoGeneralEmpleados() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());					
							datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idDatoGeneralEmpleado=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idDatoGeneralEmpleado=this.idActual;
				
				} else if(this.idDatoGeneralEmpleadoActual!=null && this.idDatoGeneralEmpleadoActual!=0L) {
					idDatoGeneralEmpleado=idDatoGeneralEmpleadoActual;
				}
				
					
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndicePorId(idDatoGeneralEmpleado);
				
				this.datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					datogeneralempleadoLogic.getEntity(idDatoGeneralEmpleado);
					
					//datogeneralempleadoLogic.getEntityWithConnection(idDatoGeneralEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
					datogeneralempleadoLogic.getDatoGeneralEmpleados().add(datogeneralempleadoLogic.getDatoGeneralEmpleado());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
					this.datogeneralempleados.add(datogeneralempleado);
				}
				
				if(datogeneralempleadoLogic.getDatoGeneralEmpleado()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdBanco")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdBanco(finalQueryGlobal,pagination,id_bancoFK_IdBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdBanco(finalQueryGlobal,pagination,id_bancoFK_IdBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdBanco",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdBanco",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCanton")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdCanton(id_cantonFK_IdCanton);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdCanton(finalQueryGlobal,pagination,id_cantonFK_IdCanton);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdCanton(id_cantonFK_IdCanton);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdCanton(id_cantonFK_IdCanton);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdCanton(finalQueryGlobal,pagination,id_cantonFK_IdCanton);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdCanton(id_cantonFK_IdCanton);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdCanton(id_cantonFK_IdCanton);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdCanton",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdCanton",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpleado")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdEmpleado",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdEmpleado",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					Boolean isTieneDatosDatoGeneralEmpleado=true;
					isTieneDatosDatoGeneralEmpleado=datogeneralempleadoLogic.getDatoGeneralEmpleados()!=null && datogeneralempleadoLogic.getDatoGeneralEmpleados().size()>0;

					if(isTieneDatosDatoGeneralEmpleado) {
					}
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					if(datogeneralempleados!=null && datogeneralempleados.size()>0) {
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdMoneda")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdMoneda(finalQueryGlobal,pagination,id_monedaFK_IdMoneda);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdMoneda(finalQueryGlobal,pagination,id_monedaFK_IdMoneda);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdMoneda(id_monedaFK_IdMoneda);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdMoneda",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdMoneda",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdNumeroPatronal")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdNumeroPatronal(id_numero_patronalFK_IdNumeroPatronal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdNumeroPatronal(finalQueryGlobal,pagination,id_numero_patronalFK_IdNumeroPatronal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdNumeroPatronal(id_numero_patronalFK_IdNumeroPatronal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdNumeroPatronal(id_numero_patronalFK_IdNumeroPatronal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdNumeroPatronal(finalQueryGlobal,pagination,id_numero_patronalFK_IdNumeroPatronal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdNumeroPatronal(id_numero_patronalFK_IdNumeroPatronal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdNumeroPatronal(id_numero_patronalFK_IdNumeroPatronal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdNumeroPatronal",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdNumeroPatronal",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPais")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdPais(finalQueryGlobal,pagination,id_paisFK_IdPais);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdPais(finalQueryGlobal,pagination,id_paisFK_IdPais);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdPais",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdPais",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdParroquia")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdParroquia(id_parroquiaFK_IdParroquia);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdParroquia(finalQueryGlobal,pagination,id_parroquiaFK_IdParroquia);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdParroquia(id_parroquiaFK_IdParroquia);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdParroquia(id_parroquiaFK_IdParroquia);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdParroquia(finalQueryGlobal,pagination,id_parroquiaFK_IdParroquia);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdParroquia(id_parroquiaFK_IdParroquia);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdParroquia(id_parroquiaFK_IdParroquia);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdParroquia",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdParroquia",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdProvincia")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdProvincia(id_provinciaFK_IdProvincia);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdProvincia(finalQueryGlobal,pagination,id_provinciaFK_IdProvincia);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdProvincia(id_provinciaFK_IdProvincia);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdProvincia(id_provinciaFK_IdProvincia);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdProvincia(finalQueryGlobal,pagination,id_provinciaFK_IdProvincia);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdProvincia(id_provinciaFK_IdProvincia);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdProvincia(id_provinciaFK_IdProvincia);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdProvincia",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdProvincia",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoAfiliacion")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoAfiliacion(id_tipo_afiliacionFK_IdTipoAfiliacion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoAfiliacion(finalQueryGlobal,pagination,id_tipo_afiliacionFK_IdTipoAfiliacion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoAfiliacion(id_tipo_afiliacionFK_IdTipoAfiliacion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoAfiliacion(id_tipo_afiliacionFK_IdTipoAfiliacion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoAfiliacion(finalQueryGlobal,pagination,id_tipo_afiliacionFK_IdTipoAfiliacion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoAfiliacion(id_tipo_afiliacionFK_IdTipoAfiliacion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoAfiliacion(id_tipo_afiliacionFK_IdTipoAfiliacion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdTipoAfiliacion",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdTipoAfiliacion",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoContrato")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoContrato(id_tipo_contratoFK_IdTipoContrato);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoContrato(finalQueryGlobal,pagination,id_tipo_contratoFK_IdTipoContrato);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoContrato(id_tipo_contratoFK_IdTipoContrato);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoContrato(id_tipo_contratoFK_IdTipoContrato);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoContrato(finalQueryGlobal,pagination,id_tipo_contratoFK_IdTipoContrato);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoContrato(id_tipo_contratoFK_IdTipoContrato);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoContrato(id_tipo_contratoFK_IdTipoContrato);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdTipoContrato",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdTipoContrato",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoCuentaBancoGlobal")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoCuentaBancoGlobal(finalQueryGlobal,pagination,id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoCuentaBancoGlobal(finalQueryGlobal,pagination,id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdTipoCuentaBancoGlobal",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdTipoCuentaBancoGlobal",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoGrupoFormaPago")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoGrupoFormaPago(id_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoGrupoFormaPago(finalQueryGlobal,pagination,id_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoGrupoFormaPago(id_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoGrupoFormaPago(id_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoGrupoFormaPago(finalQueryGlobal,pagination,id_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoGrupoFormaPago(id_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoGrupoFormaPago(id_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdTipoGrupoFormaPago",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdTipoGrupoFormaPago",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoLibretaMili")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoLibretaMili(id_tipo_libreta_miliFK_IdTipoLibretaMili);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoLibretaMili(finalQueryGlobal,pagination,id_tipo_libreta_miliFK_IdTipoLibretaMili);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoLibretaMili(id_tipo_libreta_miliFK_IdTipoLibretaMili);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoLibretaMili(id_tipo_libreta_miliFK_IdTipoLibretaMili);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoLibretaMili(finalQueryGlobal,pagination,id_tipo_libreta_miliFK_IdTipoLibretaMili);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoLibretaMili(id_tipo_libreta_miliFK_IdTipoLibretaMili);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoLibretaMili(id_tipo_libreta_miliFK_IdTipoLibretaMili);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdTipoLibretaMili",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdTipoLibretaMili",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoSangre")) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoSangre(id_tipo_sangreFK_IdTipoSangre);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoSangre(finalQueryGlobal,pagination,id_tipo_sangreFK_IdTipoSangre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoSangre(id_tipo_sangreFK_IdTipoSangre);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoSangre(id_tipo_sangreFK_IdTipoSangre);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados()==null||datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=datogeneralempleados==null|| datogeneralempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
						datogeneralempleadosAux.addAll(datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadosAux=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleadosAux.addAll(datogeneralempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoSangre(finalQueryGlobal,pagination,id_tipo_sangreFK_IdTipoSangre);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoSangre(id_tipo_sangreFK_IdTipoSangre);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DatoGeneralEmpleadoConstantesFunciones.getDetalleIndiceFK_IdTipoSangre(id_tipo_sangreFK_IdTipoSangre);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDatoGeneralEmpleados("FK_IdTipoSangre",datogeneralempleadoLogic.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDatoGeneralEmpleados("FK_IdTipoSangre",datogeneralempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoLogic.setDatoGeneralEmpleados(new ArrayList<DatoGeneralEmpleado>());
						datogeneralempleadoLogic.getDatoGeneralEmpleados().addAll(datogeneralempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleados=new ArrayList<DatoGeneralEmpleado>();
							datogeneralempleados.addAll(datogeneralempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesDatoGeneralEmpleado();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessDatoGeneralEmpleado();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=datogeneralempleadoLogic.getDatoGeneralEmpleados().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=datogeneralempleados.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=datogeneralempleadoLogic.getDatoGeneralEmpleados().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=datogeneralempleados.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(DatoGeneralEmpleado datogeneralempleado) {
		Boolean permite=true;
		
		if(this.datogeneralempleado.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=DatoGeneralEmpleadoConstantesFunciones.getOrderByListaDatoGeneralEmpleado();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=DatoGeneralEmpleadoConstantesFunciones.getOrderByListaDatoGeneralEmpleado();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadoLogic.getDatoGeneralEmpleados()) {
				if(datogeneralempleado.getsType().equals(Constantes2.S_TOTALES)) {
					datogeneralempleadoTotales=datogeneralempleado;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DatoGeneralEmpleado datogeneralempleado:this.datogeneralempleados) {
				if(datogeneralempleado.getsType().equals(Constantes2.S_TOTALES)) {
					datogeneralempleadoTotales=datogeneralempleado;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		datogeneralempleadoTotales=new DatoGeneralEmpleado();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.datogeneralempleadoLogic.getDatoGeneralEmpleados().remove(datogeneralempleadoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.datogeneralempleados.remove(datogeneralempleadoTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		datogeneralempleadoTotales=new DatoGeneralEmpleado();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadoLogic.getDatoGeneralEmpleados()) {
				if(datogeneralempleado.getsType().equals(Constantes2.S_TOTALES)) {
					datogeneralempleadoTotales=datogeneralempleado;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DatoGeneralEmpleadoConstantesFunciones.TotalizarValoresFilaDatoGeneralEmpleado(this.datogeneralempleadoLogic.getDatoGeneralEmpleados(),datogeneralempleadoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DatoGeneralEmpleado datogeneralempleado:this.datogeneralempleados) {
				if(datogeneralempleado.getsType().equals(Constantes2.S_TOTALES)) {
					datogeneralempleadoTotales=datogeneralempleado;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DatoGeneralEmpleadoConstantesFunciones.TotalizarValoresFilaDatoGeneralEmpleado(this.datogeneralempleados,datogeneralempleadoTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getDatoGeneralEmpleadosFK_IdBanco()throws Exception {
		try {
			sAccionBusqueda="FK_IdBanco";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDatoGeneralEmpleadosFK_IdCanton()throws Exception {
		try {
			sAccionBusqueda="FK_IdCanton";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDatoGeneralEmpleadosFK_IdEmpleado()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleado";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDatoGeneralEmpleadosFK_IdMoneda()throws Exception {
		try {
			sAccionBusqueda="FK_IdMoneda";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDatoGeneralEmpleadosFK_IdNumeroPatronal()throws Exception {
		try {
			sAccionBusqueda="FK_IdNumeroPatronal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDatoGeneralEmpleadosFK_IdPais()throws Exception {
		try {
			sAccionBusqueda="FK_IdPais";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDatoGeneralEmpleadosFK_IdParroquia()throws Exception {
		try {
			sAccionBusqueda="FK_IdParroquia";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDatoGeneralEmpleadosFK_IdProvincia()throws Exception {
		try {
			sAccionBusqueda="FK_IdProvincia";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDatoGeneralEmpleadosFK_IdTipoAfiliacion()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoAfiliacion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDatoGeneralEmpleadosFK_IdTipoContrato()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoContrato";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDatoGeneralEmpleadosFK_IdTipoCuentaBancoGlobal()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoCuentaBancoGlobal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDatoGeneralEmpleadosFK_IdTipoGrupoFormaPago()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoGrupoFormaPago";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDatoGeneralEmpleadosFK_IdTipoLibretaMili()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoLibretaMili";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDatoGeneralEmpleadosFK_IdTipoSangre()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoSangre";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getDatoGeneralEmpleadosFK_IdBanco(String sFinalQuery,Long id_banco)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdBanco(sFinalQuery,this.pagination,id_banco);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDatoGeneralEmpleadosFK_IdCanton(String sFinalQuery,Long id_canton)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdCanton(sFinalQuery,this.pagination,id_canton);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDatoGeneralEmpleadosFK_IdEmpleado(String sFinalQuery,Long id_empleado)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdEmpleado(sFinalQuery,this.pagination,id_empleado);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDatoGeneralEmpleadosFK_IdMoneda(String sFinalQuery,Long id_moneda)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdMoneda(sFinalQuery,this.pagination,id_moneda);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDatoGeneralEmpleadosFK_IdNumeroPatronal(String sFinalQuery,Long id_numero_patronal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdNumeroPatronal(sFinalQuery,this.pagination,id_numero_patronal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDatoGeneralEmpleadosFK_IdPais(String sFinalQuery,Long id_pais)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdPais(sFinalQuery,this.pagination,id_pais);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDatoGeneralEmpleadosFK_IdParroquia(String sFinalQuery,Long id_parroquia)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdParroquia(sFinalQuery,this.pagination,id_parroquia);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDatoGeneralEmpleadosFK_IdProvincia(String sFinalQuery,Long id_provincia)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdProvincia(sFinalQuery,this.pagination,id_provincia);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDatoGeneralEmpleadosFK_IdTipoAfiliacion(String sFinalQuery,Long id_tipo_afiliacion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoAfiliacion(sFinalQuery,this.pagination,id_tipo_afiliacion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDatoGeneralEmpleadosFK_IdTipoContrato(String sFinalQuery,Long id_tipo_contrato)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoContrato(sFinalQuery,this.pagination,id_tipo_contrato);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDatoGeneralEmpleadosFK_IdTipoCuentaBancoGlobal(String sFinalQuery,Long id_tipo_cuenta_banco_global)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoCuentaBancoGlobal(sFinalQuery,this.pagination,id_tipo_cuenta_banco_global);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDatoGeneralEmpleadosFK_IdTipoGrupoFormaPago(String sFinalQuery,Long id_tipo_grupo_forma_pago)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoGrupoFormaPago(sFinalQuery,this.pagination,id_tipo_grupo_forma_pago);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDatoGeneralEmpleadosFK_IdTipoLibretaMili(String sFinalQuery,Long id_tipo_libreta_mili)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoLibretaMili(sFinalQuery,this.pagination,id_tipo_libreta_mili);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDatoGeneralEmpleadosFK_IdTipoSangre(String sFinalQuery,Long id_tipo_sangre)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLogic.getDatoGeneralEmpleadosFK_IdTipoSangre(sFinalQuery,this.pagination,id_tipo_sangre);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosDatoGeneralEmpleado() {
		this.isPermisoTodoDatoGeneralEmpleado=false;
		this.isPermisoNuevoDatoGeneralEmpleado=false;
		this.isPermisoActualizarDatoGeneralEmpleado=false;
		this.isPermisoActualizarOriginalDatoGeneralEmpleado=false;
		this.isPermisoEliminarDatoGeneralEmpleado=false;
		this.isPermisoGuardarCambiosDatoGeneralEmpleado=false;
		this.isPermisoConsultaDatoGeneralEmpleado=false;
		this.isPermisoBusquedaDatoGeneralEmpleado=false;
		this.isPermisoReporteDatoGeneralEmpleado=false;		
		this.isPermisoOrdenDatoGeneralEmpleado=false;		
		this.isPermisoPaginacionMedioDatoGeneralEmpleado=false;		
		this.isPermisoPaginacionAltoDatoGeneralEmpleado=false;
		this.isPermisoPaginacionTodoDatoGeneralEmpleado=false;
		this.isPermisoCopiarDatoGeneralEmpleado=false;		
		this.isPermisoVerFormDatoGeneralEmpleado=false;		
		this.isPermisoDuplicarDatoGeneralEmpleado=false;		
		this.isPermisoOrdenDatoGeneralEmpleado=false;		
	}
	
	public void setPermisosUsuarioDatoGeneralEmpleado(Boolean isPermiso) {
		this.isPermisoTodoDatoGeneralEmpleado=isPermiso;
		this.isPermisoNuevoDatoGeneralEmpleado=isPermiso;
		this.isPermisoActualizarDatoGeneralEmpleado=isPermiso;
		this.isPermisoActualizarOriginalDatoGeneralEmpleado=isPermiso;
		this.isPermisoEliminarDatoGeneralEmpleado=isPermiso;
		this.isPermisoGuardarCambiosDatoGeneralEmpleado=isPermiso;
		this.isPermisoConsultaDatoGeneralEmpleado=isPermiso;
		this.isPermisoBusquedaDatoGeneralEmpleado=isPermiso;
		this.isPermisoReporteDatoGeneralEmpleado=isPermiso;
		this.isPermisoOrdenDatoGeneralEmpleado=isPermiso;		
		this.isPermisoPaginacionMedioDatoGeneralEmpleado=isPermiso;		
		this.isPermisoPaginacionAltoDatoGeneralEmpleado=isPermiso;		
		this.isPermisoPaginacionTodoDatoGeneralEmpleado=isPermiso;		
		this.isPermisoCopiarDatoGeneralEmpleado=isPermiso;		
		this.isPermisoVerFormDatoGeneralEmpleado=isPermiso;		
		this.isPermisoDuplicarDatoGeneralEmpleado=isPermiso;
		this.isPermisoOrdenDatoGeneralEmpleado=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioDatoGeneralEmpleado(Boolean isPermiso) {
		//this.isPermisoTodoDatoGeneralEmpleado=isPermiso;
		this.isPermisoNuevoDatoGeneralEmpleado=isPermiso;
		this.isPermisoActualizarDatoGeneralEmpleado=isPermiso;
		this.isPermisoActualizarOriginalDatoGeneralEmpleado=isPermiso;
		this.isPermisoEliminarDatoGeneralEmpleado=isPermiso;
		this.isPermisoGuardarCambiosDatoGeneralEmpleado=isPermiso;
		//this.isPermisoConsultaDatoGeneralEmpleado=isPermiso;
		//this.isPermisoBusquedaDatoGeneralEmpleado=isPermiso;
		//this.isPermisoReporteDatoGeneralEmpleado=isPermiso;
		//this.isPermisoOrdenDatoGeneralEmpleado=isPermiso;		
		//this.isPermisoPaginacionMedioDatoGeneralEmpleado=isPermiso;		
		//this.isPermisoPaginacionAltoDatoGeneralEmpleado=isPermiso;		
		//this.isPermisoPaginacionTodoDatoGeneralEmpleado=isPermiso;		
		//this.isPermisoCopiarDatoGeneralEmpleado=isPermiso;		
		//this.isPermisoDuplicarDatoGeneralEmpleado=isPermiso;
		//this.isPermisoOrdenDatoGeneralEmpleado=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioDatoGeneralEmpleadoClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(DatoGeneralEmpleadoJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioDatoGeneralEmpleadoClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioDatoGeneralEmpleadoClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionDatoGeneralEmpleadoClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioDatoGeneralEmpleadoClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioDatoGeneralEmpleado() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(DatoGeneralEmpleadoJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, DatoGeneralEmpleadoConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoDatoGeneralEmpleado=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarDatoGeneralEmpleado=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalDatoGeneralEmpleado=this.isPermisoActualizarDatoGeneralEmpleado;
			this.isPermisoEliminarDatoGeneralEmpleado=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosDatoGeneralEmpleado=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaDatoGeneralEmpleado=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaDatoGeneralEmpleado=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoDatoGeneralEmpleado=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteDatoGeneralEmpleado=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDatoGeneralEmpleado=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioDatoGeneralEmpleado=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoDatoGeneralEmpleado=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoDatoGeneralEmpleado=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarDatoGeneralEmpleado=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormDatoGeneralEmpleado=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarDatoGeneralEmpleado=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDatoGeneralEmpleado=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosDatoGeneralEmpleado.setToolTipText(this.jTableDatosDatoGeneralEmpleado.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioDatoGeneralEmpleado(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioDatoGeneralEmpleado(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(DatoGeneralEmpleadoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(DatoGeneralEmpleadoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioDatoGeneralEmpleado() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyDatoGeneralEmpleadoListas()throws Exception {
		try	{						
			
				this.empleadosForeignKey=new ArrayList();
				this.numeropatronalsForeignKey=new ArrayList();
				this.tipoafiliacionsForeignKey=new ArrayList();
				this.paissForeignKey=new ArrayList();
				this.provinciasForeignKey=new ArrayList();
				this.cantonsForeignKey=new ArrayList();
				this.parroquiasForeignKey=new ArrayList();
				this.monedasForeignKey=new ArrayList();
				this.tipocontratosForeignKey=new ArrayList();
				this.tipolibretamilisForeignKey=new ArrayList();
				this.tipogrupoformapagosForeignKey=new ArrayList();
				this.bancosForeignKey=new ArrayList();
				this.tipocuentabancoglobalsForeignKey=new ArrayList();
				this.tiposangresForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyDatoGeneralEmpleadoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(DatoGeneralEmpleadoJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyDatoGeneralEmpleadoListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyNumeroPatronalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoAfiliacionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyProvinciaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCantonListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyParroquiaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMonedaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoContratoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoLibretaMiliListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoGrupoFormaPagoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoCuentaBancoGlobalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoSangreListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpleadoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyNumeroPatronalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.numeropatronalsForeignKey==null||this.numeropatronalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=NumeroPatronalConstantesFunciones.getArrayColumnasGlobalesNumeroPatronal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NumeroPatronalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=NumeroPatronalConstantesFunciones.SFINALQUERY;

				this.cargarCombosNumeroPatronalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoAfiliacionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipoafiliacionsForeignKey==null||this.tipoafiliacionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoAfiliacionConstantesFunciones.getArrayColumnasGlobalesTipoAfiliacion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoAfiliacionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoAfiliacionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoAfiliacionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPaisListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.paissForeignKey==null||this.paissForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PaisConstantesFunciones.SFINALQUERY;

				this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProvinciaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.provinciasForeignKey==null||this.provinciasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ProvinciaConstantesFunciones.getArrayColumnasGlobalesProvincia(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProvinciaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ProvinciaConstantesFunciones.SFINALQUERY;

				this.cargarCombosProvinciasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCantonListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cantonsForeignKey==null||this.cantonsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CantonConstantesFunciones.getArrayColumnasGlobalesCanton(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CantonConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CantonConstantesFunciones.SFINALQUERY;

				this.cargarCombosCantonsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyParroquiaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.parroquiasForeignKey==null||this.parroquiasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ParroquiaConstantesFunciones.getArrayColumnasGlobalesParroquia(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ParroquiaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ParroquiaConstantesFunciones.SFINALQUERY;

				this.cargarCombosParroquiasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMonedaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MonedaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoContratoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocontratosForeignKey==null||this.tipocontratosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoContratoConstantesFunciones.getArrayColumnasGlobalesTipoContrato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoContratoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoContratoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoContratosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoLibretaMiliListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipolibretamilisForeignKey==null||this.tipolibretamilisForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoLibretaMiliConstantesFunciones.getArrayColumnasGlobalesTipoLibretaMili(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoLibretaMiliConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoLibretaMiliConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoLibretaMilisForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoGrupoFormaPagoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipogrupoformapagosForeignKey==null||this.tipogrupoformapagosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoGrupoFormaPagoConstantesFunciones.getArrayColumnasGlobalesTipoGrupoFormaPago(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoGrupoFormaPagoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoGrupoFormaPagoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoGrupoFormaPagosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBancoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bancosForeignKey==null||this.bancosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BancoConstantesFunciones.getArrayColumnasGlobalesBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BancoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BancoConstantesFunciones.SFINALQUERY;

				this.cargarCombosBancosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCuentaBancoGlobalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocuentabancoglobalsForeignKey==null||this.tipocuentabancoglobalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoCuentaBancoGlobalConstantesFunciones.getArrayColumnasGlobalesTipoCuentaBancoGlobal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCuentaBancoGlobalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoCuentaBancoGlobalConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoCuentaBancoGlobalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoSangreListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiposangresForeignKey==null||this.tiposangresForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoSangreConstantesFunciones.getArrayColumnasGlobalesTipoSangre(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoSangreConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoSangreConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoSangresForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyDatoGeneralEmpleadoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			DatoGeneralEmpleadoParameterReturnGeneral datogeneralempleadoReturnGeneral=new DatoGeneralEmpleadoParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpleado="";

				if(((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_empleadoDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_empleadoDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleado=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleado=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleado, "");
						finalQueryGlobalEmpleado+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleado=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidEmpleadoActual();
					}
				} else {
					finalQueryGlobalEmpleado="NONE";
				}


				String finalQueryGlobalNumeroPatronal="";

				if(((this.numeropatronalsForeignKey==null||this.numeropatronalsForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_numero_patronalDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_numero_patronalDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionNumeroPatronal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=NumeroPatronalConstantesFunciones.getArrayColumnasGlobalesNumeroPatronal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalNumeroPatronal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NumeroPatronalConstantesFunciones.TABLENAME);

						finalQueryGlobalNumeroPatronal=Funciones.GetFinalQueryAppend(finalQueryGlobalNumeroPatronal, "");
						finalQueryGlobalNumeroPatronal+=NumeroPatronalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosNumeroPatronalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalNumeroPatronal=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidNumeroPatronalActual();
					}
				} else {
					finalQueryGlobalNumeroPatronal="NONE";
				}


				String finalQueryGlobalTipoAfiliacion="";

				if(((this.tipoafiliacionsForeignKey==null||this.tipoafiliacionsForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_tipo_afiliacionDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_tipo_afiliacionDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoAfiliacion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoAfiliacionConstantesFunciones.getArrayColumnasGlobalesTipoAfiliacion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoAfiliacion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoAfiliacionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoAfiliacion=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoAfiliacion, "");
						finalQueryGlobalTipoAfiliacion+=TipoAfiliacionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoAfiliacionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoAfiliacion=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidTipoAfiliacionActual();
					}
				} else {
					finalQueryGlobalTipoAfiliacion="NONE";
				}


				String finalQueryGlobalPais="";

				if(((this.paissForeignKey==null||this.paissForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_paisDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_paisDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPais=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

						finalQueryGlobalPais=Funciones.GetFinalQueryAppend(finalQueryGlobalPais, "");
						finalQueryGlobalPais+=PaisConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPais=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidPaisActual();
					}
				} else {
					finalQueryGlobalPais="NONE";
				}


				String finalQueryGlobalProvincia="";

				if(((this.provinciasForeignKey==null||this.provinciasForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_provinciaDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_provinciaDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionProvincia()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ProvinciaConstantesFunciones.getArrayColumnasGlobalesProvincia(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalProvincia=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProvinciaConstantesFunciones.TABLENAME);

						finalQueryGlobalProvincia=Funciones.GetFinalQueryAppend(finalQueryGlobalProvincia, "");
						finalQueryGlobalProvincia+=ProvinciaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosProvinciasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalProvincia=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidProvinciaActual();
					}
				} else {
					finalQueryGlobalProvincia="NONE";
				}


				String finalQueryGlobalCanton="";

				if(((this.cantonsForeignKey==null||this.cantonsForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_cantonDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_cantonDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionCanton()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CantonConstantesFunciones.getArrayColumnasGlobalesCanton(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCanton=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CantonConstantesFunciones.TABLENAME);

						finalQueryGlobalCanton=Funciones.GetFinalQueryAppend(finalQueryGlobalCanton, "");
						finalQueryGlobalCanton+=CantonConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCantonsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCanton=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidCantonActual();
					}
				} else {
					finalQueryGlobalCanton="NONE";
				}


				String finalQueryGlobalParroquia="";

				if(((this.parroquiasForeignKey==null||this.parroquiasForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_parroquiaDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_parroquiaDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionParroquia()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ParroquiaConstantesFunciones.getArrayColumnasGlobalesParroquia(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalParroquia=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ParroquiaConstantesFunciones.TABLENAME);

						finalQueryGlobalParroquia=Funciones.GetFinalQueryAppend(finalQueryGlobalParroquia, "");
						finalQueryGlobalParroquia+=ParroquiaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosParroquiasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalParroquia=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidParroquiaActual();
					}
				} else {
					finalQueryGlobalParroquia="NONE";
				}


				String finalQueryGlobalMoneda="";

				if(((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_monedaDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_monedaDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMoneda=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

						finalQueryGlobalMoneda=Funciones.GetFinalQueryAppend(finalQueryGlobalMoneda, "");
						finalQueryGlobalMoneda+=MonedaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMoneda=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidMonedaActual();
					}
				} else {
					finalQueryGlobalMoneda="NONE";
				}


				String finalQueryGlobalTipoContrato="";

				if(((this.tipocontratosForeignKey==null||this.tipocontratosForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_tipo_contratoDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_tipo_contratoDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoContrato()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoContratoConstantesFunciones.getArrayColumnasGlobalesTipoContrato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoContrato=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoContratoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoContrato=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoContrato, "");
						finalQueryGlobalTipoContrato+=TipoContratoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoContratosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoContrato=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidTipoContratoActual();
					}
				} else {
					finalQueryGlobalTipoContrato="NONE";
				}


				String finalQueryGlobalTipoLibretaMili="";

				if(((this.tipolibretamilisForeignKey==null||this.tipolibretamilisForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_tipo_libreta_miliDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_tipo_libreta_miliDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoLibretaMili()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoLibretaMiliConstantesFunciones.getArrayColumnasGlobalesTipoLibretaMili(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoLibretaMili=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoLibretaMiliConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoLibretaMili=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoLibretaMili, "");
						finalQueryGlobalTipoLibretaMili+=TipoLibretaMiliConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoLibretaMilisForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoLibretaMili=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidTipoLibretaMiliActual();
					}
				} else {
					finalQueryGlobalTipoLibretaMili="NONE";
				}


				String finalQueryGlobalTipoGrupoFormaPago="";

				if(((this.tipogrupoformapagosForeignKey==null||this.tipogrupoformapagosForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_tipo_grupo_forma_pagoDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_tipo_grupo_forma_pagoDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoGrupoFormaPago()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoGrupoFormaPagoConstantesFunciones.getArrayColumnasGlobalesTipoGrupoFormaPago(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoGrupoFormaPago=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoGrupoFormaPagoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoGrupoFormaPago=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoGrupoFormaPago, "");
						finalQueryGlobalTipoGrupoFormaPago+=TipoGrupoFormaPagoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoGrupoFormaPagosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoGrupoFormaPago=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidTipoGrupoFormaPagoActual();
					}
				} else {
					finalQueryGlobalTipoGrupoFormaPago="NONE";
				}


				String finalQueryGlobalBanco="";

				if(((this.bancosForeignKey==null||this.bancosForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_bancoDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_bancoDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BancoConstantesFunciones.getArrayColumnasGlobalesBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBanco=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BancoConstantesFunciones.TABLENAME);

						finalQueryGlobalBanco=Funciones.GetFinalQueryAppend(finalQueryGlobalBanco, "");
						finalQueryGlobalBanco+=BancoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBancosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBanco=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidBancoActual();
					}
				} else {
					finalQueryGlobalBanco="NONE";
				}


				String finalQueryGlobalTipoCuentaBancoGlobal="";

				if(((this.tipocuentabancoglobalsForeignKey==null||this.tipocuentabancoglobalsForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_tipo_cuenta_banco_globalDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_tipo_cuenta_banco_globalDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoCuentaBancoGlobal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoCuentaBancoGlobalConstantesFunciones.getArrayColumnasGlobalesTipoCuentaBancoGlobal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoCuentaBancoGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCuentaBancoGlobalConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoCuentaBancoGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoCuentaBancoGlobal, "");
						finalQueryGlobalTipoCuentaBancoGlobal+=TipoCuentaBancoGlobalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoCuentaBancoGlobalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoCuentaBancoGlobal=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidTipoCuentaBancoGlobalActual();
					}
				} else {
					finalQueryGlobalTipoCuentaBancoGlobal="NONE";
				}


				String finalQueryGlobalTipoSangre="";

				if(((this.tiposangresForeignKey==null||this.tiposangresForeignKey.size()<=0) && this.datogeneralempleadoConstantesFunciones.cargarid_tipo_sangreDatoGeneralEmpleado)
					 || (this.esRecargarFks && this.datogeneralempleadoConstantesFunciones.cargarid_tipo_sangreDatoGeneralEmpleado)) {

					if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoSangre()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoSangreConstantesFunciones.getArrayColumnasGlobalesTipoSangre(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoSangre=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoSangreConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoSangre=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoSangre, "");
						finalQueryGlobalTipoSangre+=TipoSangreConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoSangresForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoSangre=" WHERE " + ConstantesSql.ID + "="+datogeneralempleadoSessionBean.getlidTipoSangreActual();
					}
				} else {
					finalQueryGlobalTipoSangre="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				datogeneralempleadoReturnGeneral=datogeneralempleadoLogic.cargarCombosLoteForeignKeyDatoGeneralEmpleado(finalQueryGlobalEmpleado,finalQueryGlobalNumeroPatronal,finalQueryGlobalTipoAfiliacion,finalQueryGlobalPais,finalQueryGlobalProvincia,finalQueryGlobalCanton,finalQueryGlobalParroquia,finalQueryGlobalMoneda,finalQueryGlobalTipoContrato,finalQueryGlobalTipoLibretaMili,finalQueryGlobalTipoGrupoFormaPago,finalQueryGlobalBanco,finalQueryGlobalTipoCuentaBancoGlobal,finalQueryGlobalTipoSangre);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpleado.equals("NONE")) {
				this.empleadosForeignKey=datogeneralempleadoReturnGeneral.getempleadosForeignKey();
			}

			if(!finalQueryGlobalNumeroPatronal.equals("NONE")) {
				this.numeropatronalsForeignKey=datogeneralempleadoReturnGeneral.getnumeropatronalsForeignKey();
			}

			if(!finalQueryGlobalTipoAfiliacion.equals("NONE")) {
				this.tipoafiliacionsForeignKey=datogeneralempleadoReturnGeneral.gettipoafiliacionsForeignKey();
			}

			if(!finalQueryGlobalPais.equals("NONE")) {
				this.paissForeignKey=datogeneralempleadoReturnGeneral.getpaissForeignKey();
			}

			if(!finalQueryGlobalProvincia.equals("NONE")) {
				this.provinciasForeignKey=datogeneralempleadoReturnGeneral.getprovinciasForeignKey();
			}

			if(!finalQueryGlobalCanton.equals("NONE")) {
				this.cantonsForeignKey=datogeneralempleadoReturnGeneral.getcantonsForeignKey();
			}

			if(!finalQueryGlobalParroquia.equals("NONE")) {
				this.parroquiasForeignKey=datogeneralempleadoReturnGeneral.getparroquiasForeignKey();
			}

			if(!finalQueryGlobalMoneda.equals("NONE")) {
				this.monedasForeignKey=datogeneralempleadoReturnGeneral.getmonedasForeignKey();
			}

			if(!finalQueryGlobalTipoContrato.equals("NONE")) {
				this.tipocontratosForeignKey=datogeneralempleadoReturnGeneral.gettipocontratosForeignKey();
			}

			if(!finalQueryGlobalTipoLibretaMili.equals("NONE")) {
				this.tipolibretamilisForeignKey=datogeneralempleadoReturnGeneral.gettipolibretamilisForeignKey();
			}

			if(!finalQueryGlobalTipoGrupoFormaPago.equals("NONE")) {
				this.tipogrupoformapagosForeignKey=datogeneralempleadoReturnGeneral.gettipogrupoformapagosForeignKey();
			}

			if(!finalQueryGlobalBanco.equals("NONE")) {
				this.bancosForeignKey=datogeneralempleadoReturnGeneral.getbancosForeignKey();
			}

			if(!finalQueryGlobalTipoCuentaBancoGlobal.equals("NONE")) {
				this.tipocuentabancoglobalsForeignKey=datogeneralempleadoReturnGeneral.gettipocuentabancoglobalsForeignKey();
			}

			if(!finalQueryGlobalTipoSangre.equals("NONE")) {
				this.tiposangresForeignKey=datogeneralempleadoReturnGeneral.gettiposangresForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyDatoGeneralEmpleado()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpleado();
			this.addItemDefectoCombosForeignKeyNumeroPatronal();
			this.addItemDefectoCombosForeignKeyTipoAfiliacion();
			this.addItemDefectoCombosForeignKeyPais();
			this.addItemDefectoCombosForeignKeyProvincia();
			this.addItemDefectoCombosForeignKeyCanton();
			this.addItemDefectoCombosForeignKeyParroquia();
			this.addItemDefectoCombosForeignKeyMoneda();
			this.addItemDefectoCombosForeignKeyTipoContrato();
			this.addItemDefectoCombosForeignKeyTipoLibretaMili();
			this.addItemDefectoCombosForeignKeyTipoGrupoFormaPago();
			this.addItemDefectoCombosForeignKeyBanco();
			this.addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal();
			this.addItemDefectoCombosForeignKeyTipoSangre();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpleado()throws Exception {
		try {
			if(this.datogeneralempleadoSessionBean==null) {
				this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
			}

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				Empleado empleado=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleado,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleado.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosForeignKey,empleado,true)) {

					this.empleadosForeignKey.add(0,empleado);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyNumeroPatronal()throws Exception {
		try {

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionNumeroPatronal()) {
				NumeroPatronal numeropatronal=new NumeroPatronal();
				NumeroPatronalConstantesFunciones.setNumeroPatronalDescripcion(numeropatronal,Constantes.SMENSAJE_ESCOJA_OPCION);
				numeropatronal.setId(null);

				if(!NumeroPatronalConstantesFunciones.ExisteEnLista(this.numeropatronalsForeignKey,numeropatronal,true)) {

					this.numeropatronalsForeignKey.add(0,numeropatronal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoAfiliacion()throws Exception {
		try {

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoAfiliacion()) {
				TipoAfiliacion tipoafiliacion=new TipoAfiliacion();
				TipoAfiliacionConstantesFunciones.setTipoAfiliacionDescripcion(tipoafiliacion,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoafiliacion.setId(null);

				if(!TipoAfiliacionConstantesFunciones.ExisteEnLista(this.tipoafiliacionsForeignKey,tipoafiliacion,true)) {

					this.tipoafiliacionsForeignKey.add(0,tipoafiliacion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPais()throws Exception {
		try {

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				Pais pais=new Pais();
				PaisConstantesFunciones.setPaisDescripcion(pais,Constantes.SMENSAJE_ESCOJA_OPCION);
				pais.setId(null);

				if(!PaisConstantesFunciones.ExisteEnLista(this.paissForeignKey,pais,true)) {

					this.paissForeignKey.add(0,pais);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyProvincia()throws Exception {
		try {

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionProvincia()) {
				Provincia provincia=new Provincia();
				ProvinciaConstantesFunciones.setProvinciaDescripcion(provincia,Constantes.SMENSAJE_ESCOJA_OPCION);
				provincia.setId(null);

				if(!ProvinciaConstantesFunciones.ExisteEnLista(this.provinciasForeignKey,provincia,true)) {

					this.provinciasForeignKey.add(0,provincia);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCanton()throws Exception {
		try {

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionCanton()) {
				Canton canton=new Canton();
				CantonConstantesFunciones.setCantonDescripcion(canton,Constantes.SMENSAJE_ESCOJA_OPCION);
				canton.setId(null);

				if(!CantonConstantesFunciones.ExisteEnLista(this.cantonsForeignKey,canton,true)) {

					this.cantonsForeignKey.add(0,canton);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyParroquia()throws Exception {
		try {

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionParroquia()) {
				Parroquia parroquia=new Parroquia();
				ParroquiaConstantesFunciones.setParroquiaDescripcion(parroquia,Constantes.SMENSAJE_ESCOJA_OPCION);
				parroquia.setId(null);

				if(!ParroquiaConstantesFunciones.ExisteEnLista(this.parroquiasForeignKey,parroquia,true)) {

					this.parroquiasForeignKey.add(0,parroquia);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMoneda()throws Exception {
		try {

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				Moneda moneda=new Moneda();
				MonedaConstantesFunciones.setMonedaDescripcion(moneda,Constantes.SMENSAJE_ESCOJA_OPCION);
				moneda.setId(null);

				if(!MonedaConstantesFunciones.ExisteEnLista(this.monedasForeignKey,moneda,true)) {

					this.monedasForeignKey.add(0,moneda);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoContrato()throws Exception {
		try {

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoContrato()) {
				TipoContrato tipocontrato=new TipoContrato();
				TipoContratoConstantesFunciones.setTipoContratoDescripcion(tipocontrato,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocontrato.setId(null);

				if(!TipoContratoConstantesFunciones.ExisteEnLista(this.tipocontratosForeignKey,tipocontrato,true)) {

					this.tipocontratosForeignKey.add(0,tipocontrato);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoLibretaMili()throws Exception {
		try {

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoLibretaMili()) {
				TipoLibretaMili tipolibretamili=new TipoLibretaMili();
				TipoLibretaMiliConstantesFunciones.setTipoLibretaMiliDescripcion(tipolibretamili,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipolibretamili.setId(null);

				if(!TipoLibretaMiliConstantesFunciones.ExisteEnLista(this.tipolibretamilisForeignKey,tipolibretamili,true)) {

					this.tipolibretamilisForeignKey.add(0,tipolibretamili);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoGrupoFormaPago()throws Exception {
		try {

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoGrupoFormaPago()) {
				TipoGrupoFormaPago tipogrupoformapago=new TipoGrupoFormaPago();
				TipoGrupoFormaPagoConstantesFunciones.setTipoGrupoFormaPagoDescripcion(tipogrupoformapago,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipogrupoformapago.setId(null);

				if(!TipoGrupoFormaPagoConstantesFunciones.ExisteEnLista(this.tipogrupoformapagosForeignKey,tipogrupoformapago,true)) {

					this.tipogrupoformapagosForeignKey.add(0,tipogrupoformapago);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBanco()throws Exception {
		try {

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {
				Banco banco=new Banco();
				BancoConstantesFunciones.setBancoDescripcion(banco,Constantes.SMENSAJE_ESCOJA_OPCION);
				banco.setId(null);

				if(!BancoConstantesFunciones.ExisteEnLista(this.bancosForeignKey,banco,true)) {

					this.bancosForeignKey.add(0,banco);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal()throws Exception {
		try {

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoCuentaBancoGlobal()) {
				TipoCuentaBancoGlobal tipocuentabancoglobal=new TipoCuentaBancoGlobal();
				TipoCuentaBancoGlobalConstantesFunciones.setTipoCuentaBancoGlobalDescripcion(tipocuentabancoglobal,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocuentabancoglobal.setId(null);

				if(!TipoCuentaBancoGlobalConstantesFunciones.ExisteEnLista(this.tipocuentabancoglobalsForeignKey,tipocuentabancoglobal,true)) {

					this.tipocuentabancoglobalsForeignKey.add(0,tipocuentabancoglobal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoSangre()throws Exception {
		try {

			if(!this.datogeneralempleadoSessionBean.getisBusquedaDesdeForeignKeySesionTipoSangre()) {
				TipoSangre tiposangre=new TipoSangre();
				TipoSangreConstantesFunciones.setTipoSangreDescripcion(tiposangre,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiposangre.setId(null);

				if(!TipoSangreConstantesFunciones.ExisteEnLista(this.tiposangresForeignKey,tiposangre,true)) {

					this.tiposangresForeignKey.add(0,tiposangre);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyDatoGeneralEmpleado()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyDatoGeneralEmpleado(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyDatoGeneralEmpleado()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualMonedaForeignKey(this.parametroGeneralUsuario.getid_moneda(),false,"Formulario");
			
			
				this.datogeneralempleado.setfecha_nacimiento(this.parametroGeneralUsuario.getfecha_sistema());
				this.datogeneralempleado.setfecha_fallece(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyDatoGeneralEmpleado();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado)throws Exception {	
		try {
			
			this.setActualEmpleadoForeignKey(datogeneralempleado.getid_empleado(),false,"Formulario");
			this.setActualNumeroPatronalForeignKey(datogeneralempleado.getid_numero_patronal(),false,"Formulario");
			this.setActualTipoAfiliacionForeignKey(datogeneralempleado.getid_tipo_afiliacion(),false,"Formulario");
			this.setActualPaisForeignKey(datogeneralempleado.getid_pais(),false,"Formulario");
			this.setActualProvinciaForeignKey(datogeneralempleado.getid_provincia(),false,"Formulario");
			this.setActualCantonForeignKey(datogeneralempleado.getid_canton(),false,"Formulario");
			this.setActualParroquiaForeignKey(datogeneralempleado.getid_parroquia(),false,"Formulario");
			this.setActualTipoContratoForeignKey(datogeneralempleado.getid_tipo_contrato(),false,"Formulario");
			this.setActualTipoLibretaMiliForeignKey(datogeneralempleado.getid_tipo_libreta_mili(),false,"Formulario");
			this.setActualTipoGrupoFormaPagoForeignKey(datogeneralempleado.getid_tipo_grupo_forma_pago(),false,"Formulario");
			this.setActualBancoForeignKey(datogeneralempleado.getid_banco(),false,"Formulario");
			this.setActualTipoCuentaBancoGlobalForeignKey(datogeneralempleado.getid_tipo_cuenta_banco_global(),false,"Formulario");
			this.setActualTipoSangreForeignKey(datogeneralempleado.getid_tipo_sangre(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado,String sTipoEvento)throws Exception {	
		try {
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyDatoGeneralEmpleado()throws Exception {	
		try {
			
			this.setActualEmpleadoForeignKey(this.datogeneralempleadoConstantesFunciones.getid_empleado(),false,"Formulario");
			this.setActualNumeroPatronalForeignKey(this.datogeneralempleadoConstantesFunciones.getid_numero_patronal(),false,"Formulario");
			this.setActualTipoAfiliacionForeignKey(this.datogeneralempleadoConstantesFunciones.getid_tipo_afiliacion(),false,"Formulario");
			this.setActualPaisForeignKey(this.datogeneralempleadoConstantesFunciones.getid_pais(),false,"Formulario");
			this.setActualProvinciaForeignKey(this.datogeneralempleadoConstantesFunciones.getid_provincia(),false,"Formulario");
			this.setActualCantonForeignKey(this.datogeneralempleadoConstantesFunciones.getid_canton(),false,"Formulario");
			this.setActualParroquiaForeignKey(this.datogeneralempleadoConstantesFunciones.getid_parroquia(),false,"Formulario");
			this.setActualTipoContratoForeignKey(this.datogeneralempleadoConstantesFunciones.getid_tipo_contrato(),false,"Formulario");
			this.setActualTipoLibretaMiliForeignKey(this.datogeneralempleadoConstantesFunciones.getid_tipo_libreta_mili(),false,"Formulario");
			this.setActualTipoGrupoFormaPagoForeignKey(this.datogeneralempleadoConstantesFunciones.getid_tipo_grupo_forma_pago(),false,"Formulario");
			this.setActualBancoForeignKey(this.datogeneralempleadoConstantesFunciones.getid_banco(),false,"Formulario");
			this.setActualTipoCuentaBancoGlobalForeignKey(this.datogeneralempleadoConstantesFunciones.getid_tipo_cuenta_banco_global(),false,"Formulario");
			this.setActualTipoSangreForeignKey(this.datogeneralempleadoConstantesFunciones.getid_tipo_sangre(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyDatoGeneralEmpleado()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyDatoGeneralEmpleado()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyDatoGeneralEmpleado()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroDatoGeneralEmpleado()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyDatoGeneralEmpleado()throws Exception {
		try {
			

			this.cargarCombosFrameEmpleadosForeignKey("Todos");
			this.cargarCombosFrameNumeroPatronalsForeignKey("Todos");
			this.cargarCombosFrameTipoAfiliacionsForeignKey("Todos");
			this.cargarCombosFramePaissForeignKey("Todos");
			this.cargarCombosFrameProvinciasForeignKey("Todos");
			this.cargarCombosFrameCantonsForeignKey("Todos");
			this.cargarCombosFrameParroquiasForeignKey("Todos");
			this.cargarCombosFrameMonedasForeignKey("Todos");
			this.cargarCombosFrameTipoContratosForeignKey("Todos");
			this.cargarCombosFrameTipoLibretaMilisForeignKey("Todos");
			this.cargarCombosFrameTipoGrupoFormaPagosForeignKey("Todos");
			this.cargarCombosFrameBancosForeignKey("Todos");
			this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey("Todos");
			this.cargarCombosFrameTipoSangresForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyDatoGeneralEmpleado(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameNumeroPatronalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoAfiliacionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameProvinciasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCantonsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameParroquiasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMonedasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoContratosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoLibretaMilisForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoGrupoFormaPagosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBancosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoSangresForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyDatoGeneralEmpleado()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_empleadoDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_empleadoDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_empleadoDatoGeneralEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	




























	
	

	public DatoGeneralEmpleadoBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public DatoGeneralEmpleadoBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public DatoGeneralEmpleadoBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean(); 
		this.datogeneralempleadoConstantesFunciones=new DatoGeneralEmpleadoConstantesFunciones(); 
		this.datogeneralempleadoBean=new DatoGeneralEmpleado();//(this.datogeneralempleadoConstantesFunciones); 		
		this.datogeneralempleadoReturnGeneral=new DatoGeneralEmpleadoParameterReturnGeneral(); 
		
		this.datogeneralempleadoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.datogeneralempleadoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public DatoGeneralEmpleadoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public DatoGeneralEmpleadoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public DatoGeneralEmpleadoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessDatoGeneralEmpleado(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.datogeneralempleadoConstantesFunciones=new DatoGeneralEmpleadoConstantesFunciones(); 
			this.datogeneralempleadoBean=new DatoGeneralEmpleado();//this.datogeneralempleadoConstantesFunciones); 			
			this.datogeneralempleadoReturnGeneral=new DatoGeneralEmpleadoParameterReturnGeneral(); 
		
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Dato General Empleado Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.datogeneralempleado=new DatoGeneralEmpleado();
			this.datogeneralempleados = new ArrayList<DatoGeneralEmpleado>();
			this.datogeneralempleadosAux = new ArrayList<DatoGeneralEmpleado>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic=new DatoGeneralEmpleadoLogic();
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}
			
			//this.datogeneralempleadoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.datogeneralempleadoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormDatoGeneralEmpleado);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDatoGeneralEmpleado);	
					}
					
					if(this.jInternalFrameImportacionDatoGeneralEmpleado!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDatoGeneralEmpleado);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByDatoGeneralEmpleado!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByDatoGeneralEmpleado);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormDatoGeneralEmpleado);
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.setVisible(false);
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado);
					this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.setVisible(false);
					this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionDatoGeneralEmpleado!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionDatoGeneralEmpleado);
					this.jInternalFrameImportacionDatoGeneralEmpleado.setVisible(false);
					this.jInternalFrameImportacionDatoGeneralEmpleado.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByDatoGeneralEmpleado!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByDatoGeneralEmpleado);
					this.jInternalFrameOrderByDatoGeneralEmpleado.setVisible(false);
					this.jInternalFrameOrderByDatoGeneralEmpleado.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idDatoGeneralEmpleadoActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=DatoGeneralEmpleadoConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.datogeneralempleadoReturnGeneral=new DatoGeneralEmpleadoParameterReturnGeneral();
			
			this.datogeneralempleadoParameterGeneral=new DatoGeneralEmpleadoParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.datogeneralempleadoLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(DatoGeneralEmpleadoJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DatoGeneralEmpleadoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.datogeneralempleadoSessionBean.getEsGuardarRelacionado(),this.datogeneralempleadoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DatoGeneralEmpleadoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.datogeneralempleadoSessionBean.getEsGuardarRelacionado(),this.datogeneralempleadoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaDuplicarDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaCopiarDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaVerFormDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaOrdenDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaModificarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaActualizarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaEliminarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaCancelarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=false;
			
			
			this.isVisibilidadFK_IdBanco=true;
			this.isVisibilidadFK_IdCanton=true;
			this.isVisibilidadFK_IdEmpleado=true;
			this.isVisibilidadFK_IdMoneda=true;
			this.isVisibilidadFK_IdNumeroPatronal=true;
			this.isVisibilidadFK_IdPais=true;
			this.isVisibilidadFK_IdParroquia=true;
			this.isVisibilidadFK_IdProvincia=true;
			this.isVisibilidadFK_IdTipoAfiliacion=true;
			this.isVisibilidadFK_IdTipoContrato=true;
			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=true;
			this.isVisibilidadFK_IdTipoGrupoFormaPago=true;
			this.isVisibilidadFK_IdTipoLibretaMili=true;
			this.isVisibilidadFK_IdTipoSangre=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesDatoGeneralEmpleado("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosDatoGeneralEmpleado();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioDatoGeneralEmpleado(false);
			
			this.setPermisosUsuarioDatoGeneralEmpleado();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.datogeneralempleadoSessionBean.getEsGuardarRelacionado() 
				|| (this.datogeneralempleadoSessionBean.getEsGuardarRelacionado() && this.datogeneralempleadoSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioDatoGeneralEmpleadoClasesRelacionadas();
			}
			
			if(this.datogeneralempleadoSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioDatoGeneralEmpleadoClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosDatoGeneralEmpleado();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualDatoGeneralEmpleado();
			}
			
			if(!this.isPermisoBusquedaDatoGeneralEmpleado) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioDatoGeneralEmpleado,this.isPermisoPaginacionMedioDatoGeneralEmpleado,this.isPermisoPaginacionTodoDatoGeneralEmpleado);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(DatoGeneralEmpleadoConstantesFunciones.getTiposSeleccionarDatoGeneralEmpleado());
				
				this.tiposColumnasSelect=DatoGeneralEmpleadoConstantesFunciones.getTiposSeleccionarDatoGeneralEmpleado(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioDatoGeneralEmpleado();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioDatoGeneralEmpleado(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioDatoGeneralEmpleado(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesDatoGeneralEmpleado() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empleadoLogic=new EmpleadoLogic();
			this.numeropatronalLogic=new NumeroPatronalLogic();
			this.tipoafiliacionLogic=new TipoAfiliacionLogic();
			this.paisLogic=new PaisLogic();
			this.provinciaLogic=new ProvinciaLogic();
			this.cantonLogic=new CantonLogic();
			this.parroquiaLogic=new ParroquiaLogic();
			this.monedaLogic=new MonedaLogic();
			this.tipocontratoLogic=new TipoContratoLogic();
			this.tipolibretamiliLogic=new TipoLibretaMiliLogic();
			this.tipogrupoformapagoLogic=new TipoGrupoFormaPagoLogic();
			this.bancoLogic=new BancoLogic();
			this.tipocuentabancoglobalLogic=new TipoCuentaBancoGlobalLogic();
			this.tiposangreLogic=new TipoSangreLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				datogeneralempleadoImplementable= (DatoGeneralEmpleadoImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DatoGeneralEmpleadoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				datogeneralempleadoImplementableHome= (DatoGeneralEmpleadoImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DatoGeneralEmpleadoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.datogeneralempleados= new ArrayList<DatoGeneralEmpleado>();
			this.datogeneralempleadosEliminados= new ArrayList<DatoGeneralEmpleado>();
						
			this.isEsNuevoDatoGeneralEmpleado=false;
			this.esParaAccionDesdeFormularioDatoGeneralEmpleado=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			
			//INICIALIZAR LISTAS FK
			
			this.empleadosForeignKey=new ArrayList<Empleado>() ;
			this.numeropatronalsForeignKey=new ArrayList<NumeroPatronal>() ;
			this.tipoafiliacionsForeignKey=new ArrayList<TipoAfiliacion>() ;
			this.paissForeignKey=new ArrayList<Pais>() ;
			this.provinciasForeignKey=new ArrayList<Provincia>() ;
			this.cantonsForeignKey=new ArrayList<Canton>() ;
			this.parroquiasForeignKey=new ArrayList<Parroquia>() ;
			this.monedasForeignKey=new ArrayList<Moneda>() ;
			this.tipocontratosForeignKey=new ArrayList<TipoContrato>() ;
			this.tipolibretamilisForeignKey=new ArrayList<TipoLibretaMili>() ;
			this.tipogrupoformapagosForeignKey=new ArrayList<TipoGrupoFormaPago>() ;
			this.bancosForeignKey=new ArrayList<Banco>() ;
			this.tipocuentabancoglobalsForeignKey=new ArrayList<TipoCuentaBancoGlobal>() ;
			this.tiposangresForeignKey=new ArrayList<TipoSangre>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyDatoGeneralEmpleado(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroDatoGeneralEmpleado();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=DatoGeneralEmpleadoConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesDatoGeneralEmpleado("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingDatoGeneralEmpleado(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioDatoGeneralEmpleado();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioDatoGeneralEmpleado();
			}
			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasDatoGeneralEmpleado.getTabCount(); i++) {
					this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessDatoGeneralEmpleado(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga DatoGeneralEmpleado: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectDatoGeneralEmpleado() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesDatoGeneralEmpleado")) {
				iIndex=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTabbedPaneRelacionesDatoGeneralEmpleado.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTabbedPaneRelacionesDatoGeneralEmpleado.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessDatoGeneralEmpleado();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyDatoGeneralEmpleado(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyDatoGeneralEmpleado(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyDatoGeneralEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyDatoGeneralEmpleadoListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyDatoGeneralEmpleado();
		
		this.cargarCombosFrameForeignKeyDatoGeneralEmpleado();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyDatoGeneralEmpleado();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyDatoGeneralEmpleado();
		}
	}
	
	

	public void cargarCombosForeignKeyEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpleado(this.empleadosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyNumeroPatronal(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyNumeroPatronalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyNumeroPatronal();
				this.cargarCombosFrameNumeroPatronalsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaNumeroPatronal(this.numeropatronalsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoAfiliacion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoAfiliacionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoAfiliacion();
				this.cargarCombosFrameTipoAfiliacionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoAfiliacion(this.tipoafiliacionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPais(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaPais(this.paissForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProvincia(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyProvinciaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyProvincia();
				this.cargarCombosFrameProvinciasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaProvincia(this.provinciasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCanton(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCantonListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCanton();
				this.cargarCombosFrameCantonsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCanton(this.cantonsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyParroquia(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyParroquiaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyParroquia();
				this.cargarCombosFrameParroquiasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaParroquia(this.parroquiasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoContrato(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoContratoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoContrato();
				this.cargarCombosFrameTipoContratosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoContrato(this.tipocontratosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoLibretaMili(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoLibretaMiliListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoLibretaMili();
				this.cargarCombosFrameTipoLibretaMilisForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoLibretaMili(this.tipolibretamilisForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoGrupoFormaPago(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoGrupoFormaPagoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoGrupoFormaPago();
				this.cargarCombosFrameTipoGrupoFormaPagosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoGrupoFormaPago(this.tipogrupoformapagosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBanco(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBanco();
				this.cargarCombosFrameBancosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaBanco(this.bancosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCuentaBancoGlobal(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoCuentaBancoGlobalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal();
				this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoCuentaBancoGlobal(this.tipocuentabancoglobalsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoSangre(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoSangreListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoSangre();
				this.cargarCombosFrameTipoSangresForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoSangre(this.tiposangresForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoDatoGeneralEmpleadoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.datogeneralempleadoSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			
			
			if(jTableDatosDatoGeneralEmpleado.getRowCount()>=1) {
				jTableDatosDatoGeneralEmpleado.removeRowSelectionInterval(0, jTableDatosDatoGeneralEmpleado.getRowCount()-1);						
			}
			
			this.isEsNuevoDatoGeneralEmpleado=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoDatoGeneralEmpleado(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesDatoGeneralEmpleado(true);			
			//this.datogeneralempleado=new DatoGeneralEmpleado();
			//this.datogeneralempleado.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDatoGeneralEmpleado(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDatoGeneralEmpleado() ;
			
			if(DatoGeneralEmpleadoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDatoGeneralEmpleado(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.datogeneralempleado);	
			this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);				
			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			
			if(this.datogeneralempleadoSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar DatoGeneralEmpleado: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarDatoGeneralEmpleadoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosDatoGeneralEmpleado.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosDatoGeneralEmpleado.getSelectedRows().length;			
			}
			
			datogeneralempleadosSeleccionados=this.getDatoGeneralEmpleadosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoDatoGeneralEmpleado--;			
				//DatoGeneralEmpleado datogeneralempleadoAux= new DatoGeneralEmpleado();			
				//datogeneralempleadoAux.setId(this.iIdNuevoDatoGeneralEmpleado);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//DatoGeneralEmpleado datogeneralempleadoOrigen=new DatoGeneralEmpleado();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(DatoGeneralEmpleado datogeneralempleadoOrigen : datogeneralempleadosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							datogeneralempleadoOrigen =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							datogeneralempleadoOrigen =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaDatoGeneralEmpleado();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.datogeneralempleado.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosDatoGeneralEmpleado(datogeneralempleadoOrigen,this.datogeneralempleado,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.datogeneralempleadoLogic.getDatoGeneralEmpleados().add(this.datogeneralempleadoAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.datogeneralempleados.add(this.datogeneralempleadoAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
				
				this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(this.getIndiceNuevoDatoGeneralEmpleado(), this.getIndiceNuevoDatoGeneralEmpleado());
				
				int iLastRow =  this.jTableDatosDatoGeneralEmpleado.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDatoGeneralEmpleado.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDatoGeneralEmpleado.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();									
		
			DatoGeneralEmpleado datogeneralempleadoOrigen=new DatoGeneralEmpleado();
			DatoGeneralEmpleado datogeneralempleadoDestino=new DatoGeneralEmpleado();
				
			datogeneralempleadosSeleccionados=this.getDatoGeneralEmpleadosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosDatoGeneralEmpleado.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || datogeneralempleadosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosDatoGeneralEmpleado.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoOrigen =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						datogeneralempleadoOrigen =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						datogeneralempleadoDestino =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						datogeneralempleadoDestino =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				datogeneralempleadoOrigen =datogeneralempleadosSeleccionados.get(0);
				datogeneralempleadoDestino =datogeneralempleadosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosDatoGeneralEmpleado(datogeneralempleadoOrigen,datogeneralempleadoDestino,true,false);
				
				datogeneralempleadoDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(datogeneralempleadoDestino,datogeneralempleadoLogic.getDatoGeneralEmpleados());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(datogeneralempleadoDestino,datogeneralempleados);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
				
				//this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(this.getIndiceNuevoDatoGeneralEmpleado(), this.getIndiceNuevoDatoGeneralEmpleado());
				
				int iLastRow =  this.jTableDatosDatoGeneralEmpleado.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDatoGeneralEmpleado.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDatoGeneralEmpleado.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesDatoGeneralEmpleado.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesDatoGeneralEmpleado.setVisible(!isVisible);
			this.jPanelPaginacionDatoGeneralEmpleado.setVisible(!isVisible);
			this.jPanelAccionesDatoGeneralEmpleado.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameDatoGeneralEmpleado();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoDatoGeneralEmpleado();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionDatoGeneralEmpleado();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByDatoGeneralEmpleado();
			
			this.abrirFrameOrderByDatoGeneralEmpleado();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByDatoGeneralEmpleado();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleDatoGeneralEmpleado(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormDatoGeneralEmpleado);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.isMaximum()) {
					this.jInternalFrameDetalleFormDatoGeneralEmpleado.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormDatoGeneralEmpleado.setSize(this.jInternalFrameDetalleFormDatoGeneralEmpleado.iWidthFormulario,this.jInternalFrameDetalleFormDatoGeneralEmpleado.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormDatoGeneralEmpleado.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormDatoGeneralEmpleado.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormDatoGeneralEmpleado.isMaximum()) {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jContentPaneDetalleDatoGeneralEmpleado.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTabbedPaneRelacionesDatoGeneralEmpleado.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jContentPaneDetalleDatoGeneralEmpleado.getWidth(),DatoGeneralEmpleadoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTabbedPaneRelacionesDatoGeneralEmpleado.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jContentPaneDetalleDatoGeneralEmpleado.getWidth(),DatoGeneralEmpleadoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTabbedPaneRelacionesDatoGeneralEmpleado.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jContentPaneDetalleDatoGeneralEmpleado.getWidth(),DatoGeneralEmpleadoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormDatoGeneralEmpleado.setVisible(true);
	        this.jInternalFrameDetalleFormDatoGeneralEmpleado.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByDatoGeneralEmpleado() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByDatoGeneralEmpleado==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByDatoGeneralEmpleado=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDatoGeneralEmpleado,false,this);
				} else {
					this.jInternalFrameOrderByDatoGeneralEmpleado=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDatoGeneralEmpleado,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByDatoGeneralEmpleado);
				this.jInternalFrameOrderByDatoGeneralEmpleado.setVisible(false);
				this.jInternalFrameOrderByDatoGeneralEmpleado.setSelected(false);
				
				this.jInternalFrameOrderByDatoGeneralEmpleado.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDatoGeneralEmpleado"));
				
				this.inicializarActualizarBindingTablaOrderByDatoGeneralEmpleado();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionDatoGeneralEmpleado() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionDatoGeneralEmpleado==null) {
				
				this.jInternalFrameImportacionDatoGeneralEmpleado=new ImportacionJInternalFrame(DatoGeneralEmpleadoConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDatoGeneralEmpleado);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionDatoGeneralEmpleado);
				this.jInternalFrameImportacionDatoGeneralEmpleado.setVisible(false);
				this.jInternalFrameImportacionDatoGeneralEmpleado.setSelected(false);


				this.jInternalFrameImportacionDatoGeneralEmpleado.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDatoGeneralEmpleado"));
				this.jInternalFrameImportacionDatoGeneralEmpleado.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDatoGeneralEmpleado"));
				this.jInternalFrameImportacionDatoGeneralEmpleado.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDatoGeneralEmpleado"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoDatoGeneralEmpleado() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado==null) {
				this.jInternalFrameReporteDinamicoDatoGeneralEmpleado=new ReporteDinamicoJInternalFrame(DatoGeneralEmpleadoConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDatoGeneralEmpleado);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado);
				this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.setVisible(false);
				this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDatoGeneralEmpleado"));
				this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDatoGeneralEmpleado"));
				this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDatoGeneralEmpleado"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDatoGeneralEmpleado();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleDatoGeneralEmpleado() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormDatoGeneralEmpleado);
			
	       	this.jInternalFrameDetalleFormDatoGeneralEmpleado.setVisible(false);
	        this.jInternalFrameDetalleFormDatoGeneralEmpleado.setSelected(false);
			
			//this.jInternalFrameDetalleFormDatoGeneralEmpleado.dispose();
			//this.jInternalFrameDetalleFormDatoGeneralEmpleado=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoDatoGeneralEmpleado() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.setVisible(true);
	        this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionDatoGeneralEmpleado() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionDatoGeneralEmpleado.setVisible(true);
	        this.jInternalFrameImportacionDatoGeneralEmpleado.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByDatoGeneralEmpleado() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByDatoGeneralEmpleado.setVisible(true);
	        this.jInternalFrameOrderByDatoGeneralEmpleado.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByDatoGeneralEmpleado() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByDatoGeneralEmpleado.setVisible(false);
	        this.jInternalFrameOrderByDatoGeneralEmpleado.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoDatoGeneralEmpleado() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.setVisible(false);
	        this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionDatoGeneralEmpleado() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionDatoGeneralEmpleado.setVisible(false);
	        this.jInternalFrameImportacionDatoGeneralEmpleado.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarDatoGeneralEmpleado(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarDatoGeneralEmpleado(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesDatoGeneralEmpleado(true);
			//this.isEsNuevoDatoGeneralEmpleado=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesDatoGeneralEmpleado("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDatoGeneralEmpleado(false) ;
			
			if(datogeneralempleadoSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(DatoGeneralEmpleadoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDatoGeneralEmpleado(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDatoGeneralEmpleado(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaDatoGeneralEmpleadoActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarDatoGeneralEmpleado(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesDatoGeneralEmpleado(true);
			//this.isEsNuevoDatoGeneralEmpleado=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.datogeneralempleado.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesDatoGeneralEmpleado("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesDatoGeneralEmpleado(false) ;
			
			if(DatoGeneralEmpleadoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDatoGeneralEmpleado(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDatoGeneralEmpleado(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
		} catch(Exception e) {
			throw e;
		}
	}
	
	
	
	public void recargarComboTablaEmpleado(List<Empleado> empleadosForeignKey)throws Exception{
		TableColumn tableColumnEmpleado=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_ID));
		TableCellEditor tableCellEditorEmpleado =tableColumnEmpleado.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleado;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaNumeroPatronal(List<NumeroPatronal> numeropatronalsForeignKey)throws Exception{
		TableColumn tableColumnNumeroPatronal=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL));
		TableCellEditor tableCellEditorNumeroPatronal =tableColumnNumeroPatronal.getCellEditor();

		NumeroPatronalTableCell numeropatronalTableCellFk=(NumeroPatronalTableCell)tableCellEditorNumeroPatronal;

		if(numeropatronalTableCellFk!=null) {
			numeropatronalTableCellFk.setnumeropatronalsForeignKey(numeropatronalsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//numeropatronalTableCellFk.setRowActual(intSelectedRow);
			//numeropatronalTableCellFk.setnumeropatronalsForeignKeyActual(numeropatronalsForeignKey);
		//}


		if(numeropatronalTableCellFk!=null) {
			numeropatronalTableCellFk.RecargarNumeroPatronalsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoAfiliacion(List<TipoAfiliacion> tipoafiliacionsForeignKey)throws Exception{
		TableColumn tableColumnTipoAfiliacion=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION));
		TableCellEditor tableCellEditorTipoAfiliacion =tableColumnTipoAfiliacion.getCellEditor();

		TipoAfiliacionTableCell tipoafiliacionTableCellFk=(TipoAfiliacionTableCell)tableCellEditorTipoAfiliacion;

		if(tipoafiliacionTableCellFk!=null) {
			tipoafiliacionTableCellFk.settipoafiliacionsForeignKey(tipoafiliacionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoafiliacionTableCellFk.setRowActual(intSelectedRow);
			//tipoafiliacionTableCellFk.settipoafiliacionsForeignKeyActual(tipoafiliacionsForeignKey);
		//}


		if(tipoafiliacionTableCellFk!=null) {
			tipoafiliacionTableCellFk.RecargarTipoAfiliacionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaPais(List<Pais> paissForeignKey)throws Exception{
		TableColumn tableColumnPais=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS));
		TableCellEditor tableCellEditorPais =tableColumnPais.getCellEditor();

		PaisTableCell paisTableCellFk=(PaisTableCell)tableCellEditorPais;

		if(paisTableCellFk!=null) {
			paisTableCellFk.setpaissForeignKey(paissForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//paisTableCellFk.setRowActual(intSelectedRow);
			//paisTableCellFk.setpaissForeignKeyActual(paissForeignKey);
		//}


		if(paisTableCellFk!=null) {
			paisTableCellFk.RecargarPaissForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaProvincia(List<Provincia> provinciasForeignKey)throws Exception{
		TableColumn tableColumnProvincia=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA));
		TableCellEditor tableCellEditorProvincia =tableColumnProvincia.getCellEditor();

		ProvinciaTableCell provinciaTableCellFk=(ProvinciaTableCell)tableCellEditorProvincia;

		if(provinciaTableCellFk!=null) {
			provinciaTableCellFk.setprovinciasForeignKey(provinciasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//provinciaTableCellFk.setRowActual(intSelectedRow);
			//provinciaTableCellFk.setprovinciasForeignKeyActual(provinciasForeignKey);
		//}


		if(provinciaTableCellFk!=null) {
			provinciaTableCellFk.RecargarProvinciasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCanton(List<Canton> cantonsForeignKey)throws Exception{
		TableColumn tableColumnCanton=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON));
		TableCellEditor tableCellEditorCanton =tableColumnCanton.getCellEditor();

		CantonTableCell cantonTableCellFk=(CantonTableCell)tableCellEditorCanton;

		if(cantonTableCellFk!=null) {
			cantonTableCellFk.setcantonsForeignKey(cantonsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cantonTableCellFk.setRowActual(intSelectedRow);
			//cantonTableCellFk.setcantonsForeignKeyActual(cantonsForeignKey);
		//}


		if(cantonTableCellFk!=null) {
			cantonTableCellFk.RecargarCantonsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaParroquia(List<Parroquia> parroquiasForeignKey)throws Exception{
		TableColumn tableColumnParroquia=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA));
		TableCellEditor tableCellEditorParroquia =tableColumnParroquia.getCellEditor();

		ParroquiaTableCell parroquiaTableCellFk=(ParroquiaTableCell)tableCellEditorParroquia;

		if(parroquiaTableCellFk!=null) {
			parroquiaTableCellFk.setparroquiasForeignKey(parroquiasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//parroquiaTableCellFk.setRowActual(intSelectedRow);
			//parroquiaTableCellFk.setparroquiasForeignKeyActual(parroquiasForeignKey);
		//}


		if(parroquiaTableCellFk!=null) {
			parroquiaTableCellFk.RecargarParroquiasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
		
	
	public void recargarComboTablaTipoContrato(List<TipoContrato> tipocontratosForeignKey)throws Exception{
		TableColumn tableColumnTipoContrato=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO));
		TableCellEditor tableCellEditorTipoContrato =tableColumnTipoContrato.getCellEditor();

		TipoContratoTableCell tipocontratoTableCellFk=(TipoContratoTableCell)tableCellEditorTipoContrato;

		if(tipocontratoTableCellFk!=null) {
			tipocontratoTableCellFk.settipocontratosForeignKey(tipocontratosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocontratoTableCellFk.setRowActual(intSelectedRow);
			//tipocontratoTableCellFk.settipocontratosForeignKeyActual(tipocontratosForeignKey);
		//}


		if(tipocontratoTableCellFk!=null) {
			tipocontratoTableCellFk.RecargarTipoContratosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoLibretaMili(List<TipoLibretaMili> tipolibretamilisForeignKey)throws Exception{
		TableColumn tableColumnTipoLibretaMili=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI));
		TableCellEditor tableCellEditorTipoLibretaMili =tableColumnTipoLibretaMili.getCellEditor();

		TipoLibretaMiliTableCell tipolibretamiliTableCellFk=(TipoLibretaMiliTableCell)tableCellEditorTipoLibretaMili;

		if(tipolibretamiliTableCellFk!=null) {
			tipolibretamiliTableCellFk.settipolibretamilisForeignKey(tipolibretamilisForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipolibretamiliTableCellFk.setRowActual(intSelectedRow);
			//tipolibretamiliTableCellFk.settipolibretamilisForeignKeyActual(tipolibretamilisForeignKey);
		//}


		if(tipolibretamiliTableCellFk!=null) {
			tipolibretamiliTableCellFk.RecargarTipoLibretaMilisForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoGrupoFormaPago(List<TipoGrupoFormaPago> tipogrupoformapagosForeignKey)throws Exception{
		TableColumn tableColumnTipoGrupoFormaPago=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO));
		TableCellEditor tableCellEditorTipoGrupoFormaPago =tableColumnTipoGrupoFormaPago.getCellEditor();

		TipoGrupoFormaPagoTableCell tipogrupoformapagoTableCellFk=(TipoGrupoFormaPagoTableCell)tableCellEditorTipoGrupoFormaPago;

		if(tipogrupoformapagoTableCellFk!=null) {
			tipogrupoformapagoTableCellFk.settipogrupoformapagosForeignKey(tipogrupoformapagosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipogrupoformapagoTableCellFk.setRowActual(intSelectedRow);
			//tipogrupoformapagoTableCellFk.settipogrupoformapagosForeignKeyActual(tipogrupoformapagosForeignKey);
		//}


		if(tipogrupoformapagoTableCellFk!=null) {
			tipogrupoformapagoTableCellFk.RecargarTipoGrupoFormaPagosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaBanco(List<Banco> bancosForeignKey)throws Exception{
		TableColumn tableColumnBanco=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO));
		TableCellEditor tableCellEditorBanco =tableColumnBanco.getCellEditor();

		BancoTableCell bancoTableCellFk=(BancoTableCell)tableCellEditorBanco;

		if(bancoTableCellFk!=null) {
			bancoTableCellFk.setbancosForeignKey(bancosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bancoTableCellFk.setRowActual(intSelectedRow);
			//bancoTableCellFk.setbancosForeignKeyActual(bancosForeignKey);
		//}


		if(bancoTableCellFk!=null) {
			bancoTableCellFk.RecargarBancosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoCuentaBancoGlobal(List<TipoCuentaBancoGlobal> tipocuentabancoglobalsForeignKey)throws Exception{
		TableColumn tableColumnTipoCuentaBancoGlobal=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL));
		TableCellEditor tableCellEditorTipoCuentaBancoGlobal =tableColumnTipoCuentaBancoGlobal.getCellEditor();

		TipoCuentaBancoGlobalTableCell tipocuentabancoglobalTableCellFk=(TipoCuentaBancoGlobalTableCell)tableCellEditorTipoCuentaBancoGlobal;

		if(tipocuentabancoglobalTableCellFk!=null) {
			tipocuentabancoglobalTableCellFk.settipocuentabancoglobalsForeignKey(tipocuentabancoglobalsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocuentabancoglobalTableCellFk.setRowActual(intSelectedRow);
			//tipocuentabancoglobalTableCellFk.settipocuentabancoglobalsForeignKeyActual(tipocuentabancoglobalsForeignKey);
		//}


		if(tipocuentabancoglobalTableCellFk!=null) {
			tipocuentabancoglobalTableCellFk.RecargarTipoCuentaBancoGlobalsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoSangre(List<TipoSangre> tiposangresForeignKey)throws Exception{
		TableColumn tableColumnTipoSangre=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE));
		TableCellEditor tableCellEditorTipoSangre =tableColumnTipoSangre.getCellEditor();

		TipoSangreTableCell tiposangreTableCellFk=(TipoSangreTableCell)tableCellEditorTipoSangre;

		if(tiposangreTableCellFk!=null) {
			tiposangreTableCellFk.settiposangresForeignKey(tiposangresForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiposangreTableCellFk.setRowActual(intSelectedRow);
			//tiposangreTableCellFk.settiposangresForeignKeyActual(tiposangresForeignKey);
		//}


		if(tiposangreTableCellFk!=null) {
			tiposangreTableCellFk.RecargarTipoSangresForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	
	public void jButtonActualizarDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesDatoGeneralEmpleado(false);
			
			//if(!this.isEsNuevoDatoGeneralEmpleado) {								
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				
				//OTRA VEZ SE EJECUTA ESTO
				//PARA RELACION DE UNO A UNO
				if(this.isEsNuevoDatoGeneralEmpleado) {
					this.datogeneralempleado.setId(this.id_empleadoFK_IdEmpleado);
				}
			}
			
			if(this.permiteMantenimiento(this.datogeneralempleado)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoDatoGeneralEmpleado=true;
					this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
					this.isEsNuevoDatoGeneralEmpleado=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoDatoGeneralEmpleado=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoDatoGeneralEmpleado=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDatoGeneralEmpleado(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDatoGeneralEmpleado(false);
				
				this.habilitarDeshabilitarControlesDatoGeneralEmpleado(false);
			
												
				
				if(DatoGeneralEmpleadoJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleDatoGeneralEmpleado();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,datogeneralempleadoSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualDatoGeneralEmpleado(this.datogeneralempleado,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,datogeneralempleadoSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.datogeneralempleado.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(DatoGeneralEmpleado.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DatoGeneralEmpleado.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				this.datogeneralempleado.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				this.datogeneralempleado.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.datogeneralempleado)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((DatoGeneralEmpleadoModel) this.jTableDatosDatoGeneralEmpleado.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoDatoGeneralEmpleado=true;
				this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
				this.isEsNuevoDatoGeneralEmpleado=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDatoGeneralEmpleado(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDatoGeneralEmpleado(false);
				
				this.habilitarDeshabilitarControlesDatoGeneralEmpleado(false);
				
				
				
				if(DatoGeneralEmpleadoJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleDatoGeneralEmpleado();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosDatoGeneralEmpleado.getRowCount()>=1) {
				jTableDatosDatoGeneralEmpleado.removeRowSelectionInterval(0, jTableDatosDatoGeneralEmpleado.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesDatoGeneralEmpleado(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDatoGeneralEmpleado(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDatoGeneralEmpleado(false) ;
			
			this.isEsNuevoDatoGeneralEmpleado=false;
			
			if(DatoGeneralEmpleadoJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleDatoGeneralEmpleado();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				
				//SI ES MANUAL
				if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualDatoGeneralEmpleado();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoDatoGeneralEmpleado--;			
			//DatoGeneralEmpleado datogeneralempleadoAux= new DatoGeneralEmpleado();			
			//datogeneralempleadoAux.setId(this.iIdNuevoDatoGeneralEmpleado);
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaDatoGeneralEmpleado();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
			
			this.datogeneralempleado.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.datogeneralempleadoLogic.getDatoGeneralEmpleados().add(this.datogeneralempleadoAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.datogeneralempleados.add(this.datogeneralempleadoAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
			
			this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(this.getIndiceNuevoDatoGeneralEmpleado(), this.getIndiceNuevoDatoGeneralEmpleado());
			
			int iLastRow =  this.jTableDatosDatoGeneralEmpleado.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosDatoGeneralEmpleado.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosDatoGeneralEmpleado.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDatoGeneralEmpleado(false);
			
			//SI ES MANUAL
			if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDatoGeneralEmpleado();
			}
			
			//this.abrirFrameTreeDatoGeneralEmpleado();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Dato General EmpleadoS ?", "MANTENIMIENTO DE Dato General Empleado", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionDatoGeneralEmpleado.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralDatoGeneralEmpleado();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.datogeneralempleadoReturnGeneral=datogeneralempleadoLogic.procesarImportacionDatoGeneralEmpleadosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.datogeneralempleadoParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarDatoGeneralEmpleadoReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionDatoGeneralEmpleado.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionDatoGeneralEmpleado.setFileImportacion(this.jInternalFrameImportacionDatoGeneralEmpleado.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionDatoGeneralEmpleado.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionDatoGeneralEmpleado.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionDatoGeneralEmpleado.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionDatoGeneralEmpleado.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();		

		datogeneralempleadosSeleccionados=this.getDatoGeneralEmpleadosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("DatoGeneralEmpleadoBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"DatoGeneralEmpleadoBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteDatoGeneralEmpleados("Todos",datogeneralempleadosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Dato General Empleado",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_NumeroPatronal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_NumeroPatronal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_NumeroPatronal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_NumeroPatronal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoAfiliacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoAfiliacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoAfiliacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoAfiliacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rnetIess_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rnetIess_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rnetIess_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rnetIess_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ctorialIess_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ctorialIess_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ctorialIess_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ctorialIess_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Pais_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Pais_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Pais_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Pais_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Provincia_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Provincia_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Provincia_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Provincia_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Canton_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Canton_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Canton_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Canton_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Parroquia_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Parroquia_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Parroquia_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Parroquia_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaNacimiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaNacimiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaNacimiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaNacimiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaFallece_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaFallece_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaFallece_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaFallece_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorEvaluacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorEvaluacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorEvaluacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorEvaluacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroHoras_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroHoras_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroHoras_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroHoras_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorHora_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorHora_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorHora_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorHora_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDMONEDA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Moneda_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Moneda_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Moneda_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Moneda_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroContrato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroContrato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroContrato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroContrato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoContrato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoContrato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoContrato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoContrato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lor1_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lor1_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lor1_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lor1_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lor2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lor2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lor2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lor2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lor3_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lor3_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lor3_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lor3_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lor4_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lor4_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lor4_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lor4_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lor5_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lor5_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lor5_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lor5_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lor6_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lor6_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lor6_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lor6_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nAportaSeguroSocial_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nAportaSeguroSocial_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nAportaSeguroSocial_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nAportaSeguroSocial_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nRecibeHorasExtras_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nRecibeHorasExtras_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nRecibeHorasExtras_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nRecibeHorasExtras_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nDescuentoImpuestos_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nDescuentoImpuestos_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nDescuentoImpuestos_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nDescuentoImpuestos_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nsionAlimenticia_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nsionAlimenticia_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nsionAlimenticia_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nsionAlimenticia_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nPagoPorHoras_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nPagoPorHoras_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nPagoPorHoras_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nPagoPorHoras_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nAnticipo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nAnticipo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nAnticipo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nAnticipo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoLibretaMili_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoLibretaMili_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoLibretaMili_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoLibretaMili_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bretaMilitar_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bretaMilitar_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bretaMilitar_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bretaMilitar_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoGrupoFormaPago_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoGrupoFormaPago_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoGrupoFormaPago_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoGrupoFormaPago_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Banco_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Banco_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Banco_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Banco_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoCuentaBancoGlobal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoCuentaBancoGlobal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoCuentaBancoGlobal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoCuentaBancoGlobal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroCuenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroCuenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroCuenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroCuenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoSangre_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoSangre_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoSangre_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoSangre_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL:
					sNombreCampoCategoria="id_numero_patronal";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION:
					sNombreCampoCategoria="id_tipo_afiliacion";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS:
					sNombreCampoCategoria="carnet_iess";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS:
					sNombreCampoCategoria="sectorial_iess";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoria="id_pais";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA:
					sNombreCampoCategoria="id_provincia";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON:
					sNombreCampoCategoria="id_canton";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA:
					sNombreCampoCategoria="id_parroquia";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO:
					sNombreCampoCategoria="fecha_nacimiento";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE:
					sNombreCampoCategoria="fecha_fallece";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION:
					sNombreCampoCategoria="valor_evaluacion";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS:
					sNombreCampoCategoria="numero_horas";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA:
					sNombreCampoCategoria="valor_hora";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO:
					sNombreCampoCategoria="salario";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoria="id_moneda";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO:
					sNombreCampoCategoria="numero_contrato";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO:
					sNombreCampoCategoria="id_tipo_contrato";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1:
					sNombreCampoCategoria="valor1";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2:
					sNombreCampoCategoria="valor2";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3:
					sNombreCampoCategoria="valor3";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4:
					sNombreCampoCategoria="valor4";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5:
					sNombreCampoCategoria="valor5";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6:
					sNombreCampoCategoria="valor6";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL:
					sNombreCampoCategoria="con_aporta_seguro_social";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS:
					sNombreCampoCategoria="con_recibe_horas_extras";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS:
					sNombreCampoCategoria="con_descuento_impuestos";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA:
					sNombreCampoCategoria="pension_alimenticia";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS:
					sNombreCampoCategoria="con_pago_por_horas";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO:
					sNombreCampoCategoria="con_anticipo";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI:
					sNombreCampoCategoria="id_tipo_libreta_mili";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR:
					sNombreCampoCategoria="libreta_militar";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO:
					sNombreCampoCategoria="id_tipo_grupo_forma_pago";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO:
					sNombreCampoCategoria="id_banco";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					sNombreCampoCategoria="id_tipo_cuenta_banco_global";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA:
					sNombreCampoCategoria="numero_cuenta";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE:
					sNombreCampoCategoria="id_tipo_sangre";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL:
					sNombreCampoCategoriaValor="id_numero_patronal";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION:
					sNombreCampoCategoriaValor="id_tipo_afiliacion";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS:
					sNombreCampoCategoriaValor="carnet_iess";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS:
					sNombreCampoCategoriaValor="sectorial_iess";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoriaValor="id_pais";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA:
					sNombreCampoCategoriaValor="id_provincia";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON:
					sNombreCampoCategoriaValor="id_canton";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA:
					sNombreCampoCategoriaValor="id_parroquia";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO:
					sNombreCampoCategoriaValor="fecha_nacimiento";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE:
					sNombreCampoCategoriaValor="fecha_fallece";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION:
					sNombreCampoCategoriaValor="valor_evaluacion";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS:
					sNombreCampoCategoriaValor="numero_horas";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA:
					sNombreCampoCategoriaValor="valor_hora";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO:
					sNombreCampoCategoriaValor="salario";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoriaValor="id_moneda";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO:
					sNombreCampoCategoriaValor="numero_contrato";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO:
					sNombreCampoCategoriaValor="id_tipo_contrato";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1:
					sNombreCampoCategoriaValor="valor1";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2:
					sNombreCampoCategoriaValor="valor2";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3:
					sNombreCampoCategoriaValor="valor3";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4:
					sNombreCampoCategoriaValor="valor4";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5:
					sNombreCampoCategoriaValor="valor5";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6:
					sNombreCampoCategoriaValor="valor6";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL:
					sNombreCampoCategoriaValor="con_aporta_seguro_social";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS:
					sNombreCampoCategoriaValor="con_recibe_horas_extras";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS:
					sNombreCampoCategoriaValor="con_descuento_impuestos";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA:
					sNombreCampoCategoriaValor="pension_alimenticia";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS:
					sNombreCampoCategoriaValor="con_pago_por_horas";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO:
					sNombreCampoCategoriaValor="con_anticipo";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI:
					sNombreCampoCategoriaValor="id_tipo_libreta_mili";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR:
					sNombreCampoCategoriaValor="libreta_militar";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO:
					sNombreCampoCategoriaValor="id_tipo_grupo_forma_pago";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO:
					sNombreCampoCategoriaValor="id_banco";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					sNombreCampoCategoriaValor="id_tipo_cuenta_banco_global";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA:
					sNombreCampoCategoriaValor="numero_cuenta";
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE:
					sNombreCampoCategoriaValor="id_tipo_sangre";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Patronal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_numero_patronal");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Afiliacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_afiliacion");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Carnet Iess",sNombreCampoCategoria,sNombreCampoCategoriaValor,"carnet_iess");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sectorial Iess",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sectorial_iess");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Pais",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_pais");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Provincia",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_provincia");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Canton",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_canton");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Parroquia",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_parroquia");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Nacimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_nacimiento");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Fallece",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_fallece");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor Evaluacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_evaluacion");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Horas",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_horas");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor Hora",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_hora");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Salario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"salario");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDMONEDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Moneda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_moneda");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Contrato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_contrato");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Contrato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_contrato");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor1",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor1");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor2");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor3",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor3");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor4",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor4");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor5",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor5");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor6",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor6");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Aporta Seguro Social",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_aporta_seguro_social");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Recibe Horas Extras",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_recibe_horas_extras");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Descuento Impuestos",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_descuento_impuestos");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Pension Alimenticia",sNombreCampoCategoria,sNombreCampoCategoriaValor,"pension_alimenticia");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Pago Por Horas",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_pago_por_horas");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Con Anticipo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_anticipo");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Libreta Mili",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_libreta_mili");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Libreta Militar",sNombreCampoCategoria,sNombreCampoCategoriaValor,"libreta_militar");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Grupo Forma Pago",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_grupo_forma_pago");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Banco",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_banco");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Cuenta Banco Global",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_cuenta_banco_global");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Cuenta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_cuenta");
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Sangre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_sangre");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();		
		
		datogeneralempleadosSeleccionados=this.getDatoGeneralEmpleadosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"datogeneralempleado";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("DatoGeneralEmpleados");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getnumeropatronal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.gettipoafiliacion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getcarnet_iess());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getsectorial_iess());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getpais_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getprovincia_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getcanton_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getparroquia_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getfecha_nacimiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getfecha_fallece());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getvalor_evaluacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getnumero_horas());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getvalor_hora());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getsalario());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDMONEDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDMONEDA);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getmoneda_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getnumero_contrato());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.gettipocontrato_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getvalor1());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getvalor2());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getvalor3());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getvalor4());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getvalor5());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getvalor6());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getcon_aporta_seguro_social());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getcon_recibe_horas_extras());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getcon_descuento_impuestos());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getpension_alimenticia());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getcon_pago_por_horas());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getcon_anticipo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.gettipolibretamili_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getlibreta_militar());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.gettipogrupoformapago_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getbanco_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.gettipocuentabancoglobal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.getnumero_cuenta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE);
					iRow++;

					for(DatoGeneralEmpleado datogeneralempleado:datogeneralempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(datogeneralempleado.gettiposangre_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelDatoGeneralEmpleado(row);				
			//	iRow++;
			//}				
			
			//for(DatoGeneralEmpleado datogeneralempleadoAux:datogeneralempleadosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelDatoGeneralEmpleado(datogeneralempleadoAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Dato General Empleado",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDatoGeneralEmpleado(false);
			
			//SI ES MANUAL
			if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDatoGeneralEmpleado();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDatoGeneralEmpleado(false);
			
			//SI ES MANUAL
			if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDatoGeneralEmpleado();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDatoGeneralEmpleado(false);
			
			//SI ES MANUAL
			if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDatoGeneralEmpleado();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaDatoGeneralEmpleado() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosDatoGeneralEmpleado.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosDatoGeneralEmpleado.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosDatoGeneralEmpleado.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosDatoGeneralEmpleado.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosDatoGeneralEmpleado.setMinimumSize(dimensionMinimum);
		this.jTableDatosDatoGeneralEmpleado.setMaximumSize(dimensionMaximum);
		this.jTableDatosDatoGeneralEmpleado.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingDatoGeneralEmpleado(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingDatoGeneralEmpleado(esInicializar,true);
	}
	
	public void inicializarActualizarBindingDatoGeneralEmpleado(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaDatoGeneralEmpleado(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesDatoGeneralEmpleado(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasDatoGeneralEmpleado(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDatoGeneralEmpleado(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesDatoGeneralEmpleado(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualDatoGeneralEmpleado() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaDatoGeneralEmpleado();
		
		this.inicializarActualizarBindingBotonesManualDatoGeneralEmpleado(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualDatoGeneralEmpleado();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDatoGeneralEmpleado() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualDatoGeneralEmpleado(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualDatoGeneralEmpleado(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosDatoGeneralEmpleado.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosDatoGeneralEmpleado.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteDatoGeneralEmpleado.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxPostAccionNuevoDatoGeneralEmpleado.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxPostAccionSinCerrarDatoGeneralEmpleado.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxPostAccionSinMensajeDatoGeneralEmpleado.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosDatoGeneralEmpleado.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosDatoGeneralEmpleado.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteDatoGeneralEmpleado.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxPostAccionNuevoDatoGeneralEmpleado.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxPostAccionSinCerrarDatoGeneralEmpleado.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxPostAccionSinMensajeDatoGeneralEmpleado.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionDatoGeneralEmpleado.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionDatoGeneralEmpleado.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesDatoGeneralEmpleado.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesDatoGeneralEmpleado.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesDatoGeneralEmpleado.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarDatoGeneralEmpleado.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesDatoGeneralEmpleado.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesDatoGeneralEmpleado.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralDatoGeneralEmpleado.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesDatoGeneralEmpleado(Boolean esInicializar) throws Exception {
		try	{	
			if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualDatoGeneralEmpleado(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesDatoGeneralEmpleado() throws Exception {
		try	{
			if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualDatoGeneralEmpleado();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDatoGeneralEmpleado() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualDatoGeneralEmpleado() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesDatoGeneralEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesDatoGeneralEmpleado.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesDatoGeneralEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesDatoGeneralEmpleado.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesDatoGeneralEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesDatoGeneralEmpleado.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionDatoGeneralEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionDatoGeneralEmpleado.addItem(reporte);
			}
			
			
			if(!this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionDatoGeneralEmpleado.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionDatoGeneralEmpleado.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesDatoGeneralEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesDatoGeneralEmpleado.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesDatoGeneralEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesDatoGeneralEmpleado.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarDatoGeneralEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarDatoGeneralEmpleado.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarDatoGeneralEmpleado.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDatoGeneralEmpleado();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDatoGeneralEmpleado() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado!=null) {
				this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado!=null) {
				this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado!=null) {
				
				if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=DatoGeneralEmpleadoConstantesFunciones.getTiposSeleccionarDatoGeneralEmpleado(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=DatoGeneralEmpleadoConstantesFunciones.getTiposSeleccionarDatoGeneralEmpleado(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=DatoGeneralEmpleadoConstantesFunciones.getTiposSeleccionarDatoGeneralEmpleado(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualDatoGeneralEmpleado()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bancoFK_IdBancoDatoGeneralEmpleado.getSelectedItem()!=null){this.id_bancoFK_IdBanco=((Banco)this.jComboBoxid_bancoFK_IdBancoDatoGeneralEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_cantonFK_IdCantonDatoGeneralEmpleado.getSelectedItem()!=null){this.id_cantonFK_IdCanton=((Canton)this.jComboBoxid_cantonFK_IdCantonDatoGeneralEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_empleadoFK_IdEmpleadoDatoGeneralEmpleado.getSelectedItem()!=null){this.id_empleadoFK_IdEmpleado=((Empleado)this.jComboBoxid_empleadoFK_IdEmpleadoDatoGeneralEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_numero_patronalFK_IdNumeroPatronalDatoGeneralEmpleado.getSelectedItem()!=null){this.id_numero_patronalFK_IdNumeroPatronal=((NumeroPatronal)this.jComboBoxid_numero_patronalFK_IdNumeroPatronalDatoGeneralEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_paisFK_IdPaisDatoGeneralEmpleado.getSelectedItem()!=null){this.id_paisFK_IdPais=((Pais)this.jComboBoxid_paisFK_IdPaisDatoGeneralEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_parroquiaFK_IdParroquiaDatoGeneralEmpleado.getSelectedItem()!=null){this.id_parroquiaFK_IdParroquia=((Parroquia)this.jComboBoxid_parroquiaFK_IdParroquiaDatoGeneralEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_provinciaFK_IdProvinciaDatoGeneralEmpleado.getSelectedItem()!=null){this.id_provinciaFK_IdProvincia=((Provincia)this.jComboBoxid_provinciaFK_IdProvinciaDatoGeneralEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_afiliacionFK_IdTipoAfiliacionDatoGeneralEmpleado.getSelectedItem()!=null){this.id_tipo_afiliacionFK_IdTipoAfiliacion=((TipoAfiliacion)this.jComboBoxid_tipo_afiliacionFK_IdTipoAfiliacionDatoGeneralEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_contratoFK_IdTipoContratoDatoGeneralEmpleado.getSelectedItem()!=null){this.id_tipo_contratoFK_IdTipoContrato=((TipoContrato)this.jComboBoxid_tipo_contratoFK_IdTipoContratoDatoGeneralEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado.getSelectedItem()!=null){this.id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal=((TipoCuentaBancoGlobal)this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado.getSelectedItem()!=null){this.id_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago=((TipoGrupoFormaPago)this.jComboBoxid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_libreta_miliFK_IdTipoLibretaMiliDatoGeneralEmpleado.getSelectedItem()!=null){this.id_tipo_libreta_miliFK_IdTipoLibretaMili=((TipoLibretaMili)this.jComboBoxid_tipo_libreta_miliFK_IdTipoLibretaMiliDatoGeneralEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_sangreFK_IdTipoSangreDatoGeneralEmpleado.getSelectedItem()!=null){this.id_tipo_sangreFK_IdTipoSangre=((TipoSangre)this.jComboBoxid_tipo_sangreFK_IdTipoSangreDatoGeneralEmpleado.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasDatoGeneralEmpleado(Boolean esInicializar) throws Exception {				
		if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualDatoGeneralEmpleado();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaDatoGeneralEmpleado() throws Exception {
		this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByDatoGeneralEmpleado() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByDatoGeneralEmpleado.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByDatoGeneralEmpleado.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDatoGeneralEmpleado.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByDatoGeneralEmpleado.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDatoGeneralEmpleado.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosDatoGeneralEmpleadoOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleadoOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByDatoGeneralEmpleado.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDatoGeneralEmpleado.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByDatoGeneralEmpleado.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaDatoGeneralEmpleado(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=datogeneralempleadoLogic.getDatoGeneralEmpleados().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=datogeneralempleados.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosDatoGeneralEmpleado.setModel(new DatoGeneralEmpleadoModel(this.datogeneralempleadoLogic.getDatoGeneralEmpleados(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosDatoGeneralEmpleado.setModel(new DatoGeneralEmpleadoModel(this.datogeneralempleados,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByDatoGeneralEmpleado!=null && this.jInternalFrameOrderByDatoGeneralEmpleado.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByDatoGeneralEmpleado();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+DatoGeneralEmpleadoConstantesFunciones.SCLASSWEBTITULO,datogeneralempleadoConstantesFunciones.resaltarSeleccionarDatoGeneralEmpleado,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+DatoGeneralEmpleadoConstantesFunciones.SCLASSWEBTITULO,datogeneralempleadoConstantesFunciones.resaltarSeleccionarDatoGeneralEmpleado,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_ID));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_empleadoDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_ID,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.datogeneralempleadoConstantesFunciones.resaltarid_empleadoDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarid_empleadoDatoGeneralEmpleado,iSizeTabla,this,true,"id_empleadoDatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarid_empleadoDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarid_empleadoDatoGeneralEmpleado,this,true,"id_empleadoDatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_numero_patronalDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new NumeroPatronalTableCell(this.numeropatronalsForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_numero_patronalDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_numero_patronalDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new NumeroPatronalTableCell(this.numeropatronalsForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_numero_patronalDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_numero_patronalDatoGeneralEmpleado,true,"id_numero_patronalDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_afiliacionDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoAfiliacionTableCell(this.tipoafiliacionsForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_afiliacionDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_tipo_afiliacionDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new TipoAfiliacionTableCell(this.tipoafiliacionsForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_afiliacionDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_tipo_afiliacionDatoGeneralEmpleado,true,"id_tipo_afiliacionDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS));

		if(this.datogeneralempleadoConstantesFunciones.mostrarcarnet_iessDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.datogeneralempleadoConstantesFunciones.resaltarcarnet_iessDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarcarnet_iessDatoGeneralEmpleado,iSizeTabla,this,true,"carnet_iessDatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarcarnet_iessDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarcarnet_iessDatoGeneralEmpleado,this,true,"carnet_iessDatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS));

		if(this.datogeneralempleadoConstantesFunciones.mostrarsectorial_iessDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.datogeneralempleadoConstantesFunciones.resaltarsectorial_iessDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarsectorial_iessDatoGeneralEmpleado,iSizeTabla,this,true,"sectorial_iessDatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarsectorial_iessDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarsectorial_iessDatoGeneralEmpleado,this,true,"sectorial_iessDatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_paisDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new PaisTableCell(this.paissForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_paisDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_paisDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new PaisTableCell(this.paissForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_paisDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_paisDatoGeneralEmpleado,true,"id_paisDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_provinciaDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ProvinciaTableCell(this.provinciasForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_provinciaDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_provinciaDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new ProvinciaTableCell(this.provinciasForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_provinciaDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_provinciaDatoGeneralEmpleado,true,"id_provinciaDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_cantonDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CantonTableCell(this.cantonsForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_cantonDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_cantonDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new CantonTableCell(this.cantonsForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_cantonDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_cantonDatoGeneralEmpleado,true,"id_cantonDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_parroquiaDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ParroquiaTableCell(this.parroquiasForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_parroquiaDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_parroquiaDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new ParroquiaTableCell(this.parroquiasForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_parroquiaDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_parroquiaDatoGeneralEmpleado,true,"id_parroquiaDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO));

		if(this.datogeneralempleadoConstantesFunciones.mostrarfecha_nacimientoDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.datogeneralempleadoConstantesFunciones.resaltarfecha_nacimientoDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarfecha_nacimientoDatoGeneralEmpleado,iSizeTabla,this,true,"fecha_nacimientoDatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarfecha_nacimientoDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarfecha_nacimientoDatoGeneralEmpleado,this,true,"fecha_nacimientoDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE));

		if(this.datogeneralempleadoConstantesFunciones.mostrarfecha_falleceDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.datogeneralempleadoConstantesFunciones.resaltarfecha_falleceDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarfecha_falleceDatoGeneralEmpleado,iSizeTabla,this,true,"fecha_falleceDatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarfecha_falleceDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarfecha_falleceDatoGeneralEmpleado,this,true,"fecha_falleceDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION));

		if(this.datogeneralempleadoConstantesFunciones.mostrarvalor_evaluacionDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor_evaluacionDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor_evaluacionDatoGeneralEmpleado,iSizeTabla,this,true,"valor_evaluacionDatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor_evaluacionDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor_evaluacionDatoGeneralEmpleado,this,true,"valor_evaluacionDatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS));

		if(this.datogeneralempleadoConstantesFunciones.mostrarnumero_horasDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.datogeneralempleadoConstantesFunciones.resaltarnumero_horasDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarnumero_horasDatoGeneralEmpleado,iSizeTabla,this,true,"numero_horasDatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarnumero_horasDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarnumero_horasDatoGeneralEmpleado,this,true,"numero_horasDatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA));

		if(this.datogeneralempleadoConstantesFunciones.mostrarvalor_horaDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor_horaDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor_horaDatoGeneralEmpleado,iSizeTabla,this,true,"valor_horaDatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor_horaDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor_horaDatoGeneralEmpleado,this,true,"valor_horaDatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO));

		if(this.datogeneralempleadoConstantesFunciones.mostrarsalarioDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.datogeneralempleadoConstantesFunciones.resaltarsalarioDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarsalarioDatoGeneralEmpleado,iSizeTabla,this,true,"salarioDatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarsalarioDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarsalarioDatoGeneralEmpleado,this,true,"salarioDatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDMONEDA));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_monedaDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDMONEDA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MonedaTableCell(this.monedasForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_monedaDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_monedaDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new MonedaTableCell(this.monedasForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_monedaDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_monedaDatoGeneralEmpleado,false,"id_monedaDatoGeneralEmpleado","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO));

		if(this.datogeneralempleadoConstantesFunciones.mostrarnumero_contratoDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.datogeneralempleadoConstantesFunciones.resaltarnumero_contratoDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarnumero_contratoDatoGeneralEmpleado,iSizeTabla,this,true,"numero_contratoDatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarnumero_contratoDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarnumero_contratoDatoGeneralEmpleado,this,true,"numero_contratoDatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_contratoDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoContratoTableCell(this.tipocontratosForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_contratoDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_tipo_contratoDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new TipoContratoTableCell(this.tipocontratosForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_contratoDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_tipo_contratoDatoGeneralEmpleado,true,"id_tipo_contratoDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1));

		if(this.datogeneralempleadoConstantesFunciones.mostrarvalor1DatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor1DatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor1DatoGeneralEmpleado,iSizeTabla,this,true,"valor1DatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor1DatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor1DatoGeneralEmpleado,this,true,"valor1DatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2));

		if(this.datogeneralempleadoConstantesFunciones.mostrarvalor2DatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor2DatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor2DatoGeneralEmpleado,iSizeTabla,this,true,"valor2DatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor2DatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor2DatoGeneralEmpleado,this,true,"valor2DatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3));

		if(this.datogeneralempleadoConstantesFunciones.mostrarvalor3DatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor3DatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor3DatoGeneralEmpleado,iSizeTabla,this,true,"valor3DatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor3DatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor3DatoGeneralEmpleado,this,true,"valor3DatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4));

		if(this.datogeneralempleadoConstantesFunciones.mostrarvalor4DatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor4DatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor4DatoGeneralEmpleado,iSizeTabla,this,true,"valor4DatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor4DatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor4DatoGeneralEmpleado,this,true,"valor4DatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5));

		if(this.datogeneralempleadoConstantesFunciones.mostrarvalor5DatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor5DatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor5DatoGeneralEmpleado,iSizeTabla,this,true,"valor5DatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor5DatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor5DatoGeneralEmpleado,this,true,"valor5DatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6));

		if(this.datogeneralempleadoConstantesFunciones.mostrarvalor6DatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor6DatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor6DatoGeneralEmpleado,iSizeTabla,this,true,"valor6DatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarvalor6DatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarvalor6DatoGeneralEmpleado,this,true,"valor6DatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL));

		if(this.datogeneralempleadoConstantesFunciones.mostrarcon_aporta_seguro_socialDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.datogeneralempleadoConstantesFunciones.resaltarcon_aporta_seguro_socialDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarcon_aporta_seguro_socialDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarcon_aporta_seguro_socialDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarcon_aporta_seguro_socialDatoGeneralEmpleado,this,true,"con_aporta_seguro_socialDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS));

		if(this.datogeneralempleadoConstantesFunciones.mostrarcon_recibe_horas_extrasDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.datogeneralempleadoConstantesFunciones.resaltarcon_recibe_horas_extrasDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarcon_recibe_horas_extrasDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarcon_recibe_horas_extrasDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarcon_recibe_horas_extrasDatoGeneralEmpleado,this,true,"con_recibe_horas_extrasDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS));

		if(this.datogeneralempleadoConstantesFunciones.mostrarcon_descuento_impuestosDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.datogeneralempleadoConstantesFunciones.resaltarcon_descuento_impuestosDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarcon_descuento_impuestosDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarcon_descuento_impuestosDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarcon_descuento_impuestosDatoGeneralEmpleado,this,true,"con_descuento_impuestosDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA));

		if(this.datogeneralempleadoConstantesFunciones.mostrarpension_alimenticiaDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.datogeneralempleadoConstantesFunciones.resaltarpension_alimenticiaDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarpension_alimenticiaDatoGeneralEmpleado,iSizeTabla,this,true,"pension_alimenticiaDatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarpension_alimenticiaDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarpension_alimenticiaDatoGeneralEmpleado,this,true,"pension_alimenticiaDatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS));

		if(this.datogeneralempleadoConstantesFunciones.mostrarcon_pago_por_horasDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.datogeneralempleadoConstantesFunciones.resaltarcon_pago_por_horasDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarcon_pago_por_horasDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarcon_pago_por_horasDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarcon_pago_por_horasDatoGeneralEmpleado,this,true,"con_pago_por_horasDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO));

		if(this.datogeneralempleadoConstantesFunciones.mostrarcon_anticipoDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.datogeneralempleadoConstantesFunciones.resaltarcon_anticipoDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarcon_anticipoDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarcon_anticipoDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarcon_anticipoDatoGeneralEmpleado,this,true,"con_anticipoDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_libreta_miliDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoLibretaMiliTableCell(this.tipolibretamilisForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_libreta_miliDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_tipo_libreta_miliDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new TipoLibretaMiliTableCell(this.tipolibretamilisForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_libreta_miliDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_tipo_libreta_miliDatoGeneralEmpleado,true,"id_tipo_libreta_miliDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR));

		if(this.datogeneralempleadoConstantesFunciones.mostrarlibreta_militarDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.datogeneralempleadoConstantesFunciones.resaltarlibreta_militarDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarlibreta_militarDatoGeneralEmpleado,iSizeTabla,this,true,"libreta_militarDatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarlibreta_militarDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarlibreta_militarDatoGeneralEmpleado,this,true,"libreta_militarDatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_grupo_forma_pagoDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoGrupoFormaPagoTableCell(this.tipogrupoformapagosForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_grupo_forma_pagoDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_tipo_grupo_forma_pagoDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new TipoGrupoFormaPagoTableCell(this.tipogrupoformapagosForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_grupo_forma_pagoDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_tipo_grupo_forma_pagoDatoGeneralEmpleado,true,"id_tipo_grupo_forma_pagoDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_bancoDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BancoTableCell(this.bancosForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_bancoDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_bancoDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new BancoTableCell(this.bancosForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_bancoDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_bancoDatoGeneralEmpleado,true,"id_bancoDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_cuenta_banco_globalDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoCuentaBancoGlobalTableCell(this.tipocuentabancoglobalsForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_cuenta_banco_globalDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_tipo_cuenta_banco_globalDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new TipoCuentaBancoGlobalTableCell(this.tipocuentabancoglobalsForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_cuenta_banco_globalDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_tipo_cuenta_banco_globalDatoGeneralEmpleado,true,"id_tipo_cuenta_banco_globalDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA));

		if(this.datogeneralempleadoConstantesFunciones.mostrarnumero_cuentaDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.datogeneralempleadoConstantesFunciones.resaltarnumero_cuentaDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarnumero_cuentaDatoGeneralEmpleado,iSizeTabla,this,true,"numero_cuentaDatoGeneralEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.datogeneralempleadoConstantesFunciones.resaltarnumero_cuentaDatoGeneralEmpleado,this.datogeneralempleadoConstantesFunciones.activarnumero_cuentaDatoGeneralEmpleado,this,true,"numero_cuentaDatoGeneralEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE));

		if(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_sangreDatoGeneralEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoSangreTableCell(this.tiposangresForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_sangreDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_tipo_sangreDatoGeneralEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new TipoSangreTableCell(this.tiposangresForeignKey,this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_sangreDatoGeneralEmpleado,this,this.datogeneralempleadoConstantesFunciones.activarid_tipo_sangreDatoGeneralEmpleado,true,"id_tipo_sangreDatoGeneralEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DatoGeneralEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.datogeneralempleadoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.datogeneralempleadoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDatoGeneralEmpleado.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.datogeneralempleadoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.datogeneralempleadoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDatoGeneralEmpleado.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarDatoGeneralEmpleado && this.isPermisoGuardarCambiosDatoGeneralEmpleado) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.datogeneralempleadoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.datogeneralempleadoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosDatoGeneralEmpleado.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosDatoGeneralEmpleado.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDatoGeneralEmpleado && this.isPermisoGuardarCambiosDatoGeneralEmpleado) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDatoGeneralEmpleado && this.isPermisoGuardarCambiosDatoGeneralEmpleado) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosDatoGeneralEmpleado.moveColumn(this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosDatoGeneralEmpleado.moveColumn(this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosDatoGeneralEmpleado.moveColumn(this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosDatoGeneralEmpleado.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosDatoGeneralEmpleado.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosDatoGeneralEmpleado,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosDatoGeneralEmpleado.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosDatoGeneralEmpleado.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosDatoGeneralEmpleado.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosDatoGeneralEmpleado.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosDatoGeneralEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosDatoGeneralEmpleado();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoDatoGeneralEmpleado=false;
					
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			
				if(this.datogeneralempleadoSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormDatoGeneralEmpleado==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDatoGeneralEmpleado.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.datogeneralempleado.getsType().equals("DUPLICADO")
				   || this.datogeneralempleado.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoDatoGeneralEmpleado=true;
				
				} else {
					this.isEsNuevoDatoGeneralEmpleado=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
					if(this.datogeneralempleado.getId()>=0 && !this.datogeneralempleado.getIsNew()) {						
						this.isEsNuevoDatoGeneralEmpleado=false;
						
					} else {
						this.isEsNuevoDatoGeneralEmpleado=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoDatoGeneralEmpleado(esRelaciones);						
				
				this.seleccionarDatoGeneralEmpleado(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.datogeneralempleado.getId()<0) {
					this.isEsNuevoDatoGeneralEmpleado=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarDatoGeneralEmpleado(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarDatoGeneralEmpleado(evt,rowIndex);
				}	
				
				if(this.datogeneralempleadoSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion DatoGeneralEmpleado: " + this.dDif); 
					}
				}								
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarDatoGeneralEmpleado(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.datogeneralempleado)) {
					if(this.datogeneralempleado.getId()>0) {
						this.datogeneralempleado.setIsDeleted(true);
						
						this.datogeneralempleadosEliminados.add(this.datogeneralempleado);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.datogeneralempleadoLogic.getDatoGeneralEmpleados().remove(this.datogeneralempleado);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.datogeneralempleados.remove(this.datogeneralempleado);				
					}
					
					
					((DatoGeneralEmpleadoModel) this.jTableDatosDatoGeneralEmpleado.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarDatoGeneralEmpleado(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoDatoGeneralEmpleado) {
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDatoGeneralEmpleado.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDatoGeneralEmpleado.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioDatoGeneralEmpleado(this.datogeneralempleado);
				}
				
				//ARCHITECTURE
				try {
					

					//Empleado
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_empleadoDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_empleadoDatoGeneralEmpleado) {
						//this.cargarCombosEmpleadosForeignKeyLista(" where id="+this.datogeneralempleado.getid_empleado());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.empleadosForeignKey=new ArrayList<Empleado>();

						if(datogeneralempleado.getEmpleado()!=null) {
							this.empleadosForeignKey.add(datogeneralempleado.getEmpleado());
						}

						this.addItemDefectoCombosForeignKeyEmpleado();
						this.cargarCombosFrameEmpleadosForeignKey("Todos");
					}
					this.setActualEmpleadoForeignKey(this.datogeneralempleado.getid_empleado(),false,"Formulario");

					//NumeroPatronal
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_numero_patronalDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_numero_patronalDatoGeneralEmpleado) {
						//this.cargarCombosNumeroPatronalsForeignKeyLista(" where id="+this.datogeneralempleado.getid_numero_patronal());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.numeropatronalsForeignKey=new ArrayList<NumeroPatronal>();

						if(datogeneralempleado.getNumeroPatronal()!=null) {
							this.numeropatronalsForeignKey.add(datogeneralempleado.getNumeroPatronal());
						}

						this.addItemDefectoCombosForeignKeyNumeroPatronal();
						this.cargarCombosFrameNumeroPatronalsForeignKey("Todos");
					}
					this.setActualNumeroPatronalForeignKey(this.datogeneralempleado.getid_numero_patronal(),false,"Formulario");

					//TipoAfiliacion
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_tipo_afiliacionDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_tipo_afiliacionDatoGeneralEmpleado) {
						//this.cargarCombosTipoAfiliacionsForeignKeyLista(" where id="+this.datogeneralempleado.getid_tipo_afiliacion());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.tipoafiliacionsForeignKey=new ArrayList<TipoAfiliacion>();

						if(datogeneralempleado.getTipoAfiliacion()!=null) {
							this.tipoafiliacionsForeignKey.add(datogeneralempleado.getTipoAfiliacion());
						}

						this.addItemDefectoCombosForeignKeyTipoAfiliacion();
						this.cargarCombosFrameTipoAfiliacionsForeignKey("Todos");
					}
					this.setActualTipoAfiliacionForeignKey(this.datogeneralempleado.getid_tipo_afiliacion(),false,"Formulario");

					//Pais
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_paisDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_paisDatoGeneralEmpleado) {
						//this.cargarCombosPaissForeignKeyLista(" where id="+this.datogeneralempleado.getid_pais());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.paissForeignKey=new ArrayList<Pais>();

						if(datogeneralempleado.getPais()!=null) {
							this.paissForeignKey.add(datogeneralempleado.getPais());
						}

						this.addItemDefectoCombosForeignKeyPais();
						this.cargarCombosFramePaissForeignKey("Todos");
					}
					this.setActualPaisForeignKey(this.datogeneralempleado.getid_pais(),false,"Formulario");

					//Provincia
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_provinciaDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_provinciaDatoGeneralEmpleado) {
						//this.cargarCombosProvinciasForeignKeyLista(" where id="+this.datogeneralempleado.getid_provincia());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.provinciasForeignKey=new ArrayList<Provincia>();

						if(datogeneralempleado.getProvincia()!=null) {
							this.provinciasForeignKey.add(datogeneralempleado.getProvincia());
						}

						this.addItemDefectoCombosForeignKeyProvincia();
						this.cargarCombosFrameProvinciasForeignKey("Todos");
					}
					this.setActualProvinciaForeignKey(this.datogeneralempleado.getid_provincia(),false,"Formulario");

					//Canton
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_cantonDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_cantonDatoGeneralEmpleado) {
						//this.cargarCombosCantonsForeignKeyLista(" where id="+this.datogeneralempleado.getid_canton());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.cantonsForeignKey=new ArrayList<Canton>();

						if(datogeneralempleado.getCanton()!=null) {
							this.cantonsForeignKey.add(datogeneralempleado.getCanton());
						}

						this.addItemDefectoCombosForeignKeyCanton();
						this.cargarCombosFrameCantonsForeignKey("Todos");
					}
					this.setActualCantonForeignKey(this.datogeneralempleado.getid_canton(),false,"Formulario");

					//Parroquia
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_parroquiaDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_parroquiaDatoGeneralEmpleado) {
						//this.cargarCombosParroquiasForeignKeyLista(" where id="+this.datogeneralempleado.getid_parroquia());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.parroquiasForeignKey=new ArrayList<Parroquia>();

						if(datogeneralempleado.getParroquia()!=null) {
							this.parroquiasForeignKey.add(datogeneralempleado.getParroquia());
						}

						this.addItemDefectoCombosForeignKeyParroquia();
						this.cargarCombosFrameParroquiasForeignKey("Todos");
					}
					this.setActualParroquiaForeignKey(this.datogeneralempleado.getid_parroquia(),false,"Formulario");

					//Moneda
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_monedaDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_monedaDatoGeneralEmpleado) {
						//this.cargarCombosMonedasForeignKeyLista(" where id="+this.datogeneralempleado.getid_moneda());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.monedasForeignKey=new ArrayList<Moneda>();

						if(datogeneralempleado.getMoneda()!=null) {
							this.monedasForeignKey.add(datogeneralempleado.getMoneda());
						}

						this.addItemDefectoCombosForeignKeyMoneda();
						this.cargarCombosFrameMonedasForeignKey("Todos");
					}
					this.setActualMonedaForeignKey(this.datogeneralempleado.getid_moneda(),false,"Formulario");

					//TipoContrato
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_tipo_contratoDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_tipo_contratoDatoGeneralEmpleado) {
						//this.cargarCombosTipoContratosForeignKeyLista(" where id="+this.datogeneralempleado.getid_tipo_contrato());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.tipocontratosForeignKey=new ArrayList<TipoContrato>();

						if(datogeneralempleado.getTipoContrato()!=null) {
							this.tipocontratosForeignKey.add(datogeneralempleado.getTipoContrato());
						}

						this.addItemDefectoCombosForeignKeyTipoContrato();
						this.cargarCombosFrameTipoContratosForeignKey("Todos");
					}
					this.setActualTipoContratoForeignKey(this.datogeneralempleado.getid_tipo_contrato(),false,"Formulario");

					//TipoLibretaMili
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_tipo_libreta_miliDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_tipo_libreta_miliDatoGeneralEmpleado) {
						//this.cargarCombosTipoLibretaMilisForeignKeyLista(" where id="+this.datogeneralempleado.getid_tipo_libreta_mili());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.tipolibretamilisForeignKey=new ArrayList<TipoLibretaMili>();

						if(datogeneralempleado.getTipoLibretaMili()!=null) {
							this.tipolibretamilisForeignKey.add(datogeneralempleado.getTipoLibretaMili());
						}

						this.addItemDefectoCombosForeignKeyTipoLibretaMili();
						this.cargarCombosFrameTipoLibretaMilisForeignKey("Todos");
					}
					this.setActualTipoLibretaMiliForeignKey(this.datogeneralempleado.getid_tipo_libreta_mili(),false,"Formulario");

					//TipoGrupoFormaPago
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_tipo_grupo_forma_pagoDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_tipo_grupo_forma_pagoDatoGeneralEmpleado) {
						//this.cargarCombosTipoGrupoFormaPagosForeignKeyLista(" where id="+this.datogeneralempleado.getid_tipo_grupo_forma_pago());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.tipogrupoformapagosForeignKey=new ArrayList<TipoGrupoFormaPago>();

						if(datogeneralempleado.getTipoGrupoFormaPago()!=null) {
							this.tipogrupoformapagosForeignKey.add(datogeneralempleado.getTipoGrupoFormaPago());
						}

						this.addItemDefectoCombosForeignKeyTipoGrupoFormaPago();
						this.cargarCombosFrameTipoGrupoFormaPagosForeignKey("Todos");
					}
					this.setActualTipoGrupoFormaPagoForeignKey(this.datogeneralempleado.getid_tipo_grupo_forma_pago(),false,"Formulario");

					//Banco
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_bancoDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_bancoDatoGeneralEmpleado) {
						//this.cargarCombosBancosForeignKeyLista(" where id="+this.datogeneralempleado.getid_banco());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.bancosForeignKey=new ArrayList<Banco>();

						if(datogeneralempleado.getBanco()!=null) {
							this.bancosForeignKey.add(datogeneralempleado.getBanco());
						}

						this.addItemDefectoCombosForeignKeyBanco();
						this.cargarCombosFrameBancosForeignKey("Todos");
					}
					this.setActualBancoForeignKey(this.datogeneralempleado.getid_banco(),false,"Formulario");

					//TipoCuentaBancoGlobal
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_tipo_cuenta_banco_globalDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_tipo_cuenta_banco_globalDatoGeneralEmpleado) {
						//this.cargarCombosTipoCuentaBancoGlobalsForeignKeyLista(" where id="+this.datogeneralempleado.getid_tipo_cuenta_banco_global());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.tipocuentabancoglobalsForeignKey=new ArrayList<TipoCuentaBancoGlobal>();

						if(datogeneralempleado.getTipoCuentaBancoGlobal()!=null) {
							this.tipocuentabancoglobalsForeignKey.add(datogeneralempleado.getTipoCuentaBancoGlobal());
						}

						this.addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal();
						this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey("Todos");
					}
					this.setActualTipoCuentaBancoGlobalForeignKey(this.datogeneralempleado.getid_tipo_cuenta_banco_global(),false,"Formulario");

					//TipoSangre
					if(!this.datogeneralempleadoConstantesFunciones.cargarid_tipo_sangreDatoGeneralEmpleado || this.datogeneralempleadoConstantesFunciones.event_dependid_tipo_sangreDatoGeneralEmpleado) {
						//this.cargarCombosTipoSangresForeignKeyLista(" where id="+this.datogeneralempleado.getid_tipo_sangre());
									//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
						this.tiposangresForeignKey=new ArrayList<TipoSangre>();

						if(datogeneralempleado.getTipoSangre()!=null) {
							this.tiposangresForeignKey.add(datogeneralempleado.getTipoSangre());
						}

						this.addItemDefectoCombosForeignKeyTipoSangre();
						this.cargarCombosFrameTipoSangresForeignKey("Todos");
					}
					this.setActualTipoSangreForeignKey(this.datogeneralempleado.getid_tipo_sangre(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesDatoGeneralEmpleado("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesDatoGeneralEmpleado(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDatoGeneralEmpleado() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoDatoGeneralEmpleado(datogeneralempleado,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioDatoGeneralEmpleado(datogeneralempleado);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyDatoGeneralEmpleado(datogeneralempleado,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyDatoGeneralEmpleado(datogeneralempleado);
	}
	
	public void setVariablesObjetoActualToFormularioDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_empleadoDatoGeneralEmpleado.setText(datogeneralempleado.getId().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldcarnet_iessDatoGeneralEmpleado.setText(datogeneralempleado.getcarnet_iess());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsectorial_iessDatoGeneralEmpleado.setText(datogeneralempleado.getsectorial_iess());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_nacimientoDatoGeneralEmpleado.setDate(datogeneralempleado.getfecha_nacimiento());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_falleceDatoGeneralEmpleado.setDate(datogeneralempleado.getfecha_fallece());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_evaluacionDatoGeneralEmpleado.setText(datogeneralempleado.getvalor_evaluacion().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_horasDatoGeneralEmpleado.setText(datogeneralempleado.getnumero_horas().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_horaDatoGeneralEmpleado.setText(datogeneralempleado.getvalor_hora().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsalarioDatoGeneralEmpleado.setText(datogeneralempleado.getsalario().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_contratoDatoGeneralEmpleado.setText(datogeneralempleado.getnumero_contrato());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor1DatoGeneralEmpleado.setText(datogeneralempleado.getvalor1().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor2DatoGeneralEmpleado.setText(datogeneralempleado.getvalor2().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor3DatoGeneralEmpleado.setText(datogeneralempleado.getvalor3().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor4DatoGeneralEmpleado.setText(datogeneralempleado.getvalor4().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor5DatoGeneralEmpleado.setText(datogeneralempleado.getvalor5().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor6DatoGeneralEmpleado.setText(datogeneralempleado.getvalor6().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_aporta_seguro_socialDatoGeneralEmpleado.setSelected(datogeneralempleado.getcon_aporta_seguro_social());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_recibe_horas_extrasDatoGeneralEmpleado.setSelected(datogeneralempleado.getcon_recibe_horas_extras());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_descuento_impuestosDatoGeneralEmpleado.setSelected(datogeneralempleado.getcon_descuento_impuestos());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldpension_alimenticiaDatoGeneralEmpleado.setText(datogeneralempleado.getpension_alimenticia().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_pago_por_horasDatoGeneralEmpleado.setSelected(datogeneralempleado.getcon_pago_por_horas());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_anticipoDatoGeneralEmpleado.setSelected(datogeneralempleado.getcon_anticipo());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldlibreta_militarDatoGeneralEmpleado.setText(datogeneralempleado.getlibreta_militar());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_cuentaDatoGeneralEmpleado.setText(datogeneralempleado.getnumero_cuenta());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,DatoGeneralEmpleado datogeneralempleadoLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,datogeneralempleadoLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,DatoGeneralEmpleado datogeneralempleadoLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				datogeneralempleadoLocal=this.datogeneralempleado;
			} else {
				datogeneralempleadoLocal=this.datogeneralempleadoAnterior;
			}
		}
		
		if(this.permiteMantenimiento(datogeneralempleadoLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoDatoGeneralEmpleado(datogeneralempleadoLocal,true);
					
					if(datogeneralempleadoSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(datogeneralempleadoLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(datogeneralempleadoLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(datogeneralempleado,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(datogeneralempleado);
	}
	
	public void setVariablesFormularioToObjetoActualDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(datogeneralempleado,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_empleadoDatoGeneralEmpleado.getText()==null || this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_empleadoDatoGeneralEmpleado.getText()=="" || this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_empleadoDatoGeneralEmpleado.getText()=="Id") {
				this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_empleadoDatoGeneralEmpleado.setText("0");
			}

			if(conColumnasBase) {datogeneralempleado.setId(Long.parseLong(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_empleadoDatoGeneralEmpleado.getText()));}

		try {
			datogeneralempleado.setcarnet_iess(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldcarnet_iessDatoGeneralEmpleado.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcarnet_iessDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setsectorial_iess(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsectorial_iessDatoGeneralEmpleado.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelsectorial_iessDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setfecha_nacimiento(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_nacimientoDatoGeneralEmpleado.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelfecha_nacimientoDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setfecha_fallece(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_falleceDatoGeneralEmpleado.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelfecha_falleceDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setvalor_evaluacion(Double.parseDouble(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_evaluacionDatoGeneralEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor_evaluacionDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setnumero_horas(Double.parseDouble(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_horasDatoGeneralEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelnumero_horasDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setvalor_hora(Double.parseDouble(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_horaDatoGeneralEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor_horaDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setsalario(Double.parseDouble(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsalarioDatoGeneralEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelsalarioDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setnumero_contrato(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_contratoDatoGeneralEmpleado.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelnumero_contratoDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setvalor1(Double.parseDouble(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor1DatoGeneralEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor1DatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setvalor2(Double.parseDouble(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor2DatoGeneralEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor2DatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setvalor3(Double.parseDouble(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor3DatoGeneralEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor3DatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setvalor4(Double.parseDouble(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor4DatoGeneralEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor4DatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setvalor5(Double.parseDouble(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor5DatoGeneralEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor5DatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setvalor6(Double.parseDouble(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor6DatoGeneralEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelvalor6DatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setcon_aporta_seguro_social(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_aporta_seguro_socialDatoGeneralEmpleado.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_aporta_seguro_socialDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setcon_recibe_horas_extras(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_recibe_horas_extrasDatoGeneralEmpleado.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_recibe_horas_extrasDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setcon_descuento_impuestos(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_descuento_impuestosDatoGeneralEmpleado.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_descuento_impuestosDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setpension_alimenticia(Double.parseDouble(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldpension_alimenticiaDatoGeneralEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelpension_alimenticiaDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setcon_pago_por_horas(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_pago_por_horasDatoGeneralEmpleado.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_pago_por_horasDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setcon_anticipo(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_anticipoDatoGeneralEmpleado.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelcon_anticipoDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setlibreta_militar(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldlibreta_militarDatoGeneralEmpleado.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabellibreta_militarDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			datogeneralempleado.setnumero_cuenta(this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_cuentaDatoGeneralEmpleado.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelnumero_cuentaDatoGeneralEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleadoBean,DatoGeneralEmpleado datogeneralempleado,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && datogeneralempleadoBean.getId()!=null && !datogeneralempleadoBean.getId().equals(-1L))) {datogeneralempleado.setId(datogeneralempleadoBean.getId());}}
			if(conDefault || (!conDefault && datogeneralempleadoBean.getid_numero_patronal()!=null && !datogeneralempleadoBean.getid_numero_patronal().equals(-1L))) {datogeneralempleado.setid_numero_patronal(datogeneralempleadoBean.getid_numero_patronal());}
			if(conDefault || (!conDefault && datogeneralempleadoBean.getid_tipo_afiliacion()!=null && !datogeneralempleadoBean.getid_tipo_afiliacion().equals(-1L))) {datogeneralempleado.setid_tipo_afiliacion(datogeneralempleadoBean.getid_tipo_afiliacion());}
			if(conDefault || (!conDefault && datogeneralempleadoBean.getid_pais()!=null && !datogeneralempleadoBean.getid_pais().equals(-1L))) {datogeneralempleado.setid_pais(datogeneralempleadoBean.getid_pais());}
			if(conDefault || (!conDefault && datogeneralempleadoBean.getid_provincia()!=null && !datogeneralempleadoBean.getid_provincia().equals(-1L))) {datogeneralempleado.setid_provincia(datogeneralempleadoBean.getid_provincia());}
			if(conDefault || (!conDefault && datogeneralempleadoBean.getid_canton()!=null && !datogeneralempleadoBean.getid_canton().equals(-1L))) {datogeneralempleado.setid_canton(datogeneralempleadoBean.getid_canton());}
			if(conDefault || (!conDefault && datogeneralempleadoBean.getid_parroquia()!=null && !datogeneralempleadoBean.getid_parroquia().equals(-1L))) {datogeneralempleado.setid_parroquia(datogeneralempleadoBean.getid_parroquia());}
			if(conDefault || (!conDefault && datogeneralempleadoBean.getid_tipo_contrato()!=null && !datogeneralempleadoBean.getid_tipo_contrato().equals(-1L))) {datogeneralempleado.setid_tipo_contrato(datogeneralempleadoBean.getid_tipo_contrato());}
			if(conDefault || (!conDefault && datogeneralempleadoBean.getid_tipo_libreta_mili()!=null && !datogeneralempleadoBean.getid_tipo_libreta_mili().equals(-1L))) {datogeneralempleado.setid_tipo_libreta_mili(datogeneralempleadoBean.getid_tipo_libreta_mili());}
			if(conDefault || (!conDefault && datogeneralempleadoBean.getid_tipo_grupo_forma_pago()!=null && !datogeneralempleadoBean.getid_tipo_grupo_forma_pago().equals(-1L))) {datogeneralempleado.setid_tipo_grupo_forma_pago(datogeneralempleadoBean.getid_tipo_grupo_forma_pago());}
			if(conDefault || (!conDefault && datogeneralempleadoBean.getid_banco()!=null && !datogeneralempleadoBean.getid_banco().equals(-1L))) {datogeneralempleado.setid_banco(datogeneralempleadoBean.getid_banco());}
			if(conDefault || (!conDefault && datogeneralempleadoBean.getid_tipo_cuenta_banco_global()!=null && !datogeneralempleadoBean.getid_tipo_cuenta_banco_global().equals(-1L))) {datogeneralempleado.setid_tipo_cuenta_banco_global(datogeneralempleadoBean.getid_tipo_cuenta_banco_global());}
			if(conDefault || (!conDefault && datogeneralempleadoBean.getid_tipo_sangre()!=null && !datogeneralempleadoBean.getid_tipo_sangre().equals(-1L))) {datogeneralempleado.setid_tipo_sangre(datogeneralempleadoBean.getid_tipo_sangre());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleadoOrigen,DatoGeneralEmpleado datogeneralempleado,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && datogeneralempleadoOrigen.getId()!=null && !datogeneralempleadoOrigen.getId().equals(-1L))) {datogeneralempleado.setId(datogeneralempleadoOrigen.getId());}}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getid_numero_patronal()!=null && !datogeneralempleadoOrigen.getid_numero_patronal().equals(-1L))) {datogeneralempleado.setid_numero_patronal(datogeneralempleadoOrigen.getid_numero_patronal());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getid_tipo_afiliacion()!=null && !datogeneralempleadoOrigen.getid_tipo_afiliacion().equals(-1L))) {datogeneralempleado.setid_tipo_afiliacion(datogeneralempleadoOrigen.getid_tipo_afiliacion());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getcarnet_iess()!=null && !datogeneralempleadoOrigen.getcarnet_iess().equals(""))) {datogeneralempleado.setcarnet_iess(datogeneralempleadoOrigen.getcarnet_iess());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getsectorial_iess()!=null && !datogeneralempleadoOrigen.getsectorial_iess().equals(""))) {datogeneralempleado.setsectorial_iess(datogeneralempleadoOrigen.getsectorial_iess());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getid_pais()!=null && !datogeneralempleadoOrigen.getid_pais().equals(-1L))) {datogeneralempleado.setid_pais(datogeneralempleadoOrigen.getid_pais());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getid_provincia()!=null && !datogeneralempleadoOrigen.getid_provincia().equals(-1L))) {datogeneralempleado.setid_provincia(datogeneralempleadoOrigen.getid_provincia());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getid_canton()!=null && !datogeneralempleadoOrigen.getid_canton().equals(-1L))) {datogeneralempleado.setid_canton(datogeneralempleadoOrigen.getid_canton());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getid_parroquia()!=null && !datogeneralempleadoOrigen.getid_parroquia().equals(-1L))) {datogeneralempleado.setid_parroquia(datogeneralempleadoOrigen.getid_parroquia());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getfecha_nacimiento()!=null && !datogeneralempleadoOrigen.getfecha_nacimiento().equals(new Date()))) {datogeneralempleado.setfecha_nacimiento(datogeneralempleadoOrigen.getfecha_nacimiento());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getfecha_fallece()!=null && !datogeneralempleadoOrigen.getfecha_fallece().equals(new Date()))) {datogeneralempleado.setfecha_fallece(datogeneralempleadoOrigen.getfecha_fallece());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getvalor_evaluacion()!=null && !datogeneralempleadoOrigen.getvalor_evaluacion().equals(0.0))) {datogeneralempleado.setvalor_evaluacion(datogeneralempleadoOrigen.getvalor_evaluacion());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getnumero_horas()!=null && !datogeneralempleadoOrigen.getnumero_horas().equals(0.0))) {datogeneralempleado.setnumero_horas(datogeneralempleadoOrigen.getnumero_horas());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getvalor_hora()!=null && !datogeneralempleadoOrigen.getvalor_hora().equals(0.0))) {datogeneralempleado.setvalor_hora(datogeneralempleadoOrigen.getvalor_hora());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getsalario()!=null && !datogeneralempleadoOrigen.getsalario().equals(0.0))) {datogeneralempleado.setsalario(datogeneralempleadoOrigen.getsalario());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getnumero_contrato()!=null && !datogeneralempleadoOrigen.getnumero_contrato().equals(""))) {datogeneralempleado.setnumero_contrato(datogeneralempleadoOrigen.getnumero_contrato());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getid_tipo_contrato()!=null && !datogeneralempleadoOrigen.getid_tipo_contrato().equals(-1L))) {datogeneralempleado.setid_tipo_contrato(datogeneralempleadoOrigen.getid_tipo_contrato());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getvalor1()!=null && !datogeneralempleadoOrigen.getvalor1().equals(0.0))) {datogeneralempleado.setvalor1(datogeneralempleadoOrigen.getvalor1());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getvalor2()!=null && !datogeneralempleadoOrigen.getvalor2().equals(0.0))) {datogeneralempleado.setvalor2(datogeneralempleadoOrigen.getvalor2());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getvalor3()!=null && !datogeneralempleadoOrigen.getvalor3().equals(0.0))) {datogeneralempleado.setvalor3(datogeneralempleadoOrigen.getvalor3());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getvalor4()!=null && !datogeneralempleadoOrigen.getvalor4().equals(0.0))) {datogeneralempleado.setvalor4(datogeneralempleadoOrigen.getvalor4());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getvalor5()!=null && !datogeneralempleadoOrigen.getvalor5().equals(0.0))) {datogeneralempleado.setvalor5(datogeneralempleadoOrigen.getvalor5());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getvalor6()!=null && !datogeneralempleadoOrigen.getvalor6().equals(0.0))) {datogeneralempleado.setvalor6(datogeneralempleadoOrigen.getvalor6());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getcon_aporta_seguro_social()!=null && !datogeneralempleadoOrigen.getcon_aporta_seguro_social().equals(false))) {datogeneralempleado.setcon_aporta_seguro_social(datogeneralempleadoOrigen.getcon_aporta_seguro_social());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getcon_recibe_horas_extras()!=null && !datogeneralempleadoOrigen.getcon_recibe_horas_extras().equals(false))) {datogeneralempleado.setcon_recibe_horas_extras(datogeneralempleadoOrigen.getcon_recibe_horas_extras());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getcon_descuento_impuestos()!=null && !datogeneralempleadoOrigen.getcon_descuento_impuestos().equals(false))) {datogeneralempleado.setcon_descuento_impuestos(datogeneralempleadoOrigen.getcon_descuento_impuestos());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getpension_alimenticia()!=null && !datogeneralempleadoOrigen.getpension_alimenticia().equals(0.0))) {datogeneralempleado.setpension_alimenticia(datogeneralempleadoOrigen.getpension_alimenticia());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getcon_pago_por_horas()!=null && !datogeneralempleadoOrigen.getcon_pago_por_horas().equals(false))) {datogeneralempleado.setcon_pago_por_horas(datogeneralempleadoOrigen.getcon_pago_por_horas());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getcon_anticipo()!=null && !datogeneralempleadoOrigen.getcon_anticipo().equals(false))) {datogeneralempleado.setcon_anticipo(datogeneralempleadoOrigen.getcon_anticipo());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getid_tipo_libreta_mili()!=null && !datogeneralempleadoOrigen.getid_tipo_libreta_mili().equals(-1L))) {datogeneralempleado.setid_tipo_libreta_mili(datogeneralempleadoOrigen.getid_tipo_libreta_mili());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getlibreta_militar()!=null && !datogeneralempleadoOrigen.getlibreta_militar().equals(""))) {datogeneralempleado.setlibreta_militar(datogeneralempleadoOrigen.getlibreta_militar());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getid_tipo_grupo_forma_pago()!=null && !datogeneralempleadoOrigen.getid_tipo_grupo_forma_pago().equals(-1L))) {datogeneralempleado.setid_tipo_grupo_forma_pago(datogeneralempleadoOrigen.getid_tipo_grupo_forma_pago());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getid_banco()!=null && !datogeneralempleadoOrigen.getid_banco().equals(-1L))) {datogeneralempleado.setid_banco(datogeneralempleadoOrigen.getid_banco());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getid_tipo_cuenta_banco_global()!=null && !datogeneralempleadoOrigen.getid_tipo_cuenta_banco_global().equals(-1L))) {datogeneralempleado.setid_tipo_cuenta_banco_global(datogeneralempleadoOrigen.getid_tipo_cuenta_banco_global());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getnumero_cuenta()!=null && !datogeneralempleadoOrigen.getnumero_cuenta().equals(""))) {datogeneralempleado.setnumero_cuenta(datogeneralempleadoOrigen.getnumero_cuenta());}
			if(conDefault || (!conDefault && datogeneralempleadoOrigen.getid_tipo_sangre()!=null && !datogeneralempleadoOrigen.getid_tipo_sangre().equals(-1L))) {datogeneralempleado.setid_tipo_sangre(datogeneralempleadoOrigen.getid_tipo_sangre());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_empleadoDatoGeneralEmpleado.setText(datogeneralempleado.getId().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldcarnet_iessDatoGeneralEmpleado.setText(datogeneralempleado.getcarnet_iess());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsectorial_iessDatoGeneralEmpleado.setText(datogeneralempleado.getsectorial_iess());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_nacimientoDatoGeneralEmpleado.setDate(datogeneralempleado.getfecha_nacimiento());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_falleceDatoGeneralEmpleado.setDate(datogeneralempleado.getfecha_fallece());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_evaluacionDatoGeneralEmpleado.setText(datogeneralempleado.getvalor_evaluacion().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_horasDatoGeneralEmpleado.setText(datogeneralempleado.getnumero_horas().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_horaDatoGeneralEmpleado.setText(datogeneralempleado.getvalor_hora().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsalarioDatoGeneralEmpleado.setText(datogeneralempleado.getsalario().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_contratoDatoGeneralEmpleado.setText(datogeneralempleado.getnumero_contrato());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor1DatoGeneralEmpleado.setText(datogeneralempleado.getvalor1().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor2DatoGeneralEmpleado.setText(datogeneralempleado.getvalor2().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor3DatoGeneralEmpleado.setText(datogeneralempleado.getvalor3().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor4DatoGeneralEmpleado.setText(datogeneralempleado.getvalor4().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor5DatoGeneralEmpleado.setText(datogeneralempleado.getvalor5().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor6DatoGeneralEmpleado.setText(datogeneralempleado.getvalor6().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_aporta_seguro_socialDatoGeneralEmpleado.setSelected(datogeneralempleado.getcon_aporta_seguro_social());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_recibe_horas_extrasDatoGeneralEmpleado.setSelected(datogeneralempleado.getcon_recibe_horas_extras());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_descuento_impuestosDatoGeneralEmpleado.setSelected(datogeneralempleado.getcon_descuento_impuestos());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldpension_alimenticiaDatoGeneralEmpleado.setText(datogeneralempleado.getpension_alimenticia().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_pago_por_horasDatoGeneralEmpleado.setSelected(datogeneralempleado.getcon_pago_por_horas());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_anticipoDatoGeneralEmpleado.setSelected(datogeneralempleado.getcon_anticipo());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldlibreta_militarDatoGeneralEmpleado.setText(datogeneralempleado.getlibreta_militar());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_cuentaDatoGeneralEmpleado.setText(datogeneralempleado.getnumero_cuenta());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDatoGeneralEmpleado(DatoGeneralEmpleadoBean datogeneralempleadoBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_empleadoDatoGeneralEmpleado.setText(datogeneralempleadoBean.getId().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldcarnet_iessDatoGeneralEmpleado.setText(datogeneralempleadoBean.getcarnet_iess());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsectorial_iessDatoGeneralEmpleado.setText(datogeneralempleadoBean.getsectorial_iess());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_nacimientoDatoGeneralEmpleado.setDate(datogeneralempleadoBean.getfecha_nacimiento());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_falleceDatoGeneralEmpleado.setDate(datogeneralempleadoBean.getfecha_fallece());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_evaluacionDatoGeneralEmpleado.setText(datogeneralempleadoBean.getvalor_evaluacion().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_horasDatoGeneralEmpleado.setText(datogeneralempleadoBean.getnumero_horas().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_horaDatoGeneralEmpleado.setText(datogeneralempleadoBean.getvalor_hora().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsalarioDatoGeneralEmpleado.setText(datogeneralempleadoBean.getsalario().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_contratoDatoGeneralEmpleado.setText(datogeneralempleadoBean.getnumero_contrato());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor1DatoGeneralEmpleado.setText(datogeneralempleadoBean.getvalor1().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor2DatoGeneralEmpleado.setText(datogeneralempleadoBean.getvalor2().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor3DatoGeneralEmpleado.setText(datogeneralempleadoBean.getvalor3().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor4DatoGeneralEmpleado.setText(datogeneralempleadoBean.getvalor4().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor5DatoGeneralEmpleado.setText(datogeneralempleadoBean.getvalor5().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor6DatoGeneralEmpleado.setText(datogeneralempleadoBean.getvalor6().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_aporta_seguro_socialDatoGeneralEmpleado.setSelected(datogeneralempleadoBean.getcon_aporta_seguro_social());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_recibe_horas_extrasDatoGeneralEmpleado.setSelected(datogeneralempleadoBean.getcon_recibe_horas_extras());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_descuento_impuestosDatoGeneralEmpleado.setSelected(datogeneralempleadoBean.getcon_descuento_impuestos());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldpension_alimenticiaDatoGeneralEmpleado.setText(datogeneralempleadoBean.getpension_alimenticia().toString());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_pago_por_horasDatoGeneralEmpleado.setSelected(datogeneralempleadoBean.getcon_pago_por_horas());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_anticipoDatoGeneralEmpleado.setSelected(datogeneralempleadoBean.getcon_anticipo());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldlibreta_militarDatoGeneralEmpleado.setText(datogeneralempleadoBean.getlibreta_militar());
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_cuentaDatoGeneralEmpleado.setText(datogeneralempleadoBean.getnumero_cuenta());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanDatoGeneralEmpleado(DatoGeneralEmpleadoParameterReturnGeneral datogeneralempleadoReturnGeneral,DatoGeneralEmpleadoBean datogeneralempleadoBean,Boolean conDefault) throws Exception { 
		try {
			DatoGeneralEmpleado datogeneralempleadoLocal=new DatoGeneralEmpleado();
			
			datogeneralempleadoLocal=datogeneralempleadoReturnGeneral.getDatoGeneralEmpleado();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && datogeneralempleadoLocal.getId()!=null && !datogeneralempleadoLocal.getId().equals(-1L))) {datogeneralempleadoBean.setId(datogeneralempleadoLocal.getId());}}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getid_numero_patronal()!=null && !datogeneralempleadoLocal.getid_numero_patronal().equals(-1L))) {datogeneralempleadoBean.setid_numero_patronal(datogeneralempleadoLocal.getid_numero_patronal());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getid_tipo_afiliacion()!=null && !datogeneralempleadoLocal.getid_tipo_afiliacion().equals(-1L))) {datogeneralempleadoBean.setid_tipo_afiliacion(datogeneralempleadoLocal.getid_tipo_afiliacion());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getcarnet_iess()!=null && !datogeneralempleadoLocal.getcarnet_iess().equals(""))) {datogeneralempleadoBean.setcarnet_iess(datogeneralempleadoLocal.getcarnet_iess());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getsectorial_iess()!=null && !datogeneralempleadoLocal.getsectorial_iess().equals(""))) {datogeneralempleadoBean.setsectorial_iess(datogeneralempleadoLocal.getsectorial_iess());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getid_pais()!=null && !datogeneralempleadoLocal.getid_pais().equals(-1L))) {datogeneralempleadoBean.setid_pais(datogeneralempleadoLocal.getid_pais());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getid_provincia()!=null && !datogeneralempleadoLocal.getid_provincia().equals(-1L))) {datogeneralempleadoBean.setid_provincia(datogeneralempleadoLocal.getid_provincia());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getid_canton()!=null && !datogeneralempleadoLocal.getid_canton().equals(-1L))) {datogeneralempleadoBean.setid_canton(datogeneralempleadoLocal.getid_canton());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getid_parroquia()!=null && !datogeneralempleadoLocal.getid_parroquia().equals(-1L))) {datogeneralempleadoBean.setid_parroquia(datogeneralempleadoLocal.getid_parroquia());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getfecha_nacimiento()!=null && !datogeneralempleadoLocal.getfecha_nacimiento().equals(new Date()))) {datogeneralempleadoBean.setfecha_nacimiento(datogeneralempleadoLocal.getfecha_nacimiento());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getfecha_fallece()!=null && !datogeneralempleadoLocal.getfecha_fallece().equals(new Date()))) {datogeneralempleadoBean.setfecha_fallece(datogeneralempleadoLocal.getfecha_fallece());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getvalor_evaluacion()!=null && !datogeneralempleadoLocal.getvalor_evaluacion().equals(0.0))) {datogeneralempleadoBean.setvalor_evaluacion(datogeneralempleadoLocal.getvalor_evaluacion());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getnumero_horas()!=null && !datogeneralempleadoLocal.getnumero_horas().equals(0.0))) {datogeneralempleadoBean.setnumero_horas(datogeneralempleadoLocal.getnumero_horas());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getvalor_hora()!=null && !datogeneralempleadoLocal.getvalor_hora().equals(0.0))) {datogeneralempleadoBean.setvalor_hora(datogeneralempleadoLocal.getvalor_hora());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getsalario()!=null && !datogeneralempleadoLocal.getsalario().equals(0.0))) {datogeneralempleadoBean.setsalario(datogeneralempleadoLocal.getsalario());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getnumero_contrato()!=null && !datogeneralempleadoLocal.getnumero_contrato().equals(""))) {datogeneralempleadoBean.setnumero_contrato(datogeneralempleadoLocal.getnumero_contrato());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getid_tipo_contrato()!=null && !datogeneralempleadoLocal.getid_tipo_contrato().equals(-1L))) {datogeneralempleadoBean.setid_tipo_contrato(datogeneralempleadoLocal.getid_tipo_contrato());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getvalor1()!=null && !datogeneralempleadoLocal.getvalor1().equals(0.0))) {datogeneralempleadoBean.setvalor1(datogeneralempleadoLocal.getvalor1());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getvalor2()!=null && !datogeneralempleadoLocal.getvalor2().equals(0.0))) {datogeneralempleadoBean.setvalor2(datogeneralempleadoLocal.getvalor2());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getvalor3()!=null && !datogeneralempleadoLocal.getvalor3().equals(0.0))) {datogeneralempleadoBean.setvalor3(datogeneralempleadoLocal.getvalor3());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getvalor4()!=null && !datogeneralempleadoLocal.getvalor4().equals(0.0))) {datogeneralempleadoBean.setvalor4(datogeneralempleadoLocal.getvalor4());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getvalor5()!=null && !datogeneralempleadoLocal.getvalor5().equals(0.0))) {datogeneralempleadoBean.setvalor5(datogeneralempleadoLocal.getvalor5());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getvalor6()!=null && !datogeneralempleadoLocal.getvalor6().equals(0.0))) {datogeneralempleadoBean.setvalor6(datogeneralempleadoLocal.getvalor6());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getcon_aporta_seguro_social()!=null && !datogeneralempleadoLocal.getcon_aporta_seguro_social().equals(false))) {datogeneralempleadoBean.setcon_aporta_seguro_social(datogeneralempleadoLocal.getcon_aporta_seguro_social());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getcon_recibe_horas_extras()!=null && !datogeneralempleadoLocal.getcon_recibe_horas_extras().equals(false))) {datogeneralempleadoBean.setcon_recibe_horas_extras(datogeneralempleadoLocal.getcon_recibe_horas_extras());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getcon_descuento_impuestos()!=null && !datogeneralempleadoLocal.getcon_descuento_impuestos().equals(false))) {datogeneralempleadoBean.setcon_descuento_impuestos(datogeneralempleadoLocal.getcon_descuento_impuestos());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getpension_alimenticia()!=null && !datogeneralempleadoLocal.getpension_alimenticia().equals(0.0))) {datogeneralempleadoBean.setpension_alimenticia(datogeneralempleadoLocal.getpension_alimenticia());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getcon_pago_por_horas()!=null && !datogeneralempleadoLocal.getcon_pago_por_horas().equals(false))) {datogeneralempleadoBean.setcon_pago_por_horas(datogeneralempleadoLocal.getcon_pago_por_horas());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getcon_anticipo()!=null && !datogeneralempleadoLocal.getcon_anticipo().equals(false))) {datogeneralempleadoBean.setcon_anticipo(datogeneralempleadoLocal.getcon_anticipo());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getid_tipo_libreta_mili()!=null && !datogeneralempleadoLocal.getid_tipo_libreta_mili().equals(-1L))) {datogeneralempleadoBean.setid_tipo_libreta_mili(datogeneralempleadoLocal.getid_tipo_libreta_mili());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getlibreta_militar()!=null && !datogeneralempleadoLocal.getlibreta_militar().equals(""))) {datogeneralempleadoBean.setlibreta_militar(datogeneralempleadoLocal.getlibreta_militar());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getid_tipo_grupo_forma_pago()!=null && !datogeneralempleadoLocal.getid_tipo_grupo_forma_pago().equals(-1L))) {datogeneralempleadoBean.setid_tipo_grupo_forma_pago(datogeneralempleadoLocal.getid_tipo_grupo_forma_pago());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getid_banco()!=null && !datogeneralempleadoLocal.getid_banco().equals(-1L))) {datogeneralempleadoBean.setid_banco(datogeneralempleadoLocal.getid_banco());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getid_tipo_cuenta_banco_global()!=null && !datogeneralempleadoLocal.getid_tipo_cuenta_banco_global().equals(-1L))) {datogeneralempleadoBean.setid_tipo_cuenta_banco_global(datogeneralempleadoLocal.getid_tipo_cuenta_banco_global());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getnumero_cuenta()!=null && !datogeneralempleadoLocal.getnumero_cuenta().equals(""))) {datogeneralempleadoBean.setnumero_cuenta(datogeneralempleadoLocal.getnumero_cuenta());}
			if(conDefault || (!conDefault && datogeneralempleadoLocal.getid_tipo_sangre()!=null && !datogeneralempleadoLocal.getid_tipo_sangre().equals(-1L))) {datogeneralempleadoBean.setid_tipo_sangre(datogeneralempleadoLocal.getid_tipo_sangre());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxDatoGeneralEmpleadoGenerico(Long idDatoGeneralEmpleadoSeleccionado,JComboBox jComboBoxDatoGeneralEmpleado,List<DatoGeneralEmpleado> datogeneralempleadosLocal)throws Exception {
		try {
			DatoGeneralEmpleado  datogeneralempleadoTemp=null;

			for(DatoGeneralEmpleado datogeneralempleadoAux:datogeneralempleadosLocal) {
				if(datogeneralempleadoAux.getId()!=null && datogeneralempleadoAux.getId().equals(idDatoGeneralEmpleadoSeleccionado)) {
					datogeneralempleadoTemp=datogeneralempleadoAux;
					break;
				}
			}

			jComboBoxDatoGeneralEmpleado.setSelectedItem(datogeneralempleadoTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxDatoGeneralEmpleadoGenerico(JComboBox jComboBoxDatoGeneralEmpleado,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxDatoGeneralEmpleado.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDatoGeneralEmpleado.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxDatoGeneralEmpleado.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDatoGeneralEmpleado.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDatoGeneralEmpleado.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxDatoGeneralEmpleado.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDatoGeneralEmpleado.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxDatoGeneralEmpleado.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxDatoGeneralEmpleado.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxDatoGeneralEmpleado.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			datogeneralempleado=(DatoGeneralEmpleado) datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			datogeneralempleado =(DatoGeneralEmpleado) datogeneralempleados.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empleado")) {
			//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.getempleado_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.getempleado_descripcion();
			}
		}

		if(sTipo.equals("NumeroPatronal")) {
			//sDescripcion=this.getActualNumeroPatronalForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.getnumeropatronal_descripcion();
			} else {
				//sDescripcion=this.getActualNumeroPatronalForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.getnumeropatronal_descripcion();
			}
		}

		if(sTipo.equals("TipoAfiliacion")) {
			//sDescripcion=this.getActualTipoAfiliacionForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.gettipoafiliacion_descripcion();
			} else {
				//sDescripcion=this.getActualTipoAfiliacionForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.gettipoafiliacion_descripcion();
			}
		}

		if(sTipo.equals("Pais")) {
			//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.getpais_descripcion();
			} else {
				//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.getpais_descripcion();
			}
		}

		if(sTipo.equals("Provincia")) {
			//sDescripcion=this.getActualProvinciaForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.getprovincia_descripcion();
			} else {
				//sDescripcion=this.getActualProvinciaForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.getprovincia_descripcion();
			}
		}

		if(sTipo.equals("Canton")) {
			//sDescripcion=this.getActualCantonForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.getcanton_descripcion();
			} else {
				//sDescripcion=this.getActualCantonForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.getcanton_descripcion();
			}
		}

		if(sTipo.equals("Parroquia")) {
			//sDescripcion=this.getActualParroquiaForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.getparroquia_descripcion();
			} else {
				//sDescripcion=this.getActualParroquiaForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.getparroquia_descripcion();
			}
		}

		if(sTipo.equals("Moneda")) {
			//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.getmoneda_descripcion();
			} else {
				//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.getmoneda_descripcion();
			}
		}

		if(sTipo.equals("TipoContrato")) {
			//sDescripcion=this.getActualTipoContratoForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.gettipocontrato_descripcion();
			} else {
				//sDescripcion=this.getActualTipoContratoForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.gettipocontrato_descripcion();
			}
		}

		if(sTipo.equals("TipoLibretaMili")) {
			//sDescripcion=this.getActualTipoLibretaMiliForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.gettipolibretamili_descripcion();
			} else {
				//sDescripcion=this.getActualTipoLibretaMiliForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.gettipolibretamili_descripcion();
			}
		}

		if(sTipo.equals("TipoGrupoFormaPago")) {
			//sDescripcion=this.getActualTipoGrupoFormaPagoForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.gettipogrupoformapago_descripcion();
			} else {
				//sDescripcion=this.getActualTipoGrupoFormaPagoForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.gettipogrupoformapago_descripcion();
			}
		}

		if(sTipo.equals("Banco")) {
			//sDescripcion=this.getActualBancoForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.getbanco_descripcion();
			} else {
				//sDescripcion=this.getActualBancoForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.getbanco_descripcion();
			}
		}

		if(sTipo.equals("TipoCuentaBancoGlobal")) {
			//sDescripcion=this.getActualTipoCuentaBancoGlobalForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.gettipocuentabancoglobal_descripcion();
			} else {
				//sDescripcion=this.getActualTipoCuentaBancoGlobalForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.gettipocuentabancoglobal_descripcion();
			}
		}

		if(sTipo.equals("TipoSangre")) {
			//sDescripcion=this.getActualTipoSangreForeignKeyDescripcion((Long)value);
			if(!datogeneralempleado.getIsNew() && !datogeneralempleado.getIsChanged() && !datogeneralempleado.getIsDeleted()) {
				sDescripcion=datogeneralempleado.gettiposangre_descripcion();
			} else {
				//sDescripcion=this.getActualTipoSangreForeignKeyDescripcion((Long)value);
				sDescripcion=datogeneralempleado.gettiposangre_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		DatoGeneralEmpleado datogeneralempleadoRow=new DatoGeneralEmpleado();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			datogeneralempleadoRow=(DatoGeneralEmpleado) datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			datogeneralempleadoRow=(DatoGeneralEmpleado) datogeneralempleados.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualDatoGeneralEmpleado(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaNuevoDatoGeneralEmpleado && this.isPermisoNuevoDatoGeneralEmpleado));			
			this.jButtonDuplicarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaDuplicarDatoGeneralEmpleado && this.isPermisoDuplicarDatoGeneralEmpleado));			
			this.jButtonCopiarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaCopiarDatoGeneralEmpleado && this.isPermisoCopiarDatoGeneralEmpleado));
			this.jButtonVerFormDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaVerFormDatoGeneralEmpleado && this.isPermisoVerFormDatoGeneralEmpleado));
			
			this.jButtonAbrirOrderByDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaOrdenDatoGeneralEmpleado && this.isPermisoOrdenDatoGeneralEmpleado));			
			
			this.jButtonNuevoRelacionesDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado && this.isPermisoNuevoDatoGeneralEmpleado));			
			this.jButtonNuevoGuardarCambiosDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaNuevoDatoGeneralEmpleado && this.isPermisoNuevoDatoGeneralEmpleado && this.isPermisoGuardarCambiosDatoGeneralEmpleado));
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonModificarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaModificarDatoGeneralEmpleado && this.isPermisoActualizarDatoGeneralEmpleado));	
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonActualizarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaActualizarDatoGeneralEmpleado && this.isPermisoActualizarDatoGeneralEmpleado));	
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonEliminarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaEliminarDatoGeneralEmpleado && this.isPermisoEliminarDatoGeneralEmpleado));
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonCancelarDatoGeneralEmpleado.setVisible(this.isVisibilidadCeldaCancelarDatoGeneralEmpleado);							
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonGuardarCambiosDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaGuardarDatoGeneralEmpleado && this.isPermisoGuardarCambiosDatoGeneralEmpleado));			
			
			}
						
			this.jButtonGuardarCambiosTablaDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado && this.isPermisoGuardarCambiosDatoGeneralEmpleado));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaNuevoDatoGeneralEmpleado && this.isPermisoNuevoDatoGeneralEmpleado));						
			this.jButtonDuplicarToolBarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaDuplicarDatoGeneralEmpleado && this.isPermisoDuplicarDatoGeneralEmpleado));						
			this.jButtonCopiarToolBarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaCopiarDatoGeneralEmpleado && this.isPermisoCopiarDatoGeneralEmpleado));			
			this.jButtonVerFormToolBarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaVerFormDatoGeneralEmpleado && this.isPermisoVerFormDatoGeneralEmpleado));			
			this.jButtonAbrirOrderByToolBarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaOrdenDatoGeneralEmpleado && this.isPermisoOrdenDatoGeneralEmpleado));
			this.jButtonNuevoRelacionesToolBarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado && this.isPermisoNuevoDatoGeneralEmpleado));			
			this.jButtonNuevoGuardarCambiosToolBarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaNuevoDatoGeneralEmpleado && this.isPermisoNuevoDatoGeneralEmpleado && this.isPermisoGuardarCambiosDatoGeneralEmpleado));			
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonModificarToolBarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaModificarDatoGeneralEmpleado && this.isPermisoActualizarDatoGeneralEmpleado));	
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonActualizarToolBarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaActualizarDatoGeneralEmpleado  && this.isPermisoActualizarDatoGeneralEmpleado));	
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonEliminarToolBarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaEliminarDatoGeneralEmpleado && this.isPermisoEliminarDatoGeneralEmpleado));
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonCancelarToolBarDatoGeneralEmpleado.setVisible(this.isVisibilidadCeldaCancelarDatoGeneralEmpleado);				
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonGuardarCambiosToolBarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaGuardarDatoGeneralEmpleado && this.isPermisoGuardarCambiosDatoGeneralEmpleado));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado && this.isPermisoGuardarCambiosDatoGeneralEmpleado));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaNuevoDatoGeneralEmpleado && this.isPermisoNuevoDatoGeneralEmpleado));			
			this.jMenuItemDuplicarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaDuplicarDatoGeneralEmpleado && this.isPermisoDuplicarDatoGeneralEmpleado));			
			this.jMenuItemCopiarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaCopiarDatoGeneralEmpleado && this.isPermisoCopiarDatoGeneralEmpleado));			
			this.jMenuItemVerFormDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaVerFormDatoGeneralEmpleado && this.isPermisoVerFormDatoGeneralEmpleado));			
			this.jMenuItemAbrirOrderByDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaOrdenDatoGeneralEmpleado && this.isPermisoOrdenDatoGeneralEmpleado));			
			//this.jMenuItemMostrarOcultarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaOrdenDatoGeneralEmpleado && this.isPermisoOrdenDatoGeneralEmpleado));
			this.jMenuItemDetalleAbrirOrderByDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaOrdenDatoGeneralEmpleado && this.isPermisoOrdenDatoGeneralEmpleado));			
			//this.jMenuItemDetalleMostrarOcultarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaOrdenDatoGeneralEmpleado && this.isPermisoOrdenDatoGeneralEmpleado));			
			this.jMenuItemNuevoRelacionesDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado && this.isPermisoNuevoDatoGeneralEmpleado));			
			this.jMenuItemNuevoGuardarCambiosDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaNuevoDatoGeneralEmpleado && this.isPermisoNuevoDatoGeneralEmpleado && this.isPermisoGuardarCambiosDatoGeneralEmpleado));									
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemModificarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaModificarDatoGeneralEmpleado && this.isPermisoActualizarDatoGeneralEmpleado));	
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemActualizarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaActualizarDatoGeneralEmpleado && this.isPermisoActualizarDatoGeneralEmpleado));	
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemEliminarDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaEliminarDatoGeneralEmpleado && this.isPermisoEliminarDatoGeneralEmpleado));
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemCancelarDatoGeneralEmpleado.setVisible(this.isVisibilidadCeldaCancelarDatoGeneralEmpleado);				
			}
			
			this.jMenuItemGuardarCambiosDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaGuardarDatoGeneralEmpleado && this.isPermisoGuardarCambiosDatoGeneralEmpleado));						
			this.jMenuItemGuardarCambiosTablaDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado && this.isPermisoGuardarCambiosDatoGeneralEmpleado));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=this.jButtonNuevoDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaDuplicarDatoGeneralEmpleado=this.jButtonDuplicarDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaCopiarDatoGeneralEmpleado=this.jButtonCopiarDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaVerFormDatoGeneralEmpleado=this.jButtonVerFormDatoGeneralEmpleado.isVisible();
			
			this.isVisibilidadCeldaOrdenDatoGeneralEmpleado=this.jButtonAbrirOrderByDatoGeneralEmpleado.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=this.jButtonNuevoRelacionesDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaModificarDatoGeneralEmpleado=this.jButtonModificarDatoGeneralEmpleado.isVisible();
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
			this.isVisibilidadCeldaActualizarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonActualizarDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaEliminarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonEliminarDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaCancelarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonCancelarDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonGuardarCambiosDatoGeneralEmpleado.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=this.jButtonGuardarCambiosTablaDatoGeneralEmpleado.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=this.jButtonNuevoToolBarDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=this.jButtonNuevoRelacionesToolBarDatoGeneralEmpleado.isVisible();
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
			this.isVisibilidadCeldaModificarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonModificarToolBarDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaActualizarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonActualizarToolBarDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaEliminarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonEliminarToolBarDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaCancelarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonCancelarToolBarDatoGeneralEmpleado.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=this.jButtonGuardarCambiosToolBarDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=this.jButtonGuardarCambiosTablaToolBarDatoGeneralEmpleado.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=this.jMenuItemNuevoDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=this.jMenuItemNuevoRelacionesDatoGeneralEmpleado.isVisible();
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
			this.isVisibilidadCeldaModificarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemModificarDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaActualizarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemActualizarDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaEliminarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemEliminarDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaCancelarDatoGeneralEmpleado=this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemCancelarDatoGeneralEmpleado.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=this.jMenuItemGuardarCambiosDatoGeneralEmpleado.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=this.jMenuItemGuardarCambiosTablaDatoGeneralEmpleado.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesDatoGeneralEmpleado(Boolean esInicializar) {
		if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {			
			if(this.datogeneralempleadoSessionBean.getConGuardarRelaciones()) {
				//if(this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesDatoGeneralEmpleado();
			}
			
			this.inicializarActualizarBindingBotonesManualDatoGeneralEmpleado(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualDatoGeneralEmpleado() {
		this.jButtonNuevoDatoGeneralEmpleado.setVisible(this.isPermisoNuevoDatoGeneralEmpleado);			
		this.jButtonDuplicarDatoGeneralEmpleado.setVisible(this.isPermisoDuplicarDatoGeneralEmpleado);			
		this.jButtonCopiarDatoGeneralEmpleado.setVisible(this.isPermisoCopiarDatoGeneralEmpleado);			
		this.jButtonVerFormDatoGeneralEmpleado.setVisible(this.isPermisoVerFormDatoGeneralEmpleado);			
		
		this.jButtonAbrirOrderByDatoGeneralEmpleado.setVisible(this.isPermisoOrdenDatoGeneralEmpleado);					
		
		this.jButtonNuevoRelacionesDatoGeneralEmpleado.setVisible(this.isPermisoNuevoDatoGeneralEmpleado);			
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonModificarDatoGeneralEmpleado.setVisible(this.isPermisoActualizarDatoGeneralEmpleado);	
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonActualizarDatoGeneralEmpleado.setVisible(this.isPermisoActualizarDatoGeneralEmpleado);	
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonEliminarDatoGeneralEmpleado.setVisible(this.isPermisoEliminarDatoGeneralEmpleado);
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonCancelarDatoGeneralEmpleado.setVisible(this.isVisibilidadCeldaCancelarDatoGeneralEmpleado);						
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonGuardarCambiosDatoGeneralEmpleado.setVisible(this.isPermisoGuardarCambiosDatoGeneralEmpleado);							
		}
		
		this.jButtonGuardarCambiosTablaDatoGeneralEmpleado.setVisible(this.isPermisoActualizarDatoGeneralEmpleado);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleDatoGeneralEmpleado() {
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonModificarDatoGeneralEmpleado.setVisible(this.isPermisoActualizarDatoGeneralEmpleado);	
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonActualizarDatoGeneralEmpleado.setVisible(this.isPermisoActualizarDatoGeneralEmpleado);	
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonEliminarDatoGeneralEmpleado.setVisible(this.isPermisoEliminarDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonCancelarDatoGeneralEmpleado.setVisible(this.isVisibilidadCeldaCancelarDatoGeneralEmpleado);							
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonGuardarCambiosDatoGeneralEmpleado.setVisible((this.isVisibilidadCeldaGuardarDatoGeneralEmpleado && this.isPermisoGuardarCambiosDatoGeneralEmpleado));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosDatoGeneralEmpleado() {
		if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualDatoGeneralEmpleado();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesDatoGeneralEmpleado() {
	}
	
	public void jTableDatosDatoGeneralEmpleadoListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarDatoGeneralEmpleado(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonid_empleadoDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleado=true;

			idTienePermisoempleado=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleado) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadoBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getId()!=null) {
					this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadoBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getId());
					this.empleadoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleadoDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.datogeneralempleado.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_numero_patronalDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisonumeropatronal=true;

			idTienePermisonumeropatronal=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(NumeroPatronalConstantesFunciones.CLASSNAME);

			if(idTienePermisonumeropatronal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.numeropatronalBeanSwingJInternalFrame=new NumeroPatronalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.numeropatronalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.numeropatronalBeanSwingJInternalFrame.getNumeroPatronalLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getid_numero_patronal()!=null) {
					this.numeropatronalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.numeropatronalBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getid_numero_patronal());
					this.numeropatronalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.numeropatronalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.numeropatronalBeanSwingJInternalFrame.inicializarActualizarBindingTablaNumeroPatronal();
				}

				JInternalFrameBase jinternalFrame =this.numeropatronalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBordernumeropatronal=(TitledBorder)this.numeropatronalBeanSwingJInternalFrame.jScrollPanelDatosNumeroPatronal.getBorder();

				titledBordernumeropatronal.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Numero Patronal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_numero_patronalDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getid_numero_patronal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_numero_patronal = "+this.datogeneralempleado.getid_numero_patronal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_afiliacionDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoafiliacion=true;

			idTienePermisotipoafiliacion=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(TipoAfiliacionConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoafiliacion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.tipoafiliacionBeanSwingJInternalFrame=new TipoAfiliacionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoafiliacionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoafiliacionBeanSwingJInternalFrame.getTipoAfiliacionLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getid_tipo_afiliacion()!=null) {
					this.tipoafiliacionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoafiliacionBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getid_tipo_afiliacion());
					this.tipoafiliacionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoafiliacionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoafiliacionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoAfiliacion();
				}

				JInternalFrameBase jinternalFrame =this.tipoafiliacionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBordertipoafiliacion=(TitledBorder)this.tipoafiliacionBeanSwingJInternalFrame.jScrollPanelDatosTipoAfiliacion.getBorder();

				titledBordertipoafiliacion.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Tipo Afiliacion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_afiliacionDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getid_tipo_afiliacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_afiliacion = "+this.datogeneralempleado.getid_tipo_afiliacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncarnet_iessDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getcarnet_iess()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where carnet_iess like '%"+this.datogeneralempleado.getcarnet_iess()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsectorial_iessDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getsectorial_iess()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sectorial_iess like '%"+this.datogeneralempleado.getsectorial_iess()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_paisDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisopais=true;

			idTienePermisopais=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(PaisConstantesFunciones.CLASSNAME);

			if(idTienePermisopais) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.paisBeanSwingJInternalFrame=new PaisBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.paisBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.paisBeanSwingJInternalFrame.getPaisLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getid_pais()!=null) {
					this.paisBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.paisBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getid_pais());
					this.paisBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.inicializarActualizarBindingTablaPais();
				}

				JInternalFrameBase jinternalFrame =this.paisBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBorderpais=(TitledBorder)this.paisBeanSwingJInternalFrame.jScrollPanelDatosPais.getBorder();

				titledBorderpais.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Pais");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_paisDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getid_pais()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_pais = "+this.datogeneralempleado.getid_pais().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_provinciaDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoprovincia=true;

			idTienePermisoprovincia=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(ProvinciaConstantesFunciones.CLASSNAME);

			if(idTienePermisoprovincia) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.provinciaBeanSwingJInternalFrame=new ProvinciaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.provinciaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.provinciaBeanSwingJInternalFrame.getProvinciaLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getid_provincia()!=null) {
					this.provinciaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.provinciaBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getid_provincia());
					this.provinciaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.provinciaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.provinciaBeanSwingJInternalFrame.inicializarActualizarBindingTablaProvincia();
				}

				JInternalFrameBase jinternalFrame =this.provinciaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBorderprovincia=(TitledBorder)this.provinciaBeanSwingJInternalFrame.jScrollPanelDatosProvincia.getBorder();

				titledBorderprovincia.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Provincia");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_provinciaDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getid_provincia()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_provincia = "+this.datogeneralempleado.getid_provincia().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cantonDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocanton=true;

			idTienePermisocanton=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(CantonConstantesFunciones.CLASSNAME);

			if(idTienePermisocanton) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.cantonBeanSwingJInternalFrame=new CantonBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cantonBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cantonBeanSwingJInternalFrame.getCantonLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getid_canton()!=null) {
					this.cantonBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cantonBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getid_canton());
					this.cantonBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cantonBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cantonBeanSwingJInternalFrame.inicializarActualizarBindingTablaCanton();
				}

				JInternalFrameBase jinternalFrame =this.cantonBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBordercanton=(TitledBorder)this.cantonBeanSwingJInternalFrame.jScrollPanelDatosCanton.getBorder();

				titledBordercanton.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Canton");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cantonDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getid_canton()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_canton = "+this.datogeneralempleado.getid_canton().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_parroquiaDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoparroquia=true;

			idTienePermisoparroquia=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(ParroquiaConstantesFunciones.CLASSNAME);

			if(idTienePermisoparroquia) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.parroquiaBeanSwingJInternalFrame=new ParroquiaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.parroquiaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.parroquiaBeanSwingJInternalFrame.getParroquiaLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getid_parroquia()!=null) {
					this.parroquiaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.parroquiaBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getid_parroquia());
					this.parroquiaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.parroquiaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.parroquiaBeanSwingJInternalFrame.inicializarActualizarBindingTablaParroquia();
				}

				JInternalFrameBase jinternalFrame =this.parroquiaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBorderparroquia=(TitledBorder)this.parroquiaBeanSwingJInternalFrame.jScrollPanelDatosParroquia.getBorder();

				titledBorderparroquia.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Parroquia");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_parroquiaDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getid_parroquia()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_parroquia = "+this.datogeneralempleado.getid_parroquia().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_nacimientoDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getfecha_nacimiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_nacimiento = '"+Funciones2.getStringPostgresDate(this.datogeneralempleado.getfecha_nacimiento())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_falleceDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getfecha_fallece()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_fallece = '"+Funciones2.getStringPostgresDate(this.datogeneralempleado.getfecha_fallece())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_evaluacionDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getvalor_evaluacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_evaluacion = "+this.datogeneralempleado.getvalor_evaluacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_horasDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getnumero_horas()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_horas = "+this.datogeneralempleado.getnumero_horas().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_horaDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getvalor_hora()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_hora = "+this.datogeneralempleado.getvalor_hora().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsalarioDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getsalario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where salario = "+this.datogeneralempleado.getsalario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_monedaDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomoneda=true;

			idTienePermisomoneda=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(MonedaConstantesFunciones.CLASSNAME);

			if(idTienePermisomoneda) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.monedaBeanSwingJInternalFrame=new MonedaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.monedaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.monedaBeanSwingJInternalFrame.getMonedaLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getid_moneda()!=null) {
					this.monedaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.monedaBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getid_moneda());
					this.monedaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMoneda();
				}

				JInternalFrameBase jinternalFrame =this.monedaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBordermoneda=(TitledBorder)this.monedaBeanSwingJInternalFrame.jScrollPanelDatosMoneda.getBorder();

				titledBordermoneda.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Moneda");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_monedaDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getid_moneda()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_moneda = "+this.datogeneralempleado.getid_moneda().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_contratoDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getnumero_contrato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_contrato like '%"+this.datogeneralempleado.getnumero_contrato()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_contratoDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocontrato=true;

			idTienePermisotipocontrato=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(TipoContratoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocontrato) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.tipocontratoBeanSwingJInternalFrame=new TipoContratoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocontratoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocontratoBeanSwingJInternalFrame.getTipoContratoLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getid_tipo_contrato()!=null) {
					this.tipocontratoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocontratoBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getid_tipo_contrato());
					this.tipocontratoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocontratoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocontratoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoContrato();
				}

				JInternalFrameBase jinternalFrame =this.tipocontratoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBordertipocontrato=(TitledBorder)this.tipocontratoBeanSwingJInternalFrame.jScrollPanelDatosTipoContrato.getBorder();

				titledBordertipocontrato.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Tipo Contrato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_contratoDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getid_tipo_contrato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_contrato = "+this.datogeneralempleado.getid_tipo_contrato().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor1DatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getvalor1()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor1 = "+this.datogeneralempleado.getvalor1().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor2DatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getvalor2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor2 = "+this.datogeneralempleado.getvalor2().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor3DatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getvalor3()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor3 = "+this.datogeneralempleado.getvalor3().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor4DatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getvalor4()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor4 = "+this.datogeneralempleado.getvalor4().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor5DatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getvalor5()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor5 = "+this.datogeneralempleado.getvalor5().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor6DatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getvalor6()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor6 = "+this.datogeneralempleado.getvalor6().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_aporta_seguro_socialDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getcon_aporta_seguro_social()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_aporta_seguro_social = "+this.datogeneralempleado.getcon_aporta_seguro_social().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_recibe_horas_extrasDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getcon_recibe_horas_extras()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_recibe_horas_extras = "+this.datogeneralempleado.getcon_recibe_horas_extras().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_descuento_impuestosDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getcon_descuento_impuestos()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_descuento_impuestos = "+this.datogeneralempleado.getcon_descuento_impuestos().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonpension_alimenticiaDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getpension_alimenticia()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where pension_alimenticia = "+this.datogeneralempleado.getpension_alimenticia().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_pago_por_horasDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getcon_pago_por_horas()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_pago_por_horas = "+this.datogeneralempleado.getcon_pago_por_horas().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_anticipoDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getcon_anticipo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_anticipo = "+this.datogeneralempleado.getcon_anticipo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_libreta_miliDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipolibretamili=true;

			idTienePermisotipolibretamili=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(TipoLibretaMiliConstantesFunciones.CLASSNAME);

			if(idTienePermisotipolibretamili) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.tipolibretamiliBeanSwingJInternalFrame=new TipoLibretaMiliBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipolibretamiliBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipolibretamiliBeanSwingJInternalFrame.getTipoLibretaMiliLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getid_tipo_libreta_mili()!=null) {
					this.tipolibretamiliBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipolibretamiliBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getid_tipo_libreta_mili());
					this.tipolibretamiliBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipolibretamiliBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipolibretamiliBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoLibretaMili();
				}

				JInternalFrameBase jinternalFrame =this.tipolibretamiliBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBordertipolibretamili=(TitledBorder)this.tipolibretamiliBeanSwingJInternalFrame.jScrollPanelDatosTipoLibretaMili.getBorder();

				titledBordertipolibretamili.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Tipo Libreta Mili");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_libreta_miliDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getid_tipo_libreta_mili()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_libreta_mili = "+this.datogeneralempleado.getid_tipo_libreta_mili().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonlibreta_militarDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getlibreta_militar()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where libreta_militar like '%"+this.datogeneralempleado.getlibreta_militar()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_grupo_forma_pagoDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipogrupoformapago=true;

			idTienePermisotipogrupoformapago=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(TipoGrupoFormaPagoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipogrupoformapago) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.tipogrupoformapagoBeanSwingJInternalFrame=new TipoGrupoFormaPagoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipogrupoformapagoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipogrupoformapagoBeanSwingJInternalFrame.getTipoGrupoFormaPagoLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getid_tipo_grupo_forma_pago()!=null) {
					this.tipogrupoformapagoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipogrupoformapagoBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getid_tipo_grupo_forma_pago());
					this.tipogrupoformapagoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipogrupoformapagoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipogrupoformapagoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoGrupoFormaPago();
				}

				JInternalFrameBase jinternalFrame =this.tipogrupoformapagoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBordertipogrupoformapago=(TitledBorder)this.tipogrupoformapagoBeanSwingJInternalFrame.jScrollPanelDatosTipoGrupoFormaPago.getBorder();

				titledBordertipogrupoformapago.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Tipo Grupo Forma Pago");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_grupo_forma_pagoDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getid_tipo_grupo_forma_pago()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_grupo_forma_pago = "+this.datogeneralempleado.getid_tipo_grupo_forma_pago().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bancoDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobanco=true;

			idTienePermisobanco=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(BancoConstantesFunciones.CLASSNAME);

			if(idTienePermisobanco) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.bancoBeanSwingJInternalFrame=new BancoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bancoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bancoBeanSwingJInternalFrame.getBancoLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getid_banco()!=null) {
					this.bancoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bancoBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getid_banco());
					this.bancoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bancoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bancoBeanSwingJInternalFrame.inicializarActualizarBindingTablaBanco();
				}

				JInternalFrameBase jinternalFrame =this.bancoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBorderbanco=(TitledBorder)this.bancoBeanSwingJInternalFrame.jScrollPanelDatosBanco.getBorder();

				titledBorderbanco.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Banco");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bancoDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getid_banco()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_banco = "+this.datogeneralempleado.getid_banco().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_cuenta_banco_globalDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocuentabancoglobal=true;

			idTienePermisotipocuentabancoglobal=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(TipoCuentaBancoGlobalConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocuentabancoglobal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.tipocuentabancoglobalBeanSwingJInternalFrame=new TipoCuentaBancoGlobalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocuentabancoglobalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocuentabancoglobalBeanSwingJInternalFrame.getTipoCuentaBancoGlobalLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getid_tipo_cuenta_banco_global()!=null) {
					this.tipocuentabancoglobalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocuentabancoglobalBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getid_tipo_cuenta_banco_global());
					this.tipocuentabancoglobalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocuentabancoglobalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocuentabancoglobalBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoCuentaBancoGlobal();
				}

				JInternalFrameBase jinternalFrame =this.tipocuentabancoglobalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBordertipocuentabancoglobal=(TitledBorder)this.tipocuentabancoglobalBeanSwingJInternalFrame.jScrollPanelDatosTipoCuentaBancoGlobal.getBorder();

				titledBordertipocuentabancoglobal.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Tipo Cuenta Banco Global");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_cuenta_banco_globalDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getid_tipo_cuenta_banco_global()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_cuenta_banco_global = "+this.datogeneralempleado.getid_tipo_cuenta_banco_global().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_cuentaDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getnumero_cuenta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_cuenta like '%"+this.datogeneralempleado.getnumero_cuenta()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_sangreDatoGeneralEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiposangre=true;

			idTienePermisotiposangre=this.tienePermisosUsuarioEnPaginaWebDatoGeneralEmpleado(TipoSangreConstantesFunciones.CLASSNAME);

			if(idTienePermisotiposangre) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDatoGeneralEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDatoGeneralEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);

				this.tiposangreBeanSwingJInternalFrame=new TipoSangreBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiposangreBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiposangreBeanSwingJInternalFrame.getTipoSangreLogic().setConnexion(this.datogeneralempleadoLogic.getConnexion());

				if(this.datogeneralempleado.getid_tipo_sangre()!=null) {
					this.tiposangreBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiposangreBeanSwingJInternalFrame.setIdActual(this.datogeneralempleado.getid_tipo_sangre());
					this.tiposangreBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiposangreBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiposangreBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoSangre();
				}

				JInternalFrameBase jinternalFrame =this.tiposangreBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDatoGeneralEmpleado=(TitledBorder)this.jScrollPanelDatosDatoGeneralEmpleado.getBorder();
				TitledBorder titledBordertiposangre=(TitledBorder)this.tiposangreBeanSwingJInternalFrame.jScrollPanelDatosTipoSangre.getBorder();

				titledBordertiposangre.setTitle(titledBorderDatoGeneralEmpleado.getTitle() + " -> Tipo Sangre");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_sangreDatoGeneralEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.getdatogeneralempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.datogeneralempleado==null) {
						this.datogeneralempleado = new DatoGeneralEmpleado();
					}

					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);
				}

				if(this.datogeneralempleado.getid_tipo_sangre()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_sangre = "+this.datogeneralempleado.getid_tipo_sangre().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDatoGeneralEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdBancoDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdBanco();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCantonDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdCanton();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdEmpleado();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMonedaDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdMoneda();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdNumeroPatronalDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdNumeroPatronal();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPaisDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdPais();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdParroquiaDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdParroquia();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdProvinciaDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdProvincia();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoAfiliacionDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdTipoAfiliacion();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoContratoDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdTipoContrato();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdTipoCuentaBancoGlobal();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoGrupoFormaPagoDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdTipoGrupoFormaPago();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoLibretaMiliDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdTipoLibretaMili();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoSangreDatoGeneralEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);

			this.getDatoGeneralEmpleadosFK_IdTipoSangre();

			this.inicializarActualizarBindingDatoGeneralEmpleado(false);

			//if(DatoGeneralEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.datogeneralempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameDatoGeneralEmpleado() {
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.setVisible(false);	    			
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.dispose();
			this.jInternalFrameDetalleFormDatoGeneralEmpleado=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado!=null) {
			this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.dispose();
			this.jInternalFrameReporteDinamicoDatoGeneralEmpleado=null;
		}
		
		if(this.jInternalFrameImportacionDatoGeneralEmpleado!=null) {
			this.jInternalFrameImportacionDatoGeneralEmpleado.setVisible(false);	    			
			this.jInternalFrameImportacionDatoGeneralEmpleado.dispose();
			this.jInternalFrameImportacionDatoGeneralEmpleado=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessDatoGeneralEmpleado();
			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			
			
			if(sTipo.equals("NuevoDatoGeneralEmpleado")) {
				jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarDatoGeneralEmpleado")) {
				jButtonDuplicarDatoGeneralEmpleadoActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarDatoGeneralEmpleado")) {
				jButtonCopiarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("VerFormDatoGeneralEmpleado")) {
				jButtonVerFormDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarDatoGeneralEmpleado")) {
				jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarDatoGeneralEmpleado")) {
				jButtonDuplicarDatoGeneralEmpleadoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoDatoGeneralEmpleado")) {
				jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarDatoGeneralEmpleado")) {
				jButtonDuplicarDatoGeneralEmpleadoActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesDatoGeneralEmpleado")) {
				jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarDatoGeneralEmpleado")) {
				jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesDatoGeneralEmpleado")) {
				jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarDatoGeneralEmpleado")) {
				jButtonModificarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarDatoGeneralEmpleado")) {
				jButtonModificarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarDatoGeneralEmpleado")) {
				jButtonModificarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarDatoGeneralEmpleado")) {
				jButtonActualizarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarDatoGeneralEmpleado")) {
				jButtonActualizarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarDatoGeneralEmpleado")) {
				jButtonActualizarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("EliminarDatoGeneralEmpleado")) {
				jButtonEliminarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarDatoGeneralEmpleado")) {
				jButtonEliminarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarDatoGeneralEmpleado")) {
				jButtonEliminarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("CancelarDatoGeneralEmpleado")) {
				jButtonCancelarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarDatoGeneralEmpleado")) {
				jButtonCancelarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarDatoGeneralEmpleado")) {
				jButtonCancelarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("CerrarDatoGeneralEmpleado")) {
				jButtonCerrarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarDatoGeneralEmpleado")) {
				jButtonCerrarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarDatoGeneralEmpleado")) {
				jButtonCerrarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarDatoGeneralEmpleado")) {
				jButtonMostrarOcultarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarDatoGeneralEmpleado")) {
				jButtonCancelarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosDatoGeneralEmpleado")) {
				jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarDatoGeneralEmpleado")) {
				jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarDatoGeneralEmpleado")) {
				jButtonCopiarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarDatoGeneralEmpleado")) {
				jButtonVerFormDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosDatoGeneralEmpleado")) {
				jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarDatoGeneralEmpleado")) {
				jButtonCopiarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormDatoGeneralEmpleado")) {
				jButtonVerFormDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaDatoGeneralEmpleado")) {
				jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarDatoGeneralEmpleado")) {
				jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaDatoGeneralEmpleado")) {
				jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionDatoGeneralEmpleado")) {
				jButtonRecargarInformacionDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarDatoGeneralEmpleado")) {
				jButtonRecargarInformacionDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionDatoGeneralEmpleado")) {
				jButtonRecargarInformacionDatoGeneralEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresDatoGeneralEmpleado")) {
				jButtonAnterioresDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarDatoGeneralEmpleado")) {
				jButtonAnterioresDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreDatoGeneralEmpleado")) {
				jButtonAnterioresDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesDatoGeneralEmpleado")) {
				jButtonSiguientesDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarDatoGeneralEmpleado")) {
				jButtonSiguientesDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesDatoGeneralEmpleado")) {
				jButtonSiguientesDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByDatoGeneralEmpleado") || sTipo.equals("MenuItemDetalleAbrirOrderByDatoGeneralEmpleado")) {
				jButtonAbrirOrderByDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarDatoGeneralEmpleado") || sTipo.equals("MenuItemDetalleMostrarOcultarDatoGeneralEmpleado")) {
				jButtonMostrarOcultarDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosDatoGeneralEmpleado")) {
				jButtonNuevoGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarDatoGeneralEmpleado")) {
				jButtonNuevoGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosDatoGeneralEmpleado")) {
				jButtonNuevoGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoDatoGeneralEmpleado")) {
				jButtonCerrarReporteDinamicoDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoDatoGeneralEmpleado")) {
				jButtonGenerarReporteDinamicoDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoDatoGeneralEmpleado")) {
				
				jButtonGenerarExcelReporteDinamicoDatoGeneralEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionDatoGeneralEmpleado")) {
				jButtonCerrarImportacionDatoGeneralEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionDatoGeneralEmpleado")) {
				
				jButtonGenerarImportacionDatoGeneralEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionDatoGeneralEmpleado")) {
				
				jButtonAbrirImportacionDatoGeneralEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesDatoGeneralEmpleado")) {
				jComboBoxTiposAccionesDatoGeneralEmpleadoActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesDatoGeneralEmpleado")) {
				jComboBoxTiposRelacionesDatoGeneralEmpleadoActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioDatoGeneralEmpleado")) {
				jComboBoxTiposAccionesDatoGeneralEmpleadoActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarDatoGeneralEmpleado")) {
				
				jComboBoxTiposSeleccionarDatoGeneralEmpleadoActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralDatoGeneralEmpleado")) {
				jTextFieldValorCampoGeneralDatoGeneralEmpleadoActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByDatoGeneralEmpleado")) {
				jButtonAbrirOrderByDatoGeneralEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarDatoGeneralEmpleado")) {
				jButtonAbrirOrderByDatoGeneralEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByDatoGeneralEmpleado")) {
				jButtonCerrarOrderByDatoGeneralEmpleadoActionPerformed(evt);
			} 
						
			
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_empleadoDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_empleadoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_numero_patronalDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_numero_patronalDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_numero_patronalDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_numero_patronalDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_afiliacionDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_tipo_afiliacionDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_afiliacionDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_tipo_afiliacionDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("carnet_iessDatoGeneralEmpleadoBusqueda")) {
				this.jButtoncarnet_iessDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sectorial_iessDatoGeneralEmpleadoBusqueda")) {
				this.jButtonsectorial_iessDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_paisDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_paisDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_provinciaDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_provinciaDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_provinciaDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_provinciaDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cantonDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_cantonDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cantonDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_cantonDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_parroquiaDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_parroquiaDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_parroquiaDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_parroquiaDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_nacimientoDatoGeneralEmpleadoBusqueda")) {
				this.jButtonfecha_nacimientoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_falleceDatoGeneralEmpleadoBusqueda")) {
				this.jButtonfecha_falleceDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_evaluacionDatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor_evaluacionDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_horasDatoGeneralEmpleadoBusqueda")) {
				this.jButtonnumero_horasDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_horaDatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor_horaDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("salarioDatoGeneralEmpleadoBusqueda")) {
				this.jButtonsalarioDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_monedaDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_monedaDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_contratoDatoGeneralEmpleadoBusqueda")) {
				this.jButtonnumero_contratoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_contratoDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_tipo_contratoDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_contratoDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_tipo_contratoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor1DatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor1DatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor2DatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor2DatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor3DatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor3DatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor4DatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor4DatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor5DatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor5DatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor6DatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor6DatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_aporta_seguro_socialDatoGeneralEmpleadoBusqueda")) {
				this.jButtoncon_aporta_seguro_socialDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_recibe_horas_extrasDatoGeneralEmpleadoBusqueda")) {
				this.jButtoncon_recibe_horas_extrasDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_descuento_impuestosDatoGeneralEmpleadoBusqueda")) {
				this.jButtoncon_descuento_impuestosDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("pension_alimenticiaDatoGeneralEmpleadoBusqueda")) {
				this.jButtonpension_alimenticiaDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_pago_por_horasDatoGeneralEmpleadoBusqueda")) {
				this.jButtoncon_pago_por_horasDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_anticipoDatoGeneralEmpleadoBusqueda")) {
				this.jButtoncon_anticipoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_libreta_miliDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_tipo_libreta_miliDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_libreta_miliDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_tipo_libreta_miliDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("libreta_militarDatoGeneralEmpleadoBusqueda")) {
				this.jButtonlibreta_militarDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_grupo_forma_pagoDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_tipo_grupo_forma_pagoDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_grupo_forma_pagoDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_tipo_grupo_forma_pagoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bancoDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_bancoDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bancoDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_bancoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cuenta_banco_globalDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_tipo_cuenta_banco_globalDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cuenta_banco_globalDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_tipo_cuenta_banco_globalDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_cuentaDatoGeneralEmpleadoBusqueda")) {
				this.jButtonnumero_cuentaDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_sangreDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_tipo_sangreDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_sangreDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_tipo_sangreDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			
			
			
			
			else if(sTipo.equals("FK_IdBancoDatoGeneralEmpleado")) {
				this.jButtonFK_IdBancoDatoGeneralEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCantonDatoGeneralEmpleado")) {
				this.jButtonFK_IdCantonDatoGeneralEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEmpleadoDatoGeneralEmpleado")) {
				this.jButtonFK_IdEmpleadoDatoGeneralEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdNumeroPatronalDatoGeneralEmpleado")) {
				this.jButtonFK_IdNumeroPatronalDatoGeneralEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdPaisDatoGeneralEmpleado")) {
				this.jButtonFK_IdPaisDatoGeneralEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdParroquiaDatoGeneralEmpleado")) {
				this.jButtonFK_IdParroquiaDatoGeneralEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdProvinciaDatoGeneralEmpleado")) {
				this.jButtonFK_IdProvinciaDatoGeneralEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoAfiliacionDatoGeneralEmpleado")) {
				this.jButtonFK_IdTipoAfiliacionDatoGeneralEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoContratoDatoGeneralEmpleado")) {
				this.jButtonFK_IdTipoContratoDatoGeneralEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado")) {
				this.jButtonFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoGrupoFormaPagoDatoGeneralEmpleado")) {
				this.jButtonFK_IdTipoGrupoFormaPagoDatoGeneralEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoLibretaMiliDatoGeneralEmpleado")) {
				this.jButtonFK_IdTipoLibretaMiliDatoGeneralEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoSangreDatoGeneralEmpleado")) {
				this.jButtonFK_IdTipoSangreDatoGeneralEmpleadoActionPerformed(evt);
			}
			
			;
			
			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessDatoGeneralEmpleado();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				


				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DatoGeneralEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DatoGeneralEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			DatoGeneralEmpleado datogeneralempleadoLocal=null;
			
			if(!this.getEsControlTabla()) {
				datogeneralempleadoLocal=this.datogeneralempleado;
			} else {
				datogeneralempleadoLocal=this.datogeneralempleadoAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
							
				
				


				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DatoGeneralEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DatoGeneralEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
								
						
				


				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DatoGeneralEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DatoGeneralEmpleado.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
								
				
				


				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DatoGeneralEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DatoGeneralEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
			
			this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
							
				
				


				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DatoGeneralEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DatoGeneralEmpleado.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
			
			this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
								
				
				


				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DatoGeneralEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DatoGeneralEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
			
			this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosDatoGeneralEmpleado")) {
					jCheckBoxSeleccionarTodosDatoGeneralEmpleadoItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosDatoGeneralEmpleado")) {
					jCheckBoxSeleccionadosDatoGeneralEmpleadoItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarDatoGeneralEmpleado")) {
					
				}
				
				


				
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DatoGeneralEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DatoGeneralEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
												
				
				


				
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DatoGeneralEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DatoGeneralEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DatoGeneralEmpleado.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DatoGeneralEmpleado.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.datogeneralempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.datogeneralempleado);
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DatoGeneralEmpleado.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DatoGeneralEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDatoGeneralEmpleadoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.datogeneralempleadoAnterior =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarDatoGeneralEmpleado")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosDatoGeneralEmpleadoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosDatoGeneralEmpleado.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.datogeneralempleado =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.datogeneralempleado);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarDatoGeneralEmpleado")) {
				
				}
				
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarDatoGeneralEmpleado")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosDatoGeneralEmpleado.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarDatoGeneralEmpleado")) {
			
			}
			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessDatoGeneralEmpleado();
			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			
			if(sTipo.equals("NuevoDatoGeneralEmpleado")) {
				jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarDatoGeneralEmpleado")) {
				jButtonDuplicarDatoGeneralEmpleadoActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarDatoGeneralEmpleado")) {
				jButtonCopiarDatoGeneralEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormDatoGeneralEmpleado")) {
				jButtonVerFormDatoGeneralEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesDatoGeneralEmpleado")) {
				jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarDatoGeneralEmpleado")) {
				jButtonModificarDatoGeneralEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarDatoGeneralEmpleado")) {
				jButtonActualizarDatoGeneralEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarDatoGeneralEmpleado")) {
				jButtonEliminarDatoGeneralEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaDatoGeneralEmpleado")) {
				jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarDatoGeneralEmpleado")) {
				jButtonCancelarDatoGeneralEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarDatoGeneralEmpleado")) {
				jButtonCerrarDatoGeneralEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosDatoGeneralEmpleado")) {
				jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosDatoGeneralEmpleado")) {
				jButtonNuevoGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByDatoGeneralEmpleado")) {
				jButtonAbrirOrderByDatoGeneralEmpleadoActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionDatoGeneralEmpleado")) {
				jButtonRecargarInformacionDatoGeneralEmpleadoActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresDatoGeneralEmpleado")) {
				jButtonAnterioresDatoGeneralEmpleadoActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesDatoGeneralEmpleado")) {
				jButtonSiguientesDatoGeneralEmpleadoActionPerformed(evt);			
			} 
			
			
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_empleadoDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_empleadoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_numero_patronalDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_numero_patronalDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_numero_patronalDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_numero_patronalDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_afiliacionDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_tipo_afiliacionDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_afiliacionDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_tipo_afiliacionDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("carnet_iessDatoGeneralEmpleadoBusqueda")) {
				this.jButtoncarnet_iessDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sectorial_iessDatoGeneralEmpleadoBusqueda")) {
				this.jButtonsectorial_iessDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_paisDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_paisDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_provinciaDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_provinciaDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_provinciaDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_provinciaDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cantonDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_cantonDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cantonDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_cantonDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_parroquiaDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_parroquiaDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_parroquiaDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_parroquiaDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_nacimientoDatoGeneralEmpleadoBusqueda")) {
				this.jButtonfecha_nacimientoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_falleceDatoGeneralEmpleadoBusqueda")) {
				this.jButtonfecha_falleceDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_evaluacionDatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor_evaluacionDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_horasDatoGeneralEmpleadoBusqueda")) {
				this.jButtonnumero_horasDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_horaDatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor_horaDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("salarioDatoGeneralEmpleadoBusqueda")) {
				this.jButtonsalarioDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_monedaDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_monedaDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_contratoDatoGeneralEmpleadoBusqueda")) {
				this.jButtonnumero_contratoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_contratoDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_tipo_contratoDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_contratoDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_tipo_contratoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor1DatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor1DatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor2DatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor2DatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor3DatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor3DatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor4DatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor4DatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor5DatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor5DatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor6DatoGeneralEmpleadoBusqueda")) {
				this.jButtonvalor6DatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_aporta_seguro_socialDatoGeneralEmpleadoBusqueda")) {
				this.jButtoncon_aporta_seguro_socialDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_recibe_horas_extrasDatoGeneralEmpleadoBusqueda")) {
				this.jButtoncon_recibe_horas_extrasDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_descuento_impuestosDatoGeneralEmpleadoBusqueda")) {
				this.jButtoncon_descuento_impuestosDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("pension_alimenticiaDatoGeneralEmpleadoBusqueda")) {
				this.jButtonpension_alimenticiaDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_pago_por_horasDatoGeneralEmpleadoBusqueda")) {
				this.jButtoncon_pago_por_horasDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_anticipoDatoGeneralEmpleadoBusqueda")) {
				this.jButtoncon_anticipoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_libreta_miliDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_tipo_libreta_miliDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_libreta_miliDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_tipo_libreta_miliDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("libreta_militarDatoGeneralEmpleadoBusqueda")) {
				this.jButtonlibreta_militarDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_grupo_forma_pagoDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_tipo_grupo_forma_pagoDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_grupo_forma_pagoDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_tipo_grupo_forma_pagoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bancoDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_bancoDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bancoDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_bancoDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cuenta_banco_globalDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_tipo_cuenta_banco_globalDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cuenta_banco_globalDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_tipo_cuenta_banco_globalDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_cuentaDatoGeneralEmpleadoBusqueda")) {
				this.jButtonnumero_cuentaDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_sangreDatoGeneralEmpleadoUpdate")) {
				this.jButtonid_tipo_sangreDatoGeneralEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_sangreDatoGeneralEmpleadoBusqueda")) {
				this.jButtonid_tipo_sangreDatoGeneralEmpleadoBusquedaActionPerformed(evt);
			}
			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessDatoGeneralEmpleado();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameDatoGeneralEmpleado")) {
				closingInternalFrameDatoGeneralEmpleado();
				
			} else if(sTipo.equals("jButtonCancelarDatoGeneralEmpleado")) {
				JInternalFrameBase jInternalFrameDetalleFormDatoGeneralEmpleado = (JInternalFrameBase)evt.getSource();
	            	
	            DatoGeneralEmpleadoBeanSwingJInternalFrame jInternalFrameParent=(DatoGeneralEmpleadoBeanSwingJInternalFrame)jInternalFrameDetalleFormDatoGeneralEmpleado.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarDatoGeneralEmpleadoActionPerformed(null);
			}
			
			DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.datogeneralempleado,new Object(),this.datogeneralempleadoParameterGeneral,this.datogeneralempleadoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormDatoGeneralEmpleado(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormDatoGeneralEmpleado(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormDatoGeneralEmpleado(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.datogeneralempleado)) {
			if(!esControlTabla) {
				if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);			
				}
				
				if(this.datogeneralempleadoSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.datogeneralempleadoReturnGeneral=datogeneralempleadoLogic.procesarEventosDatoGeneralEmpleadosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.datogeneralempleadoLogic.getDatoGeneralEmpleados(),this.datogeneralempleado,this.datogeneralempleadoParameterGeneral,this.isEsNuevoDatoGeneralEmpleado,classes);//this.datogeneralempleadoLogic.getDatoGeneralEmpleado()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanDatoGeneralEmpleado(this.datogeneralempleadoReturnGeneral,this.datogeneralempleadoBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.datogeneralempleadoSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanDatoGeneralEmpleado(classes,this.datogeneralempleadoReturnGeneral,this.datogeneralempleadoBean,false);
					}
						
					if(this.datogeneralempleadoReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyDatoGeneralEmpleado(this.datogeneralempleadoReturnGeneral.getDatoGeneralEmpleado());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioDatoGeneralEmpleado(this.datogeneralempleadoReturnGeneral.getDatoGeneralEmpleado());	
					}
						
					if(this.datogeneralempleadoReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioDatoGeneralEmpleado(this.datogeneralempleadoReturnGeneral.getDatoGeneralEmpleado(),classes);//this.datogeneralempleadoBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioDatoGeneralEmpleado(this.datogeneralempleado,classes);//this.datogeneralempleadoBean);									
				}
			
				if(DatoGeneralEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualDatoGeneralEmpleado(this.datogeneralempleado,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDatoGeneralEmpleado(this.datogeneralempleado);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.datogeneralempleadoAnterior!=null) {
						this.datogeneralempleado=this.datogeneralempleadoAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.datogeneralempleadoReturnGeneral=datogeneralempleadoLogic.procesarEventosDatoGeneralEmpleadosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.datogeneralempleadoLogic.getDatoGeneralEmpleados(),this.datogeneralempleado,this.datogeneralempleadoParameterGeneral,this.isEsNuevoDatoGeneralEmpleado,classes);//this.datogeneralempleadoLogic.getDatoGeneralEmpleado()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.datogeneralempleadoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.datogeneralempleadoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.datogeneralempleadoReturnGeneral.getDatoGeneralEmpleado(),datogeneralempleadoLogic.getDatoGeneralEmpleados());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.datogeneralempleadoReturnGeneral.getDatoGeneralEmpleado(),this.datogeneralempleados);
				}
				//ARCHITECTURE
				
				//this.jTableDatosDatoGeneralEmpleado.repaint();
				
				//((AbstractTableModel) this.jTableDatosDatoGeneralEmpleado.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosDatoGeneralEmpleado();
			}
		}
	}
	
	public void actualizarVisualTableDatosDatoGeneralEmpleado() throws Exception {
		
		DatoGeneralEmpleadoModel datogeneralempleadoModel=(DatoGeneralEmpleadoModel)this.jTableDatosDatoGeneralEmpleado.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			datogeneralempleadoModel.datogeneralempleados=this.datogeneralempleadoLogic.getDatoGeneralEmpleados();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			datogeneralempleadoModel.datogeneralempleados=this.datogeneralempleados;
		}
		
		
		((DatoGeneralEmpleadoModel) this.jTableDatosDatoGeneralEmpleado.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaDatoGeneralEmpleado() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getdatogeneralempleadoAnterior(),this.datogeneralempleadoLogic.getDatoGeneralEmpleados());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getdatogeneralempleadoAnterior(),this.datogeneralempleados);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosDatoGeneralEmpleado();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.datogeneralempleado,new Object(),generalEntityParameterGeneral,this.datogeneralempleadoReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.datogeneralempleadoSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=DatoGeneralEmpleadoConstantesFunciones.getClassesRelationshipsOfDatoGeneralEmpleado(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=DatoGeneralEmpleadoConstantesFunciones.getClassesRelationshipsFromStringsOfDatoGeneralEmpleado(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormDatoGeneralEmpleado(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.datogeneralempleado,new Object(),generalEntityParameterGeneral,this.datogeneralempleadoReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioDatoGeneralEmpleado(DatoGeneralEmpleadoBean datogeneralempleadoBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanDatoGeneralEmpleado(ArrayList<Classe> classes,DatoGeneralEmpleadoReturnGeneral datogeneralempleadoReturnGeneral,DatoGeneralEmpleadoBean datogeneralempleadoBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.datogeneralempleado)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado = new DatoGeneralEmpleadoDetalleFormJInternalFrame(jDesktopPane,this.datogeneralempleadoSessionBean.getConGuardarRelaciones(),this.datogeneralempleadoSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.setVisible(false);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.setSelected(false);						
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.datogeneralempleadoLogic=this.datogeneralempleadoLogic;
		
		this.cargarCombosFrameForeignKeyDatoGeneralEmpleado("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleDatoGeneralEmpleado();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDatoGeneralEmpleado();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyDatoGeneralEmpleado("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyDatoGeneralEmpleado();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDatoGeneralEmpleado"));
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonModificarDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"ModificarDatoGeneralEmpleado"));

		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonModificarToolBarDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"ModificarToolBarDatoGeneralEmpleado"));
					
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemModificarDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"MenuItemModificarDatoGeneralEmpleado"));		
		
		
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonActualizarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"ActualizarDatoGeneralEmpleado"));
		
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonActualizarToolBarDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDatoGeneralEmpleado"));
						
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemActualizarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDatoGeneralEmpleado"));		
		
		
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonEliminarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"EliminarDatoGeneralEmpleado"));
		
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonEliminarToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"EliminarToolBarDatoGeneralEmpleado"));
								
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemEliminarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDatoGeneralEmpleado"));		
		
		
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonCancelarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"CancelarDatoGeneralEmpleado"));
		
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonCancelarToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"CancelarToolBarDatoGeneralEmpleado"));
					
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemCancelarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDatoGeneralEmpleado"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemDetalleCerrarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDatoGeneralEmpleado"));		
		
		
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonGuardarCambiosToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDatoGeneralEmpleado"));
		
		
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonGuardarCambiosToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDatoGeneralEmpleado"));
		
		
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDatoGeneralEmpleado"));
		
		
				
		
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_empleadoDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_empleadoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_numero_patronalDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_numero_patronalDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_numero_patronalDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_numero_patronalDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_afiliacionDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_afiliacionDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_afiliacionDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_afiliacionDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncarnet_iessDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"carnet_iessDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonsectorial_iessDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"sectorial_iessDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_paisDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_paisDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_paisDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_paisDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_provinciaDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_provinciaDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_provinciaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_provinciaDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_cantonDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_cantonDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_cantonDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_cantonDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_parroquiaDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_parroquiaDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_parroquiaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_parroquiaDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonfecha_nacimientoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_nacimientoDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonfecha_falleceDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_falleceDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor_evaluacionDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor_evaluacionDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonnumero_horasDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"numero_horasDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor_horaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor_horaDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonsalarioDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"salarioDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_monedaDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_monedaDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_monedaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonnumero_contratoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"numero_contratoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_contratoDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_contratoDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_contratoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_contratoDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor1DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor1DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor2DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor2DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor3DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor3DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor4DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor4DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor5DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor5DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor6DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor6DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_aporta_seguro_socialDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_aporta_seguro_socialDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_recibe_horas_extrasDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_recibe_horas_extrasDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_descuento_impuestosDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_descuento_impuestosDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonpension_alimenticiaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"pension_alimenticiaDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_pago_por_horasDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_pago_por_horasDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_anticipoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_anticipoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_libreta_miliDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_libreta_miliDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_libreta_miliDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_libreta_miliDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonlibreta_militarDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"libreta_militarDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_grupo_forma_pagoDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_grupo_forma_pagoDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_grupo_forma_pagoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_grupo_forma_pagoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_bancoDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_bancoDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_bancoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_cuenta_banco_globalDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_cuenta_banco_globalDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonnumero_cuentaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cuentaDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_sangreDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_sangreDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_sangreDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_sangreDatoGeneralEmpleadoBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTabbedPaneRelacionesDatoGeneralEmpleado.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDatoGeneralEmpleado"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameDatoGeneralEmpleado"));
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDatoGeneralEmpleado"));
		}
		
		this.jTableDatosDatoGeneralEmpleado.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarDatoGeneralEmpleado"));
		
		this.jTableDatosDatoGeneralEmpleado.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarDatoGeneralEmpleado"));
		
		this.jButtonNuevoDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"NuevoDatoGeneralEmpleado"));
		
		this.jButtonDuplicarDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"DuplicarDatoGeneralEmpleado"));
		
		this.jButtonCopiarDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"CopiarDatoGeneralEmpleado"));
		
		this.jButtonVerFormDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"VerFormDatoGeneralEmpleado"));
		
		
		this.jButtonNuevoToolBarDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"NuevoToolBarDatoGeneralEmpleado"));
			
		this.jButtonDuplicarToolBarDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"DuplicarToolBarDatoGeneralEmpleado"));
			
		this.jMenuItemNuevoDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemNuevoDatoGeneralEmpleado"));
			
		this.jMenuItemDuplicarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarDatoGeneralEmpleado"));		
		
		
		this.jButtonNuevoRelacionesDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"NuevoRelacionesDatoGeneralEmpleado"));
		
		
		this.jButtonNuevoRelacionesToolBarDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarDatoGeneralEmpleado"));
			
		this.jMenuItemNuevoRelacionesDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesDatoGeneralEmpleado"));		
		
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonModificarDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"ModificarDatoGeneralEmpleado"));
		}
		
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonModificarToolBarDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"ModificarToolBarDatoGeneralEmpleado"));
			
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemModificarDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"MenuItemModificarDatoGeneralEmpleado"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonActualizarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"ActualizarDatoGeneralEmpleado"));
		}
		
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonActualizarToolBarDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDatoGeneralEmpleado"));
				
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemActualizarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDatoGeneralEmpleado"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonEliminarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"EliminarDatoGeneralEmpleado"));
		}
		
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonEliminarToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"EliminarToolBarDatoGeneralEmpleado"));
						
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemEliminarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDatoGeneralEmpleado"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonCancelarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"CancelarDatoGeneralEmpleado"));
		}
		
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonCancelarToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"CancelarToolBarDatoGeneralEmpleado"));
			
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemCancelarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDatoGeneralEmpleado"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarDatoGeneralEmpleado"));		
		
		
		this.jButtonCerrarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"CerrarDatoGeneralEmpleado"));
		
		
		this.jButtonCerrarToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"CerrarToolBarDatoGeneralEmpleado"));
			
		this.jMenuItemCerrarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemCerrarDatoGeneralEmpleado"));
			
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jMenuItemDetalleCerrarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDatoGeneralEmpleado"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonGuardarCambiosDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosDatoGeneralEmpleado"));
		}
		
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonGuardarCambiosToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDatoGeneralEmpleado"));
		}
		
		this.jButtonCopiarToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"CopiarToolBarDatoGeneralEmpleado"));
			
		this.jButtonVerFormToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"VerFormToolBarDatoGeneralEmpleado"));
		
		this.jMenuItemGuardarCambiosDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosDatoGeneralEmpleado"));
			
		this.jMenuItemCopiarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemCopiarDatoGeneralEmpleado"));		
		
		this.jMenuItemVerFormDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemVerFormDatoGeneralEmpleado"));		
		
		
		this.jButtonGuardarCambiosTablaDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDatoGeneralEmpleado"));
		
		
		this.jButtonGuardarCambiosTablaToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarDatoGeneralEmpleado"));
			
		this.jMenuItemGuardarCambiosTablaDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDatoGeneralEmpleado"));		
		
		
		
		this.jButtonRecargarInformacionDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"RecargarInformacionDatoGeneralEmpleado"));
					
		this.jButtonRecargarInformacionToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarDatoGeneralEmpleado"));
		
		this.jMenuItemRecargarInformacionDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionDatoGeneralEmpleado"));		
		
		
		
		this.jButtonAnterioresDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"AnterioresDatoGeneralEmpleado"));
		
		
		this.jButtonAnterioresToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"AnterioresToolBarDatoGeneralEmpleado"));
		
		this.jMenuItemAnterioresDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresDatoGeneralEmpleado"));		
		
		
		this.jButtonSiguientesDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"SiguientesDatoGeneralEmpleado"));
		
		
		this.jButtonSiguientesToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"SiguientesToolBarDatoGeneralEmpleado"));
			
		this.jMenuItemSiguientesDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesDatoGeneralEmpleado"));
			
		this.jMenuItemAbrirOrderByDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByDatoGeneralEmpleado"));
			
		this.jMenuItemMostrarOcultarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarDatoGeneralEmpleado"));
			
		this.jMenuItemDetalleAbrirOrderByDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByDatoGeneralEmpleado"));
			
		this.jMenuItemDetalleMostarOcultarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarDatoGeneralEmpleado"));		
		
		
		this.jButtonNuevoGuardarCambiosDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosDatoGeneralEmpleado"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarDatoGeneralEmpleado"));
			
		this.jMenuItemNuevoGuardarCambiosDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosDatoGeneralEmpleado"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosDatoGeneralEmpleado.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosDatoGeneralEmpleado"));

		this.jCheckBoxSeleccionadosDatoGeneralEmpleado.addItemListener(new CheckBoxItemListener(this,"SeleccionadosDatoGeneralEmpleado"));
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDatoGeneralEmpleado"));
		}
		
		
		this.jComboBoxTiposRelacionesDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"TiposRelacionesDatoGeneralEmpleado"));
			
		this.jComboBoxTiposAccionesDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"TiposAccionesDatoGeneralEmpleado"));
					
		this.jComboBoxTiposSeleccionarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"TiposSeleccionarDatoGeneralEmpleado"));
			
		this.jTextFieldValorCampoGeneralDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralDatoGeneralEmpleado"));		
		
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_empleadoDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_empleadoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_numero_patronalDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_numero_patronalDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_numero_patronalDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_numero_patronalDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_afiliacionDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_afiliacionDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_afiliacionDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_afiliacionDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncarnet_iessDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"carnet_iessDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonsectorial_iessDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"sectorial_iessDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_paisDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_paisDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_paisDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_paisDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_provinciaDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_provinciaDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_provinciaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_provinciaDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_cantonDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_cantonDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_cantonDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_cantonDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_parroquiaDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_parroquiaDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_parroquiaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_parroquiaDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonfecha_nacimientoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_nacimientoDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonfecha_falleceDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_falleceDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor_evaluacionDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor_evaluacionDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonnumero_horasDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"numero_horasDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor_horaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor_horaDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonsalarioDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"salarioDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_monedaDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_monedaDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_monedaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonnumero_contratoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"numero_contratoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_contratoDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_contratoDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_contratoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_contratoDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor1DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor1DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor2DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor2DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor3DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor3DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor4DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor4DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor5DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor5DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor6DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor6DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_aporta_seguro_socialDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_aporta_seguro_socialDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_recibe_horas_extrasDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_recibe_horas_extrasDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_descuento_impuestosDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_descuento_impuestosDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonpension_alimenticiaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"pension_alimenticiaDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_pago_por_horasDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_pago_por_horasDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_anticipoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_anticipoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_libreta_miliDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_libreta_miliDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_libreta_miliDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_libreta_miliDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonlibreta_militarDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"libreta_militarDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_grupo_forma_pagoDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_grupo_forma_pagoDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_grupo_forma_pagoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_grupo_forma_pagoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_bancoDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_bancoDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_bancoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_cuenta_banco_globalDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_cuenta_banco_globalDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonnumero_cuentaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cuentaDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_sangreDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_sangreDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_sangreDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_sangreDatoGeneralEmpleadoBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdBancoDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdBancoDatoGeneralEmpleado"));

			this.jButtonFK_IdCantonDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdCantonDatoGeneralEmpleado"));

			this.jButtonFK_IdEmpleadoDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoDatoGeneralEmpleado"));

			this.jButtonFK_IdNumeroPatronalDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdNumeroPatronalDatoGeneralEmpleado"));

			this.jButtonFK_IdPaisDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdPaisDatoGeneralEmpleado"));

			this.jButtonFK_IdParroquiaDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdParroquiaDatoGeneralEmpleado"));

			this.jButtonFK_IdProvinciaDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdProvinciaDatoGeneralEmpleado"));

			this.jButtonFK_IdTipoAfiliacionDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdTipoAfiliacionDatoGeneralEmpleado"));

			this.jButtonFK_IdTipoContratoDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdTipoContratoDatoGeneralEmpleado"));

			this.jButtonFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado"));

			this.jButtonFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdTipoGrupoFormaPagoDatoGeneralEmpleado"));

			this.jButtonFK_IdTipoLibretaMiliDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdTipoLibretaMiliDatoGeneralEmpleado"));

			this.jButtonFK_IdTipoSangreDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdTipoSangreDatoGeneralEmpleado"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoDatoGeneralEmpleado!=null) {
				this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDatoGeneralEmpleado"));
				this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDatoGeneralEmpleado"));
				this.jInternalFrameReporteDinamicoDatoGeneralEmpleado.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDatoGeneralEmpleado"));
			}
			
			//this.jButtonCerrarReporteDinamicoDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDatoGeneralEmpleado"));				
			//this.jButtonGenerarReporteDinamicoDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDatoGeneralEmpleado"));
			//this.jButtonGenerarExcelReporteDinamicoDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDatoGeneralEmpleado"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionDatoGeneralEmpleado!=null) {
				this.jInternalFrameImportacionDatoGeneralEmpleado.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDatoGeneralEmpleado"));
				this.jInternalFrameImportacionDatoGeneralEmpleado.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDatoGeneralEmpleado"));
				this.jInternalFrameImportacionDatoGeneralEmpleado.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDatoGeneralEmpleado"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"AbrirOrderByDatoGeneralEmpleado"));
			
			this.jButtonAbrirOrderByToolBarDatoGeneralEmpleado.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarDatoGeneralEmpleado"));			
			
			if(this.jInternalFrameOrderByDatoGeneralEmpleado!=null) {
				this.jInternalFrameOrderByDatoGeneralEmpleado.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDatoGeneralEmpleado"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTabbedPaneRelacionesDatoGeneralEmpleado.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDatoGeneralEmpleado"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameDatoGeneralEmpleado();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormDatoGeneralEmpleado = (JInternalFrameBase)event.getSource();
	            	
	            DatoGeneralEmpleadoBeanSwingJInternalFrame jInternalFrameParent=(DatoGeneralEmpleadoBeanSwingJInternalFrame)jInternalFrameDetalleFormDatoGeneralEmpleado.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarDatoGeneralEmpleadoActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosDatoGeneralEmpleado.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosDatoGeneralEmpleadoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosDatoGeneralEmpleado.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosDatoGeneralEmpleado.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoDatoGeneralEmpleado";
		inputMap = this.jButtonNuevoDatoGeneralEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoDatoGeneralEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesDatoGeneralEmpleado";
		inputMap = this.jButtonNuevoRelacionesDatoGeneralEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesDatoGeneralEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDatoGeneralEmpleadoActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarDatoGeneralEmpleado";
		inputMap = this.jButtonModificarDatoGeneralEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarDatoGeneralEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarDatoGeneralEmpleadoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarDatoGeneralEmpleado";
		inputMap = this.jButtonActualizarDatoGeneralEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarDatoGeneralEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarDatoGeneralEmpleadoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarDatoGeneralEmpleado";
		inputMap = this.jButtonEliminarDatoGeneralEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarDatoGeneralEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarDatoGeneralEmpleadoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarDatoGeneralEmpleado";
		inputMap = this.jButtonCancelarDatoGeneralEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarDatoGeneralEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarDatoGeneralEmpleadoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarDatoGeneralEmpleado";
		inputMap = this.jButtonCerrarDatoGeneralEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarDatoGeneralEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarDatoGeneralEmpleadoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonGuardarCambiosDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosDatoGeneralEmpleado";
		inputMap = this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonGuardarCambiosDatoGeneralEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonGuardarCambiosDatoGeneralEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosDatoGeneralEmpleado.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosDatoGeneralEmpleadoItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesDatoGeneralEmpleado.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesDatoGeneralEmpleadoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarDatoGeneralEmpleado.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarDatoGeneralEmpleadoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralDatoGeneralEmpleado.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralDatoGeneralEmpleadoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_empleadoDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_empleadoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_numero_patronalDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_numero_patronalDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_numero_patronalDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_numero_patronalDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_afiliacionDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_afiliacionDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_afiliacionDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_afiliacionDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncarnet_iessDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"carnet_iessDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonsectorial_iessDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"sectorial_iessDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_paisDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_paisDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_paisDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_paisDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_provinciaDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_provinciaDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_provinciaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_provinciaDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_cantonDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_cantonDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_cantonDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_cantonDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_parroquiaDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_parroquiaDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_parroquiaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_parroquiaDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonfecha_nacimientoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_nacimientoDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonfecha_falleceDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_falleceDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor_evaluacionDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor_evaluacionDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonnumero_horasDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"numero_horasDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor_horaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor_horaDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonsalarioDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"salarioDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_monedaDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_monedaDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_monedaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonnumero_contratoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"numero_contratoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_contratoDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_contratoDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_contratoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_contratoDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor1DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor1DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor2DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor2DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor3DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor3DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor4DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor4DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor5DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor5DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonvalor6DatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor6DatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_aporta_seguro_socialDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_aporta_seguro_socialDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_recibe_horas_extrasDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_recibe_horas_extrasDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_descuento_impuestosDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_descuento_impuestosDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonpension_alimenticiaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"pension_alimenticiaDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_pago_por_horasDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_pago_por_horasDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtoncon_anticipoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"con_anticipoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_libreta_miliDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_libreta_miliDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_libreta_miliDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_libreta_miliDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonlibreta_militarDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"libreta_militarDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_grupo_forma_pagoDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_grupo_forma_pagoDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_grupo_forma_pagoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_grupo_forma_pagoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_bancoDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_bancoDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_bancoDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_cuenta_banco_globalDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_cuenta_banco_globalDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalDatoGeneralEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonnumero_cuentaDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cuentaDatoGeneralEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_sangreDatoGeneralEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_sangreDatoGeneralEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jButtonid_tipo_sangreDatoGeneralEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_sangreDatoGeneralEmpleadoBusqueda"));
		
		
		this.jButtonFK_IdBancoDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdBancoDatoGeneralEmpleado"));

		this.jButtonFK_IdCantonDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdCantonDatoGeneralEmpleado"));

		this.jButtonFK_IdEmpleadoDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoDatoGeneralEmpleado"));

		this.jButtonFK_IdNumeroPatronalDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdNumeroPatronalDatoGeneralEmpleado"));

		this.jButtonFK_IdPaisDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdPaisDatoGeneralEmpleado"));

		this.jButtonFK_IdParroquiaDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdParroquiaDatoGeneralEmpleado"));

		this.jButtonFK_IdProvinciaDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdProvinciaDatoGeneralEmpleado"));

		this.jButtonFK_IdTipoAfiliacionDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdTipoAfiliacionDatoGeneralEmpleado"));

		this.jButtonFK_IdTipoContratoDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdTipoContratoDatoGeneralEmpleado"));

		this.jButtonFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado"));

		this.jButtonFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdTipoGrupoFormaPagoDatoGeneralEmpleado"));

		this.jButtonFK_IdTipoLibretaMiliDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdTipoLibretaMiliDatoGeneralEmpleado"));

		this.jButtonFK_IdTipoSangreDatoGeneralEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdTipoSangreDatoGeneralEmpleado"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionDatoGeneralEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionDatoGeneralEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarDatoGeneralEmpleadoActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarDatoGeneralEmpleado.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosDatoGeneralEmpleado(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleadoLogic.getDatoGeneralEmpleados()) {
					datogeneralempleadoAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DatoGeneralEmpleado datogeneralempleadoAux:datogeneralempleados) {
					datogeneralempleadoAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosDatoGeneralEmpleadoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleadoLogic.getDatoGeneralEmpleados()) {
						datogeneralempleadoAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DatoGeneralEmpleado datogeneralempleadoAux:datogeneralempleados) {
						datogeneralempleadoAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleadoLogic.getDatoGeneralEmpleados()) {
					
						if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL)) {
							existe=true;
							datogeneralempleadoAux.setcon_aporta_seguro_social(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS)) {
							existe=true;
							datogeneralempleadoAux.setcon_recibe_horas_extras(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS)) {
							existe=true;
							datogeneralempleadoAux.setcon_descuento_impuestos(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS)) {
							existe=true;
							datogeneralempleadoAux.setcon_pago_por_horas(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO)) {
							existe=true;
							datogeneralempleadoAux.setcon_anticipo(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DatoGeneralEmpleado datogeneralempleadoAux:datogeneralempleados) {
						
						if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL)) {
							existe=true;
							datogeneralempleadoAux.setcon_aporta_seguro_social(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS)) {
							existe=true;
							datogeneralempleadoAux.setcon_recibe_horas_extras(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS)) {
							existe=true;
							datogeneralempleadoAux.setcon_descuento_impuestos(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS)) {
							existe=true;
							datogeneralempleadoAux.setcon_pago_por_horas(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO)) {
							existe=true;
							datogeneralempleadoAux.setcon_anticipo(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDatoGeneralEmpleado.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDatoGeneralEmpleado.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosDatoGeneralEmpleadoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosDatoGeneralEmpleado.getSelectedRows();
			
			DatoGeneralEmpleado datogeneralempleadoLocal=new DatoGeneralEmpleado();
			
			//this.seleccionarTodosDatoGeneralEmpleado(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					datogeneralempleadoLocal =(DatoGeneralEmpleado) this.datogeneralempleadoLogic.getDatoGeneralEmpleados().toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					datogeneralempleadoLocal =(DatoGeneralEmpleado) this.datogeneralempleados.toArray()[this.jTableDatosDatoGeneralEmpleado.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				datogeneralempleadoLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleadoLogic.getDatoGeneralEmpleados()) {
						datogeneralempleadoAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DatoGeneralEmpleado datogeneralempleadoAux:datogeneralempleados) {
						datogeneralempleadoAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDatoGeneralEmpleado.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDatoGeneralEmpleado.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDatoGeneralEmpleado,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualDatoGeneralEmpleadoItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarDatoGeneralEmpleadoParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralDatoGeneralEmpleadoActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralDatoGeneralEmpleado.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleadoLogic.getDatoGeneralEmpleados()) {
				
						if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS)) {
							existe=true;
							datogeneralempleadoAux.setcarnet_iess(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS)) {
							existe=true;
							datogeneralempleadoAux.setsectorial_iess(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO)) {
							existe=true;
							datogeneralempleadoAux.setfecha_nacimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE)) {
							existe=true;
							datogeneralempleadoAux.setfecha_fallece(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION)) {
							existe=true;
							datogeneralempleadoAux.setvalor_evaluacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS)) {
							existe=true;
							datogeneralempleadoAux.setnumero_horas(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA)) {
							existe=true;
							datogeneralempleadoAux.setvalor_hora(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO)) {
							existe=true;
							datogeneralempleadoAux.setsalario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO)) {
							existe=true;
							datogeneralempleadoAux.setnumero_contrato(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1)) {
							existe=true;
							datogeneralempleadoAux.setvalor1(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2)) {
							existe=true;
							datogeneralempleadoAux.setvalor2(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3)) {
							existe=true;
							datogeneralempleadoAux.setvalor3(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4)) {
							existe=true;
							datogeneralempleadoAux.setvalor4(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5)) {
							existe=true;
							datogeneralempleadoAux.setvalor5(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6)) {
							existe=true;
							datogeneralempleadoAux.setvalor6(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA)) {
							existe=true;
							datogeneralempleadoAux.setpension_alimenticia(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR)) {
							existe=true;
							datogeneralempleadoAux.setlibreta_militar(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA)) {
							existe=true;
							datogeneralempleadoAux.setnumero_cuenta(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DatoGeneralEmpleado datogeneralempleadoAux:datogeneralempleados) {
					
						if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS)) {
							existe=true;
							datogeneralempleadoAux.setcarnet_iess(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS)) {
							existe=true;
							datogeneralempleadoAux.setsectorial_iess(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO)) {
							existe=true;
							datogeneralempleadoAux.setfecha_nacimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE)) {
							existe=true;
							datogeneralempleadoAux.setfecha_fallece(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION)) {
							existe=true;
							datogeneralempleadoAux.setvalor_evaluacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS)) {
							existe=true;
							datogeneralempleadoAux.setnumero_horas(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA)) {
							existe=true;
							datogeneralempleadoAux.setvalor_hora(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO)) {
							existe=true;
							datogeneralempleadoAux.setsalario(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO)) {
							existe=true;
							datogeneralempleadoAux.setnumero_contrato(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1)) {
							existe=true;
							datogeneralempleadoAux.setvalor1(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2)) {
							existe=true;
							datogeneralempleadoAux.setvalor2(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3)) {
							existe=true;
							datogeneralempleadoAux.setvalor3(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4)) {
							existe=true;
							datogeneralempleadoAux.setvalor4(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5)) {
							existe=true;
							datogeneralempleadoAux.setvalor5(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6)) {
							existe=true;
							datogeneralempleadoAux.setvalor6(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA)) {
							existe=true;
							datogeneralempleadoAux.setpension_alimenticia(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR)) {
							existe=true;
							datogeneralempleadoAux.setlibreta_militar(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA)) {
							existe=true;
							datogeneralempleadoAux.setnumero_cuenta(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesDatoGeneralEmpleadoActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioDatoGeneralEmpleado=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesDatoGeneralEmpleado.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteDatoGeneralEmpleado) {				
					conSplash=true;//false;										
					
					//this.startProcessDatoGeneralEmpleado(conSplash);
				
					this.generarReporteDatoGeneralEmpleadosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDatoGeneralEmpleado.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoDatoGeneralEmpleadosSeleccionados();
				//this.jComboBoxTiposAccionesDatoGeneralEmpleado.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDatoGeneralEmpleadosSeleccionados(false);
				//this.jComboBoxTiposAccionesDatoGeneralEmpleado.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDatoGeneralEmpleadosSeleccionados(true);
				//this.jComboBoxTiposAccionesDatoGeneralEmpleado.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDatoGeneralEmpleado();
				
				this.exportarDatoGeneralEmpleadosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDatoGeneralEmpleado.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionDatoGeneralEmpleados();
				//this.importarDatoGeneralEmpleados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDatoGeneralEmpleado.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDatoGeneralEmpleado();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelDatoGeneralEmpleadosSeleccionados();
				//this.jComboBoxTiposAccionesDatoGeneralEmpleado.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Dato General Empleado", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessDatoGeneralEmpleado();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoDatoGeneralEmpleado)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyDatoGeneralEmpleado(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Dato General Empleado",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDatoGeneralEmpleado.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.setSelectedIndex(0);					
				}	
			} 			
			else if(DatoGeneralEmpleadoBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteDatoGeneralEmpleado) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessDatoGeneralEmpleado(conSplash);
					
						//this.actualizarParametrosGeneralDatoGeneralEmpleado();
						
						this.generarReporteProcesoAccionDatoGeneralEmpleadosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesDatoGeneralEmpleado.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Dato General EmpleadoS SELECCIONADOS?", "MANTENIMIENTO DE Dato General Empleado", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessDatoGeneralEmpleado();
				
						this.actualizarParametrosGeneralDatoGeneralEmpleado();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.datogeneralempleadoReturnGeneral=datogeneralempleadoLogic.procesarAccionDatoGeneralEmpleadosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.datogeneralempleadoLogic.getDatoGeneralEmpleados(),this.datogeneralempleadoParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarDatoGeneralEmpleadoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDatoGeneralEmpleado.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralDatoGeneralEmpleado();
					
					DatoGeneralEmpleadoBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarDatoGeneralEmpleadoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDatoGeneralEmpleado.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxTiposAccionesFormularioDatoGeneralEmpleado.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessDatoGeneralEmpleado(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesDatoGeneralEmpleadoActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessDatoGeneralEmpleado();
			
			if(this.jInternalFrameDetalleFormDatoGeneralEmpleado==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();		
			DatoGeneralEmpleado datogeneralempleado=new DatoGeneralEmpleado();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingDatoGeneralEmpleado(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesDatoGeneralEmpleado.getSelectedItem();
			
			
			
			
			datogeneralempleadosSeleccionados=this.getDatoGeneralEmpleadosSeleccionados(true);
			//this.sTipoAccion;
			
			if(datogeneralempleadosSeleccionados.size()==1) {
				for(DatoGeneralEmpleado datogeneralempleadoAux:datogeneralempleadosSeleccionados) {
					datogeneralempleado=datogeneralempleadoAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessDatoGeneralEmpleado();
			
      		//this.finishProcessDatoGeneralEmpleado(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarDatoGeneralEmpleadoReturnGeneral() throws Exception {
		if(this.datogeneralempleadoReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.datogeneralempleadoReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.datogeneralempleadoReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.datogeneralempleadoReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.datogeneralempleadoReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.datogeneralempleadoReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingDatoGeneralEmpleado(false);
		}
		
		if(this.datogeneralempleadoReturnGeneral.getConRetornoLista() || this.datogeneralempleadoReturnGeneral.getConRetornoObjeto()) {
			if(this.datogeneralempleadoReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.datogeneralempleadoLogic.setDatoGeneralEmpleados(this.datogeneralempleadoReturnGeneral.getDatoGeneralEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.datogeneralempleadoReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.datogeneralempleadoLogic.setDatoGeneralEmpleado(this.datogeneralempleadoReturnGeneral.getDatoGeneralEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingDatoGeneralEmpleado(false);
		}
	}
	
	public void actualizarParametrosGeneralDatoGeneralEmpleado() throws Exception {
		
		
	}
	
	public ArrayList<DatoGeneralEmpleado> getDatoGeneralEmpleadosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioDatoGeneralEmpleado) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(DatoGeneralEmpleado datogeneralempleadoAux:datogeneralempleadoLogic.getDatoGeneralEmpleados()) {
					if(datogeneralempleadoAux.getIsSelected()) {
						datogeneralempleadosSeleccionados.add(datogeneralempleadoAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DatoGeneralEmpleado datogeneralempleadoAux:this.datogeneralempleados) {
					if(datogeneralempleadoAux.getIsSelected()) {
						datogeneralempleadosSeleccionados.add(datogeneralempleadoAux);				
					}
				}
			}
			
			if(datogeneralempleadosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						datogeneralempleadosSeleccionados.addAll(this.datogeneralempleadoLogic.getDatoGeneralEmpleados());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						datogeneralempleadosSeleccionados.addAll(this.datogeneralempleados);				
					}
				}
			}
		} else {
			datogeneralempleadosSeleccionados.add(this.datogeneralempleado);
		}
		
		return datogeneralempleadosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteDatoGeneralEmpleadosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalDatoGeneralEmpleadosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoDatoGeneralEmpleadosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDatoGeneralEmpleadosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDatoGeneralEmpleadosSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Dato General Empleado",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesDatoGeneralEmpleadosSeleccionados() throws Exception {
		ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();		
		
		datogeneralempleadosSeleccionados=this.getDatoGeneralEmpleadosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteDatoGeneralEmpleados("Todos",datogeneralempleadosSeleccionados);
		
	}	
	
	public void generarReporteNormalDatoGeneralEmpleadosSeleccionados() throws Exception {
		ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();		
		
		datogeneralempleadosSeleccionados=this.getDatoGeneralEmpleadosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteDatoGeneralEmpleados("Todos",datogeneralempleadosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionDatoGeneralEmpleadosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();
		
		datogeneralempleadosSeleccionados=this.getDatoGeneralEmpleadosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteDatoGeneralEmpleados("Todos",datogeneralempleadosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoDatoGeneralEmpleadosSeleccionados() throws Exception {
		ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();		
		
		
		this.abrirInicializarFrameReporteDinamicoDatoGeneralEmpleado();
		
		
		datogeneralempleadosSeleccionados=this.getDatoGeneralEmpleadosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoDatoGeneralEmpleado();
		
		
		//this.generarReporteDatoGeneralEmpleados("Todos",datogeneralempleadosSeleccionados ,datogeneralempleadoImplementable,datogeneralempleadoImplementableHome);
	}
	
	public void mostrarImportacionDatoGeneralEmpleados() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionDatoGeneralEmpleado();
		
		this.abrirFrameImportacionDatoGeneralEmpleado();		
		
			
		//this.generarReporteDatoGeneralEmpleados("Todos",datogeneralempleadosSeleccionados ,datogeneralempleadoImplementable,datogeneralempleadoImplementableHome);
	}
	
	public void importarDatoGeneralEmpleados() throws Exception {		
	
	}
	
	public void exportarDatoGeneralEmpleadosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelDatoGeneralEmpleadosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoDatoGeneralEmpleadosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlDatoGeneralEmpleadosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Dato General Empleado",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoDatoGeneralEmpleadosSeleccionados() throws Exception {
		ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();		
		
		datogeneralempleadosSeleccionados=this.getDatoGeneralEmpleadosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"datogeneralempleado."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarDatoGeneralEmpleado(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(DatoGeneralEmpleado datogeneralempleadoAux:datogeneralempleadosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarDatoGeneralEmpleado(datogeneralempleadoAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//datogeneralempleadoAux.setsDetalleGeneralEntityReporte(datogeneralempleadoAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Dato General Empleado",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarDatoGeneralEmpleado(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_IDMONEDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=datogeneralempleado.getempleado_descripcion();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getnumeropatronal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.gettipoafiliacion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getcarnet_iess();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getsectorial_iess();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getpais_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getprovincia_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getcanton_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getparroquia_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getfecha_nacimiento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getfecha_fallece().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getvalor_evaluacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getnumero_horas().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getvalor_hora().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getsalario().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getmoneda_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getnumero_contrato();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.gettipocontrato_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getvalor1().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getvalor2().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getvalor3().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getvalor4().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getvalor5().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getvalor6().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getcon_aporta_seguro_social().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getcon_recibe_horas_extras().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getcon_descuento_impuestos().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getpension_alimenticia().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getcon_pago_por_horas().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getcon_anticipo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.gettipolibretamili_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getlibreta_militar();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.gettipogrupoformapago_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getbanco_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.gettipocuentabancoglobal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.getnumero_cuenta();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=datogeneralempleado.gettiposangre_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelDatoGeneralEmpleadosSeleccionados() throws Exception {
		ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();		
		
		datogeneralempleadosSeleccionados=this.getDatoGeneralEmpleadosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"datogeneralempleado.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("DatoGeneralEmpleados");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelDatoGeneralEmpleado(row);				
				iRow++;
			}				
			
			for(DatoGeneralEmpleado datogeneralempleadoAux:datogeneralempleadosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelDatoGeneralEmpleado(datogeneralempleadoAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Dato General Empleado",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlDatoGeneralEmpleadosSeleccionados() throws Exception {
		ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();		
		
		datogeneralempleadosSeleccionados=this.getDatoGeneralEmpleadosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"datogeneralempleado.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("datogeneralempleados");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("datogeneralempleado");
			//elementRoot.appendChild(element);
		
			for(DatoGeneralEmpleado datogeneralempleadoAux:datogeneralempleadosSeleccionados) {
				element = document.createElement("datogeneralempleado");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlDatoGeneralEmpleado(datogeneralempleadoAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Dato General Empleado",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelDatoGeneralEmpleado(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOREVALUACION);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROHORAS);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALORHORA);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_SALARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDMONEDA);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR1);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR2);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR3);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR4);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR5);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_VALOR6);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_PENSIONALIMENTICIA);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getempleado_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getnumeropatronal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.gettipoafiliacion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getcarnet_iess());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getsectorial_iess());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getpais_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getprovincia_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getcanton_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getparroquia_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getfecha_nacimiento());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getfecha_fallece());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getvalor_evaluacion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getnumero_horas());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getvalor_hora());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getsalario());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getmoneda_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getnumero_contrato());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.gettipocontrato_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getvalor1());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getvalor2());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getvalor3());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getvalor4());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getvalor5());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getvalor6());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getcon_aporta_seguro_social());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getcon_recibe_horas_extras());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getcon_descuento_impuestos());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getpension_alimenticia());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getcon_pago_por_horas());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getcon_anticipo());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.gettipolibretamili_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getlibreta_militar());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.gettipogrupoformapago_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getbanco_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.gettipocuentabancoglobal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.getnumero_cuenta());
		cell = row.createCell(iColumn++);cell.setCellValue(datogeneralempleado.gettiposangre_descripcion());				
	}
	
	public void setFilaDatosExportarXmlDatoGeneralEmpleado(DatoGeneralEmpleado datogeneralempleado,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementempleado_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.ID);
		elementempleado_descripcion.appendChild(document.createTextNode(datogeneralempleado.getempleado_descripcion()));
		element.appendChild(elementempleado_descripcion);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(DatoGeneralEmpleadoConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(datogeneralempleado.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementnumeropatronal_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.IDNUMEROPATRONAL);
		elementnumeropatronal_descripcion.appendChild(document.createTextNode(datogeneralempleado.getnumeropatronal_descripcion()));
		element.appendChild(elementnumeropatronal_descripcion);

		Element elementtipoafiliacion_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.IDTIPOAFILIACION);
		elementtipoafiliacion_descripcion.appendChild(document.createTextNode(datogeneralempleado.gettipoafiliacion_descripcion()));
		element.appendChild(elementtipoafiliacion_descripcion);

		Element elementcarnet_iess = document.createElement(DatoGeneralEmpleadoConstantesFunciones.CARNETIESS);
		elementcarnet_iess.appendChild(document.createTextNode(datogeneralempleado.getcarnet_iess().trim()));
		element.appendChild(elementcarnet_iess);

		Element elementsectorial_iess = document.createElement(DatoGeneralEmpleadoConstantesFunciones.SECTORIALIESS);
		elementsectorial_iess.appendChild(document.createTextNode(datogeneralempleado.getsectorial_iess().trim()));
		element.appendChild(elementsectorial_iess);

		Element elementpais_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.IDPAIS);
		elementpais_descripcion.appendChild(document.createTextNode(datogeneralempleado.getpais_descripcion()));
		element.appendChild(elementpais_descripcion);

		Element elementprovincia_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.IDPROVINCIA);
		elementprovincia_descripcion.appendChild(document.createTextNode(datogeneralempleado.getprovincia_descripcion()));
		element.appendChild(elementprovincia_descripcion);

		Element elementcanton_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.IDCANTON);
		elementcanton_descripcion.appendChild(document.createTextNode(datogeneralempleado.getcanton_descripcion()));
		element.appendChild(elementcanton_descripcion);

		Element elementparroquia_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.IDPARROQUIA);
		elementparroquia_descripcion.appendChild(document.createTextNode(datogeneralempleado.getparroquia_descripcion()));
		element.appendChild(elementparroquia_descripcion);

		Element elementfecha_nacimiento = document.createElement(DatoGeneralEmpleadoConstantesFunciones.FECHANACIMIENTO);
		elementfecha_nacimiento.appendChild(document.createTextNode(datogeneralempleado.getfecha_nacimiento().toString().trim()));
		element.appendChild(elementfecha_nacimiento);

		Element elementfecha_fallece = document.createElement(DatoGeneralEmpleadoConstantesFunciones.FECHAFALLECE);
		elementfecha_fallece.appendChild(document.createTextNode(datogeneralempleado.getfecha_fallece().toString().trim()));
		element.appendChild(elementfecha_fallece);

		Element elementvalor_evaluacion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.VALOREVALUACION);
		elementvalor_evaluacion.appendChild(document.createTextNode(datogeneralempleado.getvalor_evaluacion().toString().trim()));
		element.appendChild(elementvalor_evaluacion);

		Element elementnumero_horas = document.createElement(DatoGeneralEmpleadoConstantesFunciones.NUMEROHORAS);
		elementnumero_horas.appendChild(document.createTextNode(datogeneralempleado.getnumero_horas().toString().trim()));
		element.appendChild(elementnumero_horas);

		Element elementvalor_hora = document.createElement(DatoGeneralEmpleadoConstantesFunciones.VALORHORA);
		elementvalor_hora.appendChild(document.createTextNode(datogeneralempleado.getvalor_hora().toString().trim()));
		element.appendChild(elementvalor_hora);

		Element elementsalario = document.createElement(DatoGeneralEmpleadoConstantesFunciones.SALARIO);
		elementsalario.appendChild(document.createTextNode(datogeneralempleado.getsalario().toString().trim()));
		element.appendChild(elementsalario);

		Element elementmoneda_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.IDMONEDA);
		elementmoneda_descripcion.appendChild(document.createTextNode(datogeneralempleado.getmoneda_descripcion()));
		element.appendChild(elementmoneda_descripcion);

		Element elementnumero_contrato = document.createElement(DatoGeneralEmpleadoConstantesFunciones.NUMEROCONTRATO);
		elementnumero_contrato.appendChild(document.createTextNode(datogeneralempleado.getnumero_contrato().trim()));
		element.appendChild(elementnumero_contrato);

		Element elementtipocontrato_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.IDTIPOCONTRATO);
		elementtipocontrato_descripcion.appendChild(document.createTextNode(datogeneralempleado.gettipocontrato_descripcion()));
		element.appendChild(elementtipocontrato_descripcion);

		Element elementvalor1 = document.createElement(DatoGeneralEmpleadoConstantesFunciones.VALOR1);
		elementvalor1.appendChild(document.createTextNode(datogeneralempleado.getvalor1().toString().trim()));
		element.appendChild(elementvalor1);

		Element elementvalor2 = document.createElement(DatoGeneralEmpleadoConstantesFunciones.VALOR2);
		elementvalor2.appendChild(document.createTextNode(datogeneralempleado.getvalor2().toString().trim()));
		element.appendChild(elementvalor2);

		Element elementvalor3 = document.createElement(DatoGeneralEmpleadoConstantesFunciones.VALOR3);
		elementvalor3.appendChild(document.createTextNode(datogeneralempleado.getvalor3().toString().trim()));
		element.appendChild(elementvalor3);

		Element elementvalor4 = document.createElement(DatoGeneralEmpleadoConstantesFunciones.VALOR4);
		elementvalor4.appendChild(document.createTextNode(datogeneralempleado.getvalor4().toString().trim()));
		element.appendChild(elementvalor4);

		Element elementvalor5 = document.createElement(DatoGeneralEmpleadoConstantesFunciones.VALOR5);
		elementvalor5.appendChild(document.createTextNode(datogeneralempleado.getvalor5().toString().trim()));
		element.appendChild(elementvalor5);

		Element elementvalor6 = document.createElement(DatoGeneralEmpleadoConstantesFunciones.VALOR6);
		elementvalor6.appendChild(document.createTextNode(datogeneralempleado.getvalor6().toString().trim()));
		element.appendChild(elementvalor6);

		Element elementcon_aporta_seguro_social = document.createElement(DatoGeneralEmpleadoConstantesFunciones.CONAPORTASEGUROSOCIAL);
		elementcon_aporta_seguro_social.appendChild(document.createTextNode(datogeneralempleado.getcon_aporta_seguro_social().toString().trim()));
		element.appendChild(elementcon_aporta_seguro_social);

		Element elementcon_recibe_horas_extras = document.createElement(DatoGeneralEmpleadoConstantesFunciones.CONRECIBEHORASEXTRAS);
		elementcon_recibe_horas_extras.appendChild(document.createTextNode(datogeneralempleado.getcon_recibe_horas_extras().toString().trim()));
		element.appendChild(elementcon_recibe_horas_extras);

		Element elementcon_descuento_impuestos = document.createElement(DatoGeneralEmpleadoConstantesFunciones.CONDESCUENTOIMPUESTOS);
		elementcon_descuento_impuestos.appendChild(document.createTextNode(datogeneralempleado.getcon_descuento_impuestos().toString().trim()));
		element.appendChild(elementcon_descuento_impuestos);

		Element elementpension_alimenticia = document.createElement(DatoGeneralEmpleadoConstantesFunciones.PENSIONALIMENTICIA);
		elementpension_alimenticia.appendChild(document.createTextNode(datogeneralempleado.getpension_alimenticia().toString().trim()));
		element.appendChild(elementpension_alimenticia);

		Element elementcon_pago_por_horas = document.createElement(DatoGeneralEmpleadoConstantesFunciones.CONPAGOPORHORAS);
		elementcon_pago_por_horas.appendChild(document.createTextNode(datogeneralempleado.getcon_pago_por_horas().toString().trim()));
		element.appendChild(elementcon_pago_por_horas);

		Element elementcon_anticipo = document.createElement(DatoGeneralEmpleadoConstantesFunciones.CONANTICIPO);
		elementcon_anticipo.appendChild(document.createTextNode(datogeneralempleado.getcon_anticipo().toString().trim()));
		element.appendChild(elementcon_anticipo);

		Element elementtipolibretamili_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.IDTIPOLIBRETAMILI);
		elementtipolibretamili_descripcion.appendChild(document.createTextNode(datogeneralempleado.gettipolibretamili_descripcion()));
		element.appendChild(elementtipolibretamili_descripcion);

		Element elementlibreta_militar = document.createElement(DatoGeneralEmpleadoConstantesFunciones.LIBRETAMILITAR);
		elementlibreta_militar.appendChild(document.createTextNode(datogeneralempleado.getlibreta_militar().trim()));
		element.appendChild(elementlibreta_militar);

		Element elementtipogrupoformapago_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.IDTIPOGRUPOFORMAPAGO);
		elementtipogrupoformapago_descripcion.appendChild(document.createTextNode(datogeneralempleado.gettipogrupoformapago_descripcion()));
		element.appendChild(elementtipogrupoformapago_descripcion);

		Element elementbanco_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.IDBANCO);
		elementbanco_descripcion.appendChild(document.createTextNode(datogeneralempleado.getbanco_descripcion()));
		element.appendChild(elementbanco_descripcion);

		Element elementtipocuentabancoglobal_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.IDTIPOCUENTABANCOGLOBAL);
		elementtipocuentabancoglobal_descripcion.appendChild(document.createTextNode(datogeneralempleado.gettipocuentabancoglobal_descripcion()));
		element.appendChild(elementtipocuentabancoglobal_descripcion);

		Element elementnumero_cuenta = document.createElement(DatoGeneralEmpleadoConstantesFunciones.NUMEROCUENTA);
		elementnumero_cuenta.appendChild(document.createTextNode(datogeneralempleado.getnumero_cuenta().trim()));
		element.appendChild(elementnumero_cuenta);

		Element elementtiposangre_descripcion = document.createElement(DatoGeneralEmpleadoConstantesFunciones.IDTIPOSANGRE);
		elementtiposangre_descripcion.appendChild(document.createTextNode(datogeneralempleado.gettiposangre_descripcion()));
		element.appendChild(elementtiposangre_descripcion);
	}
	
	public void generarReporteGroupGenericoDatoGeneralEmpleadosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados=new ArrayList<DatoGeneralEmpleado>();
		
		datogeneralempleadosSeleccionados=this.getDatoGeneralEmpleadosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoDatoGeneralEmpleado(datogeneralempleadosSeleccionados);
		
		this.generarReporteDatoGeneralEmpleados("Todos",datogeneralempleadosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoDatoGeneralEmpleado(ArrayList<DatoGeneralEmpleado> datogeneralempleadosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(DatoGeneralEmpleado datogeneralempleadoAux:datogeneralempleadosSeleccionados) {
				datogeneralempleadoAux.setsDetalleGeneralEntityReporte(datogeneralempleadoAux.toString());
			
				if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDNUMEROPATRONAL)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.getnumeropatronal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOAFILIACION)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.gettipoafiliacion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CARNETIESS)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.getcarnet_iess());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_SECTORIALIESS)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.getsectorial_iess());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPAIS)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.getpais_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPROVINCIA)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.getprovincia_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDCANTON)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.getcanton_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDPARROQUIA)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.getparroquia_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHANACIMIENTO)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(datogeneralempleadoAux.getfecha_nacimiento()));
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_FECHAFALLECE)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(datogeneralempleadoAux.getfecha_fallece()));
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDMONEDA)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.getmoneda_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCONTRATO)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.getnumero_contrato());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCONTRATO)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.gettipocontrato_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONAPORTASEGUROSOCIAL)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(datogeneralempleadoAux.getcon_aporta_seguro_social()));
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONRECIBEHORASEXTRAS)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(datogeneralempleadoAux.getcon_recibe_horas_extras()));
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONDESCUENTOIMPUESTOS)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(datogeneralempleadoAux.getcon_descuento_impuestos()));
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONPAGOPORHORAS)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(datogeneralempleadoAux.getcon_pago_por_horas()));
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_CONANTICIPO)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(datogeneralempleadoAux.getcon_anticipo()));
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOLIBRETAMILI)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.gettipolibretamili_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_LIBRETAMILITAR)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.getlibreta_militar());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOGRUPOFORMAPAGO)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.gettipogrupoformapago_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDBANCO)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.getbanco_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.gettipocuentabancoglobal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_NUMEROCUENTA)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.getnumero_cuenta());
				}
				 else if(sTipoSeleccionar.equals(DatoGeneralEmpleadoConstantesFunciones.LABEL_IDTIPOSANGRE)) {
					existe=true;
					datogeneralempleadoAux.setsDescripcionGeneralEntityReporte1(datogeneralempleadoAux.gettiposangre_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DatoGeneralEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesDatoGeneralEmpleado(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=true;
				this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=true;
				this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=true;
			}
			
			this.isVisibilidadCeldaModificarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaActualizarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaEliminarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaCancelarDatoGeneralEmpleado=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=true;
				} else {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaModificarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaActualizarDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaEliminarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaCancelarDatoGeneralEmpleado=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=true;
				} else {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaModificarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaActualizarDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaEliminarDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaCancelarDatoGeneralEmpleado=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=true;
				} else {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaModificarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaActualizarDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaEliminarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaCancelarDatoGeneralEmpleado=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=false;
				} else {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaModificarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaActualizarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaEliminarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaCancelarDatoGeneralEmpleado=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=true;
				} else {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaActualizarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaEliminarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaCancelarDatoGeneralEmpleado=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=false;
				} else {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaModificarDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaActualizarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaEliminarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaCancelarDatoGeneralEmpleado=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=false;
				} else {
					this.isVisibilidadCeldaGuardarDatoGeneralEmpleado=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(DatoGeneralEmpleadoJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=true;
			this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=true;
		} else {
			this.actualizarEstadoPanelsDatoGeneralEmpleado(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarDatoGeneralEmpleado=false;
			//this.isVisibilidadCeldaVerFormDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaDuplicarDatoGeneralEmpleado=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!datogeneralempleadoSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=false;
		} else {
			this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
			if(!datogeneralempleadoSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=false;												
			}
			
			this.jButtonCerrarDatoGeneralEmpleado.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=false;
		}
		
		if(!this.permiteMantenimiento(this.datogeneralempleado)) {
			this.isVisibilidadCeldaActualizarDatoGeneralEmpleado=false;
			this.isVisibilidadCeldaEliminarDatoGeneralEmpleado=false;
		}
		
		//SI ES UNO A UNO FK
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			
			if(datogeneralempleadoLogic.getDatoGeneralEmpleados().size()>0) {
									this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=false;	
									this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=false;
									this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=false;
			}
			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			if(datogeneralempleados.size()>0) {
				this.isVisibilidadCeldaNuevoDatoGeneralEmpleado=false;	
				this.isVisibilidadCeldaNuevoRelacionesDatoGeneralEmpleado=false;
				this.isVisibilidadCeldaGuardarCambiosDatoGeneralEmpleado=false;
			}
		}
		//ARCHITECTURE
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesDatoGeneralEmpleado() {
	}
	
	public void actualizarEstadoPanelsDatoGeneralEmpleado(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosEdicionDatoGeneralEmpleado.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDatoGeneralEmpleado!=null) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosDatoGeneralEmpleado.setVisible(true);
			}
			
			if(this.jPanelPaginacionDatoGeneralEmpleado!=null) {
				this.jPanelPaginacionDatoGeneralEmpleado.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDatoGeneralEmpleado!=null) {
				this.jPanelParametrosReportesDatoGeneralEmpleado.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosEdicionDatoGeneralEmpleado.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDatoGeneralEmpleado!=null) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosDatoGeneralEmpleado.setVisible(false);
			}
			
			if(this.jPanelPaginacionDatoGeneralEmpleado!=null) {
				this.jPanelPaginacionDatoGeneralEmpleado.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDatoGeneralEmpleado!=null) {
				this.jPanelParametrosReportesDatoGeneralEmpleado.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosEdicionDatoGeneralEmpleado.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDatoGeneralEmpleado!=null) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosDatoGeneralEmpleado.setVisible(false);
			}
			
			if(this.jPanelPaginacionDatoGeneralEmpleado!=null) {
				this.jPanelPaginacionDatoGeneralEmpleado.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDatoGeneralEmpleado!=null) {
				this.jPanelParametrosReportesDatoGeneralEmpleado.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosEdicionDatoGeneralEmpleado.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDatoGeneralEmpleado!=null) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosDatoGeneralEmpleado.setVisible(false);
			}
			
			if(this.jPanelPaginacionDatoGeneralEmpleado!=null) {
				this.jPanelPaginacionDatoGeneralEmpleado.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDatoGeneralEmpleado!=null) {
				this.jPanelParametrosReportesDatoGeneralEmpleado.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosEdicionDatoGeneralEmpleado.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDatoGeneralEmpleado!=null) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosDatoGeneralEmpleado.setVisible(true);
			}
			
			if(this.jPanelPaginacionDatoGeneralEmpleado!=null) {
				this.jPanelPaginacionDatoGeneralEmpleado.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDatoGeneralEmpleado!=null) {
				this.jPanelParametrosReportesDatoGeneralEmpleado.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosEdicionDatoGeneralEmpleado.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDatoGeneralEmpleado!=null) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosDatoGeneralEmpleado.setVisible(true);
			}
			
			if(this.jPanelPaginacionDatoGeneralEmpleado!=null) {
				this.jPanelPaginacionDatoGeneralEmpleado.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDatoGeneralEmpleado!=null) {
				this.jPanelParametrosReportesDatoGeneralEmpleado.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosEdicionDatoGeneralEmpleado.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDatoGeneralEmpleado!=null) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDatoGeneralEmpleado!=null) {
				this.jScrollPanelDatosDatoGeneralEmpleado.setVisible(true);
			}
			
			if(this.jPanelPaginacionDatoGeneralEmpleado!=null) {
				this.jPanelPaginacionDatoGeneralEmpleado.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDatoGeneralEmpleado!=null) {
				this.jPanelParametrosReportesDatoGeneralEmpleado.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasDatoGeneralEmpleado!=null) {
					this.jTabbedPaneBusquedasDatoGeneralEmpleado.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesDatoGeneralEmpleado!=null) {
				this.jPanelParametrosReportesDatoGeneralEmpleado.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.datogeneralempleadoSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDatoGeneralEmpleado!=null) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesDatoGeneralEmpleado!=null) {
				this.jPanelParametrosReportesDatoGeneralEmpleado.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpleado(Boolean isParaEmpleado){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoNegation=!isParaEmpleado;

			this.isVisibilidadFK_IdBanco=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpleado;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaNumeroPatronal(Boolean isParaNumeroPatronal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaNumeroPatronalNegation=!isParaNumeroPatronal;

			this.isVisibilidadFK_IdBanco=isParaNumeroPatronalNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaNumeroPatronalNegation;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaNumeroPatronalNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaNumeroPatronal;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaNumeroPatronalNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaNumeroPatronalNegation;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaNumeroPatronalNegation;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaNumeroPatronalNegation;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaNumeroPatronalNegation;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaNumeroPatronalNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaNumeroPatronalNegation;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaNumeroPatronalNegation;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaNumeroPatronalNegation;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoAfiliacion(Boolean isParaTipoAfiliacion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoAfiliacionNegation=!isParaTipoAfiliacion;

			this.isVisibilidadFK_IdBanco=isParaTipoAfiliacionNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaTipoAfiliacionNegation;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoAfiliacionNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaTipoAfiliacionNegation;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaTipoAfiliacionNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaTipoAfiliacionNegation;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaTipoAfiliacionNegation;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaTipoAfiliacion;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaTipoAfiliacionNegation;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaTipoAfiliacionNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaTipoAfiliacionNegation;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaTipoAfiliacionNegation;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaTipoAfiliacionNegation;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaPais(Boolean isParaPais){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPaisNegation=!isParaPais;

			this.isVisibilidadFK_IdBanco=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaPais;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaProvincia(Boolean isParaProvincia){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaProvinciaNegation=!isParaProvincia;

			this.isVisibilidadFK_IdBanco=isParaProvinciaNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaProvinciaNegation;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaProvinciaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaProvinciaNegation;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaProvinciaNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaProvinciaNegation;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaProvincia;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaProvinciaNegation;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaProvinciaNegation;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaProvinciaNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaProvinciaNegation;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaProvinciaNegation;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaProvinciaNegation;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaCanton(Boolean isParaCanton){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCantonNegation=!isParaCanton;

			this.isVisibilidadFK_IdBanco=isParaCantonNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaCanton;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaCantonNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaCantonNegation;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaCantonNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaCantonNegation;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaCantonNegation;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaCantonNegation;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaCantonNegation;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaCantonNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaCantonNegation;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaCantonNegation;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaCantonNegation;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaParroquia(Boolean isParaParroquia){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaParroquiaNegation=!isParaParroquia;

			this.isVisibilidadFK_IdBanco=isParaParroquiaNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaParroquiaNegation;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaParroquiaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaParroquiaNegation;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaParroquiaNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaParroquia;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaParroquiaNegation;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaParroquiaNegation;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaParroquiaNegation;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaParroquiaNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaParroquiaNegation;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaParroquiaNegation;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaParroquiaNegation;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaMoneda(Boolean isParaMoneda){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMonedaNegation=!isParaMoneda;

			this.isVisibilidadFK_IdBanco=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoContrato(Boolean isParaTipoContrato){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoContratoNegation=!isParaTipoContrato;

			this.isVisibilidadFK_IdBanco=isParaTipoContratoNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaTipoContratoNegation;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoContratoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaTipoContratoNegation;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaTipoContratoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaTipoContratoNegation;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaTipoContratoNegation;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaTipoContratoNegation;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaTipoContrato;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaTipoContratoNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaTipoContratoNegation;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaTipoContratoNegation;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaTipoContratoNegation;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoLibretaMili(Boolean isParaTipoLibretaMili){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoLibretaMiliNegation=!isParaTipoLibretaMili;

			this.isVisibilidadFK_IdBanco=isParaTipoLibretaMiliNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaTipoLibretaMiliNegation;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoLibretaMiliNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaTipoLibretaMiliNegation;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaTipoLibretaMiliNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaTipoLibretaMiliNegation;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaTipoLibretaMiliNegation;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaTipoLibretaMiliNegation;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaTipoLibretaMiliNegation;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaTipoLibretaMiliNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaTipoLibretaMiliNegation;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaTipoLibretaMili;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaTipoLibretaMiliNegation;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoGrupoFormaPago(Boolean isParaTipoGrupoFormaPago){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoGrupoFormaPagoNegation=!isParaTipoGrupoFormaPago;

			this.isVisibilidadFK_IdBanco=isParaTipoGrupoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaTipoGrupoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoGrupoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaTipoGrupoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaTipoGrupoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaTipoGrupoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaTipoGrupoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaTipoGrupoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaTipoGrupoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaTipoGrupoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaTipoGrupoFormaPago;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaTipoGrupoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaTipoGrupoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaBanco(Boolean isParaBanco){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBancoNegation=!isParaBanco;

			this.isVisibilidadFK_IdBanco=isParaBanco;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoCuentaBancoGlobal(Boolean isParaTipoCuentaBancoGlobal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoCuentaBancoGlobalNegation=!isParaTipoCuentaBancoGlobal;

			this.isVisibilidadFK_IdBanco=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaTipoCuentaBancoGlobal;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoSangre(Boolean isParaTipoSangre){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoSangreNegation=!isParaTipoSangre;

			this.isVisibilidadFK_IdBanco=isParaTipoSangreNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdBancoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdCanton=isParaTipoSangreNegation;
			if(!this.isVisibilidadFK_IdCanton) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdCantonDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoSangreNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdEmpleadoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdNumeroPatronal=isParaTipoSangreNegation;
			if(!this.isVisibilidadFK_IdNumeroPatronal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdPais=isParaTipoSangreNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdPaisDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdParroquia=isParaTipoSangreNegation;
			if(!this.isVisibilidadFK_IdParroquia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdParroquiaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdProvincia=isParaTipoSangreNegation;
			if(!this.isVisibilidadFK_IdProvincia) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdProvinciaDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoAfiliacion=isParaTipoSangreNegation;
			if(!this.isVisibilidadFK_IdTipoAfiliacion) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoContrato=isParaTipoSangreNegation;
			if(!this.isVisibilidadFK_IdTipoContrato) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoContratoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaTipoSangreNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoGrupoFormaPago=isParaTipoSangreNegation;
			if(!this.isVisibilidadFK_IdTipoGrupoFormaPago) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoLibretaMili=isParaTipoSangreNegation;
			if(!this.isVisibilidadFK_IdTipoLibretaMili) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);}

			this.isVisibilidadFK_IdTipoSangre=isParaTipoSangre;
			if(!this.isVisibilidadFK_IdTipoSangre) {this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(jPanelFK_IdTipoSangreDatoGeneralEmpleado);}
		}
		
	}
	
	
	
	
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//DatoGeneralEmpleadoSessionBean datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
		
		if(this.datogeneralempleadoSessionBean==null) {
			this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
		}
		
		this.datogeneralempleadoSessionBean.setsUltimaBusquedaDatoGeneralEmpleado(this.getsAccionBusqueda());
		this.datogeneralempleadoSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.datogeneralempleadoSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdBanco")) {
			datogeneralempleadoSessionBean.setid_banco(this.getid_bancoFK_IdBanco());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCanton")) {
			datogeneralempleadoSessionBean.setid_canton(this.getid_cantonFK_IdCanton());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
			datogeneralempleadoSessionBean.setid_empleado(this.getid_empleadoFK_IdEmpleado());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdMoneda")) {
			datogeneralempleadoSessionBean.setid_moneda(this.getid_monedaFK_IdMoneda());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdNumeroPatronal")) {
			datogeneralempleadoSessionBean.setid_numero_patronal(this.getid_numero_patronalFK_IdNumeroPatronal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPais")) {
			datogeneralempleadoSessionBean.setid_pais(this.getid_paisFK_IdPais());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdParroquia")) {
			datogeneralempleadoSessionBean.setid_parroquia(this.getid_parroquiaFK_IdParroquia());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdProvincia")) {
			datogeneralempleadoSessionBean.setid_provincia(this.getid_provinciaFK_IdProvincia());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoAfiliacion")) {
			datogeneralempleadoSessionBean.setid_tipo_afiliacion(this.getid_tipo_afiliacionFK_IdTipoAfiliacion());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoContrato")) {
			datogeneralempleadoSessionBean.setid_tipo_contrato(this.getid_tipo_contratoFK_IdTipoContrato());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoCuentaBancoGlobal")) {
			datogeneralempleadoSessionBean.setid_tipo_cuenta_banco_global(this.getid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoGrupoFormaPago")) {
			datogeneralempleadoSessionBean.setid_tipo_grupo_forma_pago(this.getid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoLibretaMili")) {
			datogeneralempleadoSessionBean.setid_tipo_libreta_mili(this.getid_tipo_libreta_miliFK_IdTipoLibretaMili());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoSangre")) {
			datogeneralempleadoSessionBean.setid_tipo_sangre(this.getid_tipo_sangreFK_IdTipoSangre());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//DatoGeneralEmpleadoSessionBean datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
		
		if(this.datogeneralempleadoSessionBean==null) {
			this.datogeneralempleadoSessionBean=new DatoGeneralEmpleadoSessionBean();
		}
		
		if(this.datogeneralempleadoSessionBean.getsUltimaBusquedaDatoGeneralEmpleado()!=null&&!this.datogeneralempleadoSessionBean.getsUltimaBusquedaDatoGeneralEmpleado().equals("")) {
			this.setsAccionBusqueda(datogeneralempleadoSessionBean.getsUltimaBusquedaDatoGeneralEmpleado());
			this.setiNumeroPaginacion(datogeneralempleadoSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(datogeneralempleadoSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdBanco")) {
				this.setid_bancoFK_IdBanco(datogeneralempleadoSessionBean.getid_banco());
				datogeneralempleadoSessionBean.setid_banco(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCanton")) {
				this.setid_cantonFK_IdCanton(datogeneralempleadoSessionBean.getid_canton());
				datogeneralempleadoSessionBean.setid_canton(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
				this.setid_empleadoFK_IdEmpleado(datogeneralempleadoSessionBean.getid_empleado());
				datogeneralempleadoSessionBean.setid_empleado(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdMoneda")) {
				this.setid_monedaFK_IdMoneda(datogeneralempleadoSessionBean.getid_moneda());
				datogeneralempleadoSessionBean.setid_moneda(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdNumeroPatronal")) {
				this.setid_numero_patronalFK_IdNumeroPatronal(datogeneralempleadoSessionBean.getid_numero_patronal());
				datogeneralempleadoSessionBean.setid_numero_patronal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPais")) {
				this.setid_paisFK_IdPais(datogeneralempleadoSessionBean.getid_pais());
				datogeneralempleadoSessionBean.setid_pais(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdParroquia")) {
				this.setid_parroquiaFK_IdParroquia(datogeneralempleadoSessionBean.getid_parroquia());
				datogeneralempleadoSessionBean.setid_parroquia(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdProvincia")) {
				this.setid_provinciaFK_IdProvincia(datogeneralempleadoSessionBean.getid_provincia());
				datogeneralempleadoSessionBean.setid_provincia(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoAfiliacion")) {
				this.setid_tipo_afiliacionFK_IdTipoAfiliacion(datogeneralempleadoSessionBean.getid_tipo_afiliacion());
				datogeneralempleadoSessionBean.setid_tipo_afiliacion(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoContrato")) {
				this.setid_tipo_contratoFK_IdTipoContrato(datogeneralempleadoSessionBean.getid_tipo_contrato());
				datogeneralempleadoSessionBean.setid_tipo_contrato(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoCuentaBancoGlobal")) {
				this.setid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal(datogeneralempleadoSessionBean.getid_tipo_cuenta_banco_global());
				datogeneralempleadoSessionBean.setid_tipo_cuenta_banco_global(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoGrupoFormaPago")) {
				this.setid_tipo_grupo_forma_pagoFK_IdTipoGrupoFormaPago(datogeneralempleadoSessionBean.getid_tipo_grupo_forma_pago());
				datogeneralempleadoSessionBean.setid_tipo_grupo_forma_pago(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoLibretaMili")) {
				this.setid_tipo_libreta_miliFK_IdTipoLibretaMili(datogeneralempleadoSessionBean.getid_tipo_libreta_mili());
				datogeneralempleadoSessionBean.setid_tipo_libreta_mili(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoSangre")) {
				this.setid_tipo_sangreFK_IdTipoSangre(datogeneralempleadoSessionBean.getid_tipo_sangre());
				datogeneralempleadoSessionBean.setid_tipo_sangre(-1L);
			}
		}
		
		this.datogeneralempleadoSessionBean.setsUltimaBusquedaDatoGeneralEmpleado("");
		this.datogeneralempleadoSessionBean.setiNumeroPaginacion(DatoGeneralEmpleadoConstantesFunciones.INUMEROPAGINACION);
		this.datogeneralempleadoSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaDatoGeneralEmpleado(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioDatoGeneralEmpleado() {
		this.updateBorderResaltarBusquedasFormularioDatoGeneralEmpleado();
		this.updateVisibilidadBusquedasFormularioDatoGeneralEmpleado();
		this.updateHabilitarBusquedasFormularioDatoGeneralEmpleado();
	}
	
	public void updateBorderResaltarBusquedasFormularioDatoGeneralEmpleado() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponents().length>0) {
	

		if(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdBancoDatoGeneralEmpleado!=null) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdBancoDatoGeneralEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdBancoDatoGeneralEmpleado);
			}
		}

		if(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdCantonDatoGeneralEmpleado!=null) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdCantonDatoGeneralEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdCantonDatoGeneralEmpleado);
			}
		}

		if(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdEmpleadoDatoGeneralEmpleado!=null) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdEmpleadoDatoGeneralEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdEmpleadoDatoGeneralEmpleado);
			}
		}

		if(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdNumeroPatronalDatoGeneralEmpleado!=null) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdNumeroPatronalDatoGeneralEmpleado);
			}
		}

		if(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdPaisDatoGeneralEmpleado!=null) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdPaisDatoGeneralEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdPaisDatoGeneralEmpleado);
			}
		}

		if(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdParroquiaDatoGeneralEmpleado!=null) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdParroquiaDatoGeneralEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdParroquiaDatoGeneralEmpleado);
			}
		}

		if(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdProvinciaDatoGeneralEmpleado!=null) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdProvinciaDatoGeneralEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdProvinciaDatoGeneralEmpleado);
			}
		}

		if(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoAfiliacionDatoGeneralEmpleado!=null) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoAfiliacionDatoGeneralEmpleado);
			}
		}

		if(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoContratoDatoGeneralEmpleado!=null) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoContratoDatoGeneralEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoContratoDatoGeneralEmpleado);
			}
		}

		if(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado!=null) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);
			}
		}

		if(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado!=null) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);
			}
		}

		if(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoLibretaMiliDatoGeneralEmpleado!=null) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoLibretaMiliDatoGeneralEmpleado);
			}
		}

		if(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoSangreDatoGeneralEmpleado!=null) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoSangreDatoGeneralEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoSangreDatoGeneralEmpleado);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioDatoGeneralEmpleado() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdBancoDatoGeneralEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarFK_IdBancoDatoGeneralEmpleado);
			if(!this.datogeneralempleadoConstantesFunciones.mostrarFK_IdBancoDatoGeneralEmpleado && index>-1) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdCantonDatoGeneralEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarFK_IdCantonDatoGeneralEmpleado);
			if(!this.datogeneralempleadoConstantesFunciones.mostrarFK_IdCantonDatoGeneralEmpleado && index>-1) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdEmpleadoDatoGeneralEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarFK_IdEmpleadoDatoGeneralEmpleado);
			if(!this.datogeneralempleadoConstantesFunciones.mostrarFK_IdEmpleadoDatoGeneralEmpleado && index>-1) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarFK_IdNumeroPatronalDatoGeneralEmpleado);
			if(!this.datogeneralempleadoConstantesFunciones.mostrarFK_IdNumeroPatronalDatoGeneralEmpleado && index>-1) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdPaisDatoGeneralEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarFK_IdPaisDatoGeneralEmpleado);
			if(!this.datogeneralempleadoConstantesFunciones.mostrarFK_IdPaisDatoGeneralEmpleado && index>-1) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdParroquiaDatoGeneralEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarFK_IdParroquiaDatoGeneralEmpleado);
			if(!this.datogeneralempleadoConstantesFunciones.mostrarFK_IdParroquiaDatoGeneralEmpleado && index>-1) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdProvinciaDatoGeneralEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarFK_IdProvinciaDatoGeneralEmpleado);
			if(!this.datogeneralempleadoConstantesFunciones.mostrarFK_IdProvinciaDatoGeneralEmpleado && index>-1) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarFK_IdTipoAfiliacionDatoGeneralEmpleado);
			if(!this.datogeneralempleadoConstantesFunciones.mostrarFK_IdTipoAfiliacionDatoGeneralEmpleado && index>-1) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoContratoDatoGeneralEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarFK_IdTipoContratoDatoGeneralEmpleado);
			if(!this.datogeneralempleadoConstantesFunciones.mostrarFK_IdTipoContratoDatoGeneralEmpleado && index>-1) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);
			if(!this.datogeneralempleadoConstantesFunciones.mostrarFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado && index>-1) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);
			if(!this.datogeneralempleadoConstantesFunciones.mostrarFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado && index>-1) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarFK_IdTipoLibretaMiliDatoGeneralEmpleado);
			if(!this.datogeneralempleadoConstantesFunciones.mostrarFK_IdTipoLibretaMiliDatoGeneralEmpleado && index>-1) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoSangreDatoGeneralEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarFK_IdTipoSangreDatoGeneralEmpleado);
			if(!this.datogeneralempleadoConstantesFunciones.mostrarFK_IdTipoSangreDatoGeneralEmpleado && index>-1) {
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioDatoGeneralEmpleado() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdBancoDatoGeneralEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.datogeneralempleadoConstantesFunciones.activarFK_IdBancoDatoGeneralEmpleado);
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setEnabledAt(index,this.datogeneralempleadoConstantesFunciones.activarFK_IdBancoDatoGeneralEmpleado);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdCantonDatoGeneralEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.datogeneralempleadoConstantesFunciones.activarFK_IdCantonDatoGeneralEmpleado);
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setEnabledAt(index,this.datogeneralempleadoConstantesFunciones.activarFK_IdCantonDatoGeneralEmpleado);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdEmpleadoDatoGeneralEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.datogeneralempleadoConstantesFunciones.activarFK_IdEmpleadoDatoGeneralEmpleado);
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setEnabledAt(index,this.datogeneralempleadoConstantesFunciones.activarFK_IdEmpleadoDatoGeneralEmpleado);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.datogeneralempleadoConstantesFunciones.activarFK_IdNumeroPatronalDatoGeneralEmpleado);
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setEnabledAt(index,this.datogeneralempleadoConstantesFunciones.activarFK_IdNumeroPatronalDatoGeneralEmpleado);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdPaisDatoGeneralEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.datogeneralempleadoConstantesFunciones.activarFK_IdPaisDatoGeneralEmpleado);
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setEnabledAt(index,this.datogeneralempleadoConstantesFunciones.activarFK_IdPaisDatoGeneralEmpleado);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdParroquiaDatoGeneralEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.datogeneralempleadoConstantesFunciones.activarFK_IdParroquiaDatoGeneralEmpleado);
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setEnabledAt(index,this.datogeneralempleadoConstantesFunciones.activarFK_IdParroquiaDatoGeneralEmpleado);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdProvinciaDatoGeneralEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.datogeneralempleadoConstantesFunciones.activarFK_IdProvinciaDatoGeneralEmpleado);
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setEnabledAt(index,this.datogeneralempleadoConstantesFunciones.activarFK_IdProvinciaDatoGeneralEmpleado);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.datogeneralempleadoConstantesFunciones.activarFK_IdTipoAfiliacionDatoGeneralEmpleado);
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setEnabledAt(index,this.datogeneralempleadoConstantesFunciones.activarFK_IdTipoAfiliacionDatoGeneralEmpleado);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoContratoDatoGeneralEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.datogeneralempleadoConstantesFunciones.activarFK_IdTipoContratoDatoGeneralEmpleado);
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setEnabledAt(index,this.datogeneralempleadoConstantesFunciones.activarFK_IdTipoContratoDatoGeneralEmpleado);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.datogeneralempleadoConstantesFunciones.activarFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setEnabledAt(index,this.datogeneralempleadoConstantesFunciones.activarFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.datogeneralempleadoConstantesFunciones.activarFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setEnabledAt(index,this.datogeneralempleadoConstantesFunciones.activarFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.datogeneralempleadoConstantesFunciones.activarFK_IdTipoLibretaMiliDatoGeneralEmpleado);
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setEnabledAt(index,this.datogeneralempleadoConstantesFunciones.activarFK_IdTipoLibretaMiliDatoGeneralEmpleado);
			}

			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoSangreDatoGeneralEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.datogeneralempleadoConstantesFunciones.activarFK_IdTipoSangreDatoGeneralEmpleado);
				this.jTabbedPaneBusquedasDatoGeneralEmpleado.setEnabledAt(index,this.datogeneralempleadoConstantesFunciones.activarFK_IdTipoSangreDatoGeneralEmpleado);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaDatoGeneralEmpleado(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdBanco")) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdBancoDatoGeneralEmpleado);

			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);

			this.datogeneralempleadoConstantesFunciones.setResaltarFK_IdBancoDatoGeneralEmpleado(resaltar);

			jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdBancoDatoGeneralEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCanton")) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdCantonDatoGeneralEmpleado);

			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);

			this.datogeneralempleadoConstantesFunciones.setResaltarFK_IdCantonDatoGeneralEmpleado(resaltar);

			jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdCantonDatoGeneralEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEmpleado")) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdEmpleadoDatoGeneralEmpleado);

			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);

			this.datogeneralempleadoConstantesFunciones.setResaltarFK_IdEmpleadoDatoGeneralEmpleado(resaltar);

			jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdEmpleadoDatoGeneralEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdNumeroPatronal")) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdNumeroPatronalDatoGeneralEmpleado);

			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);

			this.datogeneralempleadoConstantesFunciones.setResaltarFK_IdNumeroPatronalDatoGeneralEmpleado(resaltar);

			jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdNumeroPatronalDatoGeneralEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdPais")) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdPaisDatoGeneralEmpleado);

			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);

			this.datogeneralempleadoConstantesFunciones.setResaltarFK_IdPaisDatoGeneralEmpleado(resaltar);

			jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdPaisDatoGeneralEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdParroquia")) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdParroquiaDatoGeneralEmpleado);

			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);

			this.datogeneralempleadoConstantesFunciones.setResaltarFK_IdParroquiaDatoGeneralEmpleado(resaltar);

			jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdParroquiaDatoGeneralEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdProvincia")) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdProvinciaDatoGeneralEmpleado);

			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);

			this.datogeneralempleadoConstantesFunciones.setResaltarFK_IdProvinciaDatoGeneralEmpleado(resaltar);

			jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdProvinciaDatoGeneralEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoAfiliacion")) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoAfiliacionDatoGeneralEmpleado);

			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);

			this.datogeneralempleadoConstantesFunciones.setResaltarFK_IdTipoAfiliacionDatoGeneralEmpleado(resaltar);

			jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoAfiliacionDatoGeneralEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoContrato")) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoContratoDatoGeneralEmpleado);

			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);

			this.datogeneralempleadoConstantesFunciones.setResaltarFK_IdTipoContratoDatoGeneralEmpleado(resaltar);

			jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoContratoDatoGeneralEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoCuentaBancoGlobal")) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);

			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);

			this.datogeneralempleadoConstantesFunciones.setResaltarFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado(resaltar);

			jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoCuentaBancoGlobalDatoGeneralEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoGrupoFormaPago")) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);

			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);

			this.datogeneralempleadoConstantesFunciones.setResaltarFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado(resaltar);

			jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoGrupoFormaPagoDatoGeneralEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoLibretaMili")) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoLibretaMiliDatoGeneralEmpleado);

			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);

			this.datogeneralempleadoConstantesFunciones.setResaltarFK_IdTipoLibretaMiliDatoGeneralEmpleado(resaltar);

			jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoLibretaMiliDatoGeneralEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoSangre")) {
			index= this.jTabbedPaneBusquedasDatoGeneralEmpleado.indexOfComponent(this.jPanelFK_IdTipoSangreDatoGeneralEmpleado);

			this.jTabbedPaneBusquedasDatoGeneralEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDatoGeneralEmpleado.getComponent(index);

			this.datogeneralempleadoConstantesFunciones.setResaltarFK_IdTipoSangreDatoGeneralEmpleado(resaltar);

			jPanel.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarFK_IdTipoSangreDatoGeneralEmpleado);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarDatoGeneralEmpleado.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioDatoGeneralEmpleado() throws Exception {

		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioDatoGeneralEmpleado();
		this.updateVisibilidadResaltarControlesFormularioDatoGeneralEmpleado();
		this.updateHabilitarResaltarControlesFormularioDatoGeneralEmpleado();
		
	}
	
	public void updateBorderResaltarControlesFormularioDatoGeneralEmpleado() throws Exception {
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_empleadoDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_empleadoDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_empleadoDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_numero_patronalDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_numero_patronalDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_afiliacionDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_afiliacionDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarcarnet_iessDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldcarnet_iessDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarcarnet_iessDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarsectorial_iessDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsectorial_iessDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarsectorial_iessDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_paisDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_paisDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_provinciaDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_provinciaDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_cantonDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_cantonDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_parroquiaDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_parroquiaDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarfecha_nacimientoDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_nacimientoDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarfecha_nacimientoDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarfecha_falleceDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_falleceDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarfecha_falleceDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarvalor_evaluacionDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_evaluacionDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarvalor_evaluacionDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarnumero_horasDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_horasDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarnumero_horasDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarvalor_horaDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_horaDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarvalor_horaDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarsalarioDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsalarioDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarsalarioDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_monedaDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_monedaDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarnumero_contratoDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_contratoDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarnumero_contratoDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_contratoDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_contratoDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarvalor1DatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor1DatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarvalor1DatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarvalor2DatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor2DatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarvalor2DatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarvalor3DatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor3DatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarvalor3DatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarvalor4DatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor4DatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarvalor4DatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarvalor5DatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor5DatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarvalor5DatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarvalor6DatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor6DatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarvalor6DatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarcon_aporta_seguro_socialDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_aporta_seguro_socialDatoGeneralEmpleado.setBorderPainted(true);this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_aporta_seguro_socialDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarcon_aporta_seguro_socialDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarcon_recibe_horas_extrasDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_recibe_horas_extrasDatoGeneralEmpleado.setBorderPainted(true);this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_recibe_horas_extrasDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarcon_recibe_horas_extrasDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarcon_descuento_impuestosDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_descuento_impuestosDatoGeneralEmpleado.setBorderPainted(true);this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_descuento_impuestosDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarcon_descuento_impuestosDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarpension_alimenticiaDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldpension_alimenticiaDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarpension_alimenticiaDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarcon_pago_por_horasDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_pago_por_horasDatoGeneralEmpleado.setBorderPainted(true);this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_pago_por_horasDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarcon_pago_por_horasDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarcon_anticipoDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_anticipoDatoGeneralEmpleado.setBorderPainted(true);this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_anticipoDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarcon_anticipoDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_libreta_miliDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_libreta_miliDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarlibreta_militarDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldlibreta_militarDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarlibreta_militarDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_grupo_forma_pagoDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_grupo_forma_pagoDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_bancoDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_bancoDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_cuenta_banco_globalDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_cuenta_banco_globalDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarnumero_cuentaDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_cuentaDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarnumero_cuentaDatoGeneralEmpleado);}
		if(this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_sangreDatoGeneralEmpleado!=null && this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.setBorder(this.datogeneralempleadoConstantesFunciones.resaltarid_tipo_sangreDatoGeneralEmpleado);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioDatoGeneralEmpleado() throws Exception {		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
	
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_empleadoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_empleadoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_empleadoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_empleadoDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_numero_patronalDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_numero_patronalDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_numero_patronalDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_afiliacionDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_tipo_afiliacionDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_afiliacionDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldcarnet_iessDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarcarnet_iessDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelcarnet_iessDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarcarnet_iessDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsectorial_iessDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarsectorial_iessDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelsectorial_iessDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarsectorial_iessDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_paisDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_paisDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_paisDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_provinciaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_provinciaDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_provinciaDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_cantonDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_cantonDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_cantonDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_parroquiaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_parroquiaDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_parroquiaDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_nacimientoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarfecha_nacimientoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelfecha_nacimientoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarfecha_nacimientoDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_falleceDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarfecha_falleceDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelfecha_falleceDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarfecha_falleceDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_evaluacionDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor_evaluacionDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelvalor_evaluacionDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor_evaluacionDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_horasDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarnumero_horasDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelnumero_horasDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarnumero_horasDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_horaDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor_horaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelvalor_horaDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor_horaDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsalarioDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarsalarioDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelsalarioDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarsalarioDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_monedaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_monedaDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_monedaDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_contratoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarnumero_contratoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelnumero_contratoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarnumero_contratoDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_contratoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_tipo_contratoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_contratoDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor1DatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor1DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelvalor1DatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor1DatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor2DatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor2DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelvalor2DatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor2DatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor3DatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor3DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelvalor3DatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor3DatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor4DatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor4DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelvalor4DatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor4DatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor5DatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor5DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelvalor5DatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor5DatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor6DatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor6DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelvalor6DatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarvalor6DatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_aporta_seguro_socialDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarcon_aporta_seguro_socialDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelcon_aporta_seguro_socialDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarcon_aporta_seguro_socialDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_recibe_horas_extrasDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarcon_recibe_horas_extrasDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelcon_recibe_horas_extrasDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarcon_recibe_horas_extrasDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_descuento_impuestosDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarcon_descuento_impuestosDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelcon_descuento_impuestosDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarcon_descuento_impuestosDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldpension_alimenticiaDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarpension_alimenticiaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelpension_alimenticiaDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarpension_alimenticiaDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_pago_por_horasDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarcon_pago_por_horasDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelcon_pago_por_horasDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarcon_pago_por_horasDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_anticipoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarcon_anticipoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelcon_anticipoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarcon_anticipoDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_libreta_miliDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_tipo_libreta_miliDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_libreta_miliDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldlibreta_militarDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarlibreta_militarDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanellibreta_militarDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarlibreta_militarDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_grupo_forma_pagoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_tipo_grupo_forma_pagoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_grupo_forma_pagoDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_bancoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_bancoDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_bancoDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_cuenta_banco_globalDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_tipo_cuenta_banco_globalDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_cuenta_banco_globalDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_cuentaDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarnumero_cuentaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelnumero_cuentaDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarnumero_cuentaDatoGeneralEmpleado);
		//this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_sangreDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jPanelid_tipo_sangreDatoGeneralEmpleado.setVisible(this.datogeneralempleadoConstantesFunciones.mostrarid_tipo_sangreDatoGeneralEmpleado);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioDatoGeneralEmpleado() throws Exception {
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDatoGeneralEmpleado!=null) {
	
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jLabelid_empleadoDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_empleadoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_numero_patronalDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_numero_patronalDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_afiliacionDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_tipo_afiliacionDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldcarnet_iessDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarcarnet_iessDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsectorial_iessDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarsectorial_iessDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_paisDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_paisDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_provinciaDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_provinciaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_cantonDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_cantonDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_parroquiaDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_parroquiaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_nacimientoDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarfecha_nacimientoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jDateChooserfecha_falleceDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarfecha_falleceDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_evaluacionDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarvalor_evaluacionDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_horasDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarnumero_horasDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor_horaDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarvalor_horaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldsalarioDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarsalarioDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_monedaDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_monedaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_contratoDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarnumero_contratoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_contratoDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_tipo_contratoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor1DatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarvalor1DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor2DatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarvalor2DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor3DatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarvalor3DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor4DatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarvalor4DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor5DatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarvalor5DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldvalor6DatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarvalor6DatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_aporta_seguro_socialDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarcon_aporta_seguro_socialDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_recibe_horas_extrasDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarcon_recibe_horas_extrasDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_descuento_impuestosDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarcon_descuento_impuestosDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldpension_alimenticiaDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarpension_alimenticiaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_pago_por_horasDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarcon_pago_por_horasDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jCheckBoxcon_anticipoDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarcon_anticipoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_libreta_miliDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_tipo_libreta_miliDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldlibreta_militarDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarlibreta_militarDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_grupo_forma_pagoDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_tipo_grupo_forma_pagoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_bancoDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_bancoDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_cuenta_banco_globalDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_tipo_cuenta_banco_globalDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jTextFieldnumero_cuentaDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarnumero_cuentaDatoGeneralEmpleado);
		this.jInternalFrameDetalleFormDatoGeneralEmpleado.jComboBoxid_tipo_sangreDatoGeneralEmpleado.setEnabled(this.datogeneralempleadoConstantesFunciones.activarid_tipo_sangreDatoGeneralEmpleado);
		}
	}
	
		
}