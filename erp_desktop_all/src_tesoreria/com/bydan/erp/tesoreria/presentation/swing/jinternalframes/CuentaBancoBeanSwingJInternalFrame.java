/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.tesoreria.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.tesoreria.util.CuentaBancoConstantesFunciones;
import com.bydan.erp.tesoreria.util.CuentaBancoParameterReturnGeneral;
//import com.bydan.erp.tesoreria.util.CuentaBancoParameterGeneral;
//import com.bydan.erp.tesoreria.presentation.report.source.CuentaBancoBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.tesoreria.resources.reportes.AuxiliarReportes;


import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.tesoreria.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.tesoreria.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class CuentaBancoBeanSwingJInternalFrame extends CuentaBancoJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(CuentaBancoBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<CuentaBanco> cuentabancoValidator = new ClassValidator<CuentaBanco>(CuentaBanco.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public CuentaBanco cuentabanco;	
	public CuentaBanco cuentabancoAux;
	public CuentaBanco cuentabancoAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public CuentaBanco cuentabancoTotales;
	public Long idCuentaBancoActual;
	public Long iIdNuevoCuentaBanco=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboBanco="";

	public List<Banco> bancosForeignKey;

	public List<Banco> getbancosForeignKey() {
		return bancosForeignKey;
	}

	public void setbancosForeignKey(List<Banco> bancosForeignKey) {
		this.bancosForeignKey = bancosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Banco bancoForeignKey;

	public Banco getbancoForeignKey() {
		return bancoForeignKey;
	}

	public void setbancoForeignKey(Banco bancoForeignKey) {
		this.bancoForeignKey = bancoForeignKey;
	}

	public String sFinalQueryComboTipoCuentaBancoGlobal="";

	public List<TipoCuentaBancoGlobal> tipocuentabancoglobalsForeignKey;

	public List<TipoCuentaBancoGlobal> gettipocuentabancoglobalsForeignKey() {
		return tipocuentabancoglobalsForeignKey;
	}

	public void settipocuentabancoglobalsForeignKey(List<TipoCuentaBancoGlobal> tipocuentabancoglobalsForeignKey) {
		this.tipocuentabancoglobalsForeignKey = tipocuentabancoglobalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoCuentaBancoGlobal tipocuentabancoglobalForeignKey;

	public TipoCuentaBancoGlobal gettipocuentabancoglobalForeignKey() {
		return tipocuentabancoglobalForeignKey;
	}

	public void settipocuentabancoglobalForeignKey(TipoCuentaBancoGlobal tipocuentabancoglobalForeignKey) {
		this.tipocuentabancoglobalForeignKey = tipocuentabancoglobalForeignKey;
	}

	public String sFinalQueryComboCuentaContable="";

	public List<CuentaContable> cuentacontablesForeignKey;

	public List<CuentaContable> getcuentacontablesForeignKey() {
		return cuentacontablesForeignKey;
	}

	public void setcuentacontablesForeignKey(List<CuentaContable> cuentacontablesForeignKey) {
		this.cuentacontablesForeignKey = cuentacontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableForeignKey;

	public CuentaContable getcuentacontableForeignKey() {
		return cuentacontableForeignKey;
	}

	public void setcuentacontableForeignKey(CuentaContable cuentacontableForeignKey) {
		this.cuentacontableForeignKey = cuentacontableForeignKey;
	}

	public String sFinalQueryComboEstadoCuentaBanco="";

	public List<EstadoCuentaBanco> estadocuentabancosForeignKey;

	public List<EstadoCuentaBanco> getestadocuentabancosForeignKey() {
		return estadocuentabancosForeignKey;
	}

	public void setestadocuentabancosForeignKey(List<EstadoCuentaBanco> estadocuentabancosForeignKey) {
		this.estadocuentabancosForeignKey = estadocuentabancosForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoCuentaBanco estadocuentabancoForeignKey;

	public EstadoCuentaBanco getestadocuentabancoForeignKey() {
		return estadocuentabancoForeignKey;
	}

	public void setestadocuentabancoForeignKey(EstadoCuentaBanco estadocuentabancoForeignKey) {
		this.estadocuentabancoForeignKey = estadocuentabancoForeignKey;
	}

	public String sFinalQueryComboFormatoIngreso="";

	public List<Formato> formatoingresosForeignKey;

	public List<Formato> getformatoingresosForeignKey() {
		return formatoingresosForeignKey;
	}

	public void setformatoingresosForeignKey(List<Formato> formatoingresosForeignKey) {
		this.formatoingresosForeignKey = formatoingresosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoingresoForeignKey;

	public Formato getformatoingresoForeignKey() {
		return formatoingresoForeignKey;
	}

	public void setformatoingresoForeignKey(Formato formatoingresoForeignKey) {
		this.formatoingresoForeignKey = formatoingresoForeignKey;
	}

	public String sFinalQueryComboFormatoEgreso="";

	public List<Formato> formatoegresosForeignKey;

	public List<Formato> getformatoegresosForeignKey() {
		return formatoegresosForeignKey;
	}

	public void setformatoegresosForeignKey(List<Formato> formatoegresosForeignKey) {
		this.formatoegresosForeignKey = formatoegresosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoegresoForeignKey;

	public Formato getformatoegresoForeignKey() {
		return formatoegresoForeignKey;
	}

	public void setformatoegresoForeignKey(Formato formatoegresoForeignKey) {
		this.formatoegresoForeignKey = formatoegresoForeignKey;
	}

	public String sFinalQueryComboFormatoDiario="";

	public List<Formato> formatodiariosForeignKey;

	public List<Formato> getformatodiariosForeignKey() {
		return formatodiariosForeignKey;
	}

	public void setformatodiariosForeignKey(List<Formato> formatodiariosForeignKey) {
		this.formatodiariosForeignKey = formatodiariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatodiarioForeignKey;

	public Formato getformatodiarioForeignKey() {
		return formatodiarioForeignKey;
	}

	public void setformatodiarioForeignKey(Formato formatodiarioForeignKey) {
		this.formatodiarioForeignKey = formatodiarioForeignKey;
	}

	public String sFinalQueryComboFormatoCheque="";

	public List<Formato> formatochequesForeignKey;

	public List<Formato> getformatochequesForeignKey() {
		return formatochequesForeignKey;
	}

	public void setformatochequesForeignKey(List<Formato> formatochequesForeignKey) {
		this.formatochequesForeignKey = formatochequesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatochequeForeignKey;

	public Formato getformatochequeForeignKey() {
		return formatochequeForeignKey;
	}

	public void setformatochequeForeignKey(Formato formatochequeForeignKey) {
		this.formatochequeForeignKey = formatochequeForeignKey;
	}

	public String sFinalQueryComboFormatoRetencion="";

	public List<Formato> formatoretencionsForeignKey;

	public List<Formato> getformatoretencionsForeignKey() {
		return formatoretencionsForeignKey;
	}

	public void setformatoretencionsForeignKey(List<Formato> formatoretencionsForeignKey) {
		this.formatoretencionsForeignKey = formatoretencionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoretencionForeignKey;

	public Formato getformatoretencionForeignKey() {
		return formatoretencionForeignKey;
	}

	public void setformatoretencionForeignKey(Formato formatoretencionForeignKey) {
		this.formatoretencionForeignKey = formatoretencionForeignKey;
	}

	public String sFinalQueryComboFormatoRetencionIva="";

	public List<Formato> formatoretencionivasForeignKey;

	public List<Formato> getformatoretencionivasForeignKey() {
		return formatoretencionivasForeignKey;
	}

	public void setformatoretencionivasForeignKey(List<Formato> formatoretencionivasForeignKey) {
		this.formatoretencionivasForeignKey = formatoretencionivasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoretencionivaForeignKey;

	public Formato getformatoretencionivaForeignKey() {
		return formatoretencionivaForeignKey;
	}

	public void setformatoretencionivaForeignKey(Formato formatoretencionivaForeignKey) {
		this.formatoretencionivaForeignKey = formatoretencionivaForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idCuentaContableActual=0L;

	public Long getidCuentaContableActual() {
		return idCuentaContableActual;
	}

	public void setidCuentaContableActual(Long idCuentaContableActual) {
		this.idCuentaContableActual= idCuentaContableActual;
	}
	
	

	public Boolean isTienePermisosPagoAuto=false;

	public Boolean getIsTienePermisosPagoAuto() {
		return isTienePermisosPagoAuto;
	}

	public void setIsTienePermisosPagoAuto(Boolean isTienePermisosPagoAuto) {
		this.isTienePermisosPagoAuto= isTienePermisosPagoAuto;
	}


	public Boolean isTienePermisosAutoriPagoOrdenCompra=false;

	public Boolean getIsTienePermisosAutoriPagoOrdenCompra() {
		return isTienePermisosAutoriPagoOrdenCompra;
	}

	public void setIsTienePermisosAutoriPagoOrdenCompra(Boolean isTienePermisosAutoriPagoOrdenCompra) {
		this.isTienePermisosAutoriPagoOrdenCompra= isTienePermisosAutoriPagoOrdenCompra;
	}


	public Boolean isTienePermisosDetalleChequeGirado=false;

	public Boolean getIsTienePermisosDetalleChequeGirado() {
		return isTienePermisosDetalleChequeGirado;
	}

	public void setIsTienePermisosDetalleChequeGirado(Boolean isTienePermisosDetalleChequeGirado) {
		this.isTienePermisosDetalleChequeGirado= isTienePermisosDetalleChequeGirado;
	}


	public Boolean isTienePermisosAutoriPago=false;

	public Boolean getIsTienePermisosAutoriPago() {
		return isTienePermisosAutoriPago;
	}

	public void setIsTienePermisosAutoriPago(Boolean isTienePermisosAutoriPago) {
		this.isTienePermisosAutoriPago= isTienePermisosAutoriPago;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoCuentaBanco;
	public Boolean isPermisoNuevoCuentaBanco;
	public Boolean isPermisoActualizarCuentaBanco;
	public Boolean isPermisoActualizarOriginalCuentaBanco;
	public Boolean isPermisoEliminarCuentaBanco;
	public Boolean isPermisoGuardarCambiosCuentaBanco;
	public Boolean isPermisoConsultaCuentaBanco;
	public Boolean isPermisoBusquedaCuentaBanco;
	public Boolean isPermisoReporteCuentaBanco;
	public Boolean isPermisoPaginacionMedioCuentaBanco;
	public Boolean isPermisoPaginacionAltoCuentaBanco;
	public Boolean isPermisoPaginacionTodoCuentaBanco;
	public Boolean isPermisoCopiarCuentaBanco;
	public Boolean isPermisoVerFormCuentaBanco;
	public Boolean isPermisoDuplicarCuentaBanco;
	public Boolean isPermisoOrdenCuentaBanco;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public CuentaBancoParameterReturnGeneral cuentabancoReturnGeneral;
	public CuentaBancoParameterReturnGeneral cuentabancoParameterGeneral;
	
	

	public PagoAutoLogic pagoautoLogic=null;

	public PagoAutoLogic getPagoAutoLogic() {
		return pagoautoLogic;
	}

	public void setPagoAutoLogic(PagoAutoLogic pagoautoLogic) {
		this.pagoautoLogic = pagoautoLogic;
	}


	public AutoriPagoOrdenCompraLogic autoripagoordencompraLogic=null;

	public AutoriPagoOrdenCompraLogic getAutoriPagoOrdenCompraLogic() {
		return autoripagoordencompraLogic;
	}

	public void setAutoriPagoOrdenCompraLogic(AutoriPagoOrdenCompraLogic autoripagoordencompraLogic) {
		this.autoripagoordencompraLogic = autoripagoordencompraLogic;
	}


	public DetalleChequeGiradoLogic detallechequegiradoLogic=null;

	public DetalleChequeGiradoLogic getDetalleChequeGiradoLogic() {
		return detallechequegiradoLogic;
	}

	public void setDetalleChequeGiradoLogic(DetalleChequeGiradoLogic detallechequegiradoLogic) {
		this.detallechequegiradoLogic = detallechequegiradoLogic;
	}


	public AutoriPagoLogic autoripagoLogic=null;

	public AutoriPagoLogic getAutoriPagoLogic() {
		return autoripagoLogic;
	}

	public void setAutoriPagoLogic(AutoriPagoLogic autoripagoLogic) {
		this.autoripagoLogic = autoripagoLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoCuentaBanco=false;
	public Boolean esParaAccionDesdeFormularioCuentaBanco=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected CuentaBancoSessionBeanAdditional cuentabancoSessionBeanAdditional=null;
	
	public CuentaBancoSessionBeanAdditional getCuentaBancoSessionBeanAdditional() {
		return this.cuentabancoSessionBeanAdditional;
	}
	
	public void setCuentaBancoSessionBeanAdditional(CuentaBancoSessionBeanAdditional cuentabancoSessionBeanAdditional) {
		try {
			this.cuentabancoSessionBeanAdditional=cuentabancoSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected CuentaBancoBeanSwingJInternalFrameAdditional cuentabancoBeanSwingJInternalFrameAdditional=null;
	//public class CuentaBancoBeanSwingJInternalFrame
	
	public CuentaBancoBeanSwingJInternalFrameAdditional getCuentaBancoBeanSwingJInternalFrameAdditional() {
		return this.cuentabancoBeanSwingJInternalFrameAdditional;
	}
	
	public void setCuentaBancoBeanSwingJInternalFrameAdditional(CuentaBancoBeanSwingJInternalFrameAdditional cuentabancoBeanSwingJInternalFrameAdditional) {
		try {
			this.cuentabancoBeanSwingJInternalFrameAdditional=cuentabancoBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public CuentaBancoLogic cuentabancoLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public CuentaBanco cuentabancoBean;
	public CuentaBancoConstantesFunciones cuentabancoConstantesFunciones;
	//public CuentaBancoParameterReturnGeneral cuentabancoReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public BancoLogic bancoLogic;
	public TipoCuentaBancoGlobalLogic tipocuentabancoglobalLogic;
	public CuentaContableLogic cuentacontableLogic;
	public EstadoCuentaBancoLogic estadocuentabancoLogic;
	public FormatoLogic formatoingresoLogic;
	public FormatoLogic formatoegresoLogic;
	public FormatoLogic formatodiarioLogic;
	public FormatoLogic formatochequeLogic;
	public FormatoLogic formatoretencionLogic;
	public FormatoLogic formatoretencionivaLogic;
	
	//PARAMETROS
	
	
	//public List<CuentaBanco> cuentabancos;	
	//public List<CuentaBanco> cuentabancosEliminados;
	//public List<CuentaBanco> cuentabancosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoCuentaBanco=false;
	public Boolean isVisibilidadCeldaDuplicarCuentaBanco=true;
	public Boolean isVisibilidadCeldaCopiarCuentaBanco=true;
	public Boolean isVisibilidadCeldaVerFormCuentaBanco=true;
	public Boolean isVisibilidadCeldaOrdenCuentaBanco=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesCuentaBanco=false;
	public Boolean isVisibilidadCeldaModificarCuentaBanco=false;
	public Boolean isVisibilidadCeldaActualizarCuentaBanco=false;
	public Boolean isVisibilidadCeldaEliminarCuentaBanco=false;
	public Boolean isVisibilidadCeldaCancelarCuentaBanco=false;
	public Boolean isVisibilidadCeldaGuardarCuentaBanco=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosCuentaBanco=false;	
	
	
	public Boolean isVisibilidadBusquedaPorCodigo=false;
	public Boolean isVisibilidadBusquedaPorNumeroCheque=false;
	public Boolean isVisibilidadBusquedaPorNumeroCuenta=false;
	public Boolean isVisibilidadBusquedaPorProcedencia=false;
	public Boolean isVisibilidadFK_IdBanco=false;
	public Boolean isVisibilidadFK_IdCuentaContable=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoCuentaBanco=false;
	public Boolean isVisibilidadFK_IdFormatoCheque=false;
	public Boolean isVisibilidadFK_IdFormatoDiario=false;
	public Boolean isVisibilidadFK_IdFormatoEgreso=false;
	public Boolean isVisibilidadFK_IdFormatoIngreso=false;
	public Boolean isVisibilidadFK_IdFormatoRetencion=false;
	public Boolean isVisibilidadFK_IdFormatoRetencionIva=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoCuentaBancoGlobal=false;
	
	public Long getiIdNuevoCuentaBanco() {
		return this.iIdNuevoCuentaBanco;
	}

	public void setiIdNuevoCuentaBanco(Long iIdNuevoCuentaBanco) {
		this.iIdNuevoCuentaBanco = iIdNuevoCuentaBanco;
	}
	
	public Long getidCuentaBancoActual() {
		return this.idCuentaBancoActual;
	}

	public void setidCuentaBancoActual(Long idCuentaBancoActual) {
		this.idCuentaBancoActual = idCuentaBancoActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public CuentaBanco getcuentabanco() {
		return this.cuentabanco;
	}

	public void setcuentabanco(CuentaBanco cuentabanco) {
		this.cuentabanco = cuentabanco;
	}
	
	public CuentaBanco getcuentabancoAux() {
		return this.cuentabancoAux;
	}

	public void setcuentabancoAux(CuentaBanco cuentabancoAux) {
		this.cuentabancoAux = cuentabancoAux;
	}				
	
	public CuentaBanco getcuentabancoAnterior() {
		return this.cuentabancoAnterior;
	}

	public void setcuentabancoAnterior(CuentaBanco cuentabancoAnterior) {
		this.cuentabancoAnterior = cuentabancoAnterior;
	}	
	
	public CuentaBanco getcuentabancoTotales() {
		return this.cuentabancoTotales;
	}

	public void setcuentabancoTotales(CuentaBanco cuentabancoTotales) {
		this.cuentabancoTotales = cuentabancoTotales;
	}	
	
	public CuentaBanco getcuentabancoBean() {
		return this.cuentabancoBean;
	}

	public void setcuentabancoBean(CuentaBanco cuentabancoBean) {
		this.cuentabancoBean = cuentabancoBean;
	}	
	
	public CuentaBancoParameterReturnGeneral getcuentabancoReturnGeneral() {
		return this.cuentabancoReturnGeneral;
	}

	public void setcuentabancoReturnGeneral(CuentaBancoParameterReturnGeneral cuentabancoReturnGeneral) {
		this.cuentabancoReturnGeneral = cuentabancoReturnGeneral;
	}	
	
	
	public String codigoBusquedaPorCodigo="";

	public String getcodigoBusquedaPorCodigo() {
		return this.codigoBusquedaPorCodigo;
	}

	public void setcodigoBusquedaPorCodigo(String codigoBusquedaPorCodigo) {
		this.codigoBusquedaPorCodigo = codigoBusquedaPorCodigo;
	}

	public String numero_chequeBusquedaPorNumeroCheque="";

	public String getnumero_chequeBusquedaPorNumeroCheque() {
		return this.numero_chequeBusquedaPorNumeroCheque;
	}

	public void setnumero_chequeBusquedaPorNumeroCheque(String numero_chequeBusquedaPorNumeroCheque) {
		this.numero_chequeBusquedaPorNumeroCheque = numero_chequeBusquedaPorNumeroCheque;
	}

	public String numero_cuentaBusquedaPorNumeroCuenta="";

	public String getnumero_cuentaBusquedaPorNumeroCuenta() {
		return this.numero_cuentaBusquedaPorNumeroCuenta;
	}

	public void setnumero_cuentaBusquedaPorNumeroCuenta(String numero_cuentaBusquedaPorNumeroCuenta) {
		this.numero_cuentaBusquedaPorNumeroCuenta = numero_cuentaBusquedaPorNumeroCuenta;
	}

	public String procedenciaBusquedaPorProcedencia="";

	public String getprocedenciaBusquedaPorProcedencia() {
		return this.procedenciaBusquedaPorProcedencia;
	}

	public void setprocedenciaBusquedaPorProcedencia(String procedenciaBusquedaPorProcedencia) {
		this.procedenciaBusquedaPorProcedencia = procedenciaBusquedaPorProcedencia;
	}

	public Long id_bancoFK_IdBanco=-1L;

	public Long getid_bancoFK_IdBanco() {
		return this.id_bancoFK_IdBanco;
	}

	public void setid_bancoFK_IdBanco(Long id_bancoFK_IdBanco) {
		this.id_bancoFK_IdBanco = id_bancoFK_IdBanco;
	}

	public Long id_cuenta_contableFK_IdCuentaContable=-1L;

	public Long getid_cuenta_contableFK_IdCuentaContable() {
		return this.id_cuenta_contableFK_IdCuentaContable;
	}

	public void setid_cuenta_contableFK_IdCuentaContable(Long id_cuenta_contableFK_IdCuentaContable) {
		this.id_cuenta_contableFK_IdCuentaContable = id_cuenta_contableFK_IdCuentaContable;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_cuenta_bancoFK_IdEstadoCuentaBanco=-1L;

	public Long getid_estado_cuenta_bancoFK_IdEstadoCuentaBanco() {
		return this.id_estado_cuenta_bancoFK_IdEstadoCuentaBanco;
	}

	public void setid_estado_cuenta_bancoFK_IdEstadoCuentaBanco(Long id_estado_cuenta_bancoFK_IdEstadoCuentaBanco) {
		this.id_estado_cuenta_bancoFK_IdEstadoCuentaBanco = id_estado_cuenta_bancoFK_IdEstadoCuentaBanco;
	}

	public Long id_formato_chequeFK_IdFormatoCheque=-1L;

	public Long getid_formato_chequeFK_IdFormatoCheque() {
		return this.id_formato_chequeFK_IdFormatoCheque;
	}

	public void setid_formato_chequeFK_IdFormatoCheque(Long id_formato_chequeFK_IdFormatoCheque) {
		this.id_formato_chequeFK_IdFormatoCheque = id_formato_chequeFK_IdFormatoCheque;
	}

	public Long id_formato_diarioFK_IdFormatoDiario=-1L;

	public Long getid_formato_diarioFK_IdFormatoDiario() {
		return this.id_formato_diarioFK_IdFormatoDiario;
	}

	public void setid_formato_diarioFK_IdFormatoDiario(Long id_formato_diarioFK_IdFormatoDiario) {
		this.id_formato_diarioFK_IdFormatoDiario = id_formato_diarioFK_IdFormatoDiario;
	}

	public Long id_formato_egresoFK_IdFormatoEgreso=-1L;

	public Long getid_formato_egresoFK_IdFormatoEgreso() {
		return this.id_formato_egresoFK_IdFormatoEgreso;
	}

	public void setid_formato_egresoFK_IdFormatoEgreso(Long id_formato_egresoFK_IdFormatoEgreso) {
		this.id_formato_egresoFK_IdFormatoEgreso = id_formato_egresoFK_IdFormatoEgreso;
	}

	public Long id_formato_ingresoFK_IdFormatoIngreso=-1L;

	public Long getid_formato_ingresoFK_IdFormatoIngreso() {
		return this.id_formato_ingresoFK_IdFormatoIngreso;
	}

	public void setid_formato_ingresoFK_IdFormatoIngreso(Long id_formato_ingresoFK_IdFormatoIngreso) {
		this.id_formato_ingresoFK_IdFormatoIngreso = id_formato_ingresoFK_IdFormatoIngreso;
	}

	public Long id_formato_retencionFK_IdFormatoRetencion=null;

	public Long getid_formato_retencionFK_IdFormatoRetencion() {
		return this.id_formato_retencionFK_IdFormatoRetencion;
	}

	public void setid_formato_retencionFK_IdFormatoRetencion(Long id_formato_retencionFK_IdFormatoRetencion) {
		this.id_formato_retencionFK_IdFormatoRetencion = id_formato_retencionFK_IdFormatoRetencion;
	}

	public Long id_formato_retencion_ivaFK_IdFormatoRetencionIva=null;

	public Long getid_formato_retencion_ivaFK_IdFormatoRetencionIva() {
		return this.id_formato_retencion_ivaFK_IdFormatoRetencionIva;
	}

	public void setid_formato_retencion_ivaFK_IdFormatoRetencionIva(Long id_formato_retencion_ivaFK_IdFormatoRetencionIva) {
		this.id_formato_retencion_ivaFK_IdFormatoRetencionIva = id_formato_retencion_ivaFK_IdFormatoRetencionIva;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal=-1L;

	public Long getid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal() {
		return this.id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal;
	}

	public void setid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal(Long id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal) {
		this.id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal = id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public CuentaBancoLogic getCuentaBancoLogic()	{		
		return cuentabancoLogic;
	}

	public void setCuentaBancoLogic(CuentaBancoLogic cuentabancoLogic) {
		this.cuentabancoLogic = cuentabancoLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoCuentaBanco() {
		return isEsNuevoCuentaBanco;
	}

	public void setIsEsNuevoCuentaBanco(Boolean isEsNuevoCuentaBanco) {
		this.isEsNuevoCuentaBanco = isEsNuevoCuentaBanco;
	}

	public Boolean getEsParaAccionDesdeFormularioCuentaBanco() {
		return esParaAccionDesdeFormularioCuentaBanco;
	}
	
	public void setEsParaAccionDesdeFormularioCuentaBanco(Boolean esParaAccionDesdeFormularioCuentaBanco) {
		this.esParaAccionDesdeFormularioCuentaBanco = esParaAccionDesdeFormularioCuentaBanco;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(cuentabancoSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(cuentabancoSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBancosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bancosForeignKey=new ArrayList<Banco>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BancoLogic bancoLogic=new BancoLogic();

			//bancoLogic.getBancoDataAccess().setIsForForeingKeyData(true);

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bancoLogic.getBancoDataAccess().setIsForForeingKeyData(true);

					arrClasses.add("TipoBanco");
					arrClasses.add("DepositoBanco");

					clases.addAll(BancoConstantesFunciones.getClassesForeignKeysFromStringsOfBanco(arrClasses,DeepLoadType.INCLUDE));
					clases.addAll(BancoConstantesFunciones.getClassesRelationshipsFromStringsOfBanco(arrClasses,DeepLoadType.INCLUDE));

					datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

					bancoLogic.getBancoDataAccess().setIsForForeingKeyData(false);
					bancoLogic.setIsConDeep(true);
					bancoLogic.setDatosDeep(datosDeep);


					bancoLogic.getTodosBancosWithConnection(sFinalQuery,new Pagination());

					this.bancosForeignKey=bancoLogic.getBancos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBanco(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bancoLogic.getEntityWithConnection(cuentabancoSessionBean.getlidBancoActual());
					this.bancosForeignKey.add(bancoLogic.getBanco());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoCuentaBancoGlobalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipocuentabancoglobalsForeignKey=new ArrayList<TipoCuentaBancoGlobal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoCuentaBancoGlobalLogic tipocuentabancoglobalLogic=new TipoCuentaBancoGlobalLogic();

			//tipocuentabancoglobalLogic.getTipoCuentaBancoGlobalDataAccess().setIsForForeingKeyData(true);

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionTipoCuentaBancoGlobal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipocuentabancoglobalLogic.getTipoCuentaBancoGlobalDataAccess().setIsForForeingKeyData(true);

					tipocuentabancoglobalLogic.getTodosTipoCuentaBancoGlobalsWithConnection(sFinalQuery,new Pagination());

					this.tipocuentabancoglobalsForeignKey=tipocuentabancoglobalLogic.getTipoCuentaBancoGlobals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoCuentaBancoGlobal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipocuentabancoglobalLogic.getEntityWithConnection(cuentabancoSessionBean.getlidTipoCuentaBancoGlobalActual());
					this.tipocuentabancoglobalsForeignKey.add(tipocuentabancoglobalLogic.getTipoCuentaBancoGlobal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablesForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(cuentabancoSessionBean.getlidCuentaContableActual());
					this.cuentacontablesForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoCuentaBancosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadocuentabancosForeignKey=new ArrayList<EstadoCuentaBanco>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoCuentaBancoLogic estadocuentabancoLogic=new EstadoCuentaBancoLogic();

			//estadocuentabancoLogic.getEstadoCuentaBancoDataAccess().setIsForForeingKeyData(true);

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionEstadoCuentaBanco()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadocuentabancoLogic.getEstadoCuentaBancoDataAccess().setIsForForeingKeyData(true);

					estadocuentabancoLogic.getTodosEstadoCuentaBancosWithConnection(sFinalQuery,new Pagination());

					this.estadocuentabancosForeignKey=estadocuentabancoLogic.getEstadoCuentaBancos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoCuentaBanco(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadocuentabancoLogic.getEntityWithConnection(cuentabancoSessionBean.getlidEstadoCuentaBancoActual());
					this.estadocuentabancosForeignKey.add(estadocuentabancoLogic.getEstadoCuentaBanco());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoIngresosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatoingresosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoIngreso()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoingresoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatoingresosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoIngreso(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(cuentabancoSessionBean.getlidFormatoIngresoActual());
					this.formatoingresosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoEgresosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatoegresosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoEgreso()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoegresoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatoegresosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoEgreso(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(cuentabancoSessionBean.getlidFormatoEgresoActual());
					this.formatoegresosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoDiariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatodiariosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoDiario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatodiarioLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatodiariosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoDiario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(cuentabancoSessionBean.getlidFormatoDiarioActual());
					this.formatodiariosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoChequesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatochequesForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoCheque()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatochequeLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatochequesForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoCheque(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(cuentabancoSessionBean.getlidFormatoChequeActual());
					this.formatochequesForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoRetencionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatoretencionsForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Formato formatoretencionNulo = new Formato();

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoRetencion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoretencionLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatoretencionsForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.formatoretencionsForeignKey.add(0, formatoretencionNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoRetencion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(cuentabancoSessionBean.getlidFormatoRetencionActual());
					this.formatoretencionsForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatoRetencionIvasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatoretencionivasForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Formato formatoretencionivaNulo = new Formato();

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoRetencionIva()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoretencionivaLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatoretencionivasForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.formatoretencionivasForeignKey.add(0, formatoretencionivaNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormatoRetencionIva(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(cuentabancoSessionBean.getlidFormatoRetencionIvaActual());
					this.formatoretencionivasForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.cuentabanco!=null) {
						this.cuentabanco.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaCuentaBanco.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaCuentaBancoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaCuentaBancoGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaCuentaBancoGenerico!=null && jComboBoxid_empresaCuentaBancoGenerico.getItemCount()>0) {
					jComboBoxid_empresaCuentaBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.cuentabanco!=null) {
						this.cuentabanco.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalCuentaBanco.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalCuentaBancoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalCuentaBancoGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalCuentaBancoGenerico!=null && jComboBoxid_sucursalCuentaBancoGenerico.getItemCount()>0) {
					jComboBoxid_sucursalCuentaBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBancoForeignKey(Long idBancoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bancoTemp!=null) {

					if(this.cuentabanco!=null) {
						this.cuentabanco.setBanco(bancoTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.setSelectedItem(bancoTemp);
					}
				} else {
					//jComboBoxid_bancoCuentaBanco.setSelectedItem(bancoTemp);
					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBanco") || sFormularioTipoBusqueda.equals("Todos")){
					if(bancoTemp!=null && jComboBoxid_bancoFK_IdBancoCuentaBanco!=null) {
						jComboBoxid_bancoFK_IdBancoCuentaBanco.setSelectedItem(bancoTemp);
					} else {
						if(jComboBoxid_bancoFK_IdBancoCuentaBanco!=null) {
							//jComboBoxid_bancoFK_IdBancoCuentaBanco.setSelectedItem(bancoTemp);
							if(jComboBoxid_bancoFK_IdBancoCuentaBanco.getItemCount()>0) {
								jComboBoxid_bancoFK_IdBancoCuentaBanco.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBancoForeignKeyDescripcion(Long idBancoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}


			sDescripcion=BancoConstantesFunciones.getBancoDescripcion(bancoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBancoForeignKeyGenerico(Long idBancoSeleccionado,JComboBox jComboBoxid_bancoCuentaBancoGenerico)throws Exception
	{
		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}

			if(bancoTemp!=null) {
				jComboBoxid_bancoCuentaBancoGenerico.setSelectedItem(bancoTemp);
			} else {
				if(jComboBoxid_bancoCuentaBancoGenerico!=null && jComboBoxid_bancoCuentaBancoGenerico.getItemCount()>0) {
					jComboBoxid_bancoCuentaBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoCuentaBancoGlobalForeignKey(Long idTipoCuentaBancoGlobalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoCuentaBancoGlobal  tipocuentabancoglobalTemp=null;

			for(TipoCuentaBancoGlobal tipocuentabancoglobalAux:tipocuentabancoglobalsForeignKey) {
				if(tipocuentabancoglobalAux.getId()!=null && tipocuentabancoglobalAux.getId().equals(idTipoCuentaBancoGlobalSeleccionado)) {
					tipocuentabancoglobalTemp=tipocuentabancoglobalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipocuentabancoglobalTemp!=null) {

					if(this.cuentabanco!=null) {
						this.cuentabanco.setTipoCuentaBancoGlobal(tipocuentabancoglobalTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.setSelectedItem(tipocuentabancoglobalTemp);
					}
				} else {
					//jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.setSelectedItem(tipocuentabancoglobalTemp);
					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoCuentaBancoGlobal") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipocuentabancoglobalTemp!=null && jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalCuentaBanco!=null) {
						jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalCuentaBanco.setSelectedItem(tipocuentabancoglobalTemp);
					} else {
						if(jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalCuentaBanco!=null) {
							//jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalCuentaBanco.setSelectedItem(tipocuentabancoglobalTemp);
							if(jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalCuentaBanco.getItemCount()>0) {
								jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalCuentaBanco.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoCuentaBancoGlobalForeignKeyDescripcion(Long idTipoCuentaBancoGlobalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoCuentaBancoGlobal  tipocuentabancoglobalTemp=null;

			for(TipoCuentaBancoGlobal tipocuentabancoglobalAux:tipocuentabancoglobalsForeignKey) {
				if(tipocuentabancoglobalAux.getId()!=null && tipocuentabancoglobalAux.getId().equals(idTipoCuentaBancoGlobalSeleccionado)) {
					tipocuentabancoglobalTemp=tipocuentabancoglobalAux;
					break;
				}
			}


			sDescripcion=TipoCuentaBancoGlobalConstantesFunciones.getTipoCuentaBancoGlobalDescripcion(tipocuentabancoglobalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoCuentaBancoGlobalForeignKeyGenerico(Long idTipoCuentaBancoGlobalSeleccionado,JComboBox jComboBoxid_tipo_cuenta_banco_globalCuentaBancoGenerico)throws Exception
	{
		try
		{
			TipoCuentaBancoGlobal  tipocuentabancoglobalTemp=null;

			for(TipoCuentaBancoGlobal tipocuentabancoglobalAux:tipocuentabancoglobalsForeignKey) {
				if(tipocuentabancoglobalAux.getId()!=null && tipocuentabancoglobalAux.getId().equals(idTipoCuentaBancoGlobalSeleccionado)) {
					tipocuentabancoglobalTemp=tipocuentabancoglobalAux;
					break;
				}
			}

			if(tipocuentabancoglobalTemp!=null) {
				jComboBoxid_tipo_cuenta_banco_globalCuentaBancoGenerico.setSelectedItem(tipocuentabancoglobalTemp);
			} else {
				if(jComboBoxid_tipo_cuenta_banco_globalCuentaBancoGenerico!=null && jComboBoxid_tipo_cuenta_banco_globalCuentaBancoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_cuenta_banco_globalCuentaBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableForeignKey(Long idCuentaContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableTemp!=null) {

					if(this.cuentabanco!=null) {
						this.cuentabanco.setCuentaContable(cuentacontableTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.setSelectedItem(cuentacontableTemp);
					}
				} else {
					//jComboBoxid_cuenta_contableCuentaBanco.setSelectedItem(cuentacontableTemp);
					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableForeignKeyDescripcion(Long idCuentaContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableForeignKeyGenerico(Long idCuentaContableSeleccionado,JComboBox jComboBoxid_cuenta_contableCuentaBancoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}

			if(cuentacontableTemp!=null) {
				jComboBoxid_cuenta_contableCuentaBancoGenerico.setSelectedItem(cuentacontableTemp);
			} else {
				if(jComboBoxid_cuenta_contableCuentaBancoGenerico!=null && jComboBoxid_cuenta_contableCuentaBancoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contableCuentaBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoCuentaBancoForeignKey(Long idEstadoCuentaBancoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoCuentaBanco  estadocuentabancoTemp=null;

			for(EstadoCuentaBanco estadocuentabancoAux:estadocuentabancosForeignKey) {
				if(estadocuentabancoAux.getId()!=null && estadocuentabancoAux.getId().equals(idEstadoCuentaBancoSeleccionado)) {
					estadocuentabancoTemp=estadocuentabancoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadocuentabancoTemp!=null) {

					if(this.cuentabanco!=null) {
						this.cuentabanco.setEstadoCuentaBanco(estadocuentabancoTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.setSelectedItem(estadocuentabancoTemp);
					}
				} else {
					//jComboBoxid_estado_cuenta_bancoCuentaBanco.setSelectedItem(estadocuentabancoTemp);
					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoCuentaBanco") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadocuentabancoTemp!=null && jComboBoxid_estado_cuenta_bancoFK_IdEstadoCuentaBancoCuentaBanco!=null) {
						jComboBoxid_estado_cuenta_bancoFK_IdEstadoCuentaBancoCuentaBanco.setSelectedItem(estadocuentabancoTemp);
					} else {
						if(jComboBoxid_estado_cuenta_bancoFK_IdEstadoCuentaBancoCuentaBanco!=null) {
							//jComboBoxid_estado_cuenta_bancoFK_IdEstadoCuentaBancoCuentaBanco.setSelectedItem(estadocuentabancoTemp);
							if(jComboBoxid_estado_cuenta_bancoFK_IdEstadoCuentaBancoCuentaBanco.getItemCount()>0) {
								jComboBoxid_estado_cuenta_bancoFK_IdEstadoCuentaBancoCuentaBanco.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoCuentaBancoForeignKeyDescripcion(Long idEstadoCuentaBancoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoCuentaBanco  estadocuentabancoTemp=null;

			for(EstadoCuentaBanco estadocuentabancoAux:estadocuentabancosForeignKey) {
				if(estadocuentabancoAux.getId()!=null && estadocuentabancoAux.getId().equals(idEstadoCuentaBancoSeleccionado)) {
					estadocuentabancoTemp=estadocuentabancoAux;
					break;
				}
			}


			sDescripcion=EstadoCuentaBancoConstantesFunciones.getEstadoCuentaBancoDescripcion(estadocuentabancoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoCuentaBancoForeignKeyGenerico(Long idEstadoCuentaBancoSeleccionado,JComboBox jComboBoxid_estado_cuenta_bancoCuentaBancoGenerico)throws Exception
	{
		try
		{
			EstadoCuentaBanco  estadocuentabancoTemp=null;

			for(EstadoCuentaBanco estadocuentabancoAux:estadocuentabancosForeignKey) {
				if(estadocuentabancoAux.getId()!=null && estadocuentabancoAux.getId().equals(idEstadoCuentaBancoSeleccionado)) {
					estadocuentabancoTemp=estadocuentabancoAux;
					break;
				}
			}

			if(estadocuentabancoTemp!=null) {
				jComboBoxid_estado_cuenta_bancoCuentaBancoGenerico.setSelectedItem(estadocuentabancoTemp);
			} else {
				if(jComboBoxid_estado_cuenta_bancoCuentaBancoGenerico!=null && jComboBoxid_estado_cuenta_bancoCuentaBancoGenerico.getItemCount()>0) {
					jComboBoxid_estado_cuenta_bancoCuentaBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoIngresoForeignKey(Long idFormatoIngresoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoingresoTemp=null;

			for(Formato formatoingresoAux:formatoingresosForeignKey) {
				if(formatoingresoAux.getId()!=null && formatoingresoAux.getId().equals(idFormatoIngresoSeleccionado)) {
					formatoingresoTemp=formatoingresoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoingresoTemp!=null) {

					if(this.cuentabanco!=null) {
						this.cuentabanco.setFormatoIngreso(formatoingresoTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.setSelectedItem(formatoingresoTemp);
					}
				} else {
					//jComboBoxid_formato_ingresoCuentaBanco.setSelectedItem(formatoingresoTemp);
					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoIngresoForeignKeyDescripcion(Long idFormatoIngresoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoingresoTemp=null;

			for(Formato formatoingresoAux:formatoingresosForeignKey) {
				if(formatoingresoAux.getId()!=null && formatoingresoAux.getId().equals(idFormatoIngresoSeleccionado)) {
					formatoingresoTemp=formatoingresoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoingresoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoIngresoForeignKeyGenerico(Long idFormatoIngresoSeleccionado,JComboBox jComboBoxid_formato_ingresoCuentaBancoGenerico)throws Exception
	{
		try
		{
			Formato  formatoingresoTemp=null;

			for(Formato formatoingresoAux:formatoingresosForeignKey) {
				if(formatoingresoAux.getId()!=null && formatoingresoAux.getId().equals(idFormatoIngresoSeleccionado)) {
					formatoingresoTemp=formatoingresoAux;
					break;
				}
			}

			if(formatoingresoTemp!=null) {
				jComboBoxid_formato_ingresoCuentaBancoGenerico.setSelectedItem(formatoingresoTemp);
			} else {
				if(jComboBoxid_formato_ingresoCuentaBancoGenerico!=null && jComboBoxid_formato_ingresoCuentaBancoGenerico.getItemCount()>0) {
					jComboBoxid_formato_ingresoCuentaBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoEgresoForeignKey(Long idFormatoEgresoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoegresoTemp=null;

			for(Formato formatoegresoAux:formatoegresosForeignKey) {
				if(formatoegresoAux.getId()!=null && formatoegresoAux.getId().equals(idFormatoEgresoSeleccionado)) {
					formatoegresoTemp=formatoegresoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoegresoTemp!=null) {

					if(this.cuentabanco!=null) {
						this.cuentabanco.setFormatoEgreso(formatoegresoTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.setSelectedItem(formatoegresoTemp);
					}
				} else {
					//jComboBoxid_formato_egresoCuentaBanco.setSelectedItem(formatoegresoTemp);
					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoEgresoForeignKeyDescripcion(Long idFormatoEgresoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoegresoTemp=null;

			for(Formato formatoegresoAux:formatoegresosForeignKey) {
				if(formatoegresoAux.getId()!=null && formatoegresoAux.getId().equals(idFormatoEgresoSeleccionado)) {
					formatoegresoTemp=formatoegresoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoegresoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoEgresoForeignKeyGenerico(Long idFormatoEgresoSeleccionado,JComboBox jComboBoxid_formato_egresoCuentaBancoGenerico)throws Exception
	{
		try
		{
			Formato  formatoegresoTemp=null;

			for(Formato formatoegresoAux:formatoegresosForeignKey) {
				if(formatoegresoAux.getId()!=null && formatoegresoAux.getId().equals(idFormatoEgresoSeleccionado)) {
					formatoegresoTemp=formatoegresoAux;
					break;
				}
			}

			if(formatoegresoTemp!=null) {
				jComboBoxid_formato_egresoCuentaBancoGenerico.setSelectedItem(formatoegresoTemp);
			} else {
				if(jComboBoxid_formato_egresoCuentaBancoGenerico!=null && jComboBoxid_formato_egresoCuentaBancoGenerico.getItemCount()>0) {
					jComboBoxid_formato_egresoCuentaBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoDiarioForeignKey(Long idFormatoDiarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatodiarioTemp=null;

			for(Formato formatodiarioAux:formatodiariosForeignKey) {
				if(formatodiarioAux.getId()!=null && formatodiarioAux.getId().equals(idFormatoDiarioSeleccionado)) {
					formatodiarioTemp=formatodiarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatodiarioTemp!=null) {

					if(this.cuentabanco!=null) {
						this.cuentabanco.setFormatoDiario(formatodiarioTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.setSelectedItem(formatodiarioTemp);
					}
				} else {
					//jComboBoxid_formato_diarioCuentaBanco.setSelectedItem(formatodiarioTemp);
					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoDiarioForeignKeyDescripcion(Long idFormatoDiarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatodiarioTemp=null;

			for(Formato formatodiarioAux:formatodiariosForeignKey) {
				if(formatodiarioAux.getId()!=null && formatodiarioAux.getId().equals(idFormatoDiarioSeleccionado)) {
					formatodiarioTemp=formatodiarioAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatodiarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoDiarioForeignKeyGenerico(Long idFormatoDiarioSeleccionado,JComboBox jComboBoxid_formato_diarioCuentaBancoGenerico)throws Exception
	{
		try
		{
			Formato  formatodiarioTemp=null;

			for(Formato formatodiarioAux:formatodiariosForeignKey) {
				if(formatodiarioAux.getId()!=null && formatodiarioAux.getId().equals(idFormatoDiarioSeleccionado)) {
					formatodiarioTemp=formatodiarioAux;
					break;
				}
			}

			if(formatodiarioTemp!=null) {
				jComboBoxid_formato_diarioCuentaBancoGenerico.setSelectedItem(formatodiarioTemp);
			} else {
				if(jComboBoxid_formato_diarioCuentaBancoGenerico!=null && jComboBoxid_formato_diarioCuentaBancoGenerico.getItemCount()>0) {
					jComboBoxid_formato_diarioCuentaBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoChequeForeignKey(Long idFormatoChequeSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatochequeTemp=null;

			for(Formato formatochequeAux:formatochequesForeignKey) {
				if(formatochequeAux.getId()!=null && formatochequeAux.getId().equals(idFormatoChequeSeleccionado)) {
					formatochequeTemp=formatochequeAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatochequeTemp!=null) {

					if(this.cuentabanco!=null) {
						this.cuentabanco.setFormatoCheque(formatochequeTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.setSelectedItem(formatochequeTemp);
					}
				} else {
					//jComboBoxid_formato_chequeCuentaBanco.setSelectedItem(formatochequeTemp);
					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoChequeForeignKeyDescripcion(Long idFormatoChequeSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatochequeTemp=null;

			for(Formato formatochequeAux:formatochequesForeignKey) {
				if(formatochequeAux.getId()!=null && formatochequeAux.getId().equals(idFormatoChequeSeleccionado)) {
					formatochequeTemp=formatochequeAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatochequeTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoChequeForeignKeyGenerico(Long idFormatoChequeSeleccionado,JComboBox jComboBoxid_formato_chequeCuentaBancoGenerico)throws Exception
	{
		try
		{
			Formato  formatochequeTemp=null;

			for(Formato formatochequeAux:formatochequesForeignKey) {
				if(formatochequeAux.getId()!=null && formatochequeAux.getId().equals(idFormatoChequeSeleccionado)) {
					formatochequeTemp=formatochequeAux;
					break;
				}
			}

			if(formatochequeTemp!=null) {
				jComboBoxid_formato_chequeCuentaBancoGenerico.setSelectedItem(formatochequeTemp);
			} else {
				if(jComboBoxid_formato_chequeCuentaBancoGenerico!=null && jComboBoxid_formato_chequeCuentaBancoGenerico.getItemCount()>0) {
					jComboBoxid_formato_chequeCuentaBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoRetencionForeignKey(Long idFormatoRetencionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoretencionTemp=null;

			for(Formato formatoretencionAux:formatoretencionsForeignKey) {
				if(formatoretencionAux.getId()!=null && formatoretencionAux.getId().equals(idFormatoRetencionSeleccionado)) {
					formatoretencionTemp=formatoretencionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoretencionTemp!=null) {

					if(this.cuentabanco!=null) {
						this.cuentabanco.setFormatoRetencion(formatoretencionTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.setSelectedItem(formatoretencionTemp);
					}
				} else {
					//jComboBoxid_formato_retencionCuentaBanco.setSelectedItem(formatoretencionTemp);
					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoRetencionForeignKeyDescripcion(Long idFormatoRetencionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoretencionTemp=null;

			for(Formato formatoretencionAux:formatoretencionsForeignKey) {
				if(formatoretencionAux.getId()!=null && formatoretencionAux.getId().equals(idFormatoRetencionSeleccionado)) {
					formatoretencionTemp=formatoretencionAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoretencionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoRetencionForeignKeyGenerico(Long idFormatoRetencionSeleccionado,JComboBox jComboBoxid_formato_retencionCuentaBancoGenerico)throws Exception
	{
		try
		{
			Formato  formatoretencionTemp=null;

			for(Formato formatoretencionAux:formatoretencionsForeignKey) {
				if(formatoretencionAux.getId()!=null && formatoretencionAux.getId().equals(idFormatoRetencionSeleccionado)) {
					formatoretencionTemp=formatoretencionAux;
					break;
				}
			}

			if(formatoretencionTemp!=null) {
				jComboBoxid_formato_retencionCuentaBancoGenerico.setSelectedItem(formatoretencionTemp);
			} else {
				if(jComboBoxid_formato_retencionCuentaBancoGenerico!=null && jComboBoxid_formato_retencionCuentaBancoGenerico.getItemCount()>0) {
					jComboBoxid_formato_retencionCuentaBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoRetencionIvaForeignKey(Long idFormatoRetencionIvaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoretencionivaTemp=null;

			for(Formato formatoretencionivaAux:formatoretencionivasForeignKey) {
				if(formatoretencionivaAux.getId()!=null && formatoretencionivaAux.getId().equals(idFormatoRetencionIvaSeleccionado)) {
					formatoretencionivaTemp=formatoretencionivaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoretencionivaTemp!=null) {

					if(this.cuentabanco!=null) {
						this.cuentabanco.setFormatoRetencionIva(formatoretencionivaTemp);
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.setSelectedItem(formatoretencionivaTemp);
					}
				} else {
					//jComboBoxid_formato_retencion_ivaCuentaBanco.setSelectedItem(formatoretencionivaTemp);
					if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
						if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoRetencionIvaForeignKeyDescripcion(Long idFormatoRetencionIvaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoretencionivaTemp=null;

			for(Formato formatoretencionivaAux:formatoretencionivasForeignKey) {
				if(formatoretencionivaAux.getId()!=null && formatoretencionivaAux.getId().equals(idFormatoRetencionIvaSeleccionado)) {
					formatoretencionivaTemp=formatoretencionivaAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoretencionivaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoRetencionIvaForeignKeyGenerico(Long idFormatoRetencionIvaSeleccionado,JComboBox jComboBoxid_formato_retencion_ivaCuentaBancoGenerico)throws Exception
	{
		try
		{
			Formato  formatoretencionivaTemp=null;

			for(Formato formatoretencionivaAux:formatoretencionivasForeignKey) {
				if(formatoretencionivaAux.getId()!=null && formatoretencionivaAux.getId().equals(idFormatoRetencionIvaSeleccionado)) {
					formatoretencionivaTemp=formatoretencionivaAux;
					break;
				}
			}

			if(formatoretencionivaTemp!=null) {
				jComboBoxid_formato_retencion_ivaCuentaBancoGenerico.setSelectedItem(formatoretencionivaTemp);
			} else {
				if(jComboBoxid_formato_retencion_ivaCuentaBancoGenerico!=null && jComboBoxid_formato_retencion_ivaCuentaBancoGenerico.getItemCount()>0) {
					jComboBoxid_formato_retencion_ivaCuentaBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(CuentaBanco cuentabanco,JComboBox jComboBoxid_empresaCuentaBancoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaCuentaBancoGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaCuentaBancoGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				cuentabanco.setid_empresa(empresaAux.getId());
				cuentabanco.setempresa_descripcion(CuentaBancoConstantesFunciones.getEmpresaDescripcion(empresaAux));
				cuentabanco.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(CuentaBanco cuentabanco,JComboBox jComboBoxid_sucursalCuentaBancoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalCuentaBancoGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalCuentaBancoGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				cuentabanco.setid_sucursal(sucursalAux.getId());
				cuentabanco.setsucursal_descripcion(CuentaBancoConstantesFunciones.getSucursalDescripcion(sucursalAux));
				cuentabanco.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBancoForeignKey(CuentaBanco cuentabanco,JComboBox jComboBoxid_bancoCuentaBancoGenerico)throws Exception
	{
		try
		{
			Banco  bancoAux=new Banco();

			if(jComboBoxid_bancoCuentaBancoGenerico==null) {
				bancoAux=(Banco)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.getSelectedItem();
			} else {
				bancoAux=(Banco)jComboBoxid_bancoCuentaBancoGenerico.getSelectedItem();
			}

			if(bancoAux!=null && bancoAux.getId()!=null) {
				cuentabanco.setid_banco(bancoAux.getId());
				cuentabanco.setbanco_descripcion(CuentaBancoConstantesFunciones.getBancoDescripcion(bancoAux));
				cuentabanco.setBanco(bancoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoCuentaBancoGlobalForeignKey(CuentaBanco cuentabanco,JComboBox jComboBoxid_tipo_cuenta_banco_globalCuentaBancoGenerico)throws Exception
	{
		try
		{
			TipoCuentaBancoGlobal  tipocuentabancoglobalAux=new TipoCuentaBancoGlobal();

			if(jComboBoxid_tipo_cuenta_banco_globalCuentaBancoGenerico==null) {
				tipocuentabancoglobalAux=(TipoCuentaBancoGlobal)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.getSelectedItem();
			} else {
				tipocuentabancoglobalAux=(TipoCuentaBancoGlobal)jComboBoxid_tipo_cuenta_banco_globalCuentaBancoGenerico.getSelectedItem();
			}

			if(tipocuentabancoglobalAux!=null && tipocuentabancoglobalAux.getId()!=null) {
				cuentabanco.setid_tipo_cuenta_banco_global(tipocuentabancoglobalAux.getId());
				cuentabanco.settipocuentabancoglobal_descripcion(CuentaBancoConstantesFunciones.getTipoCuentaBancoGlobalDescripcion(tipocuentabancoglobalAux));
				cuentabanco.setTipoCuentaBancoGlobal(tipocuentabancoglobalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableForeignKey(CuentaBanco cuentabanco,JComboBox jComboBoxid_cuenta_contableCuentaBancoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contableCuentaBancoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contableCuentaBancoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				cuentabanco.setid_cuenta_contable(cuentacontableAux.getId());
				cuentabanco.setcuentacontable_descripcion(CuentaBancoConstantesFunciones.getCuentaContableDescripcion(cuentacontableAux));
				cuentabanco.setCuentaContable(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoCuentaBancoForeignKey(CuentaBanco cuentabanco,JComboBox jComboBoxid_estado_cuenta_bancoCuentaBancoGenerico)throws Exception
	{
		try
		{
			EstadoCuentaBanco  estadocuentabancoAux=new EstadoCuentaBanco();

			if(jComboBoxid_estado_cuenta_bancoCuentaBancoGenerico==null) {
				estadocuentabancoAux=(EstadoCuentaBanco)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.getSelectedItem();
			} else {
				estadocuentabancoAux=(EstadoCuentaBanco)jComboBoxid_estado_cuenta_bancoCuentaBancoGenerico.getSelectedItem();
			}

			if(estadocuentabancoAux!=null && estadocuentabancoAux.getId()!=null) {
				cuentabanco.setid_estado_cuenta_banco(estadocuentabancoAux.getId());
				cuentabanco.setestadocuentabanco_descripcion(CuentaBancoConstantesFunciones.getEstadoCuentaBancoDescripcion(estadocuentabancoAux));
				cuentabanco.setEstadoCuentaBanco(estadocuentabancoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoIngresoForeignKey(CuentaBanco cuentabanco,JComboBox jComboBoxid_formato_ingresoCuentaBancoGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_ingresoCuentaBancoGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_ingresoCuentaBancoGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				cuentabanco.setid_formato_ingreso(formatoAux.getId());
				cuentabanco.setformatoingreso_descripcion(CuentaBancoConstantesFunciones.getFormatoIngresoDescripcion(formatoAux));
				cuentabanco.setFormatoIngreso(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoEgresoForeignKey(CuentaBanco cuentabanco,JComboBox jComboBoxid_formato_egresoCuentaBancoGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_egresoCuentaBancoGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_egresoCuentaBancoGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				cuentabanco.setid_formato_egreso(formatoAux.getId());
				cuentabanco.setformatoegreso_descripcion(CuentaBancoConstantesFunciones.getFormatoEgresoDescripcion(formatoAux));
				cuentabanco.setFormatoEgreso(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoDiarioForeignKey(CuentaBanco cuentabanco,JComboBox jComboBoxid_formato_diarioCuentaBancoGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_diarioCuentaBancoGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_diarioCuentaBancoGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				cuentabanco.setid_formato_diario(formatoAux.getId());
				cuentabanco.setformatodiario_descripcion(CuentaBancoConstantesFunciones.getFormatoDiarioDescripcion(formatoAux));
				cuentabanco.setFormatoDiario(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoChequeForeignKey(CuentaBanco cuentabanco,JComboBox jComboBoxid_formato_chequeCuentaBancoGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_chequeCuentaBancoGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_chequeCuentaBancoGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				cuentabanco.setid_formato_cheque(formatoAux.getId());
				cuentabanco.setformatocheque_descripcion(CuentaBancoConstantesFunciones.getFormatoChequeDescripcion(formatoAux));
				cuentabanco.setFormatoCheque(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoRetencionForeignKey(CuentaBanco cuentabanco,JComboBox jComboBoxid_formato_retencionCuentaBancoGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_retencionCuentaBancoGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_retencionCuentaBancoGenerico.getSelectedItem();
			}

			if(formatoAux!=null) {
				cuentabanco.setid_formato_retencion(formatoAux.getId());
				cuentabanco.setformatoretencion_descripcion(CuentaBancoConstantesFunciones.getFormatoRetencionDescripcion(formatoAux));
				cuentabanco.setFormatoRetencion(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoRetencionIvaForeignKey(CuentaBanco cuentabanco,JComboBox jComboBoxid_formato_retencion_ivaCuentaBancoGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formato_retencion_ivaCuentaBancoGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formato_retencion_ivaCuentaBancoGenerico.getSelectedItem();
			}

			if(formatoAux!=null) {
				cuentabanco.setid_formato_retencion_iva(formatoAux.getId());
				cuentabanco.setformatoretencioniva_descripcion(CuentaBancoConstantesFunciones.getFormatoRetencionIvaDescripcion(formatoAux));
				cuentabanco.setFormatoRetencionIva(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
					}

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
					}

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBancosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBanco=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.removeAllItems();

							for(Banco banco:this.bancosForeignKey) {
								this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.addItem(banco);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
					}

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBanco") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bancoFK_IdBancoCuentaBanco.removeAllItems();

							for(Banco banco:this.bancosForeignKey) {
								this.jComboBoxid_bancoFK_IdBancoCuentaBanco.addItem(banco);
							}
						}

						if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoCuentaBancoGlobalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoCuentaBancoGlobal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.removeAllItems();

							for(TipoCuentaBancoGlobal tipocuentabancoglobal:this.tipocuentabancoglobalsForeignKey) {
								this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.addItem(tipocuentabancoglobal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
					}

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoCuentaBancoGlobal") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalCuentaBanco.removeAllItems();

							for(TipoCuentaBancoGlobal tipocuentabancoglobal:this.tipocuentabancoglobalsForeignKey) {
								this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalCuentaBanco.addItem(tipocuentabancoglobal);
							}
						}

						if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.removeAllItems();

							for(CuentaContable cuentacontable:this.cuentacontablesForeignKey) {
								this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.addItem(cuentacontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
					}

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoCuentaBancosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoCuentaBanco=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.removeAllItems();

							for(EstadoCuentaBanco estadocuentabanco:this.estadocuentabancosForeignKey) {
								if(estadocuentabanco.getes_defecto()) {
									this.cuentabancoBean.setid_estado_cuenta_banco(estadocuentabanco.getId());
								}

								this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.addItem(estadocuentabanco);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
					}

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoCuentaBanco") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_cuenta_bancoFK_IdEstadoCuentaBancoCuentaBanco.removeAllItems();

							for(EstadoCuentaBanco estadocuentabanco:this.estadocuentabancosForeignKey) {
								this.jComboBoxid_estado_cuenta_bancoFK_IdEstadoCuentaBancoCuentaBanco.addItem(estadocuentabanco);
							}
						}

						if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoIngresosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.removeAllItems();

							for(Formato formatoingreso:this.formatoingresosForeignKey) {
								this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.addItem(formatoingreso);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
					}

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoEgresosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.removeAllItems();

							for(Formato formatoegreso:this.formatoegresosForeignKey) {
								this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.addItem(formatoegreso);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
					}

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoDiariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.removeAllItems();

							for(Formato formatodiario:this.formatodiariosForeignKey) {
								this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.addItem(formatodiario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
					}

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoChequesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.removeAllItems();

							for(Formato formatocheque:this.formatochequesForeignKey) {
								this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.addItem(formatocheque);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
					}

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoRetencionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.removeAllItems();

							for(Formato formatoretencion:this.formatoretencionsForeignKey) {
								this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.addItem(formatoretencion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
					}

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatoRetencionIvasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.removeAllItems();

							for(Formato formatoretencioniva:this.formatoretencionivasForeignKey) {
								this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.addItem(formatoretencioniva);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCuentaBanco!=null) { 
					}

					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBancoForeignKey(Banco banco,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.setSelectedItem(banco);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bancoFK_IdBancoCuentaBanco.setSelectedItem(banco);
						} else {
							this.jComboBoxid_bancoFK_IdBancoCuentaBanco.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoCuentaBancoGlobalForeignKey(TipoCuentaBancoGlobal tipocuentabancoglobal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.setSelectedItem(tipocuentabancoglobal);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalCuentaBanco.setSelectedItem(tipocuentabancoglobal);
						} else {
							this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalCuentaBanco.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableForeignKey(CuentaContable cuentacontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.setSelectedItem(cuentacontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoCuentaBancoForeignKey(EstadoCuentaBanco estadocuentabanco,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.setSelectedItem(estadocuentabanco);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_cuenta_bancoFK_IdEstadoCuentaBancoCuentaBanco.setSelectedItem(estadocuentabanco);
						} else {
							this.jComboBoxid_estado_cuenta_bancoFK_IdEstadoCuentaBancoCuentaBanco.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoIngresoForeignKey(Formato formatoingreso,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.setSelectedItem(formatoingreso);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoEgresoForeignKey(Formato formatoegreso,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.setSelectedItem(formatoegreso);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoDiarioForeignKey(Formato formatodiario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.setSelectedItem(formatodiario);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoChequeForeignKey(Formato formatocheque,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.setSelectedItem(formatocheque);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoRetencionForeignKey(Formato formatoretencion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.setSelectedItem(formatoretencion);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoRetencionIvaForeignKey(Formato formatoretencioniva,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.setSelectedItem(formatoretencioniva);
						}
					} else {
						if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesCuentaBanco() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			CuentaBancoConstantesFunciones.refrescarForeignKeysDescripcionesCuentaBanco(this.cuentabancoLogic.getCuentaBancos());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			CuentaBancoConstantesFunciones.refrescarForeignKeysDescripcionesCuentaBanco(this.cuentabancos);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Banco.class));
		classes.add(new Classe(TipoCuentaBancoGlobal.class));
		classes.add(new Classe(CuentaContable.class));
		classes.add(new Classe(EstadoCuentaBanco.class));
		classes.add(new Classe(Formato.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//cuentabancoLogic.setCuentaBancos(this.cuentabancos);
			cuentabancoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public CuentaBancoParameterReturnGeneral getCuentaBancoParameterGeneral() {
		return this.cuentabancoParameterGeneral;
	}
	
	public void setCuentaBancoParameterGeneral(CuentaBancoParameterReturnGeneral cuentabancoParameterGeneral) {
		this.cuentabancoParameterGeneral = cuentabancoParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoCuentaBanco() {
		return isPermisoTodoCuentaBanco;
	}

	public void setIsPermisoTodoCuentaBanco(Boolean isPermisoTodoCuentaBanco) {
		this.isPermisoTodoCuentaBanco = isPermisoTodoCuentaBanco;
	}

	public Boolean getIsPermisoNuevoCuentaBanco() {
		return isPermisoNuevoCuentaBanco;
	}

	public void setIsPermisoNuevoCuentaBanco(Boolean isPermisoNuevoCuentaBanco) {
		this.isPermisoNuevoCuentaBanco = isPermisoNuevoCuentaBanco;
	}

	public Boolean getIsPermisoActualizarCuentaBanco() {
		return isPermisoActualizarCuentaBanco;
	}

	public void setIsPermisoActualizarCuentaBanco(Boolean isPermisoActualizarCuentaBanco) {
		this.isPermisoActualizarCuentaBanco = isPermisoActualizarCuentaBanco;
	}

	public Boolean getIsPermisoEliminarCuentaBanco() {
		return isPermisoEliminarCuentaBanco;
	}

	public void setIsPermisoEliminarCuentaBanco(Boolean isPermisoEliminarCuentaBanco) {
		this.isPermisoEliminarCuentaBanco = isPermisoEliminarCuentaBanco;
	}

	public Boolean getIsPermisoGuardarCambiosCuentaBanco() {
		return isPermisoGuardarCambiosCuentaBanco;
	}

	public void setIsPermisoGuardarCambiosCuentaBanco(Boolean isPermisoGuardarCambiosCuentaBanco) {
		this.isPermisoGuardarCambiosCuentaBanco = isPermisoGuardarCambiosCuentaBanco;
	}
	
	public Boolean getIsPermisoConsultaCuentaBanco() {
		return isPermisoConsultaCuentaBanco;
	}

	public void setIsPermisoConsultaCuentaBanco(Boolean isPermisoConsultaCuentaBanco) {
		this.isPermisoConsultaCuentaBanco = isPermisoConsultaCuentaBanco;
	}

	public Boolean getIsPermisoBusquedaCuentaBanco() {
		return isPermisoBusquedaCuentaBanco;
	}

	public void setIsPermisoBusquedaCuentaBanco(Boolean isPermisoBusquedaCuentaBanco) {
		this.isPermisoBusquedaCuentaBanco = isPermisoBusquedaCuentaBanco;
	}

	public Boolean getIsPermisoReporteCuentaBanco() {
		return isPermisoReporteCuentaBanco;
	}

	public void setIsPermisoReporteCuentaBanco(Boolean isPermisoReporteCuentaBanco) {
		this.isPermisoReporteCuentaBanco = isPermisoReporteCuentaBanco;
	}
	
	public Boolean getIsPermisoPaginacionMedioCuentaBanco() {
		return isPermisoPaginacionMedioCuentaBanco;
	}

	public void setIsPermisoPaginacionMedioCuentaBanco(Boolean isPermisoPaginacionMedioCuentaBanco) {
		this.isPermisoPaginacionMedioCuentaBanco = isPermisoPaginacionMedioCuentaBanco;
	}
	
	public Boolean getIsPermisoPaginacionTodoCuentaBanco() {
		return isPermisoPaginacionTodoCuentaBanco;
	}

	public void setIsPermisoPaginacionTodoCuentaBanco(Boolean isPermisoPaginacionTodoCuentaBanco) {
		this.isPermisoPaginacionTodoCuentaBanco = isPermisoPaginacionTodoCuentaBanco;
	}
	
	public Boolean getIsPermisoPaginacionAltoCuentaBanco() {
		return isPermisoPaginacionAltoCuentaBanco;
	}

	public void setIsPermisoPaginacionAltoCuentaBanco(Boolean isPermisoPaginacionAltoCuentaBanco) {
		this.isPermisoPaginacionAltoCuentaBanco = isPermisoPaginacionAltoCuentaBanco;
	}
	
	public Boolean getIsPermisoCopiarCuentaBanco() {
		return isPermisoCopiarCuentaBanco;
	}

	public void setIsPermisoCopiarCuentaBanco(Boolean isPermisoCopiarCuentaBanco) {
		this.isPermisoCopiarCuentaBanco = isPermisoCopiarCuentaBanco;
	}
	
	public Boolean getIsPermisoVerFormCuentaBanco() {
		return isPermisoVerFormCuentaBanco;
	}

	public void setIsPermisoVerFormCuentaBanco(Boolean isPermisoVerFormCuentaBanco) {
		this.isPermisoVerFormCuentaBanco = isPermisoVerFormCuentaBanco;
	}
	
	public Boolean getIsPermisoDuplicarCuentaBanco() {
		return isPermisoDuplicarCuentaBanco;
	}

	public void setIsPermisoDuplicarCuentaBanco(Boolean isPermisoDuplicarCuentaBanco) {
		this.isPermisoDuplicarCuentaBanco = isPermisoDuplicarCuentaBanco;
	}
	
	public Boolean getIsPermisoOrdenCuentaBanco() {
		return isPermisoOrdenCuentaBanco;
	}

	public void setIsPermisoOrdenCuentaBanco(Boolean isPermisoOrdenCuentaBanco) {
		this.isPermisoOrdenCuentaBanco = isPermisoOrdenCuentaBanco;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoCuentaBanco() {
		return isVisibilidadCeldaNuevoCuentaBanco;
	}

	public void setIsVisibilidadCeldaNuevoCuentaBanco(Boolean isVisibilidadCeldaNuevoCuentaBanco) {
		this.isVisibilidadCeldaNuevoCuentaBanco = isVisibilidadCeldaNuevoCuentaBanco;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarCuentaBanco() {
		return isVisibilidadCeldaDuplicarCuentaBanco;
	}

	public void setIsVisibilidadCeldaDuplicarCuentaBanco(Boolean isVisibilidadCeldaDuplicarCuentaBanco) {
		this.isVisibilidadCeldaDuplicarCuentaBanco = isVisibilidadCeldaDuplicarCuentaBanco;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarCuentaBanco() {
		return isVisibilidadCeldaCopiarCuentaBanco;
	}

	public void setIsVisibilidadCeldaCopiarCuentaBanco(Boolean isVisibilidadCeldaCopiarCuentaBanco) {
		this.isVisibilidadCeldaCopiarCuentaBanco = isVisibilidadCeldaCopiarCuentaBanco;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormCuentaBanco() {
		return isVisibilidadCeldaVerFormCuentaBanco;
	}

	public void setIsVisibilidadCeldaVerFormCuentaBanco(Boolean isVisibilidadCeldaVerFormCuentaBanco) {
		this.isVisibilidadCeldaVerFormCuentaBanco = isVisibilidadCeldaVerFormCuentaBanco;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenCuentaBanco() {
		return isVisibilidadCeldaOrdenCuentaBanco;
	}

	public void setIsVisibilidadCeldaOrdenCuentaBanco(Boolean isVisibilidadCeldaOrdenCuentaBanco) {
		this.isVisibilidadCeldaOrdenCuentaBanco = isVisibilidadCeldaOrdenCuentaBanco;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesCuentaBanco() {
		return isVisibilidadCeldaNuevoRelacionesCuentaBanco;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesCuentaBanco(Boolean isVisibilidadCeldaNuevoRelacionesCuentaBanco) {
		this.isVisibilidadCeldaNuevoRelacionesCuentaBanco = isVisibilidadCeldaNuevoRelacionesCuentaBanco;
	}
	
	public Boolean getIsVisibilidadCeldaModificarCuentaBanco() {
		return isVisibilidadCeldaModificarCuentaBanco;
	}

	public void setIsVisibilidadCeldaModificarCuentaBanco(Boolean isVisibilidadCeldaModificarCuentaBanco) {
		this.isVisibilidadCeldaModificarCuentaBanco = isVisibilidadCeldaModificarCuentaBanco;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarCuentaBanco() {
		return isVisibilidadCeldaActualizarCuentaBanco;
	}

	public void setIsVisibilidadCeldaActualizarCuentaBanco(Boolean isVisibilidadCeldaActualizarCuentaBanco) {
		this.isVisibilidadCeldaActualizarCuentaBanco = isVisibilidadCeldaActualizarCuentaBanco;
	}

	public Boolean getIsVisibilidadCeldaEliminarCuentaBanco() {
		return isVisibilidadCeldaEliminarCuentaBanco;
	}

	public void setIsVisibilidadCeldaEliminarCuentaBanco(Boolean isVisibilidadCeldaEliminarCuentaBanco) {
		this.isVisibilidadCeldaEliminarCuentaBanco = isVisibilidadCeldaEliminarCuentaBanco;
	}

	public Boolean getIsVisibilidadCeldaCancelarCuentaBanco() {
		return isVisibilidadCeldaCancelarCuentaBanco;
	}

	public void setIsVisibilidadCeldaCancelarCuentaBanco(Boolean isVisibilidadCeldaCancelarCuentaBanco) {
		this.isVisibilidadCeldaCancelarCuentaBanco = isVisibilidadCeldaCancelarCuentaBanco;
	}

	public Boolean getIsVisibilidadCeldaGuardarCuentaBanco() {
		return isVisibilidadCeldaGuardarCuentaBanco;
	}

	public void setIsVisibilidadCeldaGuardarCuentaBanco(Boolean isVisibilidadCeldaGuardarCuentaBanco) {
		this.isVisibilidadCeldaGuardarCuentaBanco = isVisibilidadCeldaGuardarCuentaBanco;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosCuentaBanco() {
		return isVisibilidadCeldaGuardarCambiosCuentaBanco;
	}

	public void setIsVisibilidadCeldaGuardarCambiosCuentaBanco(Boolean isVisibilidadCeldaGuardarCambiosCuentaBanco) {
		this.isVisibilidadCeldaGuardarCambiosCuentaBanco = isVisibilidadCeldaGuardarCambiosCuentaBanco;
	}
		
	public CuentaBancoSessionBean getcuentabancoSessionBean() {
		return this.cuentabancoSessionBean;
	}
	
	public void setcuentabancoSessionBean(CuentaBancoSessionBean cuentabancoSessionBean) {
		this.cuentabancoSessionBean=cuentabancoSessionBean;
	}
	
	
	public Boolean getisVisibilidadBusquedaPorCodigo() {
		return this.isVisibilidadBusquedaPorCodigo;
	}

	public void setisVisibilidadBusquedaPorCodigo(Boolean isVisibilidadBusquedaPorCodigo) {
		this.isVisibilidadBusquedaPorCodigo=isVisibilidadBusquedaPorCodigo;
	}

	public Boolean getisVisibilidadBusquedaPorNumeroCheque() {
		return this.isVisibilidadBusquedaPorNumeroCheque;
	}

	public void setisVisibilidadBusquedaPorNumeroCheque(Boolean isVisibilidadBusquedaPorNumeroCheque) {
		this.isVisibilidadBusquedaPorNumeroCheque=isVisibilidadBusquedaPorNumeroCheque;
	}

	public Boolean getisVisibilidadBusquedaPorNumeroCuenta() {
		return this.isVisibilidadBusquedaPorNumeroCuenta;
	}

	public void setisVisibilidadBusquedaPorNumeroCuenta(Boolean isVisibilidadBusquedaPorNumeroCuenta) {
		this.isVisibilidadBusquedaPorNumeroCuenta=isVisibilidadBusquedaPorNumeroCuenta;
	}

	public Boolean getisVisibilidadBusquedaPorProcedencia() {
		return this.isVisibilidadBusquedaPorProcedencia;
	}

	public void setisVisibilidadBusquedaPorProcedencia(Boolean isVisibilidadBusquedaPorProcedencia) {
		this.isVisibilidadBusquedaPorProcedencia=isVisibilidadBusquedaPorProcedencia;
	}

	public Boolean getisVisibilidadFK_IdBanco() {
		return this.isVisibilidadFK_IdBanco;
	}

	public void setisVisibilidadFK_IdBanco(Boolean isVisibilidadFK_IdBanco) {
		this.isVisibilidadFK_IdBanco=isVisibilidadFK_IdBanco;
	}

	public Boolean getisVisibilidadFK_IdCuentaContable() {
		return this.isVisibilidadFK_IdCuentaContable;
	}

	public void setisVisibilidadFK_IdCuentaContable(Boolean isVisibilidadFK_IdCuentaContable) {
		this.isVisibilidadFK_IdCuentaContable=isVisibilidadFK_IdCuentaContable;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoCuentaBanco() {
		return this.isVisibilidadFK_IdEstadoCuentaBanco;
	}

	public void setisVisibilidadFK_IdEstadoCuentaBanco(Boolean isVisibilidadFK_IdEstadoCuentaBanco) {
		this.isVisibilidadFK_IdEstadoCuentaBanco=isVisibilidadFK_IdEstadoCuentaBanco;
	}

	public Boolean getisVisibilidadFK_IdFormatoCheque() {
		return this.isVisibilidadFK_IdFormatoCheque;
	}

	public void setisVisibilidadFK_IdFormatoCheque(Boolean isVisibilidadFK_IdFormatoCheque) {
		this.isVisibilidadFK_IdFormatoCheque=isVisibilidadFK_IdFormatoCheque;
	}

	public Boolean getisVisibilidadFK_IdFormatoDiario() {
		return this.isVisibilidadFK_IdFormatoDiario;
	}

	public void setisVisibilidadFK_IdFormatoDiario(Boolean isVisibilidadFK_IdFormatoDiario) {
		this.isVisibilidadFK_IdFormatoDiario=isVisibilidadFK_IdFormatoDiario;
	}

	public Boolean getisVisibilidadFK_IdFormatoEgreso() {
		return this.isVisibilidadFK_IdFormatoEgreso;
	}

	public void setisVisibilidadFK_IdFormatoEgreso(Boolean isVisibilidadFK_IdFormatoEgreso) {
		this.isVisibilidadFK_IdFormatoEgreso=isVisibilidadFK_IdFormatoEgreso;
	}

	public Boolean getisVisibilidadFK_IdFormatoIngreso() {
		return this.isVisibilidadFK_IdFormatoIngreso;
	}

	public void setisVisibilidadFK_IdFormatoIngreso(Boolean isVisibilidadFK_IdFormatoIngreso) {
		this.isVisibilidadFK_IdFormatoIngreso=isVisibilidadFK_IdFormatoIngreso;
	}

	public Boolean getisVisibilidadFK_IdFormatoRetencion() {
		return this.isVisibilidadFK_IdFormatoRetencion;
	}

	public void setisVisibilidadFK_IdFormatoRetencion(Boolean isVisibilidadFK_IdFormatoRetencion) {
		this.isVisibilidadFK_IdFormatoRetencion=isVisibilidadFK_IdFormatoRetencion;
	}

	public Boolean getisVisibilidadFK_IdFormatoRetencionIva() {
		return this.isVisibilidadFK_IdFormatoRetencionIva;
	}

	public void setisVisibilidadFK_IdFormatoRetencionIva(Boolean isVisibilidadFK_IdFormatoRetencionIva) {
		this.isVisibilidadFK_IdFormatoRetencionIva=isVisibilidadFK_IdFormatoRetencionIva;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoCuentaBancoGlobal() {
		return this.isVisibilidadFK_IdTipoCuentaBancoGlobal;
	}

	public void setisVisibilidadFK_IdTipoCuentaBancoGlobal(Boolean isVisibilidadFK_IdTipoCuentaBancoGlobal) {
		this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isVisibilidadFK_IdTipoCuentaBancoGlobal;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(CuentaBanco cuentabanco)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(cuentabanco,null);
				this.setActualParaGuardarSucursalForeignKey(cuentabanco,null);
				this.setActualParaGuardarBancoForeignKey(cuentabanco,null);
				this.setActualParaGuardarTipoCuentaBancoGlobalForeignKey(cuentabanco,null);
				this.setActualParaGuardarCuentaContableForeignKey(cuentabanco,null);
				this.setActualParaGuardarEstadoCuentaBancoForeignKey(cuentabanco,null);
				this.setActualParaGuardarFormatoIngresoForeignKey(cuentabanco,null);
				this.setActualParaGuardarFormatoEgresoForeignKey(cuentabanco,null);
				this.setActualParaGuardarFormatoDiarioForeignKey(cuentabanco,null);
				this.setActualParaGuardarFormatoChequeForeignKey(cuentabanco,null);
				this.setActualParaGuardarFormatoRetencionForeignKey(cuentabanco,null);
				this.setActualParaGuardarFormatoRetencionIvaForeignKey(cuentabanco,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(CuentaBanco cuentabanco,CuentaBanco cuentabancoAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalCuentaBanco(cuentabanco);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		cuentabancoAux.setId(cuentabanco.getId());
		cuentabancoAux.setVersionRow(cuentabanco.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessCuentaBanco();
		
			int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(CuentaBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = cuentabancoValidator.getInvalidValues(this.cuentabanco);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			cuentabancoLogic.setDatosCliente(datosCliente);
			cuentabancoLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				cuentabancoAux=new  CuentaBanco();
				
				cuentabancoAux.setIsNew(true);
				cuentabancoAux.setIsChanged(true);
				
				cuentabancoAux.setCuentaBancoOriginal(this.cuentabanco);
				
				cuentabancoAux.setId(this.cuentabanco.getId());	
				cuentabancoAux.setVersionRow(this.cuentabanco.getVersionRow());	
				cuentabancoAux.setid_empresa(this.cuentabanco.getid_empresa());	
				cuentabancoAux.setid_sucursal(this.cuentabanco.getid_sucursal());	
				cuentabancoAux.setid_banco(this.cuentabanco.getid_banco());	
				cuentabancoAux.setid_tipo_cuenta_banco_global(this.cuentabanco.getid_tipo_cuenta_banco_global());	
				cuentabancoAux.setcodigo(this.cuentabanco.getcodigo());	
				cuentabancoAux.setnumero_cuenta(this.cuentabanco.getnumero_cuenta());	
				cuentabancoAux.setnumero_cheque(this.cuentabanco.getnumero_cheque());	
				cuentabancoAux.setnumero_cheque_auxiliar(this.cuentabanco.getnumero_cheque_auxiliar());	
				cuentabancoAux.setsaldo(this.cuentabanco.getsaldo());	
				cuentabancoAux.setprocedencia(this.cuentabanco.getprocedencia());	
				cuentabancoAux.setdestino(this.cuentabanco.getdestino());	
				cuentabancoAux.setid_cuenta_contable(this.cuentabanco.getid_cuenta_contable());	
				cuentabancoAux.setes_banco(this.cuentabanco.getes_banco());	
				cuentabancoAux.setid_estado_cuenta_banco(this.cuentabanco.getid_estado_cuenta_banco());	
				cuentabancoAux.setid_formato_ingreso(this.cuentabanco.getid_formato_ingreso());	
				cuentabancoAux.setid_formato_egreso(this.cuentabanco.getid_formato_egreso());	
				cuentabancoAux.setid_formato_diario(this.cuentabanco.getid_formato_diario());	
				cuentabancoAux.setid_formato_cheque(this.cuentabanco.getid_formato_cheque());	
				
				if(this.cuentabanco.getid_formato_retencion()!=null && this.cuentabanco.getid_formato_retencion()>0L) {
					cuentabancoAux.setid_formato_retencion(this.cuentabanco.getid_formato_retencion());
				} else {
					cuentabancoAux.setid_formato_retencion(null);
				}	
				
				if(this.cuentabanco.getid_formato_retencion_iva()!=null && this.cuentabanco.getid_formato_retencion_iva()>0L) {
					cuentabancoAux.setid_formato_retencion_iva(this.cuentabanco.getid_formato_retencion_iva());
				} else {
					cuentabancoAux.setid_formato_retencion_iva(null);
				}	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.cuentabancoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.cuentabancoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(cuentabancoAux,cuentabancoLogic.getCuentaBancos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cuentabancoAux,cuentabancos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.cuentabancoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.cuentabancoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancoLogic.saveCuentaBancos();//WithConnection
						//cuentabancoLogic.getSetVersionRowCuentaBancos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.cuentabanco,cuentabancoAux);
					
					this.refrescarForeignKeysDescripcionesCuentaBanco();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.cuentabancoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos().addAll(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautosEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.getAutoriPagoOrdenCompras().addAll(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencomprasEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.getDetalleChequeGirados().addAll(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradosEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos().addAll(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautos.addAll(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautosEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompras.addAll(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencomprasEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegirados.addAll(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradosEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagos.addAll(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagosEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								cuentabancoLogic.saveCuentaBancoRelaciones(cuentabancoAux,this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos(),this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.getAutoriPagoOrdenCompras(),this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.getDetalleChequeGirados(),this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());//WithConnection
								//cuentabancoLogic.getSetVersionRowCuentaBancos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.cuentabanco,cuentabancoAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.setPagoAutos(new ArrayList<PagoAuto>());
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.setAutoriPagoOrdenCompras(new ArrayList<AutoriPagoOrdenCompra>());
							this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.setDetalleChequeGirados(new ArrayList<DetalleChequeGirado>());
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautos= new ArrayList<PagoAuto>();
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompras= new ArrayList<AutoriPagoOrdenCompra>();
							this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegirados= new ArrayList<DetalleChequeGirado>();
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagos= new ArrayList<AutoriPago>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();}
							cuentabancoAux.setPagoAutos(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos());

							if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.quitarFilaTotales();}
							cuentabancoAux.setAutoriPagoOrdenCompras(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.getAutoriPagoOrdenCompras());

							if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.quitarFilaTotales();}
							cuentabancoAux.setDetalleChequeGirados(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.getDetalleChequeGirados());

							if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();}
							cuentabancoAux.setAutoriPagos(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.cuentabancoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.cuentabancoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(cuentabancoAux,cuentabancoLogic.getCuentaBancos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(cuentabancoAux,cuentabancos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.cuentabanco,cuentabancoAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				cuentabancoAux=new  CuentaBanco();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.cuentabancoSessionBean.getEsGuardarRelacionado() 
					|| (this.cuentabancoSessionBean.getEsGuardarRelacionado() && this.cuentabanco.getId()>=0)) {
						
					cuentabancoAux.setIsNew(false);
				}
				
				cuentabancoAux.setIsDeleted(false);
			
				cuentabancoAux.setId(this.cuentabanco.getId());	
				cuentabancoAux.setVersionRow(this.cuentabanco.getVersionRow());	
				cuentabancoAux.setid_empresa(this.cuentabanco.getid_empresa());	
				cuentabancoAux.setid_sucursal(this.cuentabanco.getid_sucursal());	
				cuentabancoAux.setid_banco(this.cuentabanco.getid_banco());	
				cuentabancoAux.setid_tipo_cuenta_banco_global(this.cuentabanco.getid_tipo_cuenta_banco_global());	
				cuentabancoAux.setcodigo(this.cuentabanco.getcodigo());	
				cuentabancoAux.setnumero_cuenta(this.cuentabanco.getnumero_cuenta());	
				cuentabancoAux.setnumero_cheque(this.cuentabanco.getnumero_cheque());	
				cuentabancoAux.setnumero_cheque_auxiliar(this.cuentabanco.getnumero_cheque_auxiliar());	
				cuentabancoAux.setsaldo(this.cuentabanco.getsaldo());	
				cuentabancoAux.setprocedencia(this.cuentabanco.getprocedencia());	
				cuentabancoAux.setdestino(this.cuentabanco.getdestino());	
				cuentabancoAux.setid_cuenta_contable(this.cuentabanco.getid_cuenta_contable());	
				cuentabancoAux.setes_banco(this.cuentabanco.getes_banco());	
				cuentabancoAux.setid_estado_cuenta_banco(this.cuentabanco.getid_estado_cuenta_banco());	
				cuentabancoAux.setid_formato_ingreso(this.cuentabanco.getid_formato_ingreso());	
				cuentabancoAux.setid_formato_egreso(this.cuentabanco.getid_formato_egreso());	
				cuentabancoAux.setid_formato_diario(this.cuentabanco.getid_formato_diario());	
				cuentabancoAux.setid_formato_cheque(this.cuentabanco.getid_formato_cheque());	
				
				if(this.cuentabanco.getid_formato_retencion()!=null && this.cuentabanco.getid_formato_retencion()>0L) {
					cuentabancoAux.setid_formato_retencion(this.cuentabanco.getid_formato_retencion());
				} else {
					cuentabancoAux.setid_formato_retencion(null);
				}	
				
				if(this.cuentabanco.getid_formato_retencion_iva()!=null && this.cuentabanco.getid_formato_retencion_iva()>0L) {
					cuentabancoAux.setid_formato_retencion_iva(this.cuentabanco.getid_formato_retencion_iva());
				} else {
					cuentabancoAux.setid_formato_retencion_iva(null);
				}	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(cuentabancoAux,cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cuentabancoAux,cuentabancos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.cuentabancoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.cuentabancoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancoLogic.saveCuentaBancos();//WithConnection
						//cuentabancoLogic.getSetVersionRowCuentaBancos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.cuentabanco,cuentabancoAux);
					
					this.refrescarForeignKeysDescripcionesCuentaBanco();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.cuentabancoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos().addAll(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautosEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.getAutoriPagoOrdenCompras().addAll(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencomprasEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.getDetalleChequeGirados().addAll(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradosEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos().addAll(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautos.addAll(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautosEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompras.addAll(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencomprasEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegirados.addAll(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradosEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagos.addAll(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagosEliminados);
						}
						//ARCHITECTURE
						
						if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								cuentabancoLogic.saveCuentaBancoRelaciones(cuentabancoAux,this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos(),this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.getAutoriPagoOrdenCompras(),this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.getDetalleChequeGirados(),this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());//WithConnection
								//cuentabancoLogic.getSetVersionRowCuentaBancos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.cuentabanco,cuentabancoAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.setPagoAutos(new ArrayList<PagoAuto>());
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.setAutoriPagoOrdenCompras(new ArrayList<AutoriPagoOrdenCompra>());
							this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.setDetalleChequeGirados(new ArrayList<DetalleChequeGirado>());
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautos= new ArrayList<PagoAuto>();
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompras= new ArrayList<AutoriPagoOrdenCompra>();
							this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegirados= new ArrayList<DetalleChequeGirado>();
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagos= new ArrayList<AutoriPago>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();}
							cuentabancoAux.setPagoAutos(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos());

							if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.quitarFilaTotales();}
							cuentabancoAux.setAutoriPagoOrdenCompras(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.getAutoriPagoOrdenCompras());

							if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.quitarFilaTotales();}
							cuentabancoAux.setDetalleChequeGirados(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.getDetalleChequeGirados());

							if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();}
							cuentabancoAux.setAutoriPagos(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.cuentabancoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.cuentabancoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(cuentabancoAux,cuentabancoLogic.getCuentaBancos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(cuentabancoAux,cuentabancos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.cuentabanco,cuentabancoAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				cuentabancoAux=new  CuentaBanco();
				
				cuentabancoAux.setIsNew(false);
				cuentabancoAux.setIsChanged(false);
				
				cuentabancoAux.setIsDeleted(true);
				
				cuentabancoAux.setId(this.cuentabanco.getId());	
				cuentabancoAux.setVersionRow(this.cuentabanco.getVersionRow());	
				cuentabancoAux.setid_empresa(this.cuentabanco.getid_empresa());	
				cuentabancoAux.setid_sucursal(this.cuentabanco.getid_sucursal());	
				cuentabancoAux.setid_banco(this.cuentabanco.getid_banco());	
				cuentabancoAux.setid_tipo_cuenta_banco_global(this.cuentabanco.getid_tipo_cuenta_banco_global());	
				cuentabancoAux.setcodigo(this.cuentabanco.getcodigo());	
				cuentabancoAux.setnumero_cuenta(this.cuentabanco.getnumero_cuenta());	
				cuentabancoAux.setnumero_cheque(this.cuentabanco.getnumero_cheque());	
				cuentabancoAux.setnumero_cheque_auxiliar(this.cuentabanco.getnumero_cheque_auxiliar());	
				cuentabancoAux.setsaldo(this.cuentabanco.getsaldo());	
				cuentabancoAux.setprocedencia(this.cuentabanco.getprocedencia());	
				cuentabancoAux.setdestino(this.cuentabanco.getdestino());	
				cuentabancoAux.setid_cuenta_contable(this.cuentabanco.getid_cuenta_contable());	
				cuentabancoAux.setes_banco(this.cuentabanco.getes_banco());	
				cuentabancoAux.setid_estado_cuenta_banco(this.cuentabanco.getid_estado_cuenta_banco());	
				cuentabancoAux.setid_formato_ingreso(this.cuentabanco.getid_formato_ingreso());	
				cuentabancoAux.setid_formato_egreso(this.cuentabanco.getid_formato_egreso());	
				cuentabancoAux.setid_formato_diario(this.cuentabanco.getid_formato_diario());	
				cuentabancoAux.setid_formato_cheque(this.cuentabanco.getid_formato_cheque());	
				
				if(this.cuentabanco.getid_formato_retencion()!=null && this.cuentabanco.getid_formato_retencion()>0L) {
					cuentabancoAux.setid_formato_retencion(this.cuentabanco.getid_formato_retencion());
				} else {
					cuentabancoAux.setid_formato_retencion(null);
				}	
				
				if(this.cuentabanco.getid_formato_retencion_iva()!=null && this.cuentabanco.getid_formato_retencion_iva()>0L) {
					cuentabancoAux.setid_formato_retencion_iva(this.cuentabanco.getid_formato_retencion_iva());
				} else {
					cuentabancoAux.setid_formato_retencion_iva(null);
				}	
				
				if(this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.cuentabancoAux.getId()>=0) {	
						this.cuentabancosEliminados.add(cuentabancoAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(cuentabancoAux,cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cuentabancoAux,cuentabancos);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.cuentabancoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.cuentabancoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancoLogic.saveCuentaBancos();//WithConnection
						//cuentabancoLogic.getSetVersionRowCuentaBancos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.cuentabancoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos().addAll(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautosEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.getAutoriPagoOrdenCompras().addAll(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencomprasEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.getDetalleChequeGirados().addAll(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradosEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos().addAll(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagosEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautos.addAll(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautosEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompras.addAll(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencomprasEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegirados.addAll(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradosEliminados);
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagos.addAll(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagosEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								cuentabancoLogic.saveCuentaBancoRelaciones(cuentabancoAux,this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos(),this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.getAutoriPagoOrdenCompras(),this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.getDetalleChequeGirados(),this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());//WithConnection
								//cuentabancoLogic.getSetVersionRowCuentaBancos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.setPagoAutos(new ArrayList<PagoAuto>());
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.setAutoriPagoOrdenCompras(new ArrayList<AutoriPagoOrdenCompra>());
							this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.setDetalleChequeGirados(new ArrayList<DetalleChequeGirado>());
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautos= new ArrayList<PagoAuto>();
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompras= new ArrayList<AutoriPagoOrdenCompra>();
							this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegirados= new ArrayList<DetalleChequeGirado>();
							this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagos= new ArrayList<AutoriPago>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.quitarFilaTotales();}
							cuentabancoAux.setPagoAutos(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos());

							if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.quitarFilaTotales();}
							cuentabancoAux.setAutoriPagoOrdenCompras(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.getAutoriPagoOrdenCompras());

							if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.quitarFilaTotales();}
							cuentabancoAux.setDetalleChequeGirados(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.getDetalleChequeGirados());

							if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.quitarFilaTotales();}
							cuentabancoAux.setAutoriPagos(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.cuentabancoSessionBean.getEstaModoGuardarRelaciones() 
								|| this.cuentabancoSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(cuentabancoAux,cuentabancoLogic.getCuentaBancos());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(cuentabancoAux,cuentabancos);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getCuentaBancos().addAll(this.cuentabancosEliminados);
					
					cuentabancoLogic.saveCuentaBancos();//WithConnection
					//cuentabancoLogic.getSetVersionRowCuentaBancos();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesCuentaBanco();
				
				this.cuentabancosEliminados= new ArrayList<CuentaBanco>();		
			}
			
			if(this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentabancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Cuenta Banco GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Cuenta Banco",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.cuentabanco=cuentabancoAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessCuentaBanco();
      	}
		
	}	
	
	public void actualizarRelaciones(CuentaBanco cuentabancoLocal) throws Exception {
		
		if(this.cuentabancoSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				cuentabancoLocal.setPagoAutos(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos());
				cuentabancoLocal.setAutoriPagoOrdenCompras(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.getAutoriPagoOrdenCompras());
				cuentabancoLocal.setDetalleChequeGirados(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.getDetalleChequeGirados());
				cuentabancoLocal.setAutoriPagos(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());
			
			} else {
			
				cuentabancoLocal.setPagoAutos(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautos);
				cuentabancoLocal.setAutoriPagoOrdenCompras(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompras);
				cuentabancoLocal.setDetalleChequeGirados(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegirados);
				cuentabancoLocal.setAutoriPagos(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagos);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(CuentaBanco cuentabancoLocal) throws Exception {	
		if(this.cuentabancoSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				cuentabancoLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				cuentabancoLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BancoDetalleFormJInternalFrame.class)) {
				BancoBeanSwingJInternalFrame bancoBeanSwingJInternalFrameLocal=(BancoBeanSwingJInternalFrame) ((BancoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bancoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBanco(bancoBeanSwingJInternalFrameLocal.getbanco(),true);
				bancoBeanSwingJInternalFrameLocal.actualizarLista(bancoBeanSwingJInternalFrameLocal.banco,this.bancosForeignKey);

				bancoBeanSwingJInternalFrameLocal.actualizarRelaciones(bancoBeanSwingJInternalFrameLocal.banco);

				cuentabancoLocal.setBanco(bancoBeanSwingJInternalFrameLocal.banco);

				this.addItemDefectoCombosForeignKeyBanco();
				this.cargarCombosFrameBancosForeignKey("Formulario");
				this.setActualBancoForeignKey(bancoBeanSwingJInternalFrameLocal.banco.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoCuentaBancoGlobalDetalleFormJInternalFrame.class)) {
				TipoCuentaBancoGlobalBeanSwingJInternalFrame tipocuentabancoglobalBeanSwingJInternalFrameLocal=(TipoCuentaBancoGlobalBeanSwingJInternalFrame) ((TipoCuentaBancoGlobalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipocuentabancoglobalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoCuentaBancoGlobal(tipocuentabancoglobalBeanSwingJInternalFrameLocal.gettipocuentabancoglobal(),true);
				tipocuentabancoglobalBeanSwingJInternalFrameLocal.actualizarLista(tipocuentabancoglobalBeanSwingJInternalFrameLocal.tipocuentabancoglobal,this.tipocuentabancoglobalsForeignKey);

				tipocuentabancoglobalBeanSwingJInternalFrameLocal.actualizarRelaciones(tipocuentabancoglobalBeanSwingJInternalFrameLocal.tipocuentabancoglobal);

				cuentabancoLocal.setTipoCuentaBancoGlobal(tipocuentabancoglobalBeanSwingJInternalFrameLocal.tipocuentabancoglobal);

				this.addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal();
				this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey("Formulario");
				this.setActualTipoCuentaBancoGlobalForeignKey(tipocuentabancoglobalBeanSwingJInternalFrameLocal.tipocuentabancoglobal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablesForeignKey);

				cuentacontableBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable);

				cuentabancoLocal.setCuentaContable(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContable();
				this.cargarCombosFrameCuentaContablesForeignKey("Formulario");
				this.setActualCuentaContableForeignKey(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoCuentaBancoDetalleFormJInternalFrame.class)) {
				EstadoCuentaBancoBeanSwingJInternalFrame estadocuentabancoBeanSwingJInternalFrameLocal=(EstadoCuentaBancoBeanSwingJInternalFrame) ((EstadoCuentaBancoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadocuentabancoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoCuentaBanco(estadocuentabancoBeanSwingJInternalFrameLocal.getestadocuentabanco(),true);
				estadocuentabancoBeanSwingJInternalFrameLocal.actualizarLista(estadocuentabancoBeanSwingJInternalFrameLocal.estadocuentabanco,this.estadocuentabancosForeignKey);

				estadocuentabancoBeanSwingJInternalFrameLocal.actualizarRelaciones(estadocuentabancoBeanSwingJInternalFrameLocal.estadocuentabanco);

				cuentabancoLocal.setEstadoCuentaBanco(estadocuentabancoBeanSwingJInternalFrameLocal.estadocuentabanco);

				this.addItemDefectoCombosForeignKeyEstadoCuentaBanco();
				this.cargarCombosFrameEstadoCuentaBancosForeignKey("Formulario");
				this.setActualEstadoCuentaBancoForeignKey(estadocuentabancoBeanSwingJInternalFrameLocal.estadocuentabanco.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoingresoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoingresoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoingresoBeanSwingJInternalFrameLocal.getformato(),true);
				formatoingresoBeanSwingJInternalFrameLocal.actualizarLista(formatoingresoBeanSwingJInternalFrameLocal.formato,this.formatoingresosForeignKey);

				formatoingresoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoingresoBeanSwingJInternalFrameLocal.formato);

				cuentabancoLocal.setFormatoIngreso(formatoingresoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoIngreso();
				this.cargarCombosFrameFormatoIngresosForeignKey("Formulario");
				this.setActualFormatoIngresoForeignKey(formatoingresoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoegresoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoegresoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoegresoBeanSwingJInternalFrameLocal.getformato(),true);
				formatoegresoBeanSwingJInternalFrameLocal.actualizarLista(formatoegresoBeanSwingJInternalFrameLocal.formato,this.formatoegresosForeignKey);

				formatoegresoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoegresoBeanSwingJInternalFrameLocal.formato);

				cuentabancoLocal.setFormatoEgreso(formatoegresoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoEgreso();
				this.cargarCombosFrameFormatoEgresosForeignKey("Formulario");
				this.setActualFormatoEgresoForeignKey(formatoegresoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatodiarioBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatodiarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatodiarioBeanSwingJInternalFrameLocal.getformato(),true);
				formatodiarioBeanSwingJInternalFrameLocal.actualizarLista(formatodiarioBeanSwingJInternalFrameLocal.formato,this.formatodiariosForeignKey);

				formatodiarioBeanSwingJInternalFrameLocal.actualizarRelaciones(formatodiarioBeanSwingJInternalFrameLocal.formato);

				cuentabancoLocal.setFormatoDiario(formatodiarioBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoDiario();
				this.cargarCombosFrameFormatoDiariosForeignKey("Formulario");
				this.setActualFormatoDiarioForeignKey(formatodiarioBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatochequeBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatochequeBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatochequeBeanSwingJInternalFrameLocal.getformato(),true);
				formatochequeBeanSwingJInternalFrameLocal.actualizarLista(formatochequeBeanSwingJInternalFrameLocal.formato,this.formatochequesForeignKey);

				formatochequeBeanSwingJInternalFrameLocal.actualizarRelaciones(formatochequeBeanSwingJInternalFrameLocal.formato);

				cuentabancoLocal.setFormatoCheque(formatochequeBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoCheque();
				this.cargarCombosFrameFormatoChequesForeignKey("Formulario");
				this.setActualFormatoChequeForeignKey(formatochequeBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoretencionBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoretencionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoretencionBeanSwingJInternalFrameLocal.getformato(),true);
				formatoretencionBeanSwingJInternalFrameLocal.actualizarLista(formatoretencionBeanSwingJInternalFrameLocal.formato,this.formatoretencionsForeignKey);

				formatoretencionBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoretencionBeanSwingJInternalFrameLocal.formato);

				cuentabancoLocal.setFormatoRetencion(formatoretencionBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoRetencion();
				this.cargarCombosFrameFormatoRetencionsForeignKey("Formulario");
				this.setActualFormatoRetencionForeignKey(formatoretencionBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoretencionivaBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoretencionivaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoretencionivaBeanSwingJInternalFrameLocal.getformato(),true);
				formatoretencionivaBeanSwingJInternalFrameLocal.actualizarLista(formatoretencionivaBeanSwingJInternalFrameLocal.formato,this.formatoretencionivasForeignKey);

				formatoretencionivaBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoretencionivaBeanSwingJInternalFrameLocal.formato);

				cuentabancoLocal.setFormatoRetencionIva(formatoretencionivaBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormatoRetencionIva();
				this.cargarCombosFrameFormatoRetencionIvasForeignKey("Formulario");
				this.setActualFormatoRetencionIvaForeignKey(formatoretencionivaBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarCuentaBancoActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = cuentabancoValidator.getInvalidValues(this.cuentabanco);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(CuentaBanco cuentabanco,List<CuentaBanco> cuentabancos) throws Exception {
		try	{		
			CuentaBancoConstantesFunciones.actualizarLista(cuentabanco,cuentabancos,this.cuentabancoSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(CuentaBanco cuentabanco,List<CuentaBanco> cuentabancos) throws Exception {
		try	{			
			CuentaBancoConstantesFunciones.actualizarSelectedLista(cuentabanco,cuentabancos);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<CuentaBanco> cuentabancosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				cuentabancosLocal=this.cuentabancoLogic.getCuentaBancos();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				cuentabancosLocal=this.cuentabancos;
			}
			//ARCHITECTURE
		
			for(CuentaBanco cuentabancoLocal:cuentabancosLocal) {
				if(this.permiteMantenimiento(cuentabancoLocal) && cuentabancoLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+CuentaBancoConstantesFunciones.getCuentaBancoLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_empresaCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_sucursalCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.IDBANCO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_bancoCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.IDTIPOCUENTABANCOGLOBAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_tipo_cuenta_banco_globalCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.CODIGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelcodigoCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.NUMEROCUENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelnumero_cuentaCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.NUMEROCHEQUE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelnumero_chequeCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.NUMEROCHEQUEAUXILIAR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelnumero_cheque_auxiliarCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.SALDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelsaldoCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.PROCEDENCIA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelprocedenciaCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.DESTINO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabeldestinoCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.IDCUENTACONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_cuenta_contableCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.ESBANCO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabeles_bancoCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.IDESTADOCUENTABANCO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_estado_cuenta_bancoCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.IDFORMATOINGRESO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_formato_ingresoCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.IDFORMATOEGRESO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_formato_egresoCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.IDFORMATODIARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_formato_diarioCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.IDFORMATOCHEQUE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_formato_chequeCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.IDFORMATORETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_formato_retencionCuentaBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CuentaBancoConstantesFunciones.IDFORMATORETENCIONIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_formato_retencion_ivaCuentaBanco,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_empresaCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_sucursalCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_bancoCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_tipo_cuenta_banco_globalCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelcodigoCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelnumero_cuentaCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelnumero_chequeCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelnumero_cheque_auxiliarCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelsaldoCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelprocedenciaCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabeldestinoCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_cuenta_contableCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabeles_bancoCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_estado_cuenta_bancoCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_formato_ingresoCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_formato_egresoCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_formato_diarioCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_formato_chequeCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_formato_retencionCuentaBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCuentaBanco.jLabelid_formato_retencion_ivaCuentaBanco,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("PagoAuto")) {
			if(this.cuentabanco==null) {
				this.cuentabanco= new CuentaBanco();
			}

			if(this.cuentabancoSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoCuentaBanco
				this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.getpagoauto().setCuentaBanco(this.cuentabanco);
			}

			return;
		}
		 else  if(sTipo.equals("AutoriPagoOrdenCompra")) {
			if(this.cuentabanco==null) {
				this.cuentabanco= new CuentaBanco();
			}

			if(this.cuentabancoSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoCuentaBanco
				this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.getautoripagoordencompra().setCuentaBanco(this.cuentabanco);
			}

			return;
		}
		 else  if(sTipo.equals("DetalleChequeGirado")) {
			if(this.cuentabanco==null) {
				this.cuentabanco= new CuentaBanco();
			}

			if(this.cuentabancoSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoCuentaBanco
				this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.getdetallechequegirado().setCuentaBanco(this.cuentabanco);
			}

			return;
		}
		 else  if(sTipo.equals("AutoriPago")) {
			if(this.cuentabanco==null) {
				this.cuentabanco= new CuentaBanco();
			}

			if(this.cuentabancoSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoCuentaBanco
				this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.getautoripago().setCuentaBanco(this.cuentabanco);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoCuentaBanco--;	
		
		
		this.cuentabancoAux=new CuentaBanco();
		
		this.cuentabancoAux.setId(this.iIdNuevoCuentaBanco);
		this.cuentabancoAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.cuentabancoLogic.getCuentaBancos().add(this.cuentabancoAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.cuentabancos.add(this.cuentabancoAux);
		}
		//ARCHITECTURE
		
		this.cuentabanco=this.cuentabancoAux;
		
		if(CuentaBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioCuentaBanco(this.cuentabanco);
			this.setVariablesObjetoActualToFormularioForeignKeyCuentaBanco(this.cuentabanco);
		}
				
		//this.setDefaultControlesCuentaBanco();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyCuentaBanco();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyCuentaBanco();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyCuentaBanco();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualCuentaBanco(this.cuentabancoBean,this.cuentabanco,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(CuentaBancoConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.cuentabancoSessionBean.getConGuardarRelaciones()) {
			classes=CuentaBancoConstantesFunciones.getClassesRelationshipsOfCuentaBanco(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.cuentabancoReturnGeneral=cuentabancoLogic.procesarEventosCuentaBancosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.cuentabancoLogic.getCuentaBancos(),this.cuentabanco,this.cuentabancoParameterGeneral,this.isEsNuevoCuentaBanco,classes);//this.cuentabancoLogic.getCuentaBanco()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanCuentaBanco(this.cuentabancoReturnGeneral,this.cuentabancoBean,false);
		
		if(this.cuentabancoReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyCuentaBanco(this.cuentabancoReturnGeneral.getCuentaBanco());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioCuentaBanco(this.cuentabancoReturnGeneral.getCuentaBanco());
		}
		
		if(this.cuentabancoReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioCuentaBanco(this.cuentabancoReturnGeneral.getCuentaBanco(),classes);//this.cuentabancoBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyCuentaBanco();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyCuentaBanco();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			CuentaBancoBeanSwingJInternalFrameAdditional.RecargarFormCuentaBanco(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingCuentaBanco(false);
						
			if(cuentabancoSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.getEsGuardarRelacionado() && PagoAutoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPagoAutoActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraSessionBean.getEsGuardarRelacionado() && AutoriPagoOrdenCompraJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonAutoriPagoOrdenCompraActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoSessionBean.getEsGuardarRelacionado() && DetalleChequeGiradoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleChequeGiradoActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.getEsGuardarRelacionado() && AutoriPagoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonAutoriPagoActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualCuentaBanco();
			}
			
			this.actualizarVisualTableDatosCuentaBanco();
			
			this.jTableDatosCuentaBanco.setRowSelectionInterval(this.getIndiceNuevoCuentaBanco(), this.getIndiceNuevoCuentaBanco());
			
			this.seleccionarFilaTablaCuentaBancoActual();
						
			this.actualizarEstadoCeldasBotonesCuentaBanco("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesCuentaBanco(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormCuentaBanco.jTextAreacodigoCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarcodigoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cuentaCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarnumero_cuentaCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_chequeCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarnumero_chequeCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cheque_auxiliarCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarnumero_cheque_auxiliarCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jTextFieldsaldoCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarsaldoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jTextAreaprocedenciaCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarprocedenciaCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jTextAreadestinoCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activardestinoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxes_bancoCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activares_bancoCuentaBanco);	
		//
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarid_empresaCuentaBanco);//
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarid_sucursalCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarid_bancoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarid_tipo_cuenta_banco_globalCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarid_cuenta_contableCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarid_estado_cuenta_bancoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarid_formato_ingresoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarid_formato_egresoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarid_formato_diarioCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarid_formato_chequeCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarid_formato_retencionCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.setEnabled(isHabilitar && this.cuentabancoConstantesFunciones.activarid_formato_retencion_ivaCuentaBanco);
	};
	
	public void setDefaultControlesCuentaBanco() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoCuentaBanco(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.cuentabancoSessionBean.setConGuardarRelaciones(true);			
			this.cuentabancoSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormCuentaBanco.jTabbedPaneRelacionesCuentaBanco.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.cuentabancoSessionBean.setConGuardarRelaciones(false);			
			this.cuentabancoSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormCuentaBanco.jTabbedPaneRelacionesCuentaBanco.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoCuentaBanco() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentaBanco cuentabancoAux:this.cuentabancoLogic.getCuentaBancos()) {
				if(cuentabancoAux.getId().equals(this.iIdNuevoCuentaBanco)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentaBanco cuentabancoAux:this.cuentabancos) {
				if(cuentabancoAux.getId().equals(this.iIdNuevoCuentaBanco)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualCuentaBanco(CuentaBanco cuentabanco,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentaBanco cuentabancoAux:this.cuentabancoLogic.getCuentaBancos()) {
				if(cuentabancoAux.getId().equals(cuentabanco.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentaBanco cuentabancoAux:this.cuentabancos) {
				if(cuentabancoAux.getId().equals(cuentabanco.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalCuentaBanco(CuentaBanco cuentabancoOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentaBanco cuentabancoAux:this.cuentabancoLogic.getCuentaBancos()) {
				if(cuentabancoAux.getCuentaBancoOriginal().getId().equals(cuentabancoOriginal.getId())) {
					existe=true;
					cuentabancoOriginal.setId(cuentabancoAux.getId());
					cuentabancoOriginal.setVersionRow(cuentabancoAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentaBanco cuentabancoAux:this.cuentabancos) {
				if(cuentabancoAux.getCuentaBancoOriginal().getId().equals(cuentabancoOriginal.getId())) {
					existe=true;
					cuentabancoOriginal.setId(cuentabancoAux.getId());
					cuentabancoOriginal.setVersionRow(cuentabancoAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosCuentaBanco(Boolean esParaCancelar) throws Exception {
		cuentabancosAux=new ArrayList<CuentaBanco>();
		cuentabancoAux=new CuentaBanco();
		
		if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(CuentaBanco cuentabancoAux:this.cuentabancoLogic.getCuentaBancos()) {
					if(cuentabancoAux.getId()<0) {
						cuentabancosAux.add(cuentabancoAux);
					}		
				}
				this.iIdNuevoCuentaBanco=0L;
				this.cuentabancoLogic.getCuentaBancos().removeAll(cuentabancosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(CuentaBanco cuentabancoAux:this.cuentabancos) {
					if(cuentabancoAux.getId()<0) {
						cuentabancosAux.add(cuentabancoAux);
					}		
				}
				this.iIdNuevoCuentaBanco=0L;
				this.cuentabancos.removeAll(cuentabancosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoCuentaBanco 
					&& this.cuentabancoLogic.getCuentaBancos().size()>0
					) {
					cuentabancoAux=this.cuentabancoLogic.getCuentaBancos().get(this.cuentabancoLogic.getCuentaBancos().size() - 1);
				
					if(cuentabancoAux.getId()<0) {
						this.cuentabancoLogic.getCuentaBancos().remove(cuentabancoAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoCuentaBanco && this.cuentabancos.size()>0) {
					cuentabancoAux=this.cuentabancos.get(this.cuentabancos.size() - 1);
				
					if(cuentabancoAux.getId()<0) {
						this.cuentabancos.remove(cuentabancoAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoCuentaBanco(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(cuentabanco.getId()<0) {
				this.cuentabancoLogic.getCuentaBancos().remove(this.cuentabanco);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(cuentabanco.getId()<0) {
				this.cuentabancos.remove(this.cuentabanco);
			}
		}			
	}
	
	public void setEstadosInicialesCuentaBanco(List<CuentaBanco> cuentabancosAux) throws Exception {
		CuentaBancoConstantesFunciones.setEstadosInicialesCuentaBanco(cuentabancosAux);
	}
	
	public void setEstadosInicialesCuentaBanco(CuentaBanco cuentabancoAux) throws Exception {
		CuentaBancoConstantesFunciones.setEstadosInicialesCuentaBanco(cuentabancoAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarCuentaBancoActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesCuentaBanco("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarCuentaBancoActual()) {
				if(!this.isEsNuevoCuentaBanco) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesCuentaBanco("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoCuentaBanco=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarCuentaBancoActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Cuenta Banco ?", "MANTENIMIENTO DE Cuenta Banco", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesCuentaBanco("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(CuentaBanco cuentabanco) throws Exception {
		CuentaBancoConstantesFunciones.seleccionarAsignar(this.cuentabanco,cuentabanco);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarCuentaBanco=this.isPermisoActualizarOriginalCuentaBanco;
			
			
			this.seleccionarAsignar(cuentabanco);
			
			

			idCuentaContableActual=cuentabanco.getid_cuenta_contable();
			this.seleccionarCuentaContableActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			CuentaBancoConstantesFunciones.quitarEspaciosCuentaBanco(this.cuentabanco,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesCuentaBanco("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.cuentabancoSessionBean.setsFuncionBusquedaRapida(this.cuentabancoSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarCuentaContableActual() throws Exception {
		try	{
			CuentaContable cuentacontableAux=new CuentaContable();

			if(this.idCuentaContableActual != null && this.idCuentaContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(this.idCuentaContableActual);
					cuentacontableAux= cuentacontableLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablesForeignKey=new ArrayList<CuentaContable>();
				cuentacontablesForeignKey.add(cuentacontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoCuentaBanco) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosCuentaBanco(esParaCancelar);				
				this.cancelarNuevoCuentaBanco(esParaCancelar);								
			}
			
			this.cuentabanco=new CuentaBanco();
			
			this.inicializarCuentaBanco();
			
			this.actualizarEstadoCeldasBotonesCuentaBanco("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarCuentaBanco() throws Exception {
		try {
			CuentaBancoConstantesFunciones.inicializarCuentaBanco(this.cuentabanco);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.cuentabancoLogic.getCuentaBancos().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteCuentaBancos(String sAccionBusqueda,List<CuentaBanco> cuentabancosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="CuentaBanco"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="CuentaBancoMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("CuentaBancoMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="CuentaBanco"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Cuenta Bancos");		
		parameters.put("busquedapor", CuentaBancoConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(PagoAuto.class));
			classes.add(new Classe(AutoriPagoOrdenCompra.class));
			classes.add(new Classe(DetalleChequeGirado.class));
			classes.add(new Classe(AutoriPago.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					CuentaBancoLogic cuentabancoLogicAuxiliar=new CuentaBancoLogic();
					cuentabancoLogicAuxiliar.setDatosCliente(cuentabancoLogic.getDatosCliente());				
					cuentabancoLogicAuxiliar.setCuentaBancos(cuentabancosParaReportes);
					
					cuentabancoLogicAuxiliar.cargarRelacionesLoteForeignKeyCuentaBancoWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					cuentabancosParaReportes=cuentabancoLogicAuxiliar.getCuentaBancos();
					
					//cuentabancoLogic.getNewConnexionToDeep();
					
					//for (CuentaBanco cuentabanco:cuentabancosParaReportes) {
					//	cuentabancoLogic.deepLoad(cuentabanco, false, DeepLoadType.INCLUDE, classes);
					//}						
					//cuentabancoLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//cuentabancoLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFilePagoAuto = AuxiliarReportes.class.getResourceAsStream("PagoAutoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_pagoauto", reportFilePagoAuto);

			InputStream reportFileAutoriPagoOrdenCompra = AuxiliarReportes.class.getResourceAsStream("AutoriPagoOrdenCompraDetalleRelacionesDesign.jasper");
			parameters.put("subreport_autoripagoordencompra", reportFileAutoriPagoOrdenCompra);

			InputStream reportFileDetalleChequeGirado = AuxiliarReportes.class.getResourceAsStream("DetalleChequeGiradoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detallechequegirado", reportFileDetalleChequeGirado);

			InputStream reportFileAutoriPago = AuxiliarReportes.class.getResourceAsStream("AutoriPagoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_autoripago", reportFileAutoriPago);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceCuentaBanco=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			CuentaBancoConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			CuentaBancoConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceCuentaBanco=new JRBeanArrayDataSource(CuentaBancoJInternalFrame.TraerCuentaBancoBeans(cuentabancosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceCuentaBanco);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+CuentaBancoConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+CuentaBancoConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(CuentaBancoBean.TraerCuentaBancoBeans(cuentabancosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteCuentaBancos(sAccionBusqueda,sTipoArchivoReporte,cuentabancosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalCuentaBancos(sAccionBusqueda,sTipoArchivoReporte,cuentabancosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoCuentaBancoActionPerformed(null);
					//this.generarExcelReporteCuentaBancos(sAccionBusqueda,sTipoArchivoReporte,cuentabancosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalCuentaBancos(sAccionBusqueda,sTipoArchivoReporte,cuentabancosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesCuentaBancos(sAccionBusqueda,sTipoArchivoReporte,cuentabancosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesCuentaBancos(sAccionBusqueda,sTipoArchivoReporte,cuentabancosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteCuentaBancos(String sAccionBusqueda,String sTipoArchivoReporte,List<CuentaBanco> cuentabancosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentabanco";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("CuentaBancos");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderCuentaBanco("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(CuentaBanco cuentabanco : cuentabancosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			CuentaBancoConstantesFunciones.generarExcelReporteDataCuentaBanco("NORMAL",row,workbook,cuentabanco,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentabancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Banco",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderCuentaBanco(String sTipo,Row row,Workbook workbook) {
		
		CuentaBancoConstantesFunciones.generarExcelReporteHeaderCuentaBanco(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalCuentaBancos(String sAccionBusqueda,String sTipoArchivoReporte,List<CuentaBanco> cuentabancosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentabanco_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("CuentaBancos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(CuentaBanco cuentabanco : cuentabancosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(CuentaBancoConstantesFunciones.getCuentaBancoDescripcion(cuentabanco));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_IDBANCO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDBANCO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getbanco_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.gettipocuentabancoglobal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_CODIGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_CODIGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getcodigo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getnumero_cuenta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getnumero_cheque());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getnumero_cheque_auxiliar());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_SALDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_SALDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getsaldo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getprocedencia());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_DESTINO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_DESTINO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getdestino());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getcuentacontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_ESBANCO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_ESBANCO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(cuentabanco.getes_banco()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getestadocuentabanco_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getformatoingreso_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getformatoegreso_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getformatodiario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getformatocheque_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getformatoretencion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(cuentabanco.getformatoretencioniva_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentabancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Banco",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesCuentaBancos(String sAccionBusqueda,String sTipoArchivoReporte,List<CuentaBanco> cuentabancosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<CuentaBanco> cuentabancosRespaldo=null;
		
		classes=CuentaBancoConstantesFunciones.getClassesRelationshipsOfCuentaBanco(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.cuentabancoLogic.setDatosCliente(this.datosCliente);
		this.cuentabancoLogic.setDatosDeep(this.datosDeep);
		this.cuentabancoLogic.setIsConDeep(true);
		
		cuentabancosRespaldo=this.cuentabancoLogic.getCuentaBancos();
		
		this.cuentabancoLogic.setCuentaBancos(cuentabancosParaReportes);	
		this.cuentabancoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		cuentabancosParaReportes=this.cuentabancoLogic.getCuentaBancos();
		this.cuentabancoLogic.setCuentaBancos(cuentabancosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentabanco_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("CuentaBancos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderCuentaBanco("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(CuentaBanco cuentabanco : cuentabancosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderCuentaBanco("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			CuentaBancoConstantesFunciones.generarExcelReporteDataCuentaBanco("NORMAL",row,workbook,cuentabanco,cellStyleDataAux);
		
			
			


				//PagoAuto
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(PagoAutoConstantesFunciones.SCLASSWEBTITULO))) {

				if(cuentabanco.getPagoAutos()!=null && cuentabanco.getPagoAutos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(PagoAutoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					PagoAutoConstantesFunciones.generarExcelReporteHeaderPagoAuto("RELACIONADO",row,workbook);
				}

				if(cuentabanco.getPagoAutos()!=null) {
					i2=0;
					for(PagoAuto pagoauto : cuentabanco.getPagoAutos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						PagoAutoConstantesFunciones.generarExcelReporteDataPagoAuto("RELACIONADO",row,workbook,pagoauto,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//AutoriPagoOrdenCompra
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(AutoriPagoOrdenCompraConstantesFunciones.SCLASSWEBTITULO))) {

				if(cuentabanco.getAutoriPagoOrdenCompras()!=null && cuentabanco.getAutoriPagoOrdenCompras().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(AutoriPagoOrdenCompraConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					AutoriPagoOrdenCompraConstantesFunciones.generarExcelReporteHeaderAutoriPagoOrdenCompra("RELACIONADO",row,workbook);
				}

				if(cuentabanco.getAutoriPagoOrdenCompras()!=null) {
					i2=0;
					for(AutoriPagoOrdenCompra autoripagoordencompra : cuentabanco.getAutoriPagoOrdenCompras()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						AutoriPagoOrdenCompraConstantesFunciones.generarExcelReporteDataAutoriPagoOrdenCompra("RELACIONADO",row,workbook,autoripagoordencompra,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//DetalleChequeGirado
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetalleChequeGiradoConstantesFunciones.SCLASSWEBTITULO))) {

				if(cuentabanco.getDetalleChequeGirados()!=null && cuentabanco.getDetalleChequeGirados().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetalleChequeGiradoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetalleChequeGiradoConstantesFunciones.generarExcelReporteHeaderDetalleChequeGirado("RELACIONADO",row,workbook);
				}

				if(cuentabanco.getDetalleChequeGirados()!=null) {
					i2=0;
					for(DetalleChequeGirado detallechequegirado : cuentabanco.getDetalleChequeGirados()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetalleChequeGiradoConstantesFunciones.generarExcelReporteDataDetalleChequeGirado("RELACIONADO",row,workbook,detallechequegirado,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//AutoriPago
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(AutoriPagoConstantesFunciones.SCLASSWEBTITULO))) {

				if(cuentabanco.getAutoriPagos()!=null && cuentabanco.getAutoriPagos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(AutoriPagoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					AutoriPagoConstantesFunciones.generarExcelReporteHeaderAutoriPago("RELACIONADO",row,workbook);
				}

				if(cuentabanco.getAutoriPagos()!=null) {
					i2=0;
					for(AutoriPago autoripago : cuentabanco.getAutoriPagos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						AutoriPagoConstantesFunciones.generarExcelReporteDataAutoriPago("RELACIONADO",row,workbook,autoripago,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(CuentaBancoConstantesFunciones.getCuentaBancoDescripcion(cuentabanco));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentabancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Banco",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoCuentaBanco.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentaBanco.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessCuentaBanco() throws Exception {		
		this.startProcessCuentaBanco(true);
	}
	
	public void startProcessCuentaBanco(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasCuentaBanco ,this.jPanelParametrosReportesCuentaBanco, this.jScrollPanelDatosCuentaBanco,this.jPanelPaginacionCuentaBanco, this.jScrollPanelDatosEdicionCuentaBanco, this.jPanelAccionesCuentaBanco,this.jPanelAccionesFormularioCuentaBanco,this.jmenuBarCuentaBanco,this.jmenuBarDetalleCuentaBanco,this.jTtoolBarCuentaBanco,this.jTtoolBarDetalleCuentaBanco);		
		
		final JTabbedPane jTabbedPaneBusquedasCuentaBanco=this.jTabbedPaneBusquedasCuentaBanco; 
		
		final JPanel jPanelParametrosReportesCuentaBanco=this.jPanelParametrosReportesCuentaBanco;
		//final JScrollPane jScrollPanelDatosCuentaBanco=this.jScrollPanelDatosCuentaBanco;
		final JTable jTableDatosCuentaBanco=this.jTableDatosCuentaBanco;		
		final JPanel jPanelPaginacionCuentaBanco=this.jPanelPaginacionCuentaBanco;
		//final JScrollPane jScrollPanelDatosEdicionCuentaBanco=this.jScrollPanelDatosEdicionCuentaBanco;
		final JPanel jPanelAccionesCuentaBanco=this.jPanelAccionesCuentaBanco;
		
		JPanel jPanelCamposAuxiliarCuentaBanco=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarCuentaBanco=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
			jPanelCamposAuxiliarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jPanelCamposCuentaBanco;
			jPanelAccionesFormularioAuxiliarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jPanelAccionesFormularioCuentaBanco;
		}
		
		final JPanel jPanelCamposCuentaBanco=jPanelCamposAuxiliarCuentaBanco;
		final JPanel jPanelAccionesFormularioCuentaBanco=jPanelAccionesFormularioAuxiliarCuentaBanco;
		
		
		final JMenuBar jmenuBarCuentaBanco=this.jmenuBarCuentaBanco;
		final JToolBar jTtoolBarCuentaBanco=this.jTtoolBarCuentaBanco;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarCuentaBanco=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarCuentaBanco=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
			jmenuBarDetalleAuxiliarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jmenuBarDetalleCuentaBanco;
			jTtoolBarDetalleAuxiliarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jTtoolBarDetalleCuentaBanco;
		}
		
		final JMenuBar jmenuBarDetalleCuentaBanco=jmenuBarDetalleAuxiliarCuentaBanco;
		final JToolBar jTtoolBarDetalleCuentaBanco=jTtoolBarDetalleAuxiliarCuentaBanco;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasCuentaBanco;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesCuentaBanco;
			processRunnable.jTableDatos=jTableDatosCuentaBanco;
			processRunnable.jPanelCampos=jPanelCamposCuentaBanco;
			processRunnable.jPanelPaginacion=jPanelPaginacionCuentaBanco;
			processRunnable.jPanelAcciones=jPanelAccionesCuentaBanco;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioCuentaBanco;
			
			
			processRunnable.jmenuBar=jmenuBarCuentaBanco;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleCuentaBanco;
			processRunnable.jTtoolBar=jTtoolBarCuentaBanco;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleCuentaBanco;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasCuentaBanco ,jPanelParametrosReportesCuentaBanco,jTableDatosCuentaBanco, /*jScrollPanelDatosCuentaBanco,*/jPanelCamposCuentaBanco,jPanelPaginacionCuentaBanco, /*jScrollPanelDatosEdicionCuentaBanco,*/ jPanelAccionesCuentaBanco,jPanelAccionesFormularioCuentaBanco,jmenuBarCuentaBanco,jmenuBarDetalleCuentaBanco,jTtoolBarCuentaBanco,jTtoolBarDetalleCuentaBanco);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasCuentaBanco ,jPanelParametrosReportesCuentaBanco, jScrollPanelDatosCuentaBanco,jPanelPaginacionCuentaBanco, jScrollPanelDatosEdicionCuentaBanco, jPanelAccionesCuentaBanco,jPanelAccionesFormularioCuentaBanco,jmenuBarCuentaBanco,jmenuBarDetalleCuentaBanco,jTtoolBarCuentaBanco,jTtoolBarDetalleCuentaBanco);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessCuentaBanco() {// throws Exception 
		this.finishProcessCuentaBanco(true);
	}
	
	public void finishProcessCuentaBanco(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasCuentaBanco ,this.jPanelParametrosReportesCuentaBanco, this.jScrollPanelDatosCuentaBanco,this.jPanelPaginacionCuentaBanco, this.jScrollPanelDatosEdicionCuentaBanco, this.jPanelAccionesCuentaBanco,this.jPanelAccionesFormularioCuentaBanco,this.jmenuBarCuentaBanco,this.jmenuBarDetalleCuentaBanco,this.jTtoolBarCuentaBanco,this.jTtoolBarDetalleCuentaBanco);		
		
		final JTabbedPane jTabbedPaneBusquedasCuentaBanco=this.jTabbedPaneBusquedasCuentaBanco; 
		
		final JPanel jPanelParametrosReportesCuentaBanco=this.jPanelParametrosReportesCuentaBanco;
		//final JScrollPane jScrollPanelDatosCuentaBanco=this.jScrollPanelDatosCuentaBanco;
		final JTable jTableDatosCuentaBanco=this.jTableDatosCuentaBanco;		
		final JPanel jPanelPaginacionCuentaBanco=this.jPanelPaginacionCuentaBanco;
		//final JScrollPane jScrollPanelDatosEdicionCuentaBanco=this.jScrollPanelDatosEdicionCuentaBanco;
		final JPanel jPanelAccionesCuentaBanco=this.jPanelAccionesCuentaBanco;
		
		JPanel jPanelCamposAuxiliarCuentaBanco=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarCuentaBanco=new JPanel();
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
			jPanelCamposAuxiliarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jPanelCamposCuentaBanco;
			jPanelAccionesFormularioAuxiliarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jPanelAccionesFormularioCuentaBanco;
		}
		
		final JPanel jPanelCamposCuentaBanco=jPanelCamposAuxiliarCuentaBanco;
		final JPanel jPanelAccionesFormularioCuentaBanco=jPanelAccionesFormularioAuxiliarCuentaBanco;
		
		
		final JMenuBar jmenuBarCuentaBanco=this.jmenuBarCuentaBanco;		
		final JToolBar jTtoolBarCuentaBanco=this.jTtoolBarCuentaBanco;
				
		JMenuBar jmenuBarDetalleAuxiliarCuentaBanco=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarCuentaBanco=new JToolBar();
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
			jmenuBarDetalleAuxiliarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jmenuBarDetalleCuentaBanco;
			jTtoolBarDetalleAuxiliarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jTtoolBarDetalleCuentaBanco;		
		}
		
		final JMenuBar jmenuBarDetalleCuentaBanco=jmenuBarDetalleAuxiliarCuentaBanco;
		final JToolBar jTtoolBarDetalleCuentaBanco=jTtoolBarDetalleAuxiliarCuentaBanco;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasCuentaBanco;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesCuentaBanco;
			processRunnable.jTableDatos=jTableDatosCuentaBanco;
			processRunnable.jPanelCampos=jPanelCamposCuentaBanco;
			processRunnable.jPanelPaginacion=jPanelPaginacionCuentaBanco;
			processRunnable.jPanelAcciones=jPanelAccionesCuentaBanco;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioCuentaBanco;
			
			
			processRunnable.jmenuBar=jmenuBarCuentaBanco;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleCuentaBanco;
			processRunnable.jTtoolBar=jTtoolBarCuentaBanco;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleCuentaBanco;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasCuentaBanco ,jPanelParametrosReportesCuentaBanco, jTableDatosCuentaBanco,/*jScrollPanelDatosCuentaBanco,*/jPanelCamposCuentaBanco,jPanelPaginacionCuentaBanco, /*jScrollPanelDatosEdicionCuentaBanco,*/ jPanelAccionesCuentaBanco,jPanelAccionesFormularioCuentaBanco,jmenuBarCuentaBanco,jmenuBarDetalleCuentaBanco,jTtoolBarCuentaBanco,jTtoolBarDetalleCuentaBanco));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesCuentaBanco(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarCuentaBanco(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuCuentaBanco(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarCuentaBanco(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarCuentaBanco,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleCuentaBanco,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuCuentaBanco(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarCuentaBanco,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleCuentaBanco,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.cuentabancoConstantesFunciones.getsFinalQueryCuentaBanco();
		String  finalQueryPaginacionTodos=this.cuentabancoConstantesFunciones.getsFinalQueryCuentaBanco();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=CuentaBancoConstantesFunciones.getArrayColumnasGlobalesNoCuentaBanco(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=CuentaBancoConstantesFunciones.getArrayColumnasGlobalesCuentaBanco(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,CuentaBancoConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.cuentabancosEliminados= new ArrayList<CuentaBanco>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessCuentaBanco();
		
				///*CuentaBancoSessionBean*/this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			
			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=CuentaBancoConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=CuentaBancoConstantesFunciones.getClassesForeignKeysOfCuentaBanco(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/cuentabanco."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			cuentabancosAux= new ArrayList<CuentaBanco>();
			
				
			cuentabancoLogic.setDatosCliente(this.datosCliente);
			cuentabancoLogic.setDatosDeep(this.datosDeep);
			cuentabancoLogic.setIsConDeep(true);
			
			
			cuentabancoLogic.getCuentaBancoDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					cuentabancoLogic.getTodosCuentaBancos(finalQueryGlobal,pagination);
					
					//cuentabancoLogic.getTodosCuentaBancosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(cuentabancoLogic.getCuentaBancos()==null|| cuentabancoLogic.getCuentaBancos().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							cuentabancosAux= new ArrayList<CuentaBanco>();
							cuentabancosAux.addAll(cuentabancoLogic.getCuentaBancos());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancosAux= new ArrayList<CuentaBanco>();
							cuentabancosAux.addAll(cuentabancos);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							cuentabancoLogic.getTodosCuentaBancos(finalQueryGlobal+"",this.pagination);												
							
							//cuentabancoLogic.getTodosCuentaBancosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteCuentaBancos("Todos",cuentabancoLogic.getCuentaBancos() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							cuentabancoLogic.setCuentaBancos(new ArrayList<CuentaBanco>());					
							cuentabancoLogic.getCuentaBancos().addAll(cuentabancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancos=new ArrayList<CuentaBanco>();
							cuentabancos.addAll(cuentabancosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idCuentaBanco=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idCuentaBanco=this.idActual;
				
				} else if(this.idCuentaBancoActual!=null && this.idCuentaBancoActual!=0L) {
					idCuentaBanco=idCuentaBancoActual;
				}
				
					
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndicePorId(idCuentaBanco);
				
				this.cuentabancos=new ArrayList<CuentaBanco>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					cuentabancoLogic.getEntity(idCuentaBanco);
					
					//cuentabancoLogic.getEntityWithConnection(idCuentaBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.setCuentaBancos(new ArrayList<CuentaBanco>());
					cuentabancoLogic.getCuentaBancos().add(cuentabancoLogic.getCuentaBanco());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabancos=new ArrayList<CuentaBanco>();
					this.cuentabancos.add(cuentabanco);
				}
				
				if(cuentabancoLogic.getCuentaBanco()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("BusquedaPorCodigo")) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentabancoLogic.getCuentaBancosBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentabancoLogic.getCuentaBancos()==null||cuentabancoLogic.getCuentaBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentabancos==null|| cuentabancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancosAux=new ArrayList<CuentaBanco>();
						cuentabancosAux.addAll(cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancosAux=new ArrayList<CuentaBanco>();
							cuentabancosAux.addAll(cuentabancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentabancoLogic.getCuentaBancosBusquedaPorCodigo(finalQueryGlobal,pagination,codigoBusquedaPorCodigo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorCodigo(codigoBusquedaPorCodigo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaBancos("BusquedaPorCodigo",cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaBancos("BusquedaPorCodigo",cuentabancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancoLogic.setCuentaBancos(new ArrayList<CuentaBanco>());
						cuentabancoLogic.getCuentaBancos().addAll(cuentabancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancos=new ArrayList<CuentaBanco>();
							cuentabancos.addAll(cuentabancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorNumeroCheque")) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroCheque(numero_chequeBusquedaPorNumeroCheque);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentabancoLogic.getCuentaBancosBusquedaPorNumeroCheque(finalQueryGlobal,pagination,numero_chequeBusquedaPorNumeroCheque);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroCheque(numero_chequeBusquedaPorNumeroCheque);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroCheque(numero_chequeBusquedaPorNumeroCheque);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentabancoLogic.getCuentaBancos()==null||cuentabancoLogic.getCuentaBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentabancos==null|| cuentabancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancosAux=new ArrayList<CuentaBanco>();
						cuentabancosAux.addAll(cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancosAux=new ArrayList<CuentaBanco>();
							cuentabancosAux.addAll(cuentabancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentabancoLogic.getCuentaBancosBusquedaPorNumeroCheque(finalQueryGlobal,pagination,numero_chequeBusquedaPorNumeroCheque);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroCheque(numero_chequeBusquedaPorNumeroCheque);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroCheque(numero_chequeBusquedaPorNumeroCheque);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaBancos("BusquedaPorNumeroCheque",cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaBancos("BusquedaPorNumeroCheque",cuentabancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancoLogic.setCuentaBancos(new ArrayList<CuentaBanco>());
						cuentabancoLogic.getCuentaBancos().addAll(cuentabancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancos=new ArrayList<CuentaBanco>();
							cuentabancos.addAll(cuentabancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("BusquedaPorNumeroCuenta")) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroCuenta(numero_cuentaBusquedaPorNumeroCuenta);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentabancoLogic.getCuentaBancosBusquedaPorNumeroCuenta(finalQueryGlobal,pagination,numero_cuentaBusquedaPorNumeroCuenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroCuenta(numero_cuentaBusquedaPorNumeroCuenta);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroCuenta(numero_cuentaBusquedaPorNumeroCuenta);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentabancoLogic.getCuentaBancos()==null||cuentabancoLogic.getCuentaBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentabancos==null|| cuentabancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancosAux=new ArrayList<CuentaBanco>();
						cuentabancosAux.addAll(cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancosAux=new ArrayList<CuentaBanco>();
							cuentabancosAux.addAll(cuentabancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentabancoLogic.getCuentaBancosBusquedaPorNumeroCuenta(finalQueryGlobal,pagination,numero_cuentaBusquedaPorNumeroCuenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroCuenta(numero_cuentaBusquedaPorNumeroCuenta);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceBusquedaPorNumeroCuenta(numero_cuentaBusquedaPorNumeroCuenta);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaBancos("BusquedaPorNumeroCuenta",cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaBancos("BusquedaPorNumeroCuenta",cuentabancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancoLogic.setCuentaBancos(new ArrayList<CuentaBanco>());
						cuentabancoLogic.getCuentaBancos().addAll(cuentabancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancos=new ArrayList<CuentaBanco>();
							cuentabancos.addAll(cuentabancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdBanco")) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentabancoLogic.getCuentaBancosFK_IdBanco(finalQueryGlobal,pagination,id_bancoFK_IdBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentabancoLogic.getCuentaBancos()==null||cuentabancoLogic.getCuentaBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentabancos==null|| cuentabancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancosAux=new ArrayList<CuentaBanco>();
						cuentabancosAux.addAll(cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancosAux=new ArrayList<CuentaBanco>();
							cuentabancosAux.addAll(cuentabancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentabancoLogic.getCuentaBancosFK_IdBanco(finalQueryGlobal,pagination,id_bancoFK_IdBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaBancos("FK_IdBanco",cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaBancos("FK_IdBanco",cuentabancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancoLogic.setCuentaBancos(new ArrayList<CuentaBanco>());
						cuentabancoLogic.getCuentaBancos().addAll(cuentabancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancos=new ArrayList<CuentaBanco>();
							cuentabancos.addAll(cuentabancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentabancoLogic.getCuentaBancosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentabancoLogic.getCuentaBancos()==null||cuentabancoLogic.getCuentaBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentabancos==null|| cuentabancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancosAux=new ArrayList<CuentaBanco>();
						cuentabancosAux.addAll(cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancosAux=new ArrayList<CuentaBanco>();
							cuentabancosAux.addAll(cuentabancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentabancoLogic.getCuentaBancosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaBancos("FK_IdEmpresa",cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaBancos("FK_IdEmpresa",cuentabancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancoLogic.setCuentaBancos(new ArrayList<CuentaBanco>());
						cuentabancoLogic.getCuentaBancos().addAll(cuentabancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancos=new ArrayList<CuentaBanco>();
							cuentabancos.addAll(cuentabancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoCuentaBanco")) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdEstadoCuentaBanco(id_estado_cuenta_bancoFK_IdEstadoCuentaBanco);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentabancoLogic.getCuentaBancosFK_IdEstadoCuentaBanco(finalQueryGlobal,pagination,id_estado_cuenta_bancoFK_IdEstadoCuentaBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdEstadoCuentaBanco(id_estado_cuenta_bancoFK_IdEstadoCuentaBanco);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdEstadoCuentaBanco(id_estado_cuenta_bancoFK_IdEstadoCuentaBanco);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentabancoLogic.getCuentaBancos()==null||cuentabancoLogic.getCuentaBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentabancos==null|| cuentabancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancosAux=new ArrayList<CuentaBanco>();
						cuentabancosAux.addAll(cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancosAux=new ArrayList<CuentaBanco>();
							cuentabancosAux.addAll(cuentabancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentabancoLogic.getCuentaBancosFK_IdEstadoCuentaBanco(finalQueryGlobal,pagination,id_estado_cuenta_bancoFK_IdEstadoCuentaBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdEstadoCuentaBanco(id_estado_cuenta_bancoFK_IdEstadoCuentaBanco);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdEstadoCuentaBanco(id_estado_cuenta_bancoFK_IdEstadoCuentaBanco);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaBancos("FK_IdEstadoCuentaBanco",cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaBancos("FK_IdEstadoCuentaBanco",cuentabancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancoLogic.setCuentaBancos(new ArrayList<CuentaBanco>());
						cuentabancoLogic.getCuentaBancos().addAll(cuentabancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancos=new ArrayList<CuentaBanco>();
							cuentabancos.addAll(cuentabancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentabancoLogic.getCuentaBancosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentabancoLogic.getCuentaBancos()==null||cuentabancoLogic.getCuentaBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentabancos==null|| cuentabancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancosAux=new ArrayList<CuentaBanco>();
						cuentabancosAux.addAll(cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancosAux=new ArrayList<CuentaBanco>();
							cuentabancosAux.addAll(cuentabancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentabancoLogic.getCuentaBancosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaBancos("FK_IdSucursal",cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaBancos("FK_IdSucursal",cuentabancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancoLogic.setCuentaBancos(new ArrayList<CuentaBanco>());
						cuentabancoLogic.getCuentaBancos().addAll(cuentabancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancos=new ArrayList<CuentaBanco>();
							cuentabancos.addAll(cuentabancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoCuentaBancoGlobal")) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cuentabancoLogic.getCuentaBancosFK_IdTipoCuentaBancoGlobal(finalQueryGlobal,pagination,id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cuentabancoLogic.getCuentaBancos()==null||cuentabancoLogic.getCuentaBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cuentabancos==null|| cuentabancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancosAux=new ArrayList<CuentaBanco>();
						cuentabancosAux.addAll(cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancosAux=new ArrayList<CuentaBanco>();
							cuentabancosAux.addAll(cuentabancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cuentabancoLogic.getCuentaBancosFK_IdTipoCuentaBancoGlobal(finalQueryGlobal,pagination,id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CuentaBancoConstantesFunciones.getDetalleIndiceFK_IdTipoCuentaBancoGlobal(id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCuentaBancos("FK_IdTipoCuentaBancoGlobal",cuentabancoLogic.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCuentaBancos("FK_IdTipoCuentaBancoGlobal",cuentabancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancoLogic.setCuentaBancos(new ArrayList<CuentaBanco>());
						cuentabancoLogic.getCuentaBancos().addAll(cuentabancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancos=new ArrayList<CuentaBanco>();
							cuentabancos.addAll(cuentabancosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesCuentaBanco();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessCuentaBanco();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=cuentabancoLogic.getCuentaBancos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=cuentabancos.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=cuentabancoLogic.getCuentaBancos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=cuentabancos.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(CuentaBanco cuentabanco) {
		Boolean permite=true;
		
		if(this.cuentabanco.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=CuentaBancoConstantesFunciones.getOrderByListaCuentaBanco();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=CuentaBancoConstantesFunciones.getOrderByListaCuentaBanco();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentaBanco cuentabanco:cuentabancoLogic.getCuentaBancos()) {
				if(cuentabanco.getsType().equals(Constantes2.S_TOTALES)) {
					cuentabancoTotales=cuentabanco;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentaBanco cuentabanco:this.cuentabancos) {
				if(cuentabanco.getsType().equals(Constantes2.S_TOTALES)) {
					cuentabancoTotales=cuentabanco;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.cuentabancoAux=new CuentaBanco();
			this.cuentabancoAux.setsType(Constantes2.S_TOTALES);
			this.cuentabancoAux.setIsNew(false);
			this.cuentabancoAux.setIsChanged(false);
			this.cuentabancoAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				CuentaBancoConstantesFunciones.TotalizarValoresFilaCuentaBanco(this.cuentabancoLogic.getCuentaBancos(),this.cuentabancoAux);
				
				this.cuentabancoLogic.getCuentaBancos().add(this.cuentabancoAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				CuentaBancoConstantesFunciones.TotalizarValoresFilaCuentaBanco(this.cuentabancos,this.cuentabancoAux);
				
				this.cuentabancos.add(this.cuentabancoAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		cuentabancoTotales=new CuentaBanco();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.cuentabancoLogic.getCuentaBancos().remove(cuentabancoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.cuentabancos.remove(cuentabancoTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		cuentabancoTotales=new CuentaBanco();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(CuentaBanco cuentabanco:cuentabancoLogic.getCuentaBancos()) {
				if(cuentabanco.getsType().equals(Constantes2.S_TOTALES)) {
					cuentabancoTotales=cuentabanco;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				CuentaBancoConstantesFunciones.TotalizarValoresFilaCuentaBanco(this.cuentabancoLogic.getCuentaBancos(),cuentabancoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(CuentaBanco cuentabanco:this.cuentabancos) {
				if(cuentabanco.getsType().equals(Constantes2.S_TOTALES)) {
					cuentabancoTotales=cuentabanco;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				CuentaBancoConstantesFunciones.TotalizarValoresFilaCuentaBanco(this.cuentabancos,cuentabancoTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getCuentaBancosBusquedaPorCodigo()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorCodigo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosBusquedaPorNumeroCheque()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorNumeroCheque";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosBusquedaPorNumeroCuenta()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorNumeroCuenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosBusquedaPorProcedencia()throws Exception {
		try {
			sAccionBusqueda="BusquedaPorProcedencia";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosFK_IdBanco()throws Exception {
		try {
			sAccionBusqueda="FK_IdBanco";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosFK_IdCuentaContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosFK_IdEstadoCuentaBanco()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoCuentaBanco";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosFK_IdFormatoCheque()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoCheque";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosFK_IdFormatoDiario()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoDiario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosFK_IdFormatoEgreso()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoEgreso";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosFK_IdFormatoIngreso()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoIngreso";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosFK_IdFormatoRetencion()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoRetencion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosFK_IdFormatoRetencionIva()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormatoRetencionIva";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCuentaBancosFK_IdTipoCuentaBancoGlobal()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoCuentaBancoGlobal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getCuentaBancosBusquedaPorCodigo(String sFinalQuery,String codigo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosBusquedaPorCodigo(sFinalQuery,this.pagination,codigo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosBusquedaPorNumeroCheque(String sFinalQuery,String numero_cheque)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosBusquedaPorNumeroCheque(sFinalQuery,this.pagination,numero_cheque);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosBusquedaPorNumeroCuenta(String sFinalQuery,String numero_cuenta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosBusquedaPorNumeroCuenta(sFinalQuery,this.pagination,numero_cuenta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosBusquedaPorProcedencia(String sFinalQuery,String procedencia)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosBusquedaPorProcedencia(sFinalQuery,this.pagination,procedencia);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosFK_IdBanco(String sFinalQuery,Long id_banco)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosFK_IdBanco(sFinalQuery,this.pagination,id_banco);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosFK_IdCuentaContable(String sFinalQuery,Long id_cuenta_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosFK_IdCuentaContable(sFinalQuery,this.pagination,id_cuenta_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosFK_IdEstadoCuentaBanco(String sFinalQuery,Long id_estado_cuenta_banco)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosFK_IdEstadoCuentaBanco(sFinalQuery,this.pagination,id_estado_cuenta_banco);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosFK_IdFormatoCheque(String sFinalQuery,Long id_formato_cheque)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosFK_IdFormatoCheque(sFinalQuery,this.pagination,id_formato_cheque);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosFK_IdFormatoDiario(String sFinalQuery,Long id_formato_diario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosFK_IdFormatoDiario(sFinalQuery,this.pagination,id_formato_diario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosFK_IdFormatoEgreso(String sFinalQuery,Long id_formato_egreso)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosFK_IdFormatoEgreso(sFinalQuery,this.pagination,id_formato_egreso);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosFK_IdFormatoIngreso(String sFinalQuery,Long id_formato_ingreso)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosFK_IdFormatoIngreso(sFinalQuery,this.pagination,id_formato_ingreso);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosFK_IdFormatoRetencion(String sFinalQuery,Long id_formato_retencion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosFK_IdFormatoRetencion(sFinalQuery,this.pagination,id_formato_retencion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosFK_IdFormatoRetencionIva(String sFinalQuery,Long id_formato_retencion_iva)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosFK_IdFormatoRetencionIva(sFinalQuery,this.pagination,id_formato_retencion_iva);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCuentaBancosFK_IdTipoCuentaBancoGlobal(String sFinalQuery,Long id_tipo_cuenta_banco_global)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getCuentaBancosFK_IdTipoCuentaBancoGlobal(sFinalQuery,this.pagination,id_tipo_cuenta_banco_global);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosCuentaBanco() {
		this.isPermisoTodoCuentaBanco=false;
		this.isPermisoNuevoCuentaBanco=false;
		this.isPermisoActualizarCuentaBanco=false;
		this.isPermisoActualizarOriginalCuentaBanco=false;
		this.isPermisoEliminarCuentaBanco=false;
		this.isPermisoGuardarCambiosCuentaBanco=false;
		this.isPermisoConsultaCuentaBanco=false;
		this.isPermisoBusquedaCuentaBanco=false;
		this.isPermisoReporteCuentaBanco=false;		
		this.isPermisoOrdenCuentaBanco=false;		
		this.isPermisoPaginacionMedioCuentaBanco=false;		
		this.isPermisoPaginacionAltoCuentaBanco=false;
		this.isPermisoPaginacionTodoCuentaBanco=false;
		this.isPermisoCopiarCuentaBanco=false;		
		this.isPermisoVerFormCuentaBanco=false;		
		this.isPermisoDuplicarCuentaBanco=false;		
		this.isPermisoOrdenCuentaBanco=false;		
	}
	
	public void setPermisosUsuarioCuentaBanco(Boolean isPermiso) {
		this.isPermisoTodoCuentaBanco=isPermiso;
		this.isPermisoNuevoCuentaBanco=isPermiso;
		this.isPermisoActualizarCuentaBanco=isPermiso;
		this.isPermisoActualizarOriginalCuentaBanco=isPermiso;
		this.isPermisoEliminarCuentaBanco=isPermiso;
		this.isPermisoGuardarCambiosCuentaBanco=isPermiso;
		this.isPermisoConsultaCuentaBanco=isPermiso;
		this.isPermisoBusquedaCuentaBanco=isPermiso;
		this.isPermisoReporteCuentaBanco=isPermiso;
		this.isPermisoOrdenCuentaBanco=isPermiso;		
		this.isPermisoPaginacionMedioCuentaBanco=isPermiso;		
		this.isPermisoPaginacionAltoCuentaBanco=isPermiso;		
		this.isPermisoPaginacionTodoCuentaBanco=isPermiso;		
		this.isPermisoCopiarCuentaBanco=isPermiso;		
		this.isPermisoVerFormCuentaBanco=isPermiso;		
		this.isPermisoDuplicarCuentaBanco=isPermiso;
		this.isPermisoOrdenCuentaBanco=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioCuentaBanco(Boolean isPermiso) {
		//this.isPermisoTodoCuentaBanco=isPermiso;
		this.isPermisoNuevoCuentaBanco=isPermiso;
		this.isPermisoActualizarCuentaBanco=isPermiso;
		this.isPermisoActualizarOriginalCuentaBanco=isPermiso;
		this.isPermisoEliminarCuentaBanco=isPermiso;
		this.isPermisoGuardarCambiosCuentaBanco=isPermiso;
		//this.isPermisoConsultaCuentaBanco=isPermiso;
		//this.isPermisoBusquedaCuentaBanco=isPermiso;
		//this.isPermisoReporteCuentaBanco=isPermiso;
		//this.isPermisoOrdenCuentaBanco=isPermiso;		
		//this.isPermisoPaginacionMedioCuentaBanco=isPermiso;		
		//this.isPermisoPaginacionAltoCuentaBanco=isPermiso;		
		//this.isPermisoPaginacionTodoCuentaBanco=isPermiso;		
		//this.isPermisoCopiarCuentaBanco=isPermiso;		
		//this.isPermisoDuplicarCuentaBanco=isPermiso;
		//this.isPermisoOrdenCuentaBanco=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioCuentaBancoClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(PagoAutoConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(AutoriPagoOrdenCompraConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(DetalleChequeGiradoConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(AutoriPagoConstantesFunciones.SNOMBREOPCION);
		
		if(CuentaBancoJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosPagoAuto=false;
		this.isTienePermisosPagoAuto=this.verificarGetPermisosUsuarioOpcionCuentaBancoClaseRelacionada(this.opcionsRelacionadas,PagoAutoConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosAutoriPagoOrdenCompra=false;
		this.isTienePermisosAutoriPagoOrdenCompra=this.verificarGetPermisosUsuarioOpcionCuentaBancoClaseRelacionada(this.opcionsRelacionadas,AutoriPagoOrdenCompraConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosDetalleChequeGirado=false;
		this.isTienePermisosDetalleChequeGirado=this.verificarGetPermisosUsuarioOpcionCuentaBancoClaseRelacionada(this.opcionsRelacionadas,DetalleChequeGiradoConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosAutoriPago=false;
		this.isTienePermisosAutoriPago=this.verificarGetPermisosUsuarioOpcionCuentaBancoClaseRelacionada(this.opcionsRelacionadas,AutoriPagoConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebCuentaBanco(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioCuentaBancoClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosPagoAuto=conPermiso;
		this.isTienePermisosAutoriPagoOrdenCompra=conPermiso;
		this.isTienePermisosDetalleChequeGirado=conPermiso;
		this.isTienePermisosAutoriPago=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioCuentaBancoClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionCuentaBancoClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioCuentaBancoClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosPagoAuto && this.jInternalFrameDetalleFormCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.jTabbedPaneRelacionesCuentaBanco.remove(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosAutoriPagoOrdenCompra && this.jInternalFrameDetalleFormCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.jTabbedPaneRelacionesCuentaBanco.remove(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosDetalleChequeGirado && this.jInternalFrameDetalleFormCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.jTabbedPaneRelacionesCuentaBanco.remove(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosAutoriPago && this.jInternalFrameDetalleFormCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.jTabbedPaneRelacionesCuentaBanco.remove(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioCuentaBanco() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(CuentaBancoJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, CuentaBancoConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoCuentaBanco=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarCuentaBanco=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalCuentaBanco=this.isPermisoActualizarCuentaBanco;
			this.isPermisoEliminarCuentaBanco=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosCuentaBanco=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaCuentaBanco=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaCuentaBanco=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoCuentaBanco=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteCuentaBanco=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenCuentaBanco=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioCuentaBanco=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoCuentaBanco=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoCuentaBanco=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarCuentaBanco=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormCuentaBanco=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarCuentaBanco=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenCuentaBanco=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosCuentaBanco.setToolTipText(this.jTableDatosCuentaBanco.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioCuentaBanco(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioCuentaBanco(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(CuentaBancoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(CuentaBancoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioCuentaBanco() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosPagoAuto && this.cuentabancoConstantesFunciones.mostrarPagoAutoCuentaBanco && !CuentaBancoConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Pago Auto");
			reporte.setsDescripcion("Pago Auto");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosAutoriPagoOrdenCompra && this.cuentabancoConstantesFunciones.mostrarAutoriPagoOrdenCompraCuentaBanco && !CuentaBancoConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Autori Pago Orden Compra");
			reporte.setsDescripcion("Autori Pago Orden Compra");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosDetalleChequeGirado && this.cuentabancoConstantesFunciones.mostrarDetalleChequeGiradoCuentaBanco && !CuentaBancoConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Detalle Cheque Girado");
			reporte.setsDescripcion("Detalle Cheque Girado");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosAutoriPago && this.cuentabancoConstantesFunciones.mostrarAutoriPagoCuentaBanco && !CuentaBancoConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Autori Pago");
			reporte.setsDescripcion("Autori Pago");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyCuentaBancoListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.bancosForeignKey=new ArrayList();
				this.tipocuentabancoglobalsForeignKey=new ArrayList();
				this.cuentacontablesForeignKey=new ArrayList();
				this.estadocuentabancosForeignKey=new ArrayList();
				this.formatoingresosForeignKey=new ArrayList();
				this.formatoegresosForeignKey=new ArrayList();
				this.formatodiariosForeignKey=new ArrayList();
				this.formatochequesForeignKey=new ArrayList();
				this.formatoretencionsForeignKey=new ArrayList();
				this.formatoretencionivasForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyCuentaBancoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(CuentaBancoJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyCuentaBancoListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoCuentaBancoGlobalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoCuentaBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoIngresoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoEgresoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoDiarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoChequeListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoRetencionIvaListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBancoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bancosForeignKey==null||this.bancosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BancoConstantesFunciones.getArrayColumnasGlobalesBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BancoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BancoConstantesFunciones.SFINALQUERY;

				this.cargarCombosBancosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCuentaBancoGlobalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipocuentabancoglobalsForeignKey==null||this.tipocuentabancoglobalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoCuentaBancoGlobalConstantesFunciones.getArrayColumnasGlobalesTipoCuentaBancoGlobal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCuentaBancoGlobalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoCuentaBancoGlobalConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoCuentaBancoGlobalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablesForeignKey==null||this.cuentacontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoCuentaBancoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadocuentabancosForeignKey==null||this.estadocuentabancosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoCuentaBancoConstantesFunciones.getArrayColumnasGlobalesEstadoCuentaBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoCuentaBancoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoCuentaBancoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoCuentaBancosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoIngresoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatoingresosForeignKey==null||this.formatoingresosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoIngresosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoEgresoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatoegresosForeignKey==null||this.formatoegresosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoEgresosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoDiarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatodiariosForeignKey==null||this.formatodiariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoDiariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoChequeListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatochequesForeignKey==null||this.formatochequesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoChequesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoRetencionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatoretencionsForeignKey==null||this.formatoretencionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoRetencionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoRetencionIvaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatoretencionivasForeignKey==null||this.formatoretencionivasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatoRetencionIvasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyCuentaBancoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			CuentaBancoParameterReturnGeneral cuentabancoReturnGeneral=new CuentaBancoParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.cuentabancoConstantesFunciones.cargarid_empresaCuentaBanco)
					 || (this.esRecargarFks && this.cuentabancoConstantesFunciones.cargarid_empresaCuentaBanco)) {

					if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+cuentabancoSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.cuentabancoConstantesFunciones.cargarid_sucursalCuentaBanco)
					 || (this.esRecargarFks && this.cuentabancoConstantesFunciones.cargarid_sucursalCuentaBanco)) {

					if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+cuentabancoSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalBanco="";

				if(((this.bancosForeignKey==null||this.bancosForeignKey.size()<=0) && this.cuentabancoConstantesFunciones.cargarid_bancoCuentaBanco)
					 || (this.esRecargarFks && this.cuentabancoConstantesFunciones.cargarid_bancoCuentaBanco)) {

					if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BancoConstantesFunciones.getArrayColumnasGlobalesBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBanco=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BancoConstantesFunciones.TABLENAME);

						finalQueryGlobalBanco=Funciones.GetFinalQueryAppend(finalQueryGlobalBanco, "");
						finalQueryGlobalBanco+=BancoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBancosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBanco=" WHERE " + ConstantesSql.ID + "="+cuentabancoSessionBean.getlidBancoActual();
					}
				} else {
					finalQueryGlobalBanco="NONE";
				}


				String finalQueryGlobalTipoCuentaBancoGlobal="";

				if(((this.tipocuentabancoglobalsForeignKey==null||this.tipocuentabancoglobalsForeignKey.size()<=0) && this.cuentabancoConstantesFunciones.cargarid_tipo_cuenta_banco_globalCuentaBanco)
					 || (this.esRecargarFks && this.cuentabancoConstantesFunciones.cargarid_tipo_cuenta_banco_globalCuentaBanco)) {

					if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionTipoCuentaBancoGlobal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoCuentaBancoGlobalConstantesFunciones.getArrayColumnasGlobalesTipoCuentaBancoGlobal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoCuentaBancoGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoCuentaBancoGlobalConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoCuentaBancoGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoCuentaBancoGlobal, "");
						finalQueryGlobalTipoCuentaBancoGlobal+=TipoCuentaBancoGlobalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoCuentaBancoGlobalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoCuentaBancoGlobal=" WHERE " + ConstantesSql.ID + "="+cuentabancoSessionBean.getlidTipoCuentaBancoGlobalActual();
					}
				} else {
					finalQueryGlobalTipoCuentaBancoGlobal="NONE";
				}


				String finalQueryGlobalCuentaContable="";

				if(((this.cuentacontablesForeignKey==null||this.cuentacontablesForeignKey.size()<=0) && this.cuentabancoConstantesFunciones.cargarid_cuenta_contableCuentaBanco)
					 || (this.esRecargarFks && this.cuentabancoConstantesFunciones.cargarid_cuenta_contableCuentaBanco)) {

					if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContable=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContable, "");
						finalQueryGlobalCuentaContable+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContable=" WHERE " + ConstantesSql.ID + "="+cuentabancoSessionBean.getlidCuentaContableActual();
					}
				} else {
					finalQueryGlobalCuentaContable="NONE";
				}


				String finalQueryGlobalEstadoCuentaBanco="";

				if(((this.estadocuentabancosForeignKey==null||this.estadocuentabancosForeignKey.size()<=0) && this.cuentabancoConstantesFunciones.cargarid_estado_cuenta_bancoCuentaBanco)
					 || (this.esRecargarFks && this.cuentabancoConstantesFunciones.cargarid_estado_cuenta_bancoCuentaBanco)) {

					if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionEstadoCuentaBanco()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoCuentaBancoConstantesFunciones.getArrayColumnasGlobalesEstadoCuentaBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoCuentaBanco=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoCuentaBancoConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoCuentaBanco=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoCuentaBanco, "");
						finalQueryGlobalEstadoCuentaBanco+=EstadoCuentaBancoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoCuentaBancosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoCuentaBanco=" WHERE " + ConstantesSql.ID + "="+cuentabancoSessionBean.getlidEstadoCuentaBancoActual();
					}
				} else {
					finalQueryGlobalEstadoCuentaBanco="NONE";
				}


				String finalQueryGlobalFormatoIngreso="";

				if(((this.formatoingresosForeignKey==null||this.formatoingresosForeignKey.size()<=0) && this.cuentabancoConstantesFunciones.cargarid_formato_ingresoCuentaBanco)
					 || (this.esRecargarFks && this.cuentabancoConstantesFunciones.cargarid_formato_ingresoCuentaBanco)) {

					if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoIngreso()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoIngreso=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoIngreso=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoIngreso, "");
						finalQueryGlobalFormatoIngreso+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoIngresosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoIngreso=" WHERE " + ConstantesSql.ID + "="+cuentabancoSessionBean.getlidFormatoIngresoActual();
					}
				} else {
					finalQueryGlobalFormatoIngreso="NONE";
				}


				String finalQueryGlobalFormatoEgreso="";

				if(((this.formatoegresosForeignKey==null||this.formatoegresosForeignKey.size()<=0) && this.cuentabancoConstantesFunciones.cargarid_formato_egresoCuentaBanco)
					 || (this.esRecargarFks && this.cuentabancoConstantesFunciones.cargarid_formato_egresoCuentaBanco)) {

					if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoEgreso()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoEgreso=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoEgreso=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoEgreso, "");
						finalQueryGlobalFormatoEgreso+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoEgresosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoEgreso=" WHERE " + ConstantesSql.ID + "="+cuentabancoSessionBean.getlidFormatoEgresoActual();
					}
				} else {
					finalQueryGlobalFormatoEgreso="NONE";
				}


				String finalQueryGlobalFormatoDiario="";

				if(((this.formatodiariosForeignKey==null||this.formatodiariosForeignKey.size()<=0) && this.cuentabancoConstantesFunciones.cargarid_formato_diarioCuentaBanco)
					 || (this.esRecargarFks && this.cuentabancoConstantesFunciones.cargarid_formato_diarioCuentaBanco)) {

					if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoDiario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoDiario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoDiario=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoDiario, "");
						finalQueryGlobalFormatoDiario+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoDiariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoDiario=" WHERE " + ConstantesSql.ID + "="+cuentabancoSessionBean.getlidFormatoDiarioActual();
					}
				} else {
					finalQueryGlobalFormatoDiario="NONE";
				}


				String finalQueryGlobalFormatoCheque="";

				if(((this.formatochequesForeignKey==null||this.formatochequesForeignKey.size()<=0) && this.cuentabancoConstantesFunciones.cargarid_formato_chequeCuentaBanco)
					 || (this.esRecargarFks && this.cuentabancoConstantesFunciones.cargarid_formato_chequeCuentaBanco)) {

					if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoCheque()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoCheque=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoCheque=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoCheque, "");
						finalQueryGlobalFormatoCheque+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoChequesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoCheque=" WHERE " + ConstantesSql.ID + "="+cuentabancoSessionBean.getlidFormatoChequeActual();
					}
				} else {
					finalQueryGlobalFormatoCheque="NONE";
				}


				String finalQueryGlobalFormatoRetencion="";

				if(((this.formatoretencionsForeignKey==null||this.formatoretencionsForeignKey.size()<=0) && this.cuentabancoConstantesFunciones.cargarid_formato_retencionCuentaBanco)
					 || (this.esRecargarFks && this.cuentabancoConstantesFunciones.cargarid_formato_retencionCuentaBanco)) {

					if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoRetencion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoRetencion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoRetencion=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoRetencion, "");
						finalQueryGlobalFormatoRetencion+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoRetencionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoRetencion=" WHERE " + ConstantesSql.ID + "="+cuentabancoSessionBean.getlidFormatoRetencionActual();
					}
				} else {
					finalQueryGlobalFormatoRetencion="NONE";
				}


				String finalQueryGlobalFormatoRetencionIva="";

				if(((this.formatoretencionivasForeignKey==null||this.formatoretencionivasForeignKey.size()<=0) && this.cuentabancoConstantesFunciones.cargarid_formato_retencion_ivaCuentaBanco)
					 || (this.esRecargarFks && this.cuentabancoConstantesFunciones.cargarid_formato_retencion_ivaCuentaBanco)) {

					if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoRetencionIva()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormatoRetencionIva=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormatoRetencionIva=Funciones.GetFinalQueryAppend(finalQueryGlobalFormatoRetencionIva, "");
						finalQueryGlobalFormatoRetencionIva+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatoRetencionIvasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormatoRetencionIva=" WHERE " + ConstantesSql.ID + "="+cuentabancoSessionBean.getlidFormatoRetencionIvaActual();
					}
				} else {
					finalQueryGlobalFormatoRetencionIva="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				cuentabancoReturnGeneral=cuentabancoLogic.cargarCombosLoteForeignKeyCuentaBanco(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalBanco,finalQueryGlobalTipoCuentaBancoGlobal,finalQueryGlobalCuentaContable,finalQueryGlobalEstadoCuentaBanco,finalQueryGlobalFormatoIngreso,finalQueryGlobalFormatoEgreso,finalQueryGlobalFormatoDiario,finalQueryGlobalFormatoCheque,finalQueryGlobalFormatoRetencion,finalQueryGlobalFormatoRetencionIva);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=cuentabancoReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=cuentabancoReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalBanco.equals("NONE")) {
				this.bancosForeignKey=cuentabancoReturnGeneral.getbancosForeignKey();
			}

			if(!finalQueryGlobalTipoCuentaBancoGlobal.equals("NONE")) {
				this.tipocuentabancoglobalsForeignKey=cuentabancoReturnGeneral.gettipocuentabancoglobalsForeignKey();
			}

			if(!finalQueryGlobalCuentaContable.equals("NONE")) {
				this.cuentacontablesForeignKey=cuentabancoReturnGeneral.getcuentacontablesForeignKey();
			}

			if(!finalQueryGlobalEstadoCuentaBanco.equals("NONE")) {
				this.estadocuentabancosForeignKey=cuentabancoReturnGeneral.getestadocuentabancosForeignKey();
			}

			if(!finalQueryGlobalFormatoIngreso.equals("NONE")) {
				this.formatoingresosForeignKey=cuentabancoReturnGeneral.getformatoingresosForeignKey();
			}

			if(!finalQueryGlobalFormatoEgreso.equals("NONE")) {
				this.formatoegresosForeignKey=cuentabancoReturnGeneral.getformatoegresosForeignKey();
			}

			if(!finalQueryGlobalFormatoDiario.equals("NONE")) {
				this.formatodiariosForeignKey=cuentabancoReturnGeneral.getformatodiariosForeignKey();
			}

			if(!finalQueryGlobalFormatoCheque.equals("NONE")) {
				this.formatochequesForeignKey=cuentabancoReturnGeneral.getformatochequesForeignKey();
			}

			if(!finalQueryGlobalFormatoRetencion.equals("NONE")) {
				this.formatoretencionsForeignKey=cuentabancoReturnGeneral.getformatoretencionsForeignKey();
			}

			if(!finalQueryGlobalFormatoRetencionIva.equals("NONE")) {
				this.formatoretencionivasForeignKey=cuentabancoReturnGeneral.getformatoretencionivasForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyCuentaBanco()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyBanco();
			this.addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal();
			this.addItemDefectoCombosForeignKeyCuentaContable();
			this.addItemDefectoCombosForeignKeyEstadoCuentaBanco();
			this.addItemDefectoCombosForeignKeyFormatoIngreso();
			this.addItemDefectoCombosForeignKeyFormatoEgreso();
			this.addItemDefectoCombosForeignKeyFormatoDiario();
			this.addItemDefectoCombosForeignKeyFormatoCheque();
			this.addItemDefectoCombosForeignKeyFormatoRetencion();
			this.addItemDefectoCombosForeignKeyFormatoRetencionIva();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBanco()throws Exception {
		try {

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {
				Banco banco=new Banco();
				BancoConstantesFunciones.setBancoDescripcion(banco,Constantes.SMENSAJE_ESCOJA_OPCION);
				banco.setId(null);

				if(!BancoConstantesFunciones.ExisteEnLista(this.bancosForeignKey,banco,true)) {

					this.bancosForeignKey.add(0,banco);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal()throws Exception {
		try {

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionTipoCuentaBancoGlobal()) {
				TipoCuentaBancoGlobal tipocuentabancoglobal=new TipoCuentaBancoGlobal();
				TipoCuentaBancoGlobalConstantesFunciones.setTipoCuentaBancoGlobalDescripcion(tipocuentabancoglobal,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipocuentabancoglobal.setId(null);

				if(!TipoCuentaBancoGlobalConstantesFunciones.ExisteEnLista(this.tipocuentabancoglobalsForeignKey,tipocuentabancoglobal,true)) {

					this.tipocuentabancoglobalsForeignKey.add(0,tipocuentabancoglobal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContable()throws Exception {
		try {

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {
				CuentaContable cuentacontable=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontable.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablesForeignKey,cuentacontable,true)) {

					this.cuentacontablesForeignKey.add(0,cuentacontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoCuentaBanco()throws Exception {
		try {

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionEstadoCuentaBanco()) {
				EstadoCuentaBanco estadocuentabanco=new EstadoCuentaBanco();
				EstadoCuentaBancoConstantesFunciones.setEstadoCuentaBancoDescripcion(estadocuentabanco,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadocuentabanco.setId(null);

				if(!EstadoCuentaBancoConstantesFunciones.ExisteEnLista(this.estadocuentabancosForeignKey,estadocuentabanco,true)) {

					this.estadocuentabancosForeignKey.add(0,estadocuentabanco);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoIngreso()throws Exception {
		try {

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoIngreso()) {
				Formato formatoingreso=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatoingreso,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatoingreso.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatoingresosForeignKey,formatoingreso,true)) {

					this.formatoingresosForeignKey.add(0,formatoingreso);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoEgreso()throws Exception {
		try {

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoEgreso()) {
				Formato formatoegreso=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatoegreso,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatoegreso.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatoegresosForeignKey,formatoegreso,true)) {

					this.formatoegresosForeignKey.add(0,formatoegreso);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoDiario()throws Exception {
		try {

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoDiario()) {
				Formato formatodiario=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatodiario,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatodiario.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatodiariosForeignKey,formatodiario,true)) {

					this.formatodiariosForeignKey.add(0,formatodiario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoCheque()throws Exception {
		try {

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoCheque()) {
				Formato formatocheque=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatocheque,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatocheque.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatochequesForeignKey,formatocheque,true)) {

					this.formatochequesForeignKey.add(0,formatocheque);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoRetencion()throws Exception {
		try {

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoRetencion()) {
				Formato formatoretencion=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatoretencion,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatoretencion.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatoretencionsForeignKey,formatoretencion,true)) {

					this.formatoretencionsForeignKey.add(0,formatoretencion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormatoRetencionIva()throws Exception {
		try {

			if(!this.cuentabancoSessionBean.getisBusquedaDesdeForeignKeySesionFormatoRetencionIva()) {
				Formato formatoretencioniva=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formatoretencioniva,Constantes.SMENSAJE_ESCOJA_OPCION);
				formatoretencioniva.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatoretencionivasForeignKey,formatoretencioniva,true)) {

					this.formatoretencionivasForeignKey.add(0,formatoretencioniva);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyCuentaBanco()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyCuentaBanco(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyCuentaBanco()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyCuentaBanco();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyCuentaBanco(CuentaBanco cuentabanco)throws Exception {	
		try {
			
			this.setActualBancoForeignKey(cuentabanco.getid_banco(),false,"Formulario");
			this.setActualTipoCuentaBancoGlobalForeignKey(cuentabanco.getid_tipo_cuenta_banco_global(),false,"Formulario");
			this.setActualCuentaContableForeignKey(cuentabanco.getid_cuenta_contable(),false,"Formulario");
			this.setActualEstadoCuentaBancoForeignKey(cuentabanco.getid_estado_cuenta_banco(),false,"Formulario");
			this.setActualFormatoIngresoForeignKey(cuentabanco.getid_formato_ingreso(),false,"Formulario");
			this.setActualFormatoEgresoForeignKey(cuentabanco.getid_formato_egreso(),false,"Formulario");
			this.setActualFormatoDiarioForeignKey(cuentabanco.getid_formato_diario(),false,"Formulario");
			this.setActualFormatoChequeForeignKey(cuentabanco.getid_formato_cheque(),false,"Formulario");
			this.setActualFormatoRetencionForeignKey(cuentabanco.getid_formato_retencion(),false,"Formulario");
			this.setActualFormatoRetencionIvaForeignKey(cuentabanco.getid_formato_retencion_iva(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyCuentaBanco(CuentaBanco cuentabanco,String sTipoEvento)throws Exception {	
		try {
			
			

				if(cuentabanco.getCuentaContable()!=null && !sTipoEvento.equals("id_cuenta_contableCuentaBanco")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablesForeignKey.add(cuentabanco.getCuentaContable());

					this.addItemDefectoCombosForeignKeyCuentaContable();
					this.cargarCombosFrameCuentaContablesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyCuentaBanco()throws Exception {	
		try {
			
			this.setActualBancoForeignKey(this.cuentabancoConstantesFunciones.getid_banco(),false,"Formulario");
			this.setActualTipoCuentaBancoGlobalForeignKey(this.cuentabancoConstantesFunciones.getid_tipo_cuenta_banco_global(),false,"Formulario");
			this.setActualCuentaContableForeignKey(this.cuentabancoConstantesFunciones.getid_cuenta_contable(),false,"Formulario");
			this.setActualEstadoCuentaBancoForeignKey(this.cuentabancoConstantesFunciones.getid_estado_cuenta_banco(),false,"Formulario");
			this.setActualFormatoIngresoForeignKey(this.cuentabancoConstantesFunciones.getid_formato_ingreso(),false,"Formulario");
			this.setActualFormatoEgresoForeignKey(this.cuentabancoConstantesFunciones.getid_formato_egreso(),false,"Formulario");
			this.setActualFormatoDiarioForeignKey(this.cuentabancoConstantesFunciones.getid_formato_diario(),false,"Formulario");
			this.setActualFormatoChequeForeignKey(this.cuentabancoConstantesFunciones.getid_formato_cheque(),false,"Formulario");
			this.setActualFormatoRetencionForeignKey(this.cuentabancoConstantesFunciones.getid_formato_retencion(),false,"Formulario");
			this.setActualFormatoRetencionIvaForeignKey(this.cuentabancoConstantesFunciones.getid_formato_retencion_iva(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyCuentaBanco()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyCuentaBanco()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyCuentaBanco()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroCuentaBanco()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyCuentaBanco()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameBancosForeignKey("Todos");
			this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey("Todos");
			this.cargarCombosFrameCuentaContablesForeignKey("Todos");
			this.cargarCombosFrameEstadoCuentaBancosForeignKey("Todos");
			this.cargarCombosFrameFormatoIngresosForeignKey("Todos");
			this.cargarCombosFrameFormatoEgresosForeignKey("Todos");
			this.cargarCombosFrameFormatoDiariosForeignKey("Todos");
			this.cargarCombosFrameFormatoChequesForeignKey("Todos");
			this.cargarCombosFrameFormatoRetencionsForeignKey("Todos");
			this.cargarCombosFrameFormatoRetencionIvasForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyCuentaBanco(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBancosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoCuentaBancosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoIngresosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoEgresosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoDiariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoChequesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoRetencionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatoRetencionIvasForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyCuentaBanco()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	
























	
	

	public CuentaBancoBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public CuentaBancoBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public CuentaBancoBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.cuentabancoSessionBean=new CuentaBancoSessionBean(); 
		this.cuentabancoConstantesFunciones=new CuentaBancoConstantesFunciones(); 
		this.cuentabancoBean=new CuentaBanco();//(this.cuentabancoConstantesFunciones); 		
		this.cuentabancoReturnGeneral=new CuentaBancoParameterReturnGeneral(); 
		
		this.cuentabancoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.cuentabancoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public CuentaBancoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public CuentaBancoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public CuentaBancoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessCuentaBanco(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.cuentabancoConstantesFunciones=new CuentaBancoConstantesFunciones(); 
			this.cuentabancoBean=new CuentaBanco();//this.cuentabancoConstantesFunciones); 			
			this.cuentabancoReturnGeneral=new CuentaBancoParameterReturnGeneral(); 
		
			CuentaBancoBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Cuenta Banco Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.cuentabanco=new CuentaBanco();
			this.cuentabancos = new ArrayList<CuentaBanco>();
			this.cuentabancosAux = new ArrayList<CuentaBanco>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic=new CuentaBancoLogic();
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}
			
			//this.cuentabancoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.cuentabancoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormCuentaBanco);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoCuentaBanco!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoCuentaBanco);	
					}
					
					if(this.jInternalFrameImportacionCuentaBanco!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionCuentaBanco);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByCuentaBanco!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByCuentaBanco);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormCuentaBanco);
				this.jInternalFrameDetalleFormCuentaBanco.setVisible(false);
				this.jInternalFrameDetalleFormCuentaBanco.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoCuentaBanco!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoCuentaBanco);
					this.jInternalFrameReporteDinamicoCuentaBanco.setVisible(false);
					this.jInternalFrameReporteDinamicoCuentaBanco.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionCuentaBanco!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionCuentaBanco);
					this.jInternalFrameImportacionCuentaBanco.setVisible(false);
					this.jInternalFrameImportacionCuentaBanco.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByCuentaBanco!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByCuentaBanco);
					this.jInternalFrameOrderByCuentaBanco.setVisible(false);
					this.jInternalFrameOrderByCuentaBanco.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idCuentaBancoActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=CuentaBancoConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.cuentabancoReturnGeneral=new CuentaBancoParameterReturnGeneral();
			
			this.cuentabancoParameterGeneral=new CuentaBancoParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.cuentabancoLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(CuentaBancoJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(PagoAutoConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(AutoriPagoOrdenCompraConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(DetalleChequeGiradoConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(AutoriPagoConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,CuentaBancoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.cuentabancoSessionBean.getEsGuardarRelacionado(),this.cuentabancoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,CuentaBancoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.cuentabancoSessionBean.getEsGuardarRelacionado(),this.cuentabancoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoCuentaBanco=false;
			this.isVisibilidadCeldaDuplicarCuentaBanco=true;
			this.isVisibilidadCeldaCopiarCuentaBanco=true;
			this.isVisibilidadCeldaVerFormCuentaBanco=true;
			this.isVisibilidadCeldaOrdenCuentaBanco=true;
			this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=false;
			this.isVisibilidadCeldaModificarCuentaBanco=false;
			this.isVisibilidadCeldaActualizarCuentaBanco=false;
			this.isVisibilidadCeldaEliminarCuentaBanco=false;
			this.isVisibilidadCeldaCancelarCuentaBanco=false;
			this.isVisibilidadCeldaGuardarCuentaBanco=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaBanco=false;
			
			
			this.isVisibilidadBusquedaPorCodigo=true;
			this.isVisibilidadBusquedaPorNumeroCheque=true;
			this.isVisibilidadBusquedaPorNumeroCuenta=true;
			this.isVisibilidadBusquedaPorProcedencia=true;
			this.isVisibilidadFK_IdBanco=true;
			this.isVisibilidadFK_IdCuentaContable=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoCuentaBanco=true;
			this.isVisibilidadFK_IdFormatoCheque=true;
			this.isVisibilidadFK_IdFormatoDiario=true;
			this.isVisibilidadFK_IdFormatoEgreso=true;
			this.isVisibilidadFK_IdFormatoIngreso=true;
			this.isVisibilidadFK_IdFormatoRetencion=true;
			this.isVisibilidadFK_IdFormatoRetencionIva=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesCuentaBanco("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosCuentaBanco();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioCuentaBanco(false);
			
			this.setPermisosUsuarioCuentaBanco();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.cuentabancoSessionBean.getEsGuardarRelacionado() 
				|| (this.cuentabancoSessionBean.getEsGuardarRelacionado() && this.cuentabancoSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioCuentaBancoClasesRelacionadas();
			}
			
			if(this.cuentabancoSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioCuentaBancoClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosCuentaBanco();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualCuentaBanco();
			}
			
			if(!this.isPermisoBusquedaCuentaBanco) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasCuentaBanco.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioCuentaBanco,this.isPermisoPaginacionMedioCuentaBanco,this.isPermisoPaginacionTodoCuentaBanco);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(CuentaBancoConstantesFunciones.getTiposSeleccionarCuentaBanco());
				
				this.tiposColumnasSelect=CuentaBancoConstantesFunciones.getTiposSeleccionarCuentaBanco(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectCuentaBanco();				
				//this.tiposRelacionesSelect=CuentaBancoConstantesFunciones.getTiposRelacionesCuentaBanco(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioCuentaBanco();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioCuentaBanco(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioCuentaBanco(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesCuentaBanco() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.pagoautoLogic=new PagoAutoLogic();
			this.autoripagoordencompraLogic=new AutoriPagoOrdenCompraLogic();
			this.detallechequegiradoLogic=new DetalleChequeGiradoLogic();
			this.autoripagoLogic=new AutoriPagoLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.bancoLogic=new BancoLogic();
			this.tipocuentabancoglobalLogic=new TipoCuentaBancoGlobalLogic();
			this.cuentacontableLogic=new CuentaContableLogic();
			this.estadocuentabancoLogic=new EstadoCuentaBancoLogic();
			this.formatoingresoLogic=new FormatoLogic();
			this.formatoegresoLogic=new FormatoLogic();
			this.formatodiarioLogic=new FormatoLogic();
			this.formatochequeLogic=new FormatoLogic();
			this.formatoretencionLogic=new FormatoLogic();
			this.formatoretencionivaLogic=new FormatoLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				cuentabancoImplementable= (CuentaBancoImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+CuentaBancoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				cuentabancoImplementableHome= (CuentaBancoImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+CuentaBancoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.cuentabancos= new ArrayList<CuentaBanco>();
			this.cuentabancosEliminados= new ArrayList<CuentaBanco>();
						
			this.isEsNuevoCuentaBanco=false;
			this.esParaAccionDesdeFormularioCuentaBanco=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idCuentaContableActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.bancosForeignKey=new ArrayList<Banco>() ;
			this.tipocuentabancoglobalsForeignKey=new ArrayList<TipoCuentaBancoGlobal>() ;
			this.cuentacontablesForeignKey=new ArrayList<CuentaContable>() ;
			this.estadocuentabancosForeignKey=new ArrayList<EstadoCuentaBanco>() ;
			this.formatoingresosForeignKey=new ArrayList<Formato>() ;
			this.formatoegresosForeignKey=new ArrayList<Formato>() ;
			this.formatodiariosForeignKey=new ArrayList<Formato>() ;
			this.formatochequesForeignKey=new ArrayList<Formato>() ;
			this.formatoretencionsForeignKey=new ArrayList<Formato>() ;
			this.formatoretencionivasForeignKey=new ArrayList<Formato>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyCuentaBanco(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroCuentaBanco();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			CuentaBancoBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=CuentaBancoConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesCuentaBanco("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingCuentaBanco(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormCuentaBanco!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioCuentaBanco();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioCuentaBanco();
			}
			
			CuentaBancoBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasCuentaBanco.getTabCount(); i++) {
					this.jTabbedPaneBusquedasCuentaBanco.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasCuentaBanco.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessCuentaBanco(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga CuentaBanco: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectCuentaBanco() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(PagoAutoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(PagoAutoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(AutoriPagoOrdenCompraConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(AutoriPagoOrdenCompraConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(DetalleChequeGiradoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetalleChequeGiradoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(AutoriPagoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(AutoriPagoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesCuentaBanco")) {
				iIndex=this.jInternalFrameDetalleFormCuentaBanco.jTabbedPaneRelacionesCuentaBanco.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormCuentaBanco.jTabbedPaneRelacionesCuentaBanco.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();	
				
				

				if(sTitle.equals("Autori Pagos")) {
					if(!AutoriPagoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessCuentaBanco();

						this.cargarParteTabPanelRelacionadaAutoriPago(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Autori Pago Orden Compras")) {
					if(!AutoriPagoOrdenCompraJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessCuentaBanco();

						this.cargarParteTabPanelRelacionadaAutoriPagoOrdenCompra(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Detalle Cheque Girados")) {
					if(!DetalleChequeGiradoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessCuentaBanco();

						this.cargarParteTabPanelRelacionadaDetalleChequeGirado(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Pago Autos")) {
					if(!PagoAutoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessCuentaBanco();

						this.cargarParteTabPanelRelacionadaPagoAuto(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessCuentaBanco();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaAutoriPago(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormCuentaBanco.cargarSessionConBeanSwingJInternalFrameAutoriPago(false,true,iIndex);
		this.jButtonAutoriPagoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaAutoriPago();

		//this.jTabbedPaneRelacionesCuentaBanco.updateUI();
		//this.jTabbedPaneRelacionesCuentaBanco.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesCuentaBanco.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaAutoriPagoOrdenCompra(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormCuentaBanco.cargarSessionConBeanSwingJInternalFrameAutoriPagoOrdenCompra(false,true,iIndex);
		this.jButtonAutoriPagoOrdenCompraActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaAutoriPagoOrdenCompra();

		//this.jTabbedPaneRelacionesCuentaBanco.updateUI();
		//this.jTabbedPaneRelacionesCuentaBanco.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesCuentaBanco.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaDetalleChequeGirado(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormCuentaBanco.cargarSessionConBeanSwingJInternalFrameDetalleChequeGirado(false,true,iIndex);
		this.jButtonDetalleChequeGiradoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetalleChequeGirado();

		//this.jTabbedPaneRelacionesCuentaBanco.updateUI();
		//this.jTabbedPaneRelacionesCuentaBanco.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesCuentaBanco.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaPagoAuto(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormCuentaBanco.cargarSessionConBeanSwingJInternalFramePagoAuto(false,true,iIndex);
		this.jButtonPagoAutoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaPagoAuto();

		//this.jTabbedPaneRelacionesCuentaBanco.updateUI();
		//this.jTabbedPaneRelacionesCuentaBanco.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesCuentaBanco.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("PagoAuto")) {
				int row=this.jTableDatosCuentaBanco.getSelectedRow();
				jButtonPagoAutoActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("AutoriPagoOrdenCompra")) {
				int row=this.jTableDatosCuentaBanco.getSelectedRow();
				jButtonAutoriPagoOrdenCompraActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("DetalleChequeGirado")) {
				int row=this.jTableDatosCuentaBanco.getSelectedRow();
				jButtonDetalleChequeGiradoActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("AutoriPago")) {
				int row=this.jTableDatosCuentaBanco.getSelectedRow();
				jButtonAutoriPagoActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Pago Auto")) {

					if(this.isTienePermisosPagoAuto && this.cuentabancoConstantesFunciones.mostrarPagoAutoCuentaBanco && !CuentaBancoConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Pago Autos"+"("+PagoAutoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Pago Autos");

						if(cuentabancoConstantesFunciones.resaltarPagoAutoCuentaBanco!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(cuentabancoConstantesFunciones.resaltarPagoAutoCuentaBanco);
						}

						jmenuItem.setEnabled(this.cuentabancoConstantesFunciones.activarPagoAutoCuentaBanco);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"PagoAuto"));

						

						this.jInternalFrameDetalleFormCuentaBanco.jmenuDetalleCuentaBanco.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Autori Pago Orden Compra")) {

					if(this.isTienePermisosAutoriPagoOrdenCompra && this.cuentabancoConstantesFunciones.mostrarAutoriPagoOrdenCompraCuentaBanco && !CuentaBancoConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Autori Pago Orden Compras"+"("+AutoriPagoOrdenCompraConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Autori Pago Orden Compras");

						if(cuentabancoConstantesFunciones.resaltarAutoriPagoOrdenCompraCuentaBanco!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(cuentabancoConstantesFunciones.resaltarAutoriPagoOrdenCompraCuentaBanco);
						}

						jmenuItem.setEnabled(this.cuentabancoConstantesFunciones.activarAutoriPagoOrdenCompraCuentaBanco);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"AutoriPagoOrdenCompra"));

						

						this.jInternalFrameDetalleFormCuentaBanco.jmenuDetalleCuentaBanco.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Detalle Cheque Girado")) {

					if(this.isTienePermisosDetalleChequeGirado && this.cuentabancoConstantesFunciones.mostrarDetalleChequeGiradoCuentaBanco && !CuentaBancoConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Detalle Cheque Girados"+"("+DetalleChequeGiradoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Detalle Cheque Girados");

						if(cuentabancoConstantesFunciones.resaltarDetalleChequeGiradoCuentaBanco!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(cuentabancoConstantesFunciones.resaltarDetalleChequeGiradoCuentaBanco);
						}

						jmenuItem.setEnabled(this.cuentabancoConstantesFunciones.activarDetalleChequeGiradoCuentaBanco);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetalleChequeGirado"));

						

						this.jInternalFrameDetalleFormCuentaBanco.jmenuDetalleCuentaBanco.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Autori Pago")) {

					if(this.isTienePermisosAutoriPago && this.cuentabancoConstantesFunciones.mostrarAutoriPagoCuentaBanco && !CuentaBancoConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Autori Pagos"+"("+AutoriPagoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Autori Pagos");

						if(cuentabancoConstantesFunciones.resaltarAutoriPagoCuentaBanco!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(cuentabancoConstantesFunciones.resaltarAutoriPagoCuentaBanco);
						}

						jmenuItem.setEnabled(this.cuentabancoConstantesFunciones.activarAutoriPagoCuentaBanco);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"AutoriPago"));

						

						this.jInternalFrameDetalleFormCuentaBanco.jmenuDetalleCuentaBanco.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyCuentaBanco(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyCuentaBanco(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyCuentaBanco(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyCuentaBancoListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyCuentaBanco();
		
		this.cargarCombosFrameForeignKeyCuentaBanco();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyCuentaBanco();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyCuentaBanco();
		}
	}
	
	

	public void cargarCombosForeignKeyBanco(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBanco();
				this.cargarCombosFrameBancosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaBanco(this.bancosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoCuentaBancoGlobal(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoCuentaBancoGlobalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal();
				this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoCuentaBancoGlobal(this.tipocuentabancoglobalsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContable();
				this.cargarCombosFrameCuentaContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContable(this.cuentacontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoCuentaBanco(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoCuentaBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoCuentaBanco();
				this.cargarCombosFrameEstadoCuentaBancosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEstadoCuentaBanco(this.estadocuentabancosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoIngreso(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoIngresoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoIngreso();
				this.cargarCombosFrameFormatoIngresosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoIngreso(this.formatoingresosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoEgreso(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoEgresoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoEgreso();
				this.cargarCombosFrameFormatoEgresosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoEgreso(this.formatoegresosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoDiario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoDiarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoDiario();
				this.cargarCombosFrameFormatoDiariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoDiario(this.formatodiariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoCheque(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoChequeListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoCheque();
				this.cargarCombosFrameFormatoChequesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoCheque(this.formatochequesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoRetencion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoRetencion();
				this.cargarCombosFrameFormatoRetencionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoRetencion(this.formatoretencionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoRetencionIva(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoRetencionIvaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormatoRetencionIva();
				this.cargarCombosFrameFormatoRetencionIvasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormatoRetencionIva(this.formatoretencionivasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoCuentaBancoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.cuentabancoSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormCuentaBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			
			
			if(jTableDatosCuentaBanco.getRowCount()>=1) {
				jTableDatosCuentaBanco.removeRowSelectionInterval(0, jTableDatosCuentaBanco.getRowCount()-1);						
			}
			
			this.isEsNuevoCuentaBanco=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoCuentaBanco(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesCuentaBanco(true);			
			//this.cuentabanco=new CuentaBanco();
			//this.cuentabanco.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesCuentaBanco(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCuentaBanco() ;
			
			if(CuentaBancoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleCuentaBanco(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.cuentabanco);	
			this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);				
			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			
			if(this.cuentabancoSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar CuentaBanco: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarCuentaBancoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosCuentaBanco.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosCuentaBanco.getSelectedRows().length;			
			}
			
			cuentabancosSeleccionados=this.getCuentaBancosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoCuentaBanco--;			
				//CuentaBanco cuentabancoAux= new CuentaBanco();			
				//cuentabancoAux.setId(this.iIdNuevoCuentaBanco);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//CuentaBanco cuentabancoOrigen=new CuentaBanco();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(CuentaBanco cuentabancoOrigen : cuentabancosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							cuentabancoOrigen =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cuentabancoOrigen =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaCuentaBanco();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.cuentabanco.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosCuentaBanco(cuentabancoOrigen,this.cuentabanco,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.cuentabancoLogic.getCuentaBancos().add(this.cuentabancoAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.cuentabancos.add(this.cuentabancoAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaCuentaBanco(false);
				
				this.jTableDatosCuentaBanco.setRowSelectionInterval(this.getIndiceNuevoCuentaBanco(), this.getIndiceNuevoCuentaBanco());
				
				int iLastRow =  this.jTableDatosCuentaBanco.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosCuentaBanco.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosCuentaBanco.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaCuentaBanco(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarCuentaBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();									
		
			CuentaBanco cuentabancoOrigen=new CuentaBanco();
			CuentaBanco cuentabancoDestino=new CuentaBanco();
				
			cuentabancosSeleccionados=this.getCuentaBancosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosCuentaBanco.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || cuentabancosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosCuentaBanco.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancoOrigen =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						cuentabancoOrigen =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cuentabancoDestino =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						cuentabancoDestino =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				cuentabancoOrigen =cuentabancosSeleccionados.get(0);
				cuentabancoDestino =cuentabancosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosCuentaBanco(cuentabancoOrigen,cuentabancoDestino,true,false);
				
				cuentabancoDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(cuentabancoDestino,cuentabancoLogic.getCuentaBancos());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cuentabancoDestino,cuentabancos);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaCuentaBanco(false);
				
				//this.jTableDatosCuentaBanco.setRowSelectionInterval(this.getIndiceNuevoCuentaBanco(), this.getIndiceNuevoCuentaBanco());
				
				int iLastRow =  this.jTableDatosCuentaBanco.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosCuentaBanco.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosCuentaBanco.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaCuentaBanco(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormCuentaBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormCuentaBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormCuentaBanco.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarCuentaBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesCuentaBanco.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasCuentaBanco.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesCuentaBanco.setVisible(!isVisible);
			this.jPanelPaginacionCuentaBanco.setVisible(!isVisible);
			this.jPanelAccionesCuentaBanco.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarCuentaBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameCuentaBanco();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoCuentaBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoCuentaBanco();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionCuentaBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionCuentaBanco();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByCuentaBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByCuentaBanco();
			
			this.abrirFrameOrderByCuentaBanco();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByCuentaBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByCuentaBanco();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleCuentaBanco(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormCuentaBanco);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormCuentaBanco.isMaximum()) {
					this.jInternalFrameDetalleFormCuentaBanco.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormCuentaBanco.setSize(this.jInternalFrameDetalleFormCuentaBanco.iWidthFormulario,this.jInternalFrameDetalleFormCuentaBanco.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormCuentaBanco.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormCuentaBanco.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormCuentaBanco.isMaximum()) {
						this.jInternalFrameDetalleFormCuentaBanco.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormCuentaBanco.jContentPaneDetalleCuentaBanco.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormCuentaBanco.jTabbedPaneRelacionesCuentaBanco.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormCuentaBanco.jContentPaneDetalleCuentaBanco.getWidth(),CuentaBancoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormCuentaBanco.jTabbedPaneRelacionesCuentaBanco.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormCuentaBanco.jContentPaneDetalleCuentaBanco.getWidth(),CuentaBancoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormCuentaBanco.jTabbedPaneRelacionesCuentaBanco.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormCuentaBanco.jContentPaneDetalleCuentaBanco.getWidth(),CuentaBancoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(AutoriPagoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaAutoriPago();
					}

					if(AutoriPagoOrdenCompraJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaAutoriPagoOrdenCompra();
					}

					if(DetalleChequeGiradoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetalleChequeGirado();
					}

					if(PagoAutoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaPagoAuto();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormCuentaBanco.setVisible(true);
	        this.jInternalFrameDetalleFormCuentaBanco.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByCuentaBanco() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByCuentaBanco==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByCuentaBanco=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByCuentaBanco,false,this);
				} else {
					this.jInternalFrameOrderByCuentaBanco=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByCuentaBanco,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByCuentaBanco);
				this.jInternalFrameOrderByCuentaBanco.setVisible(false);
				this.jInternalFrameOrderByCuentaBanco.setSelected(false);
				
				this.jInternalFrameOrderByCuentaBanco.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByCuentaBanco"));
				
				this.inicializarActualizarBindingTablaOrderByCuentaBanco();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionCuentaBanco() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionCuentaBanco==null) {
				
				this.jInternalFrameImportacionCuentaBanco=new ImportacionJInternalFrame(CuentaBancoConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionCuentaBanco);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionCuentaBanco);
				this.jInternalFrameImportacionCuentaBanco.setVisible(false);
				this.jInternalFrameImportacionCuentaBanco.setSelected(false);


				this.jInternalFrameImportacionCuentaBanco.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionCuentaBanco"));
				this.jInternalFrameImportacionCuentaBanco.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionCuentaBanco"));
				this.jInternalFrameImportacionCuentaBanco.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionCuentaBanco"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoCuentaBanco() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoCuentaBanco==null) {
				this.jInternalFrameReporteDinamicoCuentaBanco=new ReporteDinamicoJInternalFrame(CuentaBancoConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoCuentaBanco);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoCuentaBanco);
				this.jInternalFrameReporteDinamicoCuentaBanco.setVisible(false);
				this.jInternalFrameReporteDinamicoCuentaBanco.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoCuentaBanco.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoCuentaBanco"));
				this.jInternalFrameReporteDinamicoCuentaBanco.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoCuentaBanco"));
				this.jInternalFrameReporteDinamicoCuentaBanco.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoCuentaBanco"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualCuentaBanco();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaAutoriPago() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.jScrollPanelDatosAutoriPago.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormCuentaBanco.jContentPaneDetalleCuentaBanco.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.jScrollPanelDatosAutoriPago.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.jScrollPanelDatosAutoriPago.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.jScrollPanelDatosAutoriPago.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaAutoriPagoOrdenCompra() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.jScrollPanelDatosAutoriPagoOrdenCompra.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormCuentaBanco.jContentPaneDetalleCuentaBanco.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.jScrollPanelDatosAutoriPagoOrdenCompra.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.jScrollPanelDatosAutoriPagoOrdenCompra.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.jScrollPanelDatosAutoriPagoOrdenCompra.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaDetalleChequeGirado() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.jScrollPanelDatosDetalleChequeGirado.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormCuentaBanco.jContentPaneDetalleCuentaBanco.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.jScrollPanelDatosDetalleChequeGirado.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.jScrollPanelDatosDetalleChequeGirado.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.jScrollPanelDatosDetalleChequeGirado.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaPagoAuto() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.jScrollPanelDatosPagoAuto.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormCuentaBanco.jContentPaneDetalleCuentaBanco.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.jScrollPanelDatosPagoAuto.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.jScrollPanelDatosPagoAuto.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.jScrollPanelDatosPagoAuto.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleCuentaBanco() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormCuentaBanco);
			
	       	this.jInternalFrameDetalleFormCuentaBanco.setVisible(false);
	        this.jInternalFrameDetalleFormCuentaBanco.setSelected(false);
			
			//this.jInternalFrameDetalleFormCuentaBanco.dispose();
			//this.jInternalFrameDetalleFormCuentaBanco=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoCuentaBanco() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoCuentaBanco.setVisible(true);
	        this.jInternalFrameReporteDinamicoCuentaBanco.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionCuentaBanco() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionCuentaBanco.setVisible(true);
	        this.jInternalFrameImportacionCuentaBanco.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByCuentaBanco() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByCuentaBanco.setVisible(true);
	        this.jInternalFrameOrderByCuentaBanco.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByCuentaBanco() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByCuentaBanco.setVisible(false);
	        this.jInternalFrameOrderByCuentaBanco.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoCuentaBanco() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoCuentaBanco.setVisible(false);
	        this.jInternalFrameReporteDinamicoCuentaBanco.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionCuentaBanco() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionCuentaBanco.setVisible(false);
	        this.jInternalFrameImportacionCuentaBanco.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCuentaContable(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContable";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
						TitledBorder titledBorderCuentaContable=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContable.setTitle(titledBorderCuentaBanco.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContable(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarCuentaBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarCuentaBanco(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarCuentaBanco(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesCuentaBanco(true);
			//this.isEsNuevoCuentaBanco=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesCuentaBanco("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesCuentaBanco(false) ;
			
			if(cuentabancoSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.getEsGuardarRelacionado() && PagoAutoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPagoAutoActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraSessionBean.getEsGuardarRelacionado() && AutoriPagoOrdenCompraJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonAutoriPagoOrdenCompraActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoSessionBean.getEsGuardarRelacionado() && DetalleChequeGiradoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleChequeGiradoActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.getEsGuardarRelacionado() && AutoriPagoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonAutoriPagoActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(CuentaBancoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleCuentaBanco(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCuentaBanco(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaCuentaBancoActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarCuentaBanco(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormCuentaBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesCuentaBanco(true);
			//this.isEsNuevoCuentaBanco=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.cuentabanco.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesCuentaBanco("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesCuentaBanco(false) ;
			
			if(CuentaBancoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleCuentaBanco(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCuentaBanco(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("CuentaContable")) {
				if(!this.cuentabancoConstantesFunciones.cargarid_cuenta_contableCuentaBanco) {
					this.cargarCombosCuentaContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingCuentaBanco(false,false);
					this.cargarCombosFrameCuentaContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable (id);

				this.recargarComboTablaCuentaContable(this.cuentacontablesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
			
	
	public void recargarComboTablaBanco(List<Banco> bancosForeignKey)throws Exception{
		TableColumn tableColumnBanco=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDBANCO));
		TableCellEditor tableCellEditorBanco =tableColumnBanco.getCellEditor();

		BancoTableCell bancoTableCellFk=(BancoTableCell)tableCellEditorBanco;

		if(bancoTableCellFk!=null) {
			bancoTableCellFk.setbancosForeignKey(bancosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bancoTableCellFk.setRowActual(intSelectedRow);
			//bancoTableCellFk.setbancosForeignKeyActual(bancosForeignKey);
		//}


		if(bancoTableCellFk!=null) {
			bancoTableCellFk.RecargarBancosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoCuentaBancoGlobal(List<TipoCuentaBancoGlobal> tipocuentabancoglobalsForeignKey)throws Exception{
		TableColumn tableColumnTipoCuentaBancoGlobal=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL));
		TableCellEditor tableCellEditorTipoCuentaBancoGlobal =tableColumnTipoCuentaBancoGlobal.getCellEditor();

		TipoCuentaBancoGlobalTableCell tipocuentabancoglobalTableCellFk=(TipoCuentaBancoGlobalTableCell)tableCellEditorTipoCuentaBancoGlobal;

		if(tipocuentabancoglobalTableCellFk!=null) {
			tipocuentabancoglobalTableCellFk.settipocuentabancoglobalsForeignKey(tipocuentabancoglobalsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipocuentabancoglobalTableCellFk.setRowActual(intSelectedRow);
			//tipocuentabancoglobalTableCellFk.settipocuentabancoglobalsForeignKeyActual(tipocuentabancoglobalsForeignKey);
		//}


		if(tipocuentabancoglobalTableCellFk!=null) {
			tipocuentabancoglobalTableCellFk.RecargarTipoCuentaBancoGlobalsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContable(List<CuentaContable> cuentacontablesForeignKey)throws Exception{
		TableColumn tableColumnCuentaContable=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE));
		TableCellEditor tableCellEditorCuentaContable =tableColumnCuentaContable.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContable;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablesForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoCuentaBanco(List<EstadoCuentaBanco> estadocuentabancosForeignKey)throws Exception{
		TableColumn tableColumnEstadoCuentaBanco=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO));
		TableCellEditor tableCellEditorEstadoCuentaBanco =tableColumnEstadoCuentaBanco.getCellEditor();

		EstadoCuentaBancoTableCell estadocuentabancoTableCellFk=(EstadoCuentaBancoTableCell)tableCellEditorEstadoCuentaBanco;

		if(estadocuentabancoTableCellFk!=null) {
			estadocuentabancoTableCellFk.setestadocuentabancosForeignKey(estadocuentabancosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadocuentabancoTableCellFk.setRowActual(intSelectedRow);
			//estadocuentabancoTableCellFk.setestadocuentabancosForeignKeyActual(estadocuentabancosForeignKey);
		//}


		if(estadocuentabancoTableCellFk!=null) {
			estadocuentabancoTableCellFk.RecargarEstadoCuentaBancosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoIngreso(List<Formato> formatoingresosForeignKey)throws Exception{
		TableColumn tableColumnFormatoIngreso=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO));
		TableCellEditor tableCellEditorFormatoIngreso =tableColumnFormatoIngreso.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoIngreso;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatoingresosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatoingresosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoEgreso(List<Formato> formatoegresosForeignKey)throws Exception{
		TableColumn tableColumnFormatoEgreso=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO));
		TableCellEditor tableCellEditorFormatoEgreso =tableColumnFormatoEgreso.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoEgreso;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatoegresosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatoegresosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoDiario(List<Formato> formatodiariosForeignKey)throws Exception{
		TableColumn tableColumnFormatoDiario=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO));
		TableCellEditor tableCellEditorFormatoDiario =tableColumnFormatoDiario.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoDiario;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatodiariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatodiariosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoCheque(List<Formato> formatochequesForeignKey)throws Exception{
		TableColumn tableColumnFormatoCheque=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE));
		TableCellEditor tableCellEditorFormatoCheque =tableColumnFormatoCheque.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoCheque;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatochequesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatochequesForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoRetencion(List<Formato> formatoretencionsForeignKey)throws Exception{
		TableColumn tableColumnFormatoRetencion=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION));
		TableCellEditor tableCellEditorFormatoRetencion =tableColumnFormatoRetencion.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoRetencion;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatoretencionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatoretencionsForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormatoRetencionIva(List<Formato> formatoretencionivasForeignKey)throws Exception{
		TableColumn tableColumnFormatoRetencionIva=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA));
		TableCellEditor tableCellEditorFormatoRetencionIva =tableColumnFormatoRetencionIva.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormatoRetencionIva;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatoretencionivasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCuentaBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatoretencionivasForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable (Long id) throws Exception {
		this.setActualCuentaContableForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarCuentaBancoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesCuentaBanco(false);
			
			//if(!this.isEsNuevoCuentaBanco) {								
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(CuentaBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				
			}
			
			if(this.permiteMantenimiento(this.cuentabanco)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoCuentaBanco=true;
					this.inicializarActualizarBindingTablaCuentaBanco(false);
					this.isEsNuevoCuentaBanco=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoCuentaBanco=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoCuentaBanco=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesCuentaBanco(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualCuentaBanco(false);
				
				this.habilitarDeshabilitarControlesCuentaBanco(false);
			
												
				
				if(CuentaBancoJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleCuentaBanco();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoCuentaBancoActionPerformed(evt,cuentabancoSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualCuentaBanco(this.cuentabanco,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosCuentaBanco.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,cuentabancoSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.cuentabanco.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(CuentaBanco.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaBanco.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarCuentaBancoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				this.cuentabanco.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				this.cuentabanco.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.cuentabanco)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((CuentaBancoModel) this.jTableDatosCuentaBanco.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoCuentaBanco=true;
				this.inicializarActualizarBindingTablaCuentaBanco(false);
				this.isEsNuevoCuentaBanco=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesCuentaBanco(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualCuentaBanco(false);
				
				this.habilitarDeshabilitarControlesCuentaBanco(false);
				
				
				
				if(CuentaBancoJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleCuentaBanco();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarCuentaBancoActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosCuentaBanco.getRowCount()>=1) {
				jTableDatosCuentaBanco.removeRowSelectionInterval(0, jTableDatosCuentaBanco.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesCuentaBanco(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaCuentaBanco(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesCuentaBanco(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCuentaBanco(false) ;
			
			this.isEsNuevoCuentaBanco=false;
			
			if(CuentaBancoJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleCuentaBanco();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosCuentaBancoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingCuentaBanco(false);
				
				//SI ES MANUAL
				if(CuentaBancoJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualCuentaBanco();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosCuentaBancoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoCuentaBanco--;			
			//CuentaBanco cuentabancoAux= new CuentaBanco();			
			//cuentabancoAux.setId(this.iIdNuevoCuentaBanco);
			
			if(this.jInternalFrameDetalleFormCuentaBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaCuentaBanco();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
			
			this.cuentabanco.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.cuentabancoLogic.getCuentaBancos().add(this.cuentabancoAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.cuentabancos.add(this.cuentabancoAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaCuentaBanco(false);
			
			this.jTableDatosCuentaBanco.setRowSelectionInterval(this.getIndiceNuevoCuentaBanco(), this.getIndiceNuevoCuentaBanco());
			
			int iLastRow =  this.jTableDatosCuentaBanco.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosCuentaBanco.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosCuentaBanco.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaCuentaBanco(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionCuentaBancoActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingCuentaBanco(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCuentaBanco(false);
			
			//SI ES MANUAL
			if(CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualCuentaBanco();
			}
			
			//this.abrirFrameTreeCuentaBanco();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionCuentaBancoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Cuenta BancoS ?", "MANTENIMIENTO DE Cuenta Banco", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionCuentaBanco.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralCuentaBanco();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.cuentabancoReturnGeneral=cuentabancoLogic.procesarImportacionCuentaBancosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.cuentabancoParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarCuentaBancoReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionCuentaBancoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionCuentaBanco.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionCuentaBanco.setFileImportacion(this.jInternalFrameImportacionCuentaBanco.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionCuentaBanco.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionCuentaBanco.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionCuentaBanco.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionCuentaBanco.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoCuentaBancoActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();		

		cuentabancosSeleccionados=this.getCuentaBancosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("CuentaBancoBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"CuentaBancoBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteCuentaBancos("Todos",cuentabancosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentabancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Banco",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case CuentaBancoConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_IDBANCO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Banco_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Banco_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Banco_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Banco_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoCuentaBancoGlobal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoCuentaBancoGlobal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoCuentaBancoGlobal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoCuentaBancoGlobal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_CODIGO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroCuenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroCuenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroCuenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroCuenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroCheque_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroCheque_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroCheque_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroCheque_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroChequeAuxiliar_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroChequeAuxiliar_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroChequeAuxiliar_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroChequeAuxiliar_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_SALDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ldo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ldo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ldo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ldo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ocedencia_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ocedencia_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ocedencia_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ocedencia_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_DESTINO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stino_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stino_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stino_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stino_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_ESBANCO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Banco_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Banco_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Banco_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Banco_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoCuentaBanco_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoCuentaBanco_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoCuentaBanco_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoCuentaBanco_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoIngreso_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoIngreso_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoIngreso_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoIngreso_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoEgreso_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoEgreso_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoEgreso_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoEgreso_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoDiario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoDiario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoDiario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoDiario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoCheque_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoCheque_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoCheque_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoCheque_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormatoRetencionIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormatoRetencionIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormatoRetencionIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormatoRetencionIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoCuentaBanco.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case CuentaBancoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDBANCO:
					sNombreCampoCategoria="id_banco";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					sNombreCampoCategoria="id_tipo_cuenta_banco_global";
					break;

				case CuentaBancoConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoria="codigo";
					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA:
					sNombreCampoCategoria="numero_cuenta";
					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE:
					sNombreCampoCategoria="numero_cheque";
					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR:
					sNombreCampoCategoria="numero_cheque_auxiliar";
					break;

				case CuentaBancoConstantesFunciones.LABEL_SALDO:
					sNombreCampoCategoria="saldo";
					break;

				case CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA:
					sNombreCampoCategoria="procedencia";
					break;

				case CuentaBancoConstantesFunciones.LABEL_DESTINO:
					sNombreCampoCategoria="destino";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE:
					sNombreCampoCategoria="id_cuenta_contable";
					break;

				case CuentaBancoConstantesFunciones.LABEL_ESBANCO:
					sNombreCampoCategoria="es_banco";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO:
					sNombreCampoCategoria="id_estado_cuenta_banco";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO:
					sNombreCampoCategoria="id_formato_ingreso";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO:
					sNombreCampoCategoria="id_formato_egreso";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO:
					sNombreCampoCategoria="id_formato_diario";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE:
					sNombreCampoCategoria="id_formato_cheque";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION:
					sNombreCampoCategoria="id_formato_retencion";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA:
					sNombreCampoCategoria="id_formato_retencion_iva";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case CuentaBancoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDBANCO:
					sNombreCampoCategoriaValor="id_banco";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					sNombreCampoCategoriaValor="id_tipo_cuenta_banco_global";
					break;

				case CuentaBancoConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoriaValor="codigo";
					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA:
					sNombreCampoCategoriaValor="numero_cuenta";
					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE:
					sNombreCampoCategoriaValor="numero_cheque";
					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR:
					sNombreCampoCategoriaValor="numero_cheque_auxiliar";
					break;

				case CuentaBancoConstantesFunciones.LABEL_SALDO:
					sNombreCampoCategoriaValor="saldo";
					break;

				case CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA:
					sNombreCampoCategoriaValor="procedencia";
					break;

				case CuentaBancoConstantesFunciones.LABEL_DESTINO:
					sNombreCampoCategoriaValor="destino";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE:
					sNombreCampoCategoriaValor="id_cuenta_contable";
					break;

				case CuentaBancoConstantesFunciones.LABEL_ESBANCO:
					sNombreCampoCategoriaValor="es_banco";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO:
					sNombreCampoCategoriaValor="id_estado_cuenta_banco";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO:
					sNombreCampoCategoriaValor="id_formato_ingreso";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO:
					sNombreCampoCategoriaValor="id_formato_egreso";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO:
					sNombreCampoCategoriaValor="id_formato_diario";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE:
					sNombreCampoCategoriaValor="id_formato_cheque";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION:
					sNombreCampoCategoriaValor="id_formato_retencion";
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA:
					sNombreCampoCategoriaValor="id_formato_retencion_iva";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case CuentaBancoConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDBANCO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Banco",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_banco");
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Cuenta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_cuenta_banco_global");
					break;

				case CuentaBancoConstantesFunciones.LABEL_CODIGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo");
					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Cuenta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_cuenta");
					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Cheque",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_cheque");
					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Cheque 2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_cheque_auxiliar");
					break;

				case CuentaBancoConstantesFunciones.LABEL_SALDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Saldo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"saldo");
					break;

				case CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Procedencia",sNombreCampoCategoria,sNombreCampoCategoriaValor,"procedencia");
					break;

				case CuentaBancoConstantesFunciones.LABEL_DESTINO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Destino",sNombreCampoCategoria,sNombreCampoCategoriaValor,"destino");
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"C. Contable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable");
					break;

				case CuentaBancoConstantesFunciones.LABEL_ESBANCO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Es Banco",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_banco");
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_cuenta_banco");
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ingreso",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_ingreso");
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Egreso",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_egreso");
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Diario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_diario");
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte," Cheque",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_cheque");
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_retencion");
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Retenc. Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato_retencion_iva");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoCuentaBancoActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();		
		
		cuentabancosSeleccionados=this.getCuentaBancosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentabanco";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("CuentaBancos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case CuentaBancoConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDBANCO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDBANCO);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getbanco_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.gettipocuentabancoglobal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_CODIGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_CODIGO);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getcodigo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getnumero_cuenta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getnumero_cheque());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getnumero_cheque_auxiliar());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_SALDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_SALDO);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getsaldo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getprocedencia());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_DESTINO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_DESTINO);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getdestino());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getcuentacontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_ESBANCO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_ESBANCO);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getes_banco());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getestadocuentabanco_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getformatoingreso_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getformatoegreso_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getformatodiario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getformatocheque_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getformatoretencion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA);
					iRow++;

					for(CuentaBanco cuentabanco:cuentabancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(cuentabanco.getformatoretencioniva_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelCuentaBanco(row);				
			//	iRow++;
			//}				
			
			//for(CuentaBanco cuentabancoAux:cuentabancosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelCuentaBanco(cuentabancoAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentabancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Banco",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCuentaBanco(false);
			
			//SI ES MANUAL
			if(CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualCuentaBanco();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresCuentaBancoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCuentaBanco(false);
			
			//SI ES MANUAL
			if(CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualCuentaBanco();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesCuentaBancoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCuentaBanco(false);
			
			//SI ES MANUAL
			if(CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualCuentaBanco();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaCuentaBanco() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosCuentaBanco.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosCuentaBanco.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosCuentaBanco.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosCuentaBanco.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosCuentaBanco.setMinimumSize(dimensionMinimum);
		this.jTableDatosCuentaBanco.setMaximumSize(dimensionMaximum);
		this.jTableDatosCuentaBanco.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingCuentaBanco(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingCuentaBanco(esInicializar,true);
	}
	
	public void inicializarActualizarBindingCuentaBanco(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaCuentaBanco(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesCuentaBanco(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasCuentaBanco(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesCuentaBanco(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesCuentaBanco(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !CuentaBancoJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualCuentaBanco() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaCuentaBanco();
		
		this.inicializarActualizarBindingBotonesManualCuentaBanco(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualCuentaBanco();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesCuentaBanco() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualCuentaBanco(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualCuentaBanco(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosCuentaBanco.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosCuentaBanco.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteCuentaBanco.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxPostAccionNuevoCuentaBanco.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxPostAccionSinCerrarCuentaBanco.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxPostAccionSinMensajeCuentaBanco.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosCuentaBanco.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosCuentaBanco.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteCuentaBanco.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
				this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxPostAccionNuevoCuentaBanco.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxPostAccionSinCerrarCuentaBanco.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxPostAccionSinMensajeCuentaBanco.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionCuentaBanco.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionCuentaBanco.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesCuentaBanco.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoCuentaBanco!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesCuentaBanco.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesCuentaBanco.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarCuentaBanco.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesCuentaBanco.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoCuentaBanco!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesCuentaBanco.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralCuentaBanco.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesCuentaBanco(Boolean esInicializar) throws Exception {
		try	{	
			if(CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualCuentaBanco(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesCuentaBanco() throws Exception {
		try	{
			if(CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualCuentaBanco();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleCuentaBanco() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualCuentaBanco() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesCuentaBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesCuentaBanco.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesCuentaBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesCuentaBanco.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesCuentaBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesCuentaBanco.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionCuentaBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionCuentaBanco.addItem(reporte);
			}
			
			
			if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionCuentaBanco.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionCuentaBanco.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesCuentaBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesCuentaBanco.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesCuentaBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesCuentaBanco.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarCuentaBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarCuentaBanco.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarCuentaBanco.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualCuentaBanco();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualCuentaBanco() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoCuentaBanco!=null) {
				this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoCuentaBanco!=null) {
				this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoCuentaBanco!=null) {
				
				if(this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoCuentaBanco.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoCuentaBanco.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoCuentaBanco.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=CuentaBancoConstantesFunciones.getTiposSeleccionarCuentaBanco(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=CuentaBancoConstantesFunciones.getTiposSeleccionarCuentaBanco(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=CuentaBancoConstantesFunciones.getTiposSeleccionarCuentaBanco(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoCuentaBanco.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoCuentaBanco.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualCuentaBanco()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		this.codigoBusquedaPorCodigo=this.jTextAreacodigoBusquedaPorCodigoCuentaBanco.getText();
		this.numero_chequeBusquedaPorNumeroCheque=this.jTextFieldnumero_chequeBusquedaPorNumeroChequeCuentaBanco.getText();
		this.numero_cuentaBusquedaPorNumeroCuenta=this.jTextFieldnumero_cuentaBusquedaPorNumeroCuentaCuentaBanco.getText();
		if(this.jComboBoxid_bancoFK_IdBancoCuentaBanco.getSelectedItem()!=null){this.id_bancoFK_IdBanco=((Banco)this.jComboBoxid_bancoFK_IdBancoCuentaBanco.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_cuenta_bancoFK_IdEstadoCuentaBancoCuentaBanco.getSelectedItem()!=null){this.id_estado_cuenta_bancoFK_IdEstadoCuentaBanco=((EstadoCuentaBanco)this.jComboBoxid_estado_cuenta_bancoFK_IdEstadoCuentaBancoCuentaBanco.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalCuentaBanco.getSelectedItem()!=null){this.id_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal=((TipoCuentaBancoGlobal)this.jComboBoxid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobalCuentaBanco.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasCuentaBanco(Boolean esInicializar) throws Exception {				
		if(CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualCuentaBanco();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaCuentaBanco() throws Exception {
		this.inicializarActualizarBindingTablaCuentaBanco(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByCuentaBanco() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByCuentaBanco.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByCuentaBanco.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByCuentaBanco.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByCuentaBanco.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByCuentaBanco.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosCuentaBancoOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBancoOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByCuentaBanco.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByCuentaBanco.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByCuentaBanco.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaCuentaBanco(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=cuentabancoLogic.getCuentaBancos().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=cuentabancos.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(CuentaBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosCuentaBanco.setModel(new CuentaBancoModel(this.cuentabancoLogic.getCuentaBancos(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosCuentaBanco.setModel(new CuentaBancoModel(this.cuentabancos,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByCuentaBanco!=null && this.jInternalFrameOrderByCuentaBanco.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByCuentaBanco();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+CuentaBancoConstantesFunciones.SCLASSWEBTITULO,cuentabancoConstantesFunciones.resaltarSeleccionarCuentaBanco,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+CuentaBancoConstantesFunciones.SCLASSWEBTITULO,cuentabancoConstantesFunciones.resaltarSeleccionarCuentaBanco,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_ID));

		if(this.cuentabancoConstantesFunciones.mostraridCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.cuentabancoConstantesFunciones.resaltaridCuentaBanco,this.cuentabancoConstantesFunciones.activaridCuentaBanco,iSizeTabla,this,true,"idCuentaBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentabancoConstantesFunciones.resaltaridCuentaBanco,this.cuentabancoConstantesFunciones.activaridCuentaBanco,this,true,"idCuentaBanco","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDEMPRESA));

		if(this.cuentabancoConstantesFunciones.mostrarid_empresaCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.cuentabancoConstantesFunciones.resaltarid_empresaCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_empresaCuentaBanco,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.cuentabancoConstantesFunciones.resaltarid_empresaCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_empresaCuentaBanco,false,"id_empresaCuentaBanco","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.cuentabancoConstantesFunciones.mostrarid_sucursalCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.cuentabancoConstantesFunciones.resaltarid_sucursalCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_sucursalCuentaBanco,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.cuentabancoConstantesFunciones.resaltarid_sucursalCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_sucursalCuentaBanco,false,"id_sucursalCuentaBanco","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDBANCO));

		if(this.cuentabancoConstantesFunciones.mostrarid_bancoCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_IDBANCO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BancoTableCell(this.bancosForeignKey,this.cuentabancoConstantesFunciones.resaltarid_bancoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_bancoCuentaBanco,iSizeTabla));
			tableColumn.setCellEditor(new BancoTableCell(this.bancosForeignKey,this.cuentabancoConstantesFunciones.resaltarid_bancoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_bancoCuentaBanco,true,"id_bancoCuentaBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL));

		if(this.cuentabancoConstantesFunciones.mostrarid_tipo_cuenta_banco_globalCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoCuentaBancoGlobalTableCell(this.tipocuentabancoglobalsForeignKey,this.cuentabancoConstantesFunciones.resaltarid_tipo_cuenta_banco_globalCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_tipo_cuenta_banco_globalCuentaBanco,iSizeTabla));
			tableColumn.setCellEditor(new TipoCuentaBancoGlobalTableCell(this.tipocuentabancoglobalsForeignKey,this.cuentabancoConstantesFunciones.resaltarid_tipo_cuenta_banco_globalCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_tipo_cuenta_banco_globalCuentaBanco,true,"id_tipo_cuenta_banco_globalCuentaBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_CODIGO));

		if(this.cuentabancoConstantesFunciones.mostrarcodigoCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_CODIGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cuentabancoConstantesFunciones.resaltarcodigoCuentaBanco,this.cuentabancoConstantesFunciones.activarcodigoCuentaBanco,iSizeTabla,this,true,"codigoCuentaBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentabancoConstantesFunciones.resaltarcodigoCuentaBanco,this.cuentabancoConstantesFunciones.activarcodigoCuentaBanco,this,true,"codigoCuentaBanco","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA));

		if(this.cuentabancoConstantesFunciones.mostrarnumero_cuentaCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cuentabancoConstantesFunciones.resaltarnumero_cuentaCuentaBanco,this.cuentabancoConstantesFunciones.activarnumero_cuentaCuentaBanco,iSizeTabla,this,true,"numero_cuentaCuentaBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentabancoConstantesFunciones.resaltarnumero_cuentaCuentaBanco,this.cuentabancoConstantesFunciones.activarnumero_cuentaCuentaBanco,this,true,"numero_cuentaCuentaBanco","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE));

		if(this.cuentabancoConstantesFunciones.mostrarnumero_chequeCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cuentabancoConstantesFunciones.resaltarnumero_chequeCuentaBanco,this.cuentabancoConstantesFunciones.activarnumero_chequeCuentaBanco,iSizeTabla,this,true,"numero_chequeCuentaBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentabancoConstantesFunciones.resaltarnumero_chequeCuentaBanco,this.cuentabancoConstantesFunciones.activarnumero_chequeCuentaBanco,this,true,"numero_chequeCuentaBanco","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR));

		if(this.cuentabancoConstantesFunciones.mostrarnumero_cheque_auxiliarCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cuentabancoConstantesFunciones.resaltarnumero_cheque_auxiliarCuentaBanco,this.cuentabancoConstantesFunciones.activarnumero_cheque_auxiliarCuentaBanco,iSizeTabla,this,true,"numero_cheque_auxiliarCuentaBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentabancoConstantesFunciones.resaltarnumero_cheque_auxiliarCuentaBanco,this.cuentabancoConstantesFunciones.activarnumero_cheque_auxiliarCuentaBanco,this,true,"numero_cheque_auxiliarCuentaBanco","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_SALDO));

		if(this.cuentabancoConstantesFunciones.mostrarsaldoCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_SALDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.cuentabancoConstantesFunciones.resaltarsaldoCuentaBanco,this.cuentabancoConstantesFunciones.activarsaldoCuentaBanco,iSizeTabla,this,true,"saldoCuentaBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentabancoConstantesFunciones.resaltarsaldoCuentaBanco,this.cuentabancoConstantesFunciones.activarsaldoCuentaBanco,this,true,"saldoCuentaBanco","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA));

		if(this.cuentabancoConstantesFunciones.mostrarprocedenciaCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cuentabancoConstantesFunciones.resaltarprocedenciaCuentaBanco,this.cuentabancoConstantesFunciones.activarprocedenciaCuentaBanco,iSizeTabla,this,true,"procedenciaCuentaBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentabancoConstantesFunciones.resaltarprocedenciaCuentaBanco,this.cuentabancoConstantesFunciones.activarprocedenciaCuentaBanco,this,true,"procedenciaCuentaBanco","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_DESTINO));

		if(this.cuentabancoConstantesFunciones.mostrardestinoCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_DESTINO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cuentabancoConstantesFunciones.resaltardestinoCuentaBanco,this.cuentabancoConstantesFunciones.activardestinoCuentaBanco,iSizeTabla,this,true,"destinoCuentaBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cuentabancoConstantesFunciones.resaltardestinoCuentaBanco,this.cuentabancoConstantesFunciones.activardestinoCuentaBanco,this,true,"destinoCuentaBanco","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE));

		if(this.cuentabancoConstantesFunciones.mostrarid_cuenta_contableCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablesForeignKey,this.cuentabancoConstantesFunciones.resaltarid_cuenta_contableCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_cuenta_contableCuentaBanco,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablesForeignKey,this.cuentabancoConstantesFunciones.resaltarid_cuenta_contableCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_cuenta_contableCuentaBanco,true,"id_cuenta_contableCuentaBanco","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_ESBANCO));

		if(this.cuentabancoConstantesFunciones.mostrares_bancoCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_ESBANCO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.cuentabancoConstantesFunciones.resaltares_bancoCuentaBanco,this.cuentabancoConstantesFunciones.activares_bancoCuentaBanco,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.cuentabancoConstantesFunciones.resaltares_bancoCuentaBanco,this.cuentabancoConstantesFunciones.activares_bancoCuentaBanco,this,true,"es_bancoCuentaBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO));

		if(this.cuentabancoConstantesFunciones.mostrarid_estado_cuenta_bancoCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoCuentaBancoTableCell(this.estadocuentabancosForeignKey,this.cuentabancoConstantesFunciones.resaltarid_estado_cuenta_bancoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_estado_cuenta_bancoCuentaBanco,iSizeTabla));
			tableColumn.setCellEditor(new EstadoCuentaBancoTableCell(this.estadocuentabancosForeignKey,this.cuentabancoConstantesFunciones.resaltarid_estado_cuenta_bancoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_estado_cuenta_bancoCuentaBanco,true,"id_estado_cuenta_bancoCuentaBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO));

		if(this.cuentabancoConstantesFunciones.mostrarid_formato_ingresoCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatoingresosForeignKey,this.cuentabancoConstantesFunciones.resaltarid_formato_ingresoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_formato_ingresoCuentaBanco,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatoingresosForeignKey,this.cuentabancoConstantesFunciones.resaltarid_formato_ingresoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_formato_ingresoCuentaBanco,true,"id_formato_ingresoCuentaBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO));

		if(this.cuentabancoConstantesFunciones.mostrarid_formato_egresoCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatoegresosForeignKey,this.cuentabancoConstantesFunciones.resaltarid_formato_egresoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_formato_egresoCuentaBanco,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatoegresosForeignKey,this.cuentabancoConstantesFunciones.resaltarid_formato_egresoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_formato_egresoCuentaBanco,true,"id_formato_egresoCuentaBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO));

		if(this.cuentabancoConstantesFunciones.mostrarid_formato_diarioCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatodiariosForeignKey,this.cuentabancoConstantesFunciones.resaltarid_formato_diarioCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_formato_diarioCuentaBanco,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatodiariosForeignKey,this.cuentabancoConstantesFunciones.resaltarid_formato_diarioCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_formato_diarioCuentaBanco,true,"id_formato_diarioCuentaBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE));

		if(this.cuentabancoConstantesFunciones.mostrarid_formato_chequeCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatochequesForeignKey,this.cuentabancoConstantesFunciones.resaltarid_formato_chequeCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_formato_chequeCuentaBanco,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatochequesForeignKey,this.cuentabancoConstantesFunciones.resaltarid_formato_chequeCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_formato_chequeCuentaBanco,true,"id_formato_chequeCuentaBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION));

		if(this.cuentabancoConstantesFunciones.mostrarid_formato_retencionCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatoretencionsForeignKey,this.cuentabancoConstantesFunciones.resaltarid_formato_retencionCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_formato_retencionCuentaBanco,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatoretencionsForeignKey,this.cuentabancoConstantesFunciones.resaltarid_formato_retencionCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_formato_retencionCuentaBanco,true,"id_formato_retencionCuentaBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA));

		if(this.cuentabancoConstantesFunciones.mostrarid_formato_retencion_ivaCuentaBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatoretencionivasForeignKey,this.cuentabancoConstantesFunciones.resaltarid_formato_retencion_ivaCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_formato_retencion_ivaCuentaBanco,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatoretencionivasForeignKey,this.cuentabancoConstantesFunciones.resaltarid_formato_retencion_ivaCuentaBanco,this,this.cuentabancoConstantesFunciones.activarid_formato_retencion_ivaCuentaBanco,true,"id_formato_retencion_ivaCuentaBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CuentaBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosPagoAuto && this.cuentabancoConstantesFunciones.mostrarPagoAutoCuentaBanco && !CuentaBancoConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Pago Autos");
				tableColumn.setHeaderValue("Pago Autos");
				tableColumn.setCellRenderer(new PagoAutoTableCell(cuentabancoConstantesFunciones.resaltarPagoAutoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarPagoAutoCuentaBanco));
				tableColumn.setCellEditor(new PagoAutoTableCell(cuentabancoConstantesFunciones.resaltarPagoAutoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarPagoAutoCuentaBanco));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosCuentaBanco.addColumn(tableColumn);
			}

			if(this.isTienePermisosAutoriPagoOrdenCompra && this.cuentabancoConstantesFunciones.mostrarAutoriPagoOrdenCompraCuentaBanco && !CuentaBancoConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Autori Pago Orden Compras");
				tableColumn.setHeaderValue("Autori Pago Orden Compras");
				tableColumn.setCellRenderer(new AutoriPagoOrdenCompraTableCell(cuentabancoConstantesFunciones.resaltarAutoriPagoOrdenCompraCuentaBanco,this,this.cuentabancoConstantesFunciones.activarAutoriPagoOrdenCompraCuentaBanco));
				tableColumn.setCellEditor(new AutoriPagoOrdenCompraTableCell(cuentabancoConstantesFunciones.resaltarAutoriPagoOrdenCompraCuentaBanco,this,this.cuentabancoConstantesFunciones.activarAutoriPagoOrdenCompraCuentaBanco));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosCuentaBanco.addColumn(tableColumn);
			}

			if(this.isTienePermisosDetalleChequeGirado && this.cuentabancoConstantesFunciones.mostrarDetalleChequeGiradoCuentaBanco && !CuentaBancoConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Detalle Cheque Girados");
				tableColumn.setHeaderValue("Detalle Cheque Girados");
				tableColumn.setCellRenderer(new DetalleChequeGiradoTableCell(cuentabancoConstantesFunciones.resaltarDetalleChequeGiradoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarDetalleChequeGiradoCuentaBanco));
				tableColumn.setCellEditor(new DetalleChequeGiradoTableCell(cuentabancoConstantesFunciones.resaltarDetalleChequeGiradoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarDetalleChequeGiradoCuentaBanco));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosCuentaBanco.addColumn(tableColumn);
			}

			if(this.isTienePermisosAutoriPago && this.cuentabancoConstantesFunciones.mostrarAutoriPagoCuentaBanco && !CuentaBancoConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Autori Pagos");
				tableColumn.setHeaderValue("Autori Pagos");
				tableColumn.setCellRenderer(new AutoriPagoTableCell(cuentabancoConstantesFunciones.resaltarAutoriPagoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarAutoriPagoCuentaBanco));
				tableColumn.setCellEditor(new AutoriPagoTableCell(cuentabancoConstantesFunciones.resaltarAutoriPagoCuentaBanco,this,this.cuentabancoConstantesFunciones.activarAutoriPagoCuentaBanco));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosCuentaBanco.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.cuentabancoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.cuentabancoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosCuentaBanco.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.cuentabancoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.cuentabancoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosCuentaBanco.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarCuentaBanco && this.isPermisoGuardarCambiosCuentaBanco) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.cuentabancoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.cuentabancoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosCuentaBanco.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.cuentabancoSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosCuentaBanco.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosCuentaBanco.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarCuentaBanco && this.isPermisoGuardarCambiosCuentaBanco) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.cuentabancoSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarCuentaBanco && this.isPermisoGuardarCambiosCuentaBanco) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosCuentaBanco.moveColumn(this.jTableDatosCuentaBanco.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosCuentaBanco.moveColumn(this.jTableDatosCuentaBanco.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.cuentabancoSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosCuentaBanco.moveColumn(this.jTableDatosCuentaBanco.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosCuentaBanco.moveColumn(this.jTableDatosCuentaBanco.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosCuentaBanco.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosCuentaBanco.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosCuentaBanco,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosCuentaBanco.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosCuentaBanco.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!CuentaBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosCuentaBanco.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosCuentaBanco.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosCuentaBanco.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=cuentabancoLogic.getCuentaBancos().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=cuentabancos.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosCuentaBanco.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosCuentaBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosCuentaBanco();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoCuentaBanco=false;
					
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			
				if(this.cuentabancoSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormCuentaBanco==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosCuentaBanco.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosCuentaBanco.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.cuentabanco.getsType().equals("DUPLICADO")
				   || this.cuentabanco.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoCuentaBanco=true;
				
				} else {
					this.isEsNuevoCuentaBanco=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
					if(this.cuentabanco.getId()>=0 && !this.cuentabanco.getIsNew()) {						
						this.isEsNuevoCuentaBanco=false;
						
					} else {
						this.isEsNuevoCuentaBanco=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoCuentaBanco(esRelaciones);						
				
				this.seleccionarCuentaBanco(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.cuentabanco.getId()<0) {
					this.isEsNuevoCuentaBanco=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarCuentaBanco(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarCuentaBanco(evt,rowIndex);
				}	
				
				if(this.cuentabancoSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion CuentaBanco: " + this.dDif); 
					}
				}								
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarCuentaBanco(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.cuentabanco)) {
					if(this.cuentabanco.getId()>0) {
						this.cuentabanco.setIsDeleted(true);
						
						this.cuentabancosEliminados.add(this.cuentabanco);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.cuentabancoLogic.getCuentaBancos().remove(this.cuentabanco);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.cuentabancos.remove(this.cuentabanco);				
					}
					
					
					((CuentaBancoModel) this.jTableDatosCuentaBanco.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaCuentaBanco(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarCuentaBanco(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoCuentaBanco) {
			
			if(this.jInternalFrameDetalleFormCuentaBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosCuentaBanco.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosCuentaBanco.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(CuentaBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioCuentaBanco(this.cuentabanco);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.cuentabancoConstantesFunciones.cargarid_empresaCuentaBanco || this.cuentabancoConstantesFunciones.event_dependid_empresaCuentaBanco) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.cuentabanco.getid_empresa());
									//this.inicializarActualizarBindingCuentaBanco(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(cuentabanco.getEmpresa()!=null) {
							this.empresasForeignKey.add(cuentabanco.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.cuentabanco.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.cuentabancoConstantesFunciones.cargarid_sucursalCuentaBanco || this.cuentabancoConstantesFunciones.event_dependid_sucursalCuentaBanco) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.cuentabanco.getid_sucursal());
									//this.inicializarActualizarBindingCuentaBanco(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(cuentabanco.getSucursal()!=null) {
							this.sucursalsForeignKey.add(cuentabanco.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.cuentabanco.getid_sucursal(),false,"Formulario");

					//Banco
					if(!this.cuentabancoConstantesFunciones.cargarid_bancoCuentaBanco || this.cuentabancoConstantesFunciones.event_dependid_bancoCuentaBanco) {
						//this.cargarCombosBancosForeignKeyLista(" where id="+this.cuentabanco.getid_banco());
									//this.inicializarActualizarBindingCuentaBanco(false,false);
						this.bancosForeignKey=new ArrayList<Banco>();

						if(cuentabanco.getBanco()!=null) {
							this.bancosForeignKey.add(cuentabanco.getBanco());
						}

						this.addItemDefectoCombosForeignKeyBanco();
						this.cargarCombosFrameBancosForeignKey("Todos");
					}
					this.setActualBancoForeignKey(this.cuentabanco.getid_banco(),false,"Formulario");

					//TipoCuentaBancoGlobal
					if(!this.cuentabancoConstantesFunciones.cargarid_tipo_cuenta_banco_globalCuentaBanco || this.cuentabancoConstantesFunciones.event_dependid_tipo_cuenta_banco_globalCuentaBanco) {
						//this.cargarCombosTipoCuentaBancoGlobalsForeignKeyLista(" where id="+this.cuentabanco.getid_tipo_cuenta_banco_global());
									//this.inicializarActualizarBindingCuentaBanco(false,false);
						this.tipocuentabancoglobalsForeignKey=new ArrayList<TipoCuentaBancoGlobal>();

						if(cuentabanco.getTipoCuentaBancoGlobal()!=null) {
							this.tipocuentabancoglobalsForeignKey.add(cuentabanco.getTipoCuentaBancoGlobal());
						}

						this.addItemDefectoCombosForeignKeyTipoCuentaBancoGlobal();
						this.cargarCombosFrameTipoCuentaBancoGlobalsForeignKey("Todos");
					}
					this.setActualTipoCuentaBancoGlobalForeignKey(this.cuentabanco.getid_tipo_cuenta_banco_global(),false,"Formulario");

					//CuentaContable
					if(!this.cuentabancoConstantesFunciones.cargarid_cuenta_contableCuentaBanco || this.cuentabancoConstantesFunciones.event_dependid_cuenta_contableCuentaBanco) {
						//this.cargarCombosCuentaContablesForeignKeyLista(" where id="+this.cuentabanco.getid_cuenta_contable());
									//this.inicializarActualizarBindingCuentaBanco(false,false);
						this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();

						if(cuentabanco.getCuentaContable()!=null) {
							this.cuentacontablesForeignKey.add(cuentabanco.getCuentaContable());
						}

						this.addItemDefectoCombosForeignKeyCuentaContable();
						this.cargarCombosFrameCuentaContablesForeignKey("Todos");
					}
					this.setActualCuentaContableForeignKey(this.cuentabanco.getid_cuenta_contable(),false,"Formulario");

					//EstadoCuentaBanco
					if(!this.cuentabancoConstantesFunciones.cargarid_estado_cuenta_bancoCuentaBanco || this.cuentabancoConstantesFunciones.event_dependid_estado_cuenta_bancoCuentaBanco) {
						//this.cargarCombosEstadoCuentaBancosForeignKeyLista(" where id="+this.cuentabanco.getid_estado_cuenta_banco());
									//this.inicializarActualizarBindingCuentaBanco(false,false);
						this.estadocuentabancosForeignKey=new ArrayList<EstadoCuentaBanco>();

						if(cuentabanco.getEstadoCuentaBanco()!=null) {
							this.estadocuentabancosForeignKey.add(cuentabanco.getEstadoCuentaBanco());
						}

						this.addItemDefectoCombosForeignKeyEstadoCuentaBanco();
						this.cargarCombosFrameEstadoCuentaBancosForeignKey("Todos");
					}
					this.setActualEstadoCuentaBancoForeignKey(this.cuentabanco.getid_estado_cuenta_banco(),false,"Formulario");

					//FormatoIngreso
					if(!this.cuentabancoConstantesFunciones.cargarid_formato_ingresoCuentaBanco || this.cuentabancoConstantesFunciones.event_dependid_formato_ingresoCuentaBanco) {
						//this.cargarCombosFormatoIngresosForeignKeyLista(" where id="+this.cuentabanco.getid_formato_ingreso());
									//this.inicializarActualizarBindingCuentaBanco(false,false);
						this.formatoingresosForeignKey=new ArrayList<Formato>();

						if(cuentabanco.getFormatoIngreso()!=null) {
							this.formatoingresosForeignKey.add(cuentabanco.getFormatoIngreso());
						}

						this.addItemDefectoCombosForeignKeyFormatoIngreso();
						this.cargarCombosFrameFormatoIngresosForeignKey("Todos");
					}
					this.setActualFormatoIngresoForeignKey(this.cuentabanco.getid_formato_ingreso(),false,"Formulario");

					//FormatoEgreso
					if(!this.cuentabancoConstantesFunciones.cargarid_formato_egresoCuentaBanco || this.cuentabancoConstantesFunciones.event_dependid_formato_egresoCuentaBanco) {
						//this.cargarCombosFormatoEgresosForeignKeyLista(" where id="+this.cuentabanco.getid_formato_egreso());
									//this.inicializarActualizarBindingCuentaBanco(false,false);
						this.formatoegresosForeignKey=new ArrayList<Formato>();

						if(cuentabanco.getFormatoEgreso()!=null) {
							this.formatoegresosForeignKey.add(cuentabanco.getFormatoEgreso());
						}

						this.addItemDefectoCombosForeignKeyFormatoEgreso();
						this.cargarCombosFrameFormatoEgresosForeignKey("Todos");
					}
					this.setActualFormatoEgresoForeignKey(this.cuentabanco.getid_formato_egreso(),false,"Formulario");

					//FormatoDiario
					if(!this.cuentabancoConstantesFunciones.cargarid_formato_diarioCuentaBanco || this.cuentabancoConstantesFunciones.event_dependid_formato_diarioCuentaBanco) {
						//this.cargarCombosFormatoDiariosForeignKeyLista(" where id="+this.cuentabanco.getid_formato_diario());
									//this.inicializarActualizarBindingCuentaBanco(false,false);
						this.formatodiariosForeignKey=new ArrayList<Formato>();

						if(cuentabanco.getFormatoDiario()!=null) {
							this.formatodiariosForeignKey.add(cuentabanco.getFormatoDiario());
						}

						this.addItemDefectoCombosForeignKeyFormatoDiario();
						this.cargarCombosFrameFormatoDiariosForeignKey("Todos");
					}
					this.setActualFormatoDiarioForeignKey(this.cuentabanco.getid_formato_diario(),false,"Formulario");

					//FormatoCheque
					if(!this.cuentabancoConstantesFunciones.cargarid_formato_chequeCuentaBanco || this.cuentabancoConstantesFunciones.event_dependid_formato_chequeCuentaBanco) {
						//this.cargarCombosFormatoChequesForeignKeyLista(" where id="+this.cuentabanco.getid_formato_cheque());
									//this.inicializarActualizarBindingCuentaBanco(false,false);
						this.formatochequesForeignKey=new ArrayList<Formato>();

						if(cuentabanco.getFormatoCheque()!=null) {
							this.formatochequesForeignKey.add(cuentabanco.getFormatoCheque());
						}

						this.addItemDefectoCombosForeignKeyFormatoCheque();
						this.cargarCombosFrameFormatoChequesForeignKey("Todos");
					}
					this.setActualFormatoChequeForeignKey(this.cuentabanco.getid_formato_cheque(),false,"Formulario");

					//FormatoRetencion
					if(!this.cuentabancoConstantesFunciones.cargarid_formato_retencionCuentaBanco || this.cuentabancoConstantesFunciones.event_dependid_formato_retencionCuentaBanco) {
						//this.cargarCombosFormatoRetencionsForeignKeyLista(" where id="+this.cuentabanco.getid_formato_retencion());
									//this.inicializarActualizarBindingCuentaBanco(false,false);
						this.formatoretencionsForeignKey=new ArrayList<Formato>();

						if(cuentabanco.getFormatoRetencion()!=null) {
							this.formatoretencionsForeignKey.add(cuentabanco.getFormatoRetencion());
						}

						this.addItemDefectoCombosForeignKeyFormatoRetencion();
						this.cargarCombosFrameFormatoRetencionsForeignKey("Todos");
					}
					this.setActualFormatoRetencionForeignKey(this.cuentabanco.getid_formato_retencion(),false,"Formulario");

					//FormatoRetencionIva
					if(!this.cuentabancoConstantesFunciones.cargarid_formato_retencion_ivaCuentaBanco || this.cuentabancoConstantesFunciones.event_dependid_formato_retencion_ivaCuentaBanco) {
						//this.cargarCombosFormatoRetencionIvasForeignKeyLista(" where id="+this.cuentabanco.getid_formato_retencion_iva());
									//this.inicializarActualizarBindingCuentaBanco(false,false);
						this.formatoretencionivasForeignKey=new ArrayList<Formato>();

						if(cuentabanco.getFormatoRetencionIva()!=null) {
							this.formatoretencionivasForeignKey.add(cuentabanco.getFormatoRetencionIva());
						}

						this.addItemDefectoCombosForeignKeyFormatoRetencionIva();
						this.cargarCombosFrameFormatoRetencionIvasForeignKey("Todos");
					}
					this.setActualFormatoRetencionIvaForeignKey(this.cuentabanco.getid_formato_retencion_iva(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesCuentaBanco("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesCuentaBanco(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualCuentaBanco() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoCuentaBanco(CuentaBanco cuentabanco) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoCuentaBanco(cuentabanco,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoCuentaBanco(CuentaBanco cuentabanco,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioCuentaBanco(cuentabanco);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyCuentaBanco(cuentabanco,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyCuentaBanco(cuentabanco);
	}
	
	public void setVariablesObjetoActualToFormularioCuentaBanco(CuentaBanco cuentabanco) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormCuentaBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormCuentaBanco.jLabelidCuentaBanco.setText(cuentabanco.getId().toString());
			this.jInternalFrameDetalleFormCuentaBanco.jTextAreacodigoCuentaBanco.setText(cuentabanco.getcodigo());
			this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cuentaCuentaBanco.setText(cuentabanco.getnumero_cuenta());
			this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_chequeCuentaBanco.setText(cuentabanco.getnumero_cheque());
			this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cheque_auxiliarCuentaBanco.setText(cuentabanco.getnumero_cheque_auxiliar());
			this.jInternalFrameDetalleFormCuentaBanco.jTextFieldsaldoCuentaBanco.setText(cuentabanco.getsaldo().toString());
			this.jInternalFrameDetalleFormCuentaBanco.jTextAreaprocedenciaCuentaBanco.setText(cuentabanco.getprocedencia());
			this.jInternalFrameDetalleFormCuentaBanco.jTextAreadestinoCuentaBanco.setText(cuentabanco.getdestino());
			this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxes_bancoCuentaBanco.setSelected(cuentabanco.getes_banco());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,CuentaBanco cuentabancoLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,cuentabancoLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,CuentaBanco cuentabancoLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				cuentabancoLocal=this.cuentabanco;
			} else {
				cuentabancoLocal=this.cuentabancoAnterior;
			}
		}
		
		if(this.permiteMantenimiento(cuentabancoLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoCuentaBanco(cuentabancoLocal,true);
					
					if(cuentabancoSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(cuentabancoLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(cuentabancoLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoCuentaBanco(CuentaBanco cuentabanco,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualCuentaBanco(cuentabanco,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(cuentabanco);
	}
	
	public void setVariablesFormularioToObjetoActualCuentaBanco(CuentaBanco cuentabanco,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualCuentaBanco(cuentabanco,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualCuentaBanco(CuentaBanco cuentabanco,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormCuentaBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormCuentaBanco.jLabelidCuentaBanco.getText()==null || this.jInternalFrameDetalleFormCuentaBanco.jLabelidCuentaBanco.getText()=="" || this.jInternalFrameDetalleFormCuentaBanco.jLabelidCuentaBanco.getText()=="Id") {
				this.jInternalFrameDetalleFormCuentaBanco.jLabelidCuentaBanco.setText("0");
			}

			if(conColumnasBase) {cuentabanco.setId(Long.parseLong(this.jInternalFrameDetalleFormCuentaBanco.jLabelidCuentaBanco.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaBancoConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelIdCuentaBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentabanco.setcodigo(this.jInternalFrameDetalleFormCuentaBanco.jTextAreacodigoCuentaBanco.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaBancoConstantesFunciones.LABEL_CODIGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelcodigoCuentaBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentabanco.setnumero_cuenta(this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cuentaCuentaBanco.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelnumero_cuentaCuentaBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentabanco.setnumero_cheque(this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_chequeCuentaBanco.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelnumero_chequeCuentaBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentabanco.setnumero_cheque_auxiliar(this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cheque_auxiliarCuentaBanco.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelnumero_cheque_auxiliarCuentaBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentabanco.setsaldo(Double.parseDouble(this.jInternalFrameDetalleFormCuentaBanco.jTextFieldsaldoCuentaBanco.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaBancoConstantesFunciones.LABEL_SALDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelsaldoCuentaBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentabanco.setprocedencia(this.jInternalFrameDetalleFormCuentaBanco.jTextAreaprocedenciaCuentaBanco.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabelprocedenciaCuentaBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentabanco.setdestino(this.jInternalFrameDetalleFormCuentaBanco.jTextAreadestinoCuentaBanco.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaBancoConstantesFunciones.LABEL_DESTINO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabeldestinoCuentaBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			cuentabanco.setes_banco(this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxes_bancoCuentaBanco.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CuentaBancoConstantesFunciones.LABEL_ESBANCO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCuentaBanco.jLabeles_bancoCuentaBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualCuentaBanco(CuentaBanco cuentabancoBean,CuentaBanco cuentabanco,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && cuentabancoBean.getid_banco()!=null && !cuentabancoBean.getid_banco().equals(-1L))) {cuentabanco.setid_banco(cuentabancoBean.getid_banco());}
			if(conDefault || (!conDefault && cuentabancoBean.getid_tipo_cuenta_banco_global()!=null && !cuentabancoBean.getid_tipo_cuenta_banco_global().equals(-1L))) {cuentabanco.setid_tipo_cuenta_banco_global(cuentabancoBean.getid_tipo_cuenta_banco_global());}
			if(conDefault || (!conDefault && cuentabancoBean.getid_cuenta_contable()!=null && !cuentabancoBean.getid_cuenta_contable().equals(-1L))) {cuentabanco.setid_cuenta_contable(cuentabancoBean.getid_cuenta_contable());}
			if(conDefault || (!conDefault && cuentabancoBean.getid_estado_cuenta_banco()!=null && !cuentabancoBean.getid_estado_cuenta_banco().equals(-1L))) {cuentabanco.setid_estado_cuenta_banco(cuentabancoBean.getid_estado_cuenta_banco());}
			if(conDefault || (!conDefault && cuentabancoBean.getid_formato_ingreso()!=null && !cuentabancoBean.getid_formato_ingreso().equals(-1L))) {cuentabanco.setid_formato_ingreso(cuentabancoBean.getid_formato_ingreso());}
			if(conDefault || (!conDefault && cuentabancoBean.getid_formato_egreso()!=null && !cuentabancoBean.getid_formato_egreso().equals(-1L))) {cuentabanco.setid_formato_egreso(cuentabancoBean.getid_formato_egreso());}
			if(conDefault || (!conDefault && cuentabancoBean.getid_formato_diario()!=null && !cuentabancoBean.getid_formato_diario().equals(-1L))) {cuentabanco.setid_formato_diario(cuentabancoBean.getid_formato_diario());}
			if(conDefault || (!conDefault && cuentabancoBean.getid_formato_cheque()!=null && !cuentabancoBean.getid_formato_cheque().equals(-1L))) {cuentabanco.setid_formato_cheque(cuentabancoBean.getid_formato_cheque());}
			if(conDefault || (!conDefault && cuentabancoBean.getid_formato_retencion()!=null && !cuentabancoBean.getid_formato_retencion().equals(null))) {cuentabanco.setid_formato_retencion(cuentabancoBean.getid_formato_retencion());}
			if(conDefault || (!conDefault && cuentabancoBean.getid_formato_retencion_iva()!=null && !cuentabancoBean.getid_formato_retencion_iva().equals(null))) {cuentabanco.setid_formato_retencion_iva(cuentabancoBean.getid_formato_retencion_iva());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosCuentaBanco(CuentaBanco cuentabancoOrigen,CuentaBanco cuentabanco,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && cuentabancoOrigen.getId()!=null && !cuentabancoOrigen.getId().equals(0L))) {cuentabanco.setId(cuentabancoOrigen.getId());}}
			if(conDefault || (!conDefault && cuentabancoOrigen.getid_banco()!=null && !cuentabancoOrigen.getid_banco().equals(-1L))) {cuentabanco.setid_banco(cuentabancoOrigen.getid_banco());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getid_tipo_cuenta_banco_global()!=null && !cuentabancoOrigen.getid_tipo_cuenta_banco_global().equals(-1L))) {cuentabanco.setid_tipo_cuenta_banco_global(cuentabancoOrigen.getid_tipo_cuenta_banco_global());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getcodigo()!=null && !cuentabancoOrigen.getcodigo().equals(""))) {cuentabanco.setcodigo(cuentabancoOrigen.getcodigo());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getnumero_cuenta()!=null && !cuentabancoOrigen.getnumero_cuenta().equals(""))) {cuentabanco.setnumero_cuenta(cuentabancoOrigen.getnumero_cuenta());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getnumero_cheque()!=null && !cuentabancoOrigen.getnumero_cheque().equals(""))) {cuentabanco.setnumero_cheque(cuentabancoOrigen.getnumero_cheque());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getnumero_cheque_auxiliar()!=null && !cuentabancoOrigen.getnumero_cheque_auxiliar().equals(""))) {cuentabanco.setnumero_cheque_auxiliar(cuentabancoOrigen.getnumero_cheque_auxiliar());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getsaldo()!=null && !cuentabancoOrigen.getsaldo().equals(0.0))) {cuentabanco.setsaldo(cuentabancoOrigen.getsaldo());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getprocedencia()!=null && !cuentabancoOrigen.getprocedencia().equals(""))) {cuentabanco.setprocedencia(cuentabancoOrigen.getprocedencia());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getdestino()!=null && !cuentabancoOrigen.getdestino().equals(""))) {cuentabanco.setdestino(cuentabancoOrigen.getdestino());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getid_cuenta_contable()!=null && !cuentabancoOrigen.getid_cuenta_contable().equals(-1L))) {cuentabanco.setid_cuenta_contable(cuentabancoOrigen.getid_cuenta_contable());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getes_banco()!=null && !cuentabancoOrigen.getes_banco().equals(false))) {cuentabanco.setes_banco(cuentabancoOrigen.getes_banco());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getid_estado_cuenta_banco()!=null && !cuentabancoOrigen.getid_estado_cuenta_banco().equals(-1L))) {cuentabanco.setid_estado_cuenta_banco(cuentabancoOrigen.getid_estado_cuenta_banco());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getid_formato_ingreso()!=null && !cuentabancoOrigen.getid_formato_ingreso().equals(-1L))) {cuentabanco.setid_formato_ingreso(cuentabancoOrigen.getid_formato_ingreso());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getid_formato_egreso()!=null && !cuentabancoOrigen.getid_formato_egreso().equals(-1L))) {cuentabanco.setid_formato_egreso(cuentabancoOrigen.getid_formato_egreso());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getid_formato_diario()!=null && !cuentabancoOrigen.getid_formato_diario().equals(-1L))) {cuentabanco.setid_formato_diario(cuentabancoOrigen.getid_formato_diario());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getid_formato_cheque()!=null && !cuentabancoOrigen.getid_formato_cheque().equals(-1L))) {cuentabanco.setid_formato_cheque(cuentabancoOrigen.getid_formato_cheque());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getid_formato_retencion()!=null && !cuentabancoOrigen.getid_formato_retencion().equals(null))) {cuentabanco.setid_formato_retencion(cuentabancoOrigen.getid_formato_retencion());}
			if(conDefault || (!conDefault && cuentabancoOrigen.getid_formato_retencion_iva()!=null && !cuentabancoOrigen.getid_formato_retencion_iva().equals(null))) {cuentabanco.setid_formato_retencion_iva(cuentabancoOrigen.getid_formato_retencion_iva());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioCuentaBanco(CuentaBanco cuentabanco) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormCuentaBanco.jLabelidCuentaBanco.setText(cuentabanco.getId().toString());
			this.jInternalFrameDetalleFormCuentaBanco.jTextAreacodigoCuentaBanco.setText(cuentabanco.getcodigo());
			this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cuentaCuentaBanco.setText(cuentabanco.getnumero_cuenta());
			this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_chequeCuentaBanco.setText(cuentabanco.getnumero_cheque());
			this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cheque_auxiliarCuentaBanco.setText(cuentabanco.getnumero_cheque_auxiliar());
			this.jInternalFrameDetalleFormCuentaBanco.jTextFieldsaldoCuentaBanco.setText(cuentabanco.getsaldo().toString());
			this.jInternalFrameDetalleFormCuentaBanco.jTextAreaprocedenciaCuentaBanco.setText(cuentabanco.getprocedencia());
			this.jInternalFrameDetalleFormCuentaBanco.jTextAreadestinoCuentaBanco.setText(cuentabanco.getdestino());
			this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxes_bancoCuentaBanco.setSelected(cuentabanco.getes_banco());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioCuentaBanco(CuentaBancoBean cuentabancoBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormCuentaBanco.jLabelidCuentaBanco.setText(cuentabancoBean.getId().toString());
			this.jInternalFrameDetalleFormCuentaBanco.jTextAreacodigoCuentaBanco.setText(cuentabancoBean.getcodigo());
			this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cuentaCuentaBanco.setText(cuentabancoBean.getnumero_cuenta());
			this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_chequeCuentaBanco.setText(cuentabancoBean.getnumero_cheque());
			this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cheque_auxiliarCuentaBanco.setText(cuentabancoBean.getnumero_cheque_auxiliar());
			this.jInternalFrameDetalleFormCuentaBanco.jTextFieldsaldoCuentaBanco.setText(cuentabancoBean.getsaldo().toString());
			this.jInternalFrameDetalleFormCuentaBanco.jTextAreaprocedenciaCuentaBanco.setText(cuentabancoBean.getprocedencia());
			this.jInternalFrameDetalleFormCuentaBanco.jTextAreadestinoCuentaBanco.setText(cuentabancoBean.getdestino());
			this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxes_bancoCuentaBanco.setSelected(cuentabancoBean.getes_banco());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanCuentaBanco(CuentaBancoParameterReturnGeneral cuentabancoReturnGeneral,CuentaBancoBean cuentabancoBean,Boolean conDefault) throws Exception { 
		try {
			CuentaBanco cuentabancoLocal=new CuentaBanco();
			
			cuentabancoLocal=cuentabancoReturnGeneral.getCuentaBanco();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && cuentabancoLocal.getId()!=null && !cuentabancoLocal.getId().equals(0L))) {cuentabancoBean.setId(cuentabancoLocal.getId());}}
			if(conDefault || (!conDefault && cuentabancoLocal.getid_banco()!=null && !cuentabancoLocal.getid_banco().equals(-1L))) {cuentabancoBean.setid_banco(cuentabancoLocal.getid_banco());}
			if(conDefault || (!conDefault && cuentabancoLocal.getid_tipo_cuenta_banco_global()!=null && !cuentabancoLocal.getid_tipo_cuenta_banco_global().equals(-1L))) {cuentabancoBean.setid_tipo_cuenta_banco_global(cuentabancoLocal.getid_tipo_cuenta_banco_global());}
			if(conDefault || (!conDefault && cuentabancoLocal.getcodigo()!=null && !cuentabancoLocal.getcodigo().equals(""))) {cuentabancoBean.setcodigo(cuentabancoLocal.getcodigo());}
			if(conDefault || (!conDefault && cuentabancoLocal.getnumero_cuenta()!=null && !cuentabancoLocal.getnumero_cuenta().equals(""))) {cuentabancoBean.setnumero_cuenta(cuentabancoLocal.getnumero_cuenta());}
			if(conDefault || (!conDefault && cuentabancoLocal.getnumero_cheque()!=null && !cuentabancoLocal.getnumero_cheque().equals(""))) {cuentabancoBean.setnumero_cheque(cuentabancoLocal.getnumero_cheque());}
			if(conDefault || (!conDefault && cuentabancoLocal.getnumero_cheque_auxiliar()!=null && !cuentabancoLocal.getnumero_cheque_auxiliar().equals(""))) {cuentabancoBean.setnumero_cheque_auxiliar(cuentabancoLocal.getnumero_cheque_auxiliar());}
			if(conDefault || (!conDefault && cuentabancoLocal.getsaldo()!=null && !cuentabancoLocal.getsaldo().equals(0.0))) {cuentabancoBean.setsaldo(cuentabancoLocal.getsaldo());}
			if(conDefault || (!conDefault && cuentabancoLocal.getprocedencia()!=null && !cuentabancoLocal.getprocedencia().equals(""))) {cuentabancoBean.setprocedencia(cuentabancoLocal.getprocedencia());}
			if(conDefault || (!conDefault && cuentabancoLocal.getdestino()!=null && !cuentabancoLocal.getdestino().equals(""))) {cuentabancoBean.setdestino(cuentabancoLocal.getdestino());}
			if(conDefault || (!conDefault && cuentabancoLocal.getid_cuenta_contable()!=null && !cuentabancoLocal.getid_cuenta_contable().equals(-1L))) {cuentabancoBean.setid_cuenta_contable(cuentabancoLocal.getid_cuenta_contable());}
			if(conDefault || (!conDefault && cuentabancoLocal.getes_banco()!=null && !cuentabancoLocal.getes_banco().equals(false))) {cuentabancoBean.setes_banco(cuentabancoLocal.getes_banco());}
			if(conDefault || (!conDefault && cuentabancoLocal.getid_estado_cuenta_banco()!=null && !cuentabancoLocal.getid_estado_cuenta_banco().equals(-1L))) {cuentabancoBean.setid_estado_cuenta_banco(cuentabancoLocal.getid_estado_cuenta_banco());}
			if(conDefault || (!conDefault && cuentabancoLocal.getid_formato_ingreso()!=null && !cuentabancoLocal.getid_formato_ingreso().equals(-1L))) {cuentabancoBean.setid_formato_ingreso(cuentabancoLocal.getid_formato_ingreso());}
			if(conDefault || (!conDefault && cuentabancoLocal.getid_formato_egreso()!=null && !cuentabancoLocal.getid_formato_egreso().equals(-1L))) {cuentabancoBean.setid_formato_egreso(cuentabancoLocal.getid_formato_egreso());}
			if(conDefault || (!conDefault && cuentabancoLocal.getid_formato_diario()!=null && !cuentabancoLocal.getid_formato_diario().equals(-1L))) {cuentabancoBean.setid_formato_diario(cuentabancoLocal.getid_formato_diario());}
			if(conDefault || (!conDefault && cuentabancoLocal.getid_formato_cheque()!=null && !cuentabancoLocal.getid_formato_cheque().equals(-1L))) {cuentabancoBean.setid_formato_cheque(cuentabancoLocal.getid_formato_cheque());}
			if(conDefault || (!conDefault && cuentabancoLocal.getid_formato_retencion()!=null && !cuentabancoLocal.getid_formato_retencion().equals(null))) {cuentabancoBean.setid_formato_retencion(cuentabancoLocal.getid_formato_retencion());}
			if(conDefault || (!conDefault && cuentabancoLocal.getid_formato_retencion_iva()!=null && !cuentabancoLocal.getid_formato_retencion_iva().equals(null))) {cuentabancoBean.setid_formato_retencion_iva(cuentabancoLocal.getid_formato_retencion_iva());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxCuentaBancoGenerico(Long idCuentaBancoSeleccionado,JComboBox jComboBoxCuentaBanco,List<CuentaBanco> cuentabancosLocal)throws Exception {
		try {
			CuentaBanco  cuentabancoTemp=null;

			for(CuentaBanco cuentabancoAux:cuentabancosLocal) {
				if(cuentabancoAux.getId()!=null && cuentabancoAux.getId().equals(idCuentaBancoSeleccionado)) {
					cuentabancoTemp=cuentabancoAux;
					break;
				}
			}

			jComboBoxCuentaBanco.setSelectedItem(cuentabancoTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxCuentaBancoGenerico(JComboBox jComboBoxCuentaBanco,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxCuentaBanco.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxCuentaBanco.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxCuentaBanco.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxCuentaBanco.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxCuentaBanco.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxCuentaBanco.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxCuentaBanco.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxCuentaBanco.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxCuentaBanco.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxCuentaBanco.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("PagoAuto")) {
			jButtonPagoAutoActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("AutoriPagoOrdenCompra")) {
			jButtonAutoriPagoOrdenCompraActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("DetalleChequeGirado")) {
			jButtonDetalleChequeGiradoActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("AutoriPago")) {
			jButtonAutoriPagoActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			cuentabanco=(CuentaBanco) cuentabancoLogic.getCuentaBancos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			cuentabanco =(CuentaBanco) cuentabancos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!cuentabanco.getIsNew() && !cuentabanco.getIsChanged() && !cuentabanco.getIsDeleted()) {
				sDescripcion=cuentabanco.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=cuentabanco.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!cuentabanco.getIsNew() && !cuentabanco.getIsChanged() && !cuentabanco.getIsDeleted()) {
				sDescripcion=cuentabanco.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=cuentabanco.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Banco")) {
			//sDescripcion=this.getActualBancoForeignKeyDescripcion((Long)value);
			if(!cuentabanco.getIsNew() && !cuentabanco.getIsChanged() && !cuentabanco.getIsDeleted()) {
				sDescripcion=cuentabanco.getbanco_descripcion();
			} else {
				//sDescripcion=this.getActualBancoForeignKeyDescripcion((Long)value);
				sDescripcion=cuentabanco.getbanco_descripcion();
			}
		}

		if(sTipo.equals("TipoCuentaBancoGlobal")) {
			//sDescripcion=this.getActualTipoCuentaBancoGlobalForeignKeyDescripcion((Long)value);
			if(!cuentabanco.getIsNew() && !cuentabanco.getIsChanged() && !cuentabanco.getIsDeleted()) {
				sDescripcion=cuentabanco.gettipocuentabancoglobal_descripcion();
			} else {
				//sDescripcion=this.getActualTipoCuentaBancoGlobalForeignKeyDescripcion((Long)value);
				sDescripcion=cuentabanco.gettipocuentabancoglobal_descripcion();
			}
		}

		if(sTipo.equals("CuentaContable")) {
			//sDescripcion=this.getActualCuentaContableForeignKeyDescripcion((Long)value);
			if(!cuentabanco.getIsNew() && !cuentabanco.getIsChanged() && !cuentabanco.getIsDeleted()) {
				sDescripcion=cuentabanco.getcuentacontable_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableForeignKeyDescripcion((Long)value);
				sDescripcion=cuentabanco.getcuentacontable_descripcion();
			}
		}

		if(sTipo.equals("EstadoCuentaBanco")) {
			//sDescripcion=this.getActualEstadoCuentaBancoForeignKeyDescripcion((Long)value);
			if(!cuentabanco.getIsNew() && !cuentabanco.getIsChanged() && !cuentabanco.getIsDeleted()) {
				sDescripcion=cuentabanco.getestadocuentabanco_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoCuentaBancoForeignKeyDescripcion((Long)value);
				sDescripcion=cuentabanco.getestadocuentabanco_descripcion();
			}
		}

		if(sTipo.equals("FormatoIngreso")) {
			//sDescripcion=this.getActualFormatoIngresoForeignKeyDescripcion((Long)value);
			if(!cuentabanco.getIsNew() && !cuentabanco.getIsChanged() && !cuentabanco.getIsDeleted()) {
				sDescripcion=cuentabanco.getformatoingreso_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoIngresoForeignKeyDescripcion((Long)value);
				sDescripcion=cuentabanco.getformatoingreso_descripcion();
			}
		}

		if(sTipo.equals("FormatoEgreso")) {
			//sDescripcion=this.getActualFormatoEgresoForeignKeyDescripcion((Long)value);
			if(!cuentabanco.getIsNew() && !cuentabanco.getIsChanged() && !cuentabanco.getIsDeleted()) {
				sDescripcion=cuentabanco.getformatoegreso_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoEgresoForeignKeyDescripcion((Long)value);
				sDescripcion=cuentabanco.getformatoegreso_descripcion();
			}
		}

		if(sTipo.equals("FormatoDiario")) {
			//sDescripcion=this.getActualFormatoDiarioForeignKeyDescripcion((Long)value);
			if(!cuentabanco.getIsNew() && !cuentabanco.getIsChanged() && !cuentabanco.getIsDeleted()) {
				sDescripcion=cuentabanco.getformatodiario_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoDiarioForeignKeyDescripcion((Long)value);
				sDescripcion=cuentabanco.getformatodiario_descripcion();
			}
		}

		if(sTipo.equals("FormatoCheque")) {
			//sDescripcion=this.getActualFormatoChequeForeignKeyDescripcion((Long)value);
			if(!cuentabanco.getIsNew() && !cuentabanco.getIsChanged() && !cuentabanco.getIsDeleted()) {
				sDescripcion=cuentabanco.getformatocheque_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoChequeForeignKeyDescripcion((Long)value);
				sDescripcion=cuentabanco.getformatocheque_descripcion();
			}
		}

		if(sTipo.equals("FormatoRetencion")) {
			//sDescripcion=this.getActualFormatoRetencionForeignKeyDescripcion((Long)value);
			if(!cuentabanco.getIsNew() && !cuentabanco.getIsChanged() && !cuentabanco.getIsDeleted()) {
				sDescripcion=cuentabanco.getformatoretencion_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoRetencionForeignKeyDescripcion((Long)value);
				sDescripcion=cuentabanco.getformatoretencion_descripcion();
			}
		}

		if(sTipo.equals("FormatoRetencionIva")) {
			//sDescripcion=this.getActualFormatoRetencionIvaForeignKeyDescripcion((Long)value);
			if(!cuentabanco.getIsNew() && !cuentabanco.getIsChanged() && !cuentabanco.getIsDeleted()) {
				sDescripcion=cuentabanco.getformatoretencioniva_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoRetencionIvaForeignKeyDescripcion((Long)value);
				sDescripcion=cuentabanco.getformatoretencioniva_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		CuentaBanco cuentabancoRow=new CuentaBanco();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			cuentabancoRow=(CuentaBanco) cuentabancoLogic.getCuentaBancos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			cuentabancoRow=(CuentaBanco) cuentabancos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonPagoAutoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,CuentaBanco cuentabanco) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormCuentaBanco==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco = (CuentaBanco)this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.cuentabanco = (CuentaBanco)this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(cuentabanco!=null) {
						this.cuentabanco = cuentabanco;
					} else {
						this.cuentabanco = new CuentaBanco();
					}
				}

				if(this.isTienePermisosPagoAuto && this.permiteMantenimiento(this.cuentabanco)) {
					PagoAutoBeanSwingJInternalFrame pagoautoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFramePopup=new PagoAutoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						pagoautoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFramePopup;
					} else {
						pagoautoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame;
					}

					List<CuentaBanco> cuentabancos=new ArrayList<CuentaBanco>();
					cuentabancos.add(this.cuentabanco);
					if(!esRelacionado) {
						//pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.setConGuardarRelaciones(false);
						//pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					pagoautoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormCuentaBanco.cargarPagoAutoBeanSwingJInternalFrame(cuentabancos,this.cuentabanco,pagoautoBeanSwingJInternalFrame,/*conInicializar,*/pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.getConGuardarRelaciones(),pagoautoBeanSwingJInternalFrame.pagoautoSessionBean.getEsGuardarRelacionado());
					pagoautoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						pagoautoBeanSwingJInternalFrame.actualizarEstadoPanelsPagoAuto("no_relacionado");

						pagoautoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(PagoAutoConstantesFunciones.ITAMANIOFILATABLA + (PagoAutoConstantesFunciones.ITAMANIOFILATABLA/2));

						pagoautoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
						TitledBorder titledBorderPagoAuto=(TitledBorder)pagoautoBeanSwingJInternalFrame.jScrollPanelDatosPagoAuto.getBorder();

						titledBorderPagoAuto.setTitle(titledBorderCuentaBanco.getTitle() + " -> Pago Auto");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,pagoautoBeanSwingJInternalFrame);
						}

						pagoautoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(pagoautoBeanSwingJInternalFrame);

						pagoautoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.cuentabancoSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Pago Auto",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonAutoriPagoOrdenCompraActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,CuentaBanco cuentabanco) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormCuentaBanco==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco = (CuentaBanco)this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.cuentabanco = (CuentaBanco)this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(cuentabanco!=null) {
						this.cuentabanco = cuentabanco;
					} else {
						this.cuentabanco = new CuentaBanco();
					}
				}

				if(this.isTienePermisosAutoriPagoOrdenCompra && this.permiteMantenimiento(this.cuentabanco)) {
					AutoriPagoOrdenCompraBeanSwingJInternalFrame autoripagoordencompraBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFramePopup=new AutoriPagoOrdenCompraBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						autoripagoordencompraBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFramePopup;
					} else {
						autoripagoordencompraBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame;
					}

					List<CuentaBanco> cuentabancos=new ArrayList<CuentaBanco>();
					cuentabancos.add(this.cuentabanco);
					if(!esRelacionado) {
						//autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraSessionBean.setConGuardarRelaciones(false);
						//autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					autoripagoordencompraBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormCuentaBanco.cargarAutoriPagoOrdenCompraBeanSwingJInternalFrame(cuentabancos,this.cuentabanco,autoripagoordencompraBeanSwingJInternalFrame,/*conInicializar,*/autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraSessionBean.getConGuardarRelaciones(),autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraSessionBean.getEsGuardarRelacionado());
					autoripagoordencompraBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						autoripagoordencompraBeanSwingJInternalFrame.actualizarEstadoPanelsAutoriPagoOrdenCompra("no_relacionado");

						autoripagoordencompraBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(AutoriPagoOrdenCompraConstantesFunciones.ITAMANIOFILATABLA + (AutoriPagoOrdenCompraConstantesFunciones.ITAMANIOFILATABLA/2));

						autoripagoordencompraBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
						TitledBorder titledBorderAutoriPagoOrdenCompra=(TitledBorder)autoripagoordencompraBeanSwingJInternalFrame.jScrollPanelDatosAutoriPagoOrdenCompra.getBorder();

						titledBorderAutoriPagoOrdenCompra.setTitle(titledBorderCuentaBanco.getTitle() + " -> Autori Pago Orden Compra");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,autoripagoordencompraBeanSwingJInternalFrame);
						}

						autoripagoordencompraBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(autoripagoordencompraBeanSwingJInternalFrame);

						autoripagoordencompraBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.cuentabancoSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Autori Pago Orden Compra",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonDetalleChequeGiradoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,CuentaBanco cuentabanco) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormCuentaBanco==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco = (CuentaBanco)this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.cuentabanco = (CuentaBanco)this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(cuentabanco!=null) {
						this.cuentabanco = cuentabanco;
					} else {
						this.cuentabanco = new CuentaBanco();
					}
				}

				if(this.isTienePermisosDetalleChequeGirado && this.permiteMantenimiento(this.cuentabanco)) {
					DetalleChequeGiradoBeanSwingJInternalFrame detallechequegiradoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFramePopup=new DetalleChequeGiradoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detallechequegiradoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFramePopup;
					} else {
						detallechequegiradoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame;
					}

					List<CuentaBanco> cuentabancos=new ArrayList<CuentaBanco>();
					cuentabancos.add(this.cuentabanco);
					if(!esRelacionado) {
						//detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoSessionBean.setConGuardarRelaciones(false);
						//detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detallechequegiradoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormCuentaBanco.cargarDetalleChequeGiradoBeanSwingJInternalFrame(cuentabancos,this.cuentabanco,detallechequegiradoBeanSwingJInternalFrame,/*conInicializar,*/detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoSessionBean.getConGuardarRelaciones(),detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoSessionBean.getEsGuardarRelacionado());
					detallechequegiradoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detallechequegiradoBeanSwingJInternalFrame.actualizarEstadoPanelsDetalleChequeGirado("no_relacionado");

						detallechequegiradoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetalleChequeGiradoConstantesFunciones.ITAMANIOFILATABLA + (DetalleChequeGiradoConstantesFunciones.ITAMANIOFILATABLA/2));

						detallechequegiradoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
						TitledBorder titledBorderDetalleChequeGirado=(TitledBorder)detallechequegiradoBeanSwingJInternalFrame.jScrollPanelDatosDetalleChequeGirado.getBorder();

						titledBorderDetalleChequeGirado.setTitle(titledBorderCuentaBanco.getTitle() + " -> Detalle Cheque Girado");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detallechequegiradoBeanSwingJInternalFrame);
						}

						detallechequegiradoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detallechequegiradoBeanSwingJInternalFrame);

						detallechequegiradoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.cuentabancoSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Detalle Cheque Girado",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonAutoriPagoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,CuentaBanco cuentabanco) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormCuentaBanco==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco = (CuentaBanco)this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.cuentabanco = (CuentaBanco)this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(cuentabanco!=null) {
						this.cuentabanco = cuentabanco;
					} else {
						this.cuentabanco = new CuentaBanco();
					}
				}

				if(this.isTienePermisosAutoriPago && this.permiteMantenimiento(this.cuentabanco)) {
					AutoriPagoBeanSwingJInternalFrame autoripagoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFramePopup=new AutoriPagoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						autoripagoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFramePopup;
					} else {
						autoripagoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame;
					}

					List<CuentaBanco> cuentabancos=new ArrayList<CuentaBanco>();
					cuentabancos.add(this.cuentabanco);
					if(!esRelacionado) {
						//autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.setConGuardarRelaciones(false);
						//autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					autoripagoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormCuentaBanco.cargarAutoriPagoBeanSwingJInternalFrame(cuentabancos,this.cuentabanco,autoripagoBeanSwingJInternalFrame,/*conInicializar,*/autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.getConGuardarRelaciones(),autoripagoBeanSwingJInternalFrame.autoripagoSessionBean.getEsGuardarRelacionado());
					autoripagoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						autoripagoBeanSwingJInternalFrame.actualizarEstadoPanelsAutoriPago("no_relacionado");

						autoripagoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(AutoriPagoConstantesFunciones.ITAMANIOFILATABLA + (AutoriPagoConstantesFunciones.ITAMANIOFILATABLA/2));

						autoripagoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
						TitledBorder titledBorderAutoriPago=(TitledBorder)autoripagoBeanSwingJInternalFrame.jScrollPanelDatosAutoriPago.getBorder();

						titledBorderAutoriPago.setTitle(titledBorderCuentaBanco.getTitle() + " -> Autori Pago");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,autoripagoBeanSwingJInternalFrame);
						}

						autoripagoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(autoripagoBeanSwingJInternalFrame);

						autoripagoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.cuentabancoSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Autori Pago",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualCuentaBanco(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoCuentaBanco.setVisible((this.isVisibilidadCeldaNuevoCuentaBanco && this.isPermisoNuevoCuentaBanco));			
			this.jButtonDuplicarCuentaBanco.setVisible((this.isVisibilidadCeldaDuplicarCuentaBanco && this.isPermisoDuplicarCuentaBanco));			
			this.jButtonCopiarCuentaBanco.setVisible((this.isVisibilidadCeldaCopiarCuentaBanco && this.isPermisoCopiarCuentaBanco));
			this.jButtonVerFormCuentaBanco.setVisible((this.isVisibilidadCeldaVerFormCuentaBanco && this.isPermisoVerFormCuentaBanco));
			
			this.jButtonAbrirOrderByCuentaBanco.setVisible((this.isVisibilidadCeldaOrdenCuentaBanco && this.isPermisoOrdenCuentaBanco));			
			
			this.jButtonNuevoRelacionesCuentaBanco.setVisible((this.isVisibilidadCeldaNuevoRelacionesCuentaBanco && this.isPermisoNuevoCuentaBanco));			
			this.jButtonNuevoGuardarCambiosCuentaBanco.setVisible((this.isVisibilidadCeldaNuevoCuentaBanco && this.isPermisoNuevoCuentaBanco && this.isPermisoGuardarCambiosCuentaBanco));
			
			if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.jButtonModificarCuentaBanco.setVisible((this.isVisibilidadCeldaModificarCuentaBanco && this.isPermisoActualizarCuentaBanco));	
			this.jInternalFrameDetalleFormCuentaBanco.jButtonActualizarCuentaBanco.setVisible((this.isVisibilidadCeldaActualizarCuentaBanco && this.isPermisoActualizarCuentaBanco));	
			this.jInternalFrameDetalleFormCuentaBanco.jButtonEliminarCuentaBanco.setVisible((this.isVisibilidadCeldaEliminarCuentaBanco && this.isPermisoEliminarCuentaBanco));
			this.jInternalFrameDetalleFormCuentaBanco.jButtonCancelarCuentaBanco.setVisible(this.isVisibilidadCeldaCancelarCuentaBanco);							
			this.jInternalFrameDetalleFormCuentaBanco.jButtonGuardarCambiosCuentaBanco.setVisible((this.isVisibilidadCeldaGuardarCuentaBanco && this.isPermisoGuardarCambiosCuentaBanco));			
			
			}
						
			this.jButtonGuardarCambiosTablaCuentaBanco.setVisible((this.isVisibilidadCeldaGuardarCambiosCuentaBanco && this.isPermisoGuardarCambiosCuentaBanco));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarCuentaBanco.setVisible((this.isVisibilidadCeldaNuevoCuentaBanco && this.isPermisoNuevoCuentaBanco));						
			this.jButtonDuplicarToolBarCuentaBanco.setVisible((this.isVisibilidadCeldaDuplicarCuentaBanco && this.isPermisoDuplicarCuentaBanco));						
			this.jButtonCopiarToolBarCuentaBanco.setVisible((this.isVisibilidadCeldaCopiarCuentaBanco && this.isPermisoCopiarCuentaBanco));			
			this.jButtonVerFormToolBarCuentaBanco.setVisible((this.isVisibilidadCeldaVerFormCuentaBanco && this.isPermisoVerFormCuentaBanco));			
			this.jButtonAbrirOrderByToolBarCuentaBanco.setVisible((this.isVisibilidadCeldaOrdenCuentaBanco && this.isPermisoOrdenCuentaBanco));
			this.jButtonNuevoRelacionesToolBarCuentaBanco.setVisible((this.isVisibilidadCeldaNuevoRelacionesCuentaBanco && this.isPermisoNuevoCuentaBanco));			
			this.jButtonNuevoGuardarCambiosToolBarCuentaBanco.setVisible((this.isVisibilidadCeldaNuevoCuentaBanco && this.isPermisoNuevoCuentaBanco && this.isPermisoGuardarCambiosCuentaBanco));			
			
			if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.jButtonModificarToolBarCuentaBanco.setVisible((this.isVisibilidadCeldaModificarCuentaBanco && this.isPermisoActualizarCuentaBanco));	
			this.jInternalFrameDetalleFormCuentaBanco.jButtonActualizarToolBarCuentaBanco.setVisible((this.isVisibilidadCeldaActualizarCuentaBanco  && this.isPermisoActualizarCuentaBanco));	
			this.jInternalFrameDetalleFormCuentaBanco.jButtonEliminarToolBarCuentaBanco.setVisible((this.isVisibilidadCeldaEliminarCuentaBanco && this.isPermisoEliminarCuentaBanco));
			this.jInternalFrameDetalleFormCuentaBanco.jButtonCancelarToolBarCuentaBanco.setVisible(this.isVisibilidadCeldaCancelarCuentaBanco);				
			this.jInternalFrameDetalleFormCuentaBanco.jButtonGuardarCambiosToolBarCuentaBanco.setVisible((this.isVisibilidadCeldaGuardarCuentaBanco && this.isPermisoGuardarCambiosCuentaBanco));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarCuentaBanco.setVisible((this.isVisibilidadCeldaGuardarCambiosCuentaBanco && this.isPermisoGuardarCambiosCuentaBanco));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoCuentaBanco.setVisible((this.isVisibilidadCeldaNuevoCuentaBanco && this.isPermisoNuevoCuentaBanco));			
			this.jMenuItemDuplicarCuentaBanco.setVisible((this.isVisibilidadCeldaDuplicarCuentaBanco && this.isPermisoDuplicarCuentaBanco));			
			this.jMenuItemCopiarCuentaBanco.setVisible((this.isVisibilidadCeldaCopiarCuentaBanco && this.isPermisoCopiarCuentaBanco));			
			this.jMenuItemVerFormCuentaBanco.setVisible((this.isVisibilidadCeldaVerFormCuentaBanco && this.isPermisoVerFormCuentaBanco));			
			this.jMenuItemAbrirOrderByCuentaBanco.setVisible((this.isVisibilidadCeldaOrdenCuentaBanco && this.isPermisoOrdenCuentaBanco));			
			//this.jMenuItemMostrarOcultarCuentaBanco.setVisible((this.isVisibilidadCeldaOrdenCuentaBanco && this.isPermisoOrdenCuentaBanco));
			this.jMenuItemDetalleAbrirOrderByCuentaBanco.setVisible((this.isVisibilidadCeldaOrdenCuentaBanco && this.isPermisoOrdenCuentaBanco));			
			//this.jMenuItemDetalleMostrarOcultarCuentaBanco.setVisible((this.isVisibilidadCeldaOrdenCuentaBanco && this.isPermisoOrdenCuentaBanco));			
			this.jMenuItemNuevoRelacionesCuentaBanco.setVisible((this.isVisibilidadCeldaNuevoRelacionesCuentaBanco && this.isPermisoNuevoCuentaBanco));			
			this.jMenuItemNuevoGuardarCambiosCuentaBanco.setVisible((this.isVisibilidadCeldaNuevoCuentaBanco && this.isPermisoNuevoCuentaBanco && this.isPermisoGuardarCambiosCuentaBanco));									
			
			if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.jMenuItemModificarCuentaBanco.setVisible((this.isVisibilidadCeldaModificarCuentaBanco && this.isPermisoActualizarCuentaBanco));	
			this.jInternalFrameDetalleFormCuentaBanco.jMenuItemActualizarCuentaBanco.setVisible((this.isVisibilidadCeldaActualizarCuentaBanco && this.isPermisoActualizarCuentaBanco));	
			this.jInternalFrameDetalleFormCuentaBanco.jMenuItemEliminarCuentaBanco.setVisible((this.isVisibilidadCeldaEliminarCuentaBanco && this.isPermisoEliminarCuentaBanco));
			this.jInternalFrameDetalleFormCuentaBanco.jMenuItemCancelarCuentaBanco.setVisible(this.isVisibilidadCeldaCancelarCuentaBanco);				
			}
			
			this.jMenuItemGuardarCambiosCuentaBanco.setVisible((this.isVisibilidadCeldaGuardarCuentaBanco && this.isPermisoGuardarCambiosCuentaBanco));						
			this.jMenuItemGuardarCambiosTablaCuentaBanco.setVisible((this.isVisibilidadCeldaGuardarCambiosCuentaBanco && this.isPermisoGuardarCambiosCuentaBanco));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoCuentaBanco=this.jButtonNuevoCuentaBanco.isVisible();
			this.isVisibilidadCeldaDuplicarCuentaBanco=this.jButtonDuplicarCuentaBanco.isVisible();
			this.isVisibilidadCeldaCopiarCuentaBanco=this.jButtonCopiarCuentaBanco.isVisible();
			this.isVisibilidadCeldaVerFormCuentaBanco=this.jButtonVerFormCuentaBanco.isVisible();
			
			this.isVisibilidadCeldaOrdenCuentaBanco=this.jButtonAbrirOrderByCuentaBanco.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=this.jButtonNuevoRelacionesCuentaBanco.isVisible();
			this.isVisibilidadCeldaModificarCuentaBanco=this.jButtonModificarCuentaBanco.isVisible();
			
			if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
			this.isVisibilidadCeldaActualizarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jButtonActualizarCuentaBanco.isVisible();
			this.isVisibilidadCeldaEliminarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jButtonEliminarCuentaBanco.isVisible();
			this.isVisibilidadCeldaCancelarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jButtonCancelarCuentaBanco.isVisible();
			this.isVisibilidadCeldaGuardarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jButtonGuardarCambiosCuentaBanco.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosCuentaBanco=this.jButtonGuardarCambiosTablaCuentaBanco.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoCuentaBanco=this.jButtonNuevoToolBarCuentaBanco.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=this.jButtonNuevoRelacionesToolBarCuentaBanco.isVisible();
			
			if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
			this.isVisibilidadCeldaModificarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jButtonModificarToolBarCuentaBanco.isVisible();
			this.isVisibilidadCeldaActualizarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jButtonActualizarToolBarCuentaBanco.isVisible();
			this.isVisibilidadCeldaEliminarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jButtonEliminarToolBarCuentaBanco.isVisible();
			this.isVisibilidadCeldaCancelarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jButtonCancelarToolBarCuentaBanco.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarCuentaBanco=this.jButtonGuardarCambiosToolBarCuentaBanco.isVisible();
			this.isVisibilidadCeldaGuardarCambiosCuentaBanco=this.jButtonGuardarCambiosTablaToolBarCuentaBanco.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoCuentaBanco=this.jMenuItemNuevoCuentaBanco.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=this.jMenuItemNuevoRelacionesCuentaBanco.isVisible();
			
			if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
			this.isVisibilidadCeldaModificarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jMenuItemModificarCuentaBanco.isVisible();
			this.isVisibilidadCeldaActualizarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jMenuItemActualizarCuentaBanco.isVisible();
			this.isVisibilidadCeldaEliminarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jMenuItemEliminarCuentaBanco.isVisible();
			this.isVisibilidadCeldaCancelarCuentaBanco=this.jInternalFrameDetalleFormCuentaBanco.jMenuItemCancelarCuentaBanco.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarCuentaBanco=this.jMenuItemGuardarCambiosCuentaBanco.isVisible();
			this.isVisibilidadCeldaGuardarCambiosCuentaBanco=this.jMenuItemGuardarCambiosTablaCuentaBanco.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesCuentaBanco(Boolean esInicializar) {
		if(CuentaBancoJInternalFrame.ISBINDING_MANUAL) {			
			if(this.cuentabancoSessionBean.getConGuardarRelaciones()) {
				//if(this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesCuentaBanco();
			}
			
			this.inicializarActualizarBindingBotonesManualCuentaBanco(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualCuentaBanco() {
		this.jButtonNuevoCuentaBanco.setVisible(this.isPermisoNuevoCuentaBanco);			
		this.jButtonDuplicarCuentaBanco.setVisible(this.isPermisoDuplicarCuentaBanco);			
		this.jButtonCopiarCuentaBanco.setVisible(this.isPermisoCopiarCuentaBanco);			
		this.jButtonVerFormCuentaBanco.setVisible(this.isPermisoVerFormCuentaBanco);			
		
		this.jButtonAbrirOrderByCuentaBanco.setVisible(this.isPermisoOrdenCuentaBanco);					
		
		this.jButtonNuevoRelacionesCuentaBanco.setVisible(this.isPermisoNuevoCuentaBanco);			
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.jButtonModificarCuentaBanco.setVisible(this.isPermisoActualizarCuentaBanco);	
			this.jInternalFrameDetalleFormCuentaBanco.jButtonActualizarCuentaBanco.setVisible(this.isPermisoActualizarCuentaBanco);	
			this.jInternalFrameDetalleFormCuentaBanco.jButtonEliminarCuentaBanco.setVisible(this.isPermisoEliminarCuentaBanco);
			this.jInternalFrameDetalleFormCuentaBanco.jButtonCancelarCuentaBanco.setVisible(this.isVisibilidadCeldaCancelarCuentaBanco);						
			this.jInternalFrameDetalleFormCuentaBanco.jButtonGuardarCambiosCuentaBanco.setVisible(this.isPermisoGuardarCambiosCuentaBanco);							
		}
		
		this.jButtonGuardarCambiosTablaCuentaBanco.setVisible(this.isPermisoActualizarCuentaBanco);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleCuentaBanco() {
		this.jInternalFrameDetalleFormCuentaBanco.jButtonModificarCuentaBanco.setVisible(this.isPermisoActualizarCuentaBanco);	
		this.jInternalFrameDetalleFormCuentaBanco.jButtonActualizarCuentaBanco.setVisible(this.isPermisoActualizarCuentaBanco);	
		this.jInternalFrameDetalleFormCuentaBanco.jButtonEliminarCuentaBanco.setVisible(this.isPermisoEliminarCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jButtonCancelarCuentaBanco.setVisible(this.isVisibilidadCeldaCancelarCuentaBanco);							
		this.jInternalFrameDetalleFormCuentaBanco.jButtonGuardarCambiosCuentaBanco.setVisible((this.isVisibilidadCeldaGuardarCuentaBanco && this.isPermisoGuardarCambiosCuentaBanco));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosCuentaBanco() {
		if(CuentaBancoJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualCuentaBanco();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesCuentaBanco() {
	}
	
	public void jTableDatosCuentaBancoListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarCuentaBanco(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.cuentabanco.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaCuentaBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebCuentaBanco(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.cuentabancoLogic.getConnexion());

				if(this.cuentabanco.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.cuentabanco.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderCuentaBanco.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.cuentabanco.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalCuentaBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebCuentaBanco(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.cuentabancoLogic.getConnexion());

				if(this.cuentabanco.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.cuentabanco.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderCuentaBanco.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.cuentabanco.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bancoCuentaBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobanco=true;

			idTienePermisobanco=this.tienePermisosUsuarioEnPaginaWebCuentaBanco(BancoConstantesFunciones.CLASSNAME);

			if(idTienePermisobanco) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.bancoBeanSwingJInternalFrame=new BancoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bancoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bancoBeanSwingJInternalFrame.getBancoLogic().setConnexion(this.cuentabancoLogic.getConnexion());

				if(this.cuentabanco.getid_banco()!=null) {
					this.bancoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bancoBeanSwingJInternalFrame.setIdActual(this.cuentabanco.getid_banco());
					this.bancoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bancoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bancoBeanSwingJInternalFrame.inicializarActualizarBindingTablaBanco();
				}

				JInternalFrameBase jinternalFrame =this.bancoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
				TitledBorder titledBorderbanco=(TitledBorder)this.bancoBeanSwingJInternalFrame.jScrollPanelDatosBanco.getBorder();

				titledBorderbanco.setTitle(titledBorderCuentaBanco.getTitle() + " -> Banco");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bancoCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getid_banco()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_banco = "+this.cuentabanco.getid_banco().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_cuenta_banco_globalCuentaBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipocuentabancoglobal=true;

			idTienePermisotipocuentabancoglobal=this.tienePermisosUsuarioEnPaginaWebCuentaBanco(TipoCuentaBancoGlobalConstantesFunciones.CLASSNAME);

			if(idTienePermisotipocuentabancoglobal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.tipocuentabancoglobalBeanSwingJInternalFrame=new TipoCuentaBancoGlobalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipocuentabancoglobalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipocuentabancoglobalBeanSwingJInternalFrame.getTipoCuentaBancoGlobalLogic().setConnexion(this.cuentabancoLogic.getConnexion());

				if(this.cuentabanco.getid_tipo_cuenta_banco_global()!=null) {
					this.tipocuentabancoglobalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipocuentabancoglobalBeanSwingJInternalFrame.setIdActual(this.cuentabanco.getid_tipo_cuenta_banco_global());
					this.tipocuentabancoglobalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipocuentabancoglobalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipocuentabancoglobalBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoCuentaBancoGlobal();
				}

				JInternalFrameBase jinternalFrame =this.tipocuentabancoglobalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
				TitledBorder titledBordertipocuentabancoglobal=(TitledBorder)this.tipocuentabancoglobalBeanSwingJInternalFrame.jScrollPanelDatosTipoCuentaBancoGlobal.getBorder();

				titledBordertipocuentabancoglobal.setTitle(titledBorderCuentaBanco.getTitle() + " -> Tipo Cuenta Banco Global");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_cuenta_banco_globalCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getid_tipo_cuenta_banco_global()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_cuenta_banco_global = "+this.cuentabanco.getid_tipo_cuenta_banco_global().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigoCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getcodigo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo like '%"+this.cuentabanco.getcodigo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_cuentaCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getnumero_cuenta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_cuenta like '%"+this.cuentabanco.getnumero_cuenta()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_chequeCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getnumero_cheque()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_cheque like '%"+this.cuentabanco.getnumero_cheque()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_cheque_auxiliarCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getnumero_cheque_auxiliar()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_cheque_auxiliar like '%"+this.cuentabanco.getnumero_cheque_auxiliar()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsaldoCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getsaldo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where saldo = "+this.cuentabanco.getsaldo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonprocedenciaCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getprocedencia()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where procedencia like '%"+this.cuentabanco.getprocedencia()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondestinoCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getdestino()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where destino like '%"+this.cuentabanco.getdestino()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contableCuentaBancoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableBeanSwingJInternalFrame.sTipoBusqueda="CuentaContable";

			if(!this.sFinalQueryGeneral_cuentacontable.equals("")) {
				this.cuentacontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontable);
				this.cuentacontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderCuentaBanco=null;
			TitledBorder titledBordercuentacontable=null;

			if(!this.jScrollPanelDatosCuentaBanco.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
				titledBordercuentacontable=(TitledBorder)this.cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontable.setTitle(titledBorderCuentaBanco.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contableCuentaBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontable=true;

			idTienePermisocuentacontable=this.tienePermisosUsuarioEnPaginaWebCuentaBanco(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.cuentabancoLogic.getConnexion());

				if(this.cuentabanco.getid_cuenta_contable()!=null) {
					this.cuentacontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableBeanSwingJInternalFrame.setIdActual(this.cuentabanco.getid_cuenta_contable());
					this.cuentacontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
				TitledBorder titledBordercuentacontable=(TitledBorder)this.cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontable.setTitle(titledBorderCuentaBanco.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contableCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getid_cuenta_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable = "+this.cuentabanco.getid_cuenta_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_bancoCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getes_banco()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_banco = "+this.cuentabanco.getes_banco().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_cuenta_bancoCuentaBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadocuentabanco=true;

			idTienePermisoestadocuentabanco=this.tienePermisosUsuarioEnPaginaWebCuentaBanco(EstadoCuentaBancoConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadocuentabanco) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.estadocuentabancoBeanSwingJInternalFrame=new EstadoCuentaBancoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadocuentabancoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadocuentabancoBeanSwingJInternalFrame.getEstadoCuentaBancoLogic().setConnexion(this.cuentabancoLogic.getConnexion());

				if(this.cuentabanco.getid_estado_cuenta_banco()!=null) {
					this.estadocuentabancoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadocuentabancoBeanSwingJInternalFrame.setIdActual(this.cuentabanco.getid_estado_cuenta_banco());
					this.estadocuentabancoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadocuentabancoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadocuentabancoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoCuentaBanco();
				}

				JInternalFrameBase jinternalFrame =this.estadocuentabancoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
				TitledBorder titledBorderestadocuentabanco=(TitledBorder)this.estadocuentabancoBeanSwingJInternalFrame.jScrollPanelDatosEstadoCuentaBanco.getBorder();

				titledBorderestadocuentabanco.setTitle(titledBorderCuentaBanco.getTitle() + " -> Estado Cuenta Banco");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_cuenta_bancoCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getid_estado_cuenta_banco()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_cuenta_banco = "+this.cuentabanco.getid_estado_cuenta_banco().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_ingresoCuentaBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatoingreso=true;

			idTienePermisoformatoingreso=this.tienePermisosUsuarioEnPaginaWebCuentaBanco(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatoingreso) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.formatoingresoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoingresoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoingresoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.cuentabancoLogic.getConnexion());

				if(this.cuentabanco.getid_formato_ingreso()!=null) {
					this.formatoingresoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoingresoBeanSwingJInternalFrame.setIdActual(this.cuentabanco.getid_formato_ingreso());
					this.formatoingresoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoingresoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoingresoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoingresoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
				TitledBorder titledBorderformatoingreso=(TitledBorder)this.formatoingresoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatoingreso.setTitle(titledBorderCuentaBanco.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_ingresoCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getid_formato_ingreso()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_ingreso = "+this.cuentabanco.getid_formato_ingreso().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_egresoCuentaBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatoegreso=true;

			idTienePermisoformatoegreso=this.tienePermisosUsuarioEnPaginaWebCuentaBanco(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatoegreso) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.formatoegresoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoegresoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoegresoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.cuentabancoLogic.getConnexion());

				if(this.cuentabanco.getid_formato_egreso()!=null) {
					this.formatoegresoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoegresoBeanSwingJInternalFrame.setIdActual(this.cuentabanco.getid_formato_egreso());
					this.formatoegresoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoegresoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoegresoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoegresoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
				TitledBorder titledBorderformatoegreso=(TitledBorder)this.formatoegresoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatoegreso.setTitle(titledBorderCuentaBanco.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_egresoCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getid_formato_egreso()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_egreso = "+this.cuentabanco.getid_formato_egreso().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_diarioCuentaBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatodiario=true;

			idTienePermisoformatodiario=this.tienePermisosUsuarioEnPaginaWebCuentaBanco(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatodiario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.formatodiarioBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatodiarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatodiarioBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.cuentabancoLogic.getConnexion());

				if(this.cuentabanco.getid_formato_diario()!=null) {
					this.formatodiarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatodiarioBeanSwingJInternalFrame.setIdActual(this.cuentabanco.getid_formato_diario());
					this.formatodiarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatodiarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatodiarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatodiarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
				TitledBorder titledBorderformatodiario=(TitledBorder)this.formatodiarioBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatodiario.setTitle(titledBorderCuentaBanco.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_diarioCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getid_formato_diario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_diario = "+this.cuentabanco.getid_formato_diario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_chequeCuentaBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatocheque=true;

			idTienePermisoformatocheque=this.tienePermisosUsuarioEnPaginaWebCuentaBanco(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatocheque) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.formatochequeBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatochequeBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatochequeBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.cuentabancoLogic.getConnexion());

				if(this.cuentabanco.getid_formato_cheque()!=null) {
					this.formatochequeBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatochequeBeanSwingJInternalFrame.setIdActual(this.cuentabanco.getid_formato_cheque());
					this.formatochequeBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatochequeBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatochequeBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatochequeBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
				TitledBorder titledBorderformatocheque=(TitledBorder)this.formatochequeBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatocheque.setTitle(titledBorderCuentaBanco.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_chequeCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getid_formato_cheque()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_cheque = "+this.cuentabanco.getid_formato_cheque().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_retencionCuentaBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatoretencion=true;

			idTienePermisoformatoretencion=this.tienePermisosUsuarioEnPaginaWebCuentaBanco(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatoretencion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.formatoretencionBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoretencionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoretencionBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.cuentabancoLogic.getConnexion());

				if(this.cuentabanco.getid_formato_retencion()!=null) {
					this.formatoretencionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoretencionBeanSwingJInternalFrame.setIdActual(this.cuentabanco.getid_formato_retencion());
					this.formatoretencionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoretencionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoretencionBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoretencionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
				TitledBorder titledBorderformatoretencion=(TitledBorder)this.formatoretencionBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatoretencion.setTitle(titledBorderCuentaBanco.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_retencionCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getid_formato_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_retencion = "+this.cuentabanco.getid_formato_retencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formato_retencion_ivaCuentaBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformatoretencioniva=true;

			idTienePermisoformatoretencioniva=this.tienePermisosUsuarioEnPaginaWebCuentaBanco(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformatoretencioniva) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCuentaBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCuentaBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);

				this.formatoretencionivaBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoretencionivaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoretencionivaBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.cuentabancoLogic.getConnexion());

				if(this.cuentabanco.getid_formato_retencion_iva()!=null) {
					this.formatoretencionivaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoretencionivaBeanSwingJInternalFrame.setIdActual(this.cuentabanco.getid_formato_retencion_iva());
					this.formatoretencionivaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoretencionivaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoretencionivaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoretencionivaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCuentaBanco=(TitledBorder)this.jScrollPanelDatosCuentaBanco.getBorder();
				TitledBorder titledBorderformatoretencioniva=(TitledBorder)this.formatoretencionivaBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformatoretencioniva.setTitle(titledBorderCuentaBanco.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formato_retencion_ivaCuentaBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.getcuentabanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.cuentabanco==null) {
						this.cuentabanco = new CuentaBanco();
					}

					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);
				}

				if(this.cuentabanco.getid_formato_retencion_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato_retencion_iva = "+this.cuentabanco.getid_formato_retencion_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCuentaBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonBusquedaPorCodigoCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosBusquedaPorCodigo();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorNumeroChequeCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosBusquedaPorNumeroCheque();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorNumeroCuentaCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosBusquedaPorNumeroCuenta();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonBusquedaPorProcedenciaCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosBusquedaPorProcedencia();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdBancoCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosFK_IdBanco();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosFK_IdCuentaContable();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosFK_IdEmpresa();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoCuentaBancoCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosFK_IdEstadoCuentaBanco();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoChequeCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosFK_IdFormatoCheque();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoDiarioCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosFK_IdFormatoDiario();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoEgresoCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosFK_IdFormatoEgreso();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoIngresoCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosFK_IdFormatoIngreso();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoRetencionCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosFK_IdFormatoRetencion();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoRetencionIvaCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosFK_IdFormatoRetencionIva();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosFK_IdSucursal();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoCuentaBancoGlobalCuentaBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCuentaBanco(false,false);

			this.getCuentaBancosFK_IdTipoCuentaBancoGlobal();

			this.inicializarActualizarBindingCuentaBanco(false);

			//if(CuentaBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCuentaBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cuentabancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameCuentaBanco() {
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
		

		if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
			this.jInternalFrameDetalleFormCuentaBanco.setVisible(false);	    			
			this.jInternalFrameDetalleFormCuentaBanco.dispose();
			this.jInternalFrameDetalleFormCuentaBanco=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoCuentaBanco!=null) {
			this.jInternalFrameReporteDinamicoCuentaBanco.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoCuentaBanco.dispose();
			this.jInternalFrameReporteDinamicoCuentaBanco=null;
		}
		
		if(this.jInternalFrameImportacionCuentaBanco!=null) {
			this.jInternalFrameImportacionCuentaBanco.setVisible(false);	    			
			this.jInternalFrameImportacionCuentaBanco.dispose();
			this.jInternalFrameImportacionCuentaBanco=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessCuentaBanco();
			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			
			
			if(sTipo.equals("NuevoCuentaBanco")) {
				jButtonNuevoCuentaBancoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarCuentaBanco")) {
				jButtonDuplicarCuentaBancoActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarCuentaBanco")) {
				jButtonCopiarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("VerFormCuentaBanco")) {
				jButtonVerFormCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarCuentaBanco")) {
				jButtonNuevoCuentaBancoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarCuentaBanco")) {
				jButtonDuplicarCuentaBancoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoCuentaBanco")) {
				jButtonNuevoCuentaBancoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarCuentaBanco")) {
				jButtonDuplicarCuentaBancoActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesCuentaBanco")) {
				jButtonNuevoCuentaBancoActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarCuentaBanco")) {
				jButtonNuevoCuentaBancoActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesCuentaBanco")) {
				jButtonNuevoCuentaBancoActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarCuentaBanco")) {
				jButtonModificarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarCuentaBanco")) {
				jButtonModificarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarCuentaBanco")) {
				jButtonModificarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarCuentaBanco")) {
				jButtonActualizarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarCuentaBanco")) {
				jButtonActualizarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarCuentaBanco")) {
				jButtonActualizarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("EliminarCuentaBanco")) {
				jButtonEliminarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarCuentaBanco")) {
				jButtonEliminarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarCuentaBanco")) {
				jButtonEliminarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("CancelarCuentaBanco")) {
				jButtonCancelarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarCuentaBanco")) {
				jButtonCancelarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarCuentaBanco")) {
				jButtonCancelarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("CerrarCuentaBanco")) {
				jButtonCerrarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarCuentaBanco")) {
				jButtonCerrarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarCuentaBanco")) {
				jButtonCerrarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarCuentaBanco")) {
				jButtonMostrarOcultarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarCuentaBanco")) {
				jButtonCancelarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosCuentaBanco")) {
				jButtonGuardarCambiosCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarCuentaBanco")) {
				jButtonGuardarCambiosCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarCuentaBanco")) {
				jButtonCopiarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarCuentaBanco")) {
				jButtonVerFormCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosCuentaBanco")) {
				jButtonGuardarCambiosCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarCuentaBanco")) {
				jButtonCopiarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormCuentaBanco")) {
				jButtonVerFormCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaCuentaBanco")) {
				jButtonGuardarCambiosCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarCuentaBanco")) {
				jButtonGuardarCambiosCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaCuentaBanco")) {
				jButtonGuardarCambiosCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionCuentaBanco")) {
				jButtonRecargarInformacionCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarCuentaBanco")) {
				jButtonRecargarInformacionCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionCuentaBanco")) {
				jButtonRecargarInformacionCuentaBancoActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresCuentaBanco")) {
				jButtonAnterioresCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarCuentaBanco")) {
				jButtonAnterioresCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreCuentaBanco")) {
				jButtonAnterioresCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesCuentaBanco")) {
				jButtonSiguientesCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarCuentaBanco")) {
				jButtonSiguientesCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesCuentaBanco")) {
				jButtonSiguientesCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByCuentaBanco") || sTipo.equals("MenuItemDetalleAbrirOrderByCuentaBanco")) {
				jButtonAbrirOrderByCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarCuentaBanco") || sTipo.equals("MenuItemDetalleMostrarOcultarCuentaBanco")) {
				jButtonMostrarOcultarCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosCuentaBanco")) {
				jButtonNuevoGuardarCambiosCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarCuentaBanco")) {
				jButtonNuevoGuardarCambiosCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosCuentaBanco")) {
				jButtonNuevoGuardarCambiosCuentaBancoActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoCuentaBanco")) {
				jButtonCerrarReporteDinamicoCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoCuentaBanco")) {
				jButtonGenerarReporteDinamicoCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoCuentaBanco")) {
				
				jButtonGenerarExcelReporteDinamicoCuentaBancoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionCuentaBanco")) {
				jButtonCerrarImportacionCuentaBancoActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionCuentaBanco")) {
				
				jButtonGenerarImportacionCuentaBancoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionCuentaBanco")) {
				
				jButtonAbrirImportacionCuentaBancoActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesCuentaBanco")) {
				jComboBoxTiposAccionesCuentaBancoActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesCuentaBanco")) {
				jComboBoxTiposRelacionesCuentaBancoActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioCuentaBanco")) {
				jComboBoxTiposAccionesCuentaBancoActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarCuentaBanco")) {
				
				jComboBoxTiposSeleccionarCuentaBancoActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralCuentaBanco")) {
				jTextFieldValorCampoGeneralCuentaBancoActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByCuentaBanco")) {
				jButtonAbrirOrderByCuentaBancoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarCuentaBanco")) {
				jButtonAbrirOrderByCuentaBancoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByCuentaBanco")) {
				jButtonCerrarOrderByCuentaBancoActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idCuentaBancoBusqueda")) {
				this.jButtonidCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaCuentaBancoUpdate")) {
				this.jButtonid_empresaCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaCuentaBancoBusqueda")) {
				this.jButtonid_empresaCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalCuentaBancoUpdate")) {
				this.jButtonid_sucursalCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalCuentaBancoBusqueda")) {
				this.jButtonid_sucursalCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bancoCuentaBancoUpdate")) {
				this.jButtonid_bancoCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bancoCuentaBancoBusqueda")) {
				this.jButtonid_bancoCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cuenta_banco_globalCuentaBancoUpdate")) {
				this.jButtonid_tipo_cuenta_banco_globalCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cuenta_banco_globalCuentaBancoBusqueda")) {
				this.jButtonid_tipo_cuenta_banco_globalCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoCuentaBancoBusqueda")) {
				this.jButtoncodigoCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_cuentaCuentaBancoBusqueda")) {
				this.jButtonnumero_cuentaCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_chequeCuentaBancoBusqueda")) {
				this.jButtonnumero_chequeCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_cheque_auxiliarCuentaBancoBusqueda")) {
				this.jButtonnumero_cheque_auxiliarCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("saldoCuentaBancoBusqueda")) {
				this.jButtonsaldoCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("procedenciaCuentaBancoBusqueda")) {
				this.jButtonprocedenciaCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("destinoCuentaBancoBusqueda")) {
				this.jButtondestinoCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaBanco")) {
				this.jButtonid_cuenta_contableCuentaBancoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaBancoArbol")) {
				this.abrirFrameTreeCuentaContable("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaBancoUpdate")) {
				this.jButtonid_cuenta_contableCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaBancoBusqueda")) {
				this.jButtonid_cuenta_contableCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_bancoCuentaBancoBusqueda")) {
				this.jButtones_bancoCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_cuenta_bancoCuentaBancoUpdate")) {
				this.jButtonid_estado_cuenta_bancoCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_cuenta_bancoCuentaBancoBusqueda")) {
				this.jButtonid_estado_cuenta_bancoCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_ingresoCuentaBancoUpdate")) {
				this.jButtonid_formato_ingresoCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_ingresoCuentaBancoBusqueda")) {
				this.jButtonid_formato_ingresoCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_egresoCuentaBancoUpdate")) {
				this.jButtonid_formato_egresoCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_egresoCuentaBancoBusqueda")) {
				this.jButtonid_formato_egresoCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_diarioCuentaBancoUpdate")) {
				this.jButtonid_formato_diarioCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_diarioCuentaBancoBusqueda")) {
				this.jButtonid_formato_diarioCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_chequeCuentaBancoUpdate")) {
				this.jButtonid_formato_chequeCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_chequeCuentaBancoBusqueda")) {
				this.jButtonid_formato_chequeCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_retencionCuentaBancoUpdate")) {
				this.jButtonid_formato_retencionCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_retencionCuentaBancoBusqueda")) {
				this.jButtonid_formato_retencionCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_retencion_ivaCuentaBancoUpdate")) {
				this.jButtonid_formato_retencion_ivaCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_retencion_ivaCuentaBancoBusqueda")) {
				this.jButtonid_formato_retencion_ivaCuentaBancoBusquedaActionPerformed(evt);
			}
			
			
			
			
			else if(sTipo.equals("BusquedaPorCodigoCuentaBanco")) {
				this.jButtonBusquedaPorCodigoCuentaBancoActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorNumeroChequeCuentaBanco")) {
				this.jButtonBusquedaPorNumeroChequeCuentaBancoActionPerformed(evt);
			}
			else if(sTipo.equals("BusquedaPorNumeroCuentaCuentaBanco")) {
				this.jButtonBusquedaPorNumeroCuentaCuentaBancoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdBancoCuentaBanco")) {
				this.jButtonFK_IdBancoCuentaBancoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoCuentaBancoCuentaBanco")) {
				this.jButtonFK_IdEstadoCuentaBancoCuentaBancoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoCuentaBancoGlobalCuentaBanco")) {
				this.jButtonFK_IdTipoCuentaBancoGlobalCuentaBancoActionPerformed(evt);
			}
			
			;
			
			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessCuentaBanco();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaBancoActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				


				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			CuentaBanco cuentabancoLocal=null;
			
			if(!this.getEsControlTabla()) {
				cuentabancoLocal=this.cuentabanco;
			} else {
				cuentabancoLocal=this.cuentabancoAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
							
				
				


				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaBancoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoAnterior =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentabancoAnterior =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaBancoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
								
						
				


				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaBanco.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
								
				
				


				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaBancoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoAnterior =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentabancoAnterior =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaBancoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoAnterior =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentabancoAnterior =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaBancoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
			
			this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
							
				
				


				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaBanco.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaBancoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabancoAnterior =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.cuentabancoAnterior =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaBancoActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
			
			this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
								
				
				


				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaBancoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoAnterior =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentabancoAnterior =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaBancoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
			
			this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaBancoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosCuentaBanco")) {
					jCheckBoxSeleccionarTodosCuentaBancoItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosCuentaBanco")) {
					jCheckBoxSeleccionadosCuentaBancoItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarCuentaBanco")) {
					
				}
				
				


				
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
												
				
				


				
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaBancoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cuentabancoAnterior =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.cuentabancoAnterior =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaBancoActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCuentaBancoActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaBanco.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaBanco.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.cuentabanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.cuentabanco);
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(CuentaBanco.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",CuentaBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCuentaBancoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cuentabancoAnterior =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cuentabancoAnterior =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarCuentaBanco")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosCuentaBancoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosCuentaBanco.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.cuentabanco =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.cuentabanco =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.cuentabanco);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarCuentaBanco")) {
				
				}
				
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarCuentaBanco")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosCuentaBanco.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarCuentaBanco")) {
			
			}
			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessCuentaBanco();
			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			
			if(sTipo.equals("NuevoCuentaBanco")) {
				jButtonNuevoCuentaBancoActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarCuentaBanco")) {
				jButtonDuplicarCuentaBancoActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarCuentaBanco")) {
				jButtonCopiarCuentaBancoActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormCuentaBanco")) {
				jButtonVerFormCuentaBancoActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesCuentaBanco")) {
				jButtonNuevoCuentaBancoActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarCuentaBanco")) {
				jButtonModificarCuentaBancoActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarCuentaBanco")) {
				jButtonActualizarCuentaBancoActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarCuentaBanco")) {
				jButtonEliminarCuentaBancoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaCuentaBanco")) {
				jButtonGuardarCambiosCuentaBancoActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarCuentaBanco")) {
				jButtonCancelarCuentaBancoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarCuentaBanco")) {
				jButtonCerrarCuentaBancoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosCuentaBanco")) {
				jButtonGuardarCambiosCuentaBancoActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosCuentaBanco")) {
				jButtonNuevoGuardarCambiosCuentaBancoActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByCuentaBanco")) {
				jButtonAbrirOrderByCuentaBancoActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionCuentaBanco")) {
				jButtonRecargarInformacionCuentaBancoActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresCuentaBanco")) {
				jButtonAnterioresCuentaBancoActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesCuentaBanco")) {
				jButtonSiguientesCuentaBancoActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idCuentaBancoBusqueda")) {
				this.jButtonidCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaCuentaBancoUpdate")) {
				this.jButtonid_empresaCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaCuentaBancoBusqueda")) {
				this.jButtonid_empresaCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalCuentaBancoUpdate")) {
				this.jButtonid_sucursalCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalCuentaBancoBusqueda")) {
				this.jButtonid_sucursalCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bancoCuentaBancoUpdate")) {
				this.jButtonid_bancoCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bancoCuentaBancoBusqueda")) {
				this.jButtonid_bancoCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_cuenta_banco_globalCuentaBancoUpdate")) {
				this.jButtonid_tipo_cuenta_banco_globalCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_cuenta_banco_globalCuentaBancoBusqueda")) {
				this.jButtonid_tipo_cuenta_banco_globalCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoCuentaBancoBusqueda")) {
				this.jButtoncodigoCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_cuentaCuentaBancoBusqueda")) {
				this.jButtonnumero_cuentaCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_chequeCuentaBancoBusqueda")) {
				this.jButtonnumero_chequeCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_cheque_auxiliarCuentaBancoBusqueda")) {
				this.jButtonnumero_cheque_auxiliarCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("saldoCuentaBancoBusqueda")) {
				this.jButtonsaldoCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("procedenciaCuentaBancoBusqueda")) {
				this.jButtonprocedenciaCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("destinoCuentaBancoBusqueda")) {
				this.jButtondestinoCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaBanco")) {
				this.jButtonid_cuenta_contableCuentaBancoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaBancoArbol")) {
				this.abrirFrameTreeCuentaContable("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaBancoUpdate")) {
				this.jButtonid_cuenta_contableCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contableCuentaBancoBusqueda")) {
				this.jButtonid_cuenta_contableCuentaBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_bancoCuentaBancoBusqueda")) {
				this.jButtones_bancoCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_cuenta_bancoCuentaBancoUpdate")) {
				this.jButtonid_estado_cuenta_bancoCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_cuenta_bancoCuentaBancoBusqueda")) {
				this.jButtonid_estado_cuenta_bancoCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_ingresoCuentaBancoUpdate")) {
				this.jButtonid_formato_ingresoCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_ingresoCuentaBancoBusqueda")) {
				this.jButtonid_formato_ingresoCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_egresoCuentaBancoUpdate")) {
				this.jButtonid_formato_egresoCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_egresoCuentaBancoBusqueda")) {
				this.jButtonid_formato_egresoCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_diarioCuentaBancoUpdate")) {
				this.jButtonid_formato_diarioCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_diarioCuentaBancoBusqueda")) {
				this.jButtonid_formato_diarioCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_chequeCuentaBancoUpdate")) {
				this.jButtonid_formato_chequeCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_chequeCuentaBancoBusqueda")) {
				this.jButtonid_formato_chequeCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_retencionCuentaBancoUpdate")) {
				this.jButtonid_formato_retencionCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_retencionCuentaBancoBusqueda")) {
				this.jButtonid_formato_retencionCuentaBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formato_retencion_ivaCuentaBancoUpdate")) {
				this.jButtonid_formato_retencion_ivaCuentaBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formato_retencion_ivaCuentaBancoBusqueda")) {
				this.jButtonid_formato_retencion_ivaCuentaBancoBusquedaActionPerformed(evt);
			}
			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessCuentaBanco();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameCuentaBanco")) {
				closingInternalFrameCuentaBanco();
				
			} else if(sTipo.equals("jButtonCancelarCuentaBanco")) {
				JInternalFrameBase jInternalFrameDetalleFormCuentaBanco = (JInternalFrameBase)evt.getSource();
	            	
	            CuentaBancoBeanSwingJInternalFrame jInternalFrameParent=(CuentaBancoBeanSwingJInternalFrame)jInternalFrameDetalleFormCuentaBanco.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarCuentaBancoActionPerformed(null);
			}
			
			CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.cuentabanco,new Object(),this.cuentabancoParameterGeneral,this.cuentabancoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormCuentaBanco(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormCuentaBanco(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormCuentaBanco(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.cuentabanco)) {
			if(!esControlTabla) {
				if(CuentaBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);			
				}
				
				if(this.cuentabancoSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualCuentaBanco(this.cuentabanco,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.cuentabancoReturnGeneral=cuentabancoLogic.procesarEventosCuentaBancosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cuentabancoLogic.getCuentaBancos(),this.cuentabanco,this.cuentabancoParameterGeneral,this.isEsNuevoCuentaBanco,classes);//this.cuentabancoLogic.getCuentaBanco()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanCuentaBanco(this.cuentabancoReturnGeneral,this.cuentabancoBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.cuentabancoSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanCuentaBanco(classes,this.cuentabancoReturnGeneral,this.cuentabancoBean,false);
					}
						
					if(this.cuentabancoReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyCuentaBanco(this.cuentabancoReturnGeneral.getCuentaBanco());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioCuentaBanco(this.cuentabancoReturnGeneral.getCuentaBanco());	
					}
						
					if(this.cuentabancoReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioCuentaBanco(this.cuentabancoReturnGeneral.getCuentaBanco(),classes);//this.cuentabancoBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioCuentaBanco(this.cuentabanco,classes);//this.cuentabancoBean);									
				}
			
				if(CuentaBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualCuentaBanco(this.cuentabanco,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysCuentaBanco(this.cuentabanco);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.cuentabancoAnterior!=null) {
						this.cuentabanco=this.cuentabancoAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.cuentabancoReturnGeneral=cuentabancoLogic.procesarEventosCuentaBancosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cuentabancoLogic.getCuentaBancos(),this.cuentabanco,this.cuentabancoParameterGeneral,this.isEsNuevoCuentaBanco,classes);//this.cuentabancoLogic.getCuentaBanco()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.cuentabancoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.cuentabancoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.cuentabancoReturnGeneral.getCuentaBanco(),cuentabancoLogic.getCuentaBancos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.cuentabancoReturnGeneral.getCuentaBanco(),this.cuentabancos);
				}
				//ARCHITECTURE
				
				//this.jTableDatosCuentaBanco.repaint();
				
				//((AbstractTableModel) this.jTableDatosCuentaBanco.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosCuentaBanco();
			}
		}
	}
	
	public void actualizarVisualTableDatosCuentaBanco() throws Exception {
		
		CuentaBancoModel cuentabancoModel=(CuentaBancoModel)this.jTableDatosCuentaBanco.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			cuentabancoModel.cuentabancos=this.cuentabancoLogic.getCuentaBancos();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			cuentabancoModel.cuentabancos=this.cuentabancos;
		}
		
		
		((CuentaBancoModel) this.jTableDatosCuentaBanco.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaCuentaBanco() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getcuentabancoAnterior(),this.cuentabancoLogic.getCuentaBancos());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getcuentabancoAnterior(),this.cuentabancos);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosCuentaBanco();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioCuentaBanco(CuentaBanco cuentabanco,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(PagoAuto.class)) {
					this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.setPagoAutos(cuentabanco.getPagoAutos());
					this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPagoAuto(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(AutoriPagoOrdenCompra.class)) {
					this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.setAutoriPagoOrdenCompras(cuentabanco.getAutoriPagoOrdenCompras());
					this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.inicializarActualizarBindingTablaAutoriPagoOrdenCompra(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleChequeGirado.class)) {
					this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.setDetalleChequeGirados(cuentabanco.getDetalleChequeGirados());
					this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleChequeGirado(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(AutoriPago.class)) {
					this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.setAutoriPagos(cuentabanco.getAutoriPagos());
					this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.inicializarActualizarBindingTablaAutoriPago(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cuentabanco,new Object(),generalEntityParameterGeneral,this.cuentabancoReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.cuentabancoSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=CuentaBancoConstantesFunciones.getClassesRelationshipsOfCuentaBanco(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=CuentaBancoConstantesFunciones.getClassesRelationshipsFromStringsOfCuentaBanco(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormCuentaBanco(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				CuentaBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cuentabanco,new Object(),generalEntityParameterGeneral,this.cuentabancoReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioCuentaBanco(CuentaBancoBean cuentabancoBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(PagoAuto.class)) {
					this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.setPagoAutos(cuentabanco.getPagoAutos());
					this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPagoAuto(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(AutoriPagoOrdenCompra.class)) {
					this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.setAutoriPagoOrdenCompras(cuentabanco.getAutoriPagoOrdenCompras());
					this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.inicializarActualizarBindingTablaAutoriPagoOrdenCompra(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleChequeGirado.class)) {
					this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.setDetalleChequeGirados(cuentabanco.getDetalleChequeGirados());
					this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleChequeGirado(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(AutoriPago.class)) {
					this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.setAutoriPagos(cuentabanco.getAutoriPagos());
					this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.inicializarActualizarBindingTablaAutoriPago(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanCuentaBanco(ArrayList<Classe> classes,CuentaBancoReturnGeneral cuentabancoReturnGeneral,CuentaBancoBean cuentabancoBean,Boolean conDefault) throws Exception {
		
			this.cuentabancoBean.setPagoAutos(cuentabancoReturnGeneral.getCuentaBanco().getPagoAutos());
			this.cuentabancoBean.setAutoriPagoOrdenCompras(cuentabancoReturnGeneral.getCuentaBanco().getAutoriPagoOrdenCompras());
			this.cuentabancoBean.setDetalleChequeGirados(cuentabancoReturnGeneral.getCuentaBanco().getDetalleChequeGirados());
			this.cuentabancoBean.setAutoriPagos(cuentabancoReturnGeneral.getCuentaBanco().getAutoriPagos());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualCuentaBanco(CuentaBanco cuentabanco,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(PagoAuto.class)) {
					cuentabanco.setPagoAutos(this.jInternalFrameDetalleFormCuentaBanco.pagoautoBeanSwingJInternalFrame.pagoautoLogic.getPagoAutos());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(AutoriPagoOrdenCompra.class)) {
					cuentabanco.setAutoriPagoOrdenCompras(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraBeanSwingJInternalFrame.autoripagoordencompraLogic.getAutoriPagoOrdenCompras());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleChequeGirado.class)) {
					cuentabanco.setDetalleChequeGirados(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoBeanSwingJInternalFrame.detallechequegiradoLogic.getDetalleChequeGirados());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(AutoriPago.class)) {
					cuentabanco.setAutoriPagos(this.jInternalFrameDetalleFormCuentaBanco.autoripagoBeanSwingJInternalFrame.autoripagoLogic.getAutoriPagos());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.cuentabanco)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormCuentaBanco = new CuentaBancoDetalleFormJInternalFrame(jDesktopPane,this.cuentabancoSessionBean.getConGuardarRelaciones(),this.cuentabancoSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.setVisible(false);
		this.jInternalFrameDetalleFormCuentaBanco.setSelected(false);						
		
		this.jInternalFrameDetalleFormCuentaBanco.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormCuentaBanco.cuentabancoLogic=this.cuentabancoLogic;
		
		this.cargarCombosFrameForeignKeyCuentaBanco("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleCuentaBanco();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleCuentaBanco();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyCuentaBanco("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyCuentaBanco();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormCuentaBanco.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarCuentaBanco"));
		
		this.jInternalFrameDetalleFormCuentaBanco.jButtonModificarCuentaBanco.addActionListener(new ButtonActionListener(this,"ModificarCuentaBanco"));

		
		this.jInternalFrameDetalleFormCuentaBanco.jButtonModificarToolBarCuentaBanco.addActionListener(new ButtonActionListener(this,"ModificarToolBarCuentaBanco"));
					
		this.jInternalFrameDetalleFormCuentaBanco.jMenuItemModificarCuentaBanco.addActionListener(new ButtonActionListener(this,"MenuItemModificarCuentaBanco"));		
		
		
		
		this.jInternalFrameDetalleFormCuentaBanco.jButtonActualizarCuentaBanco.addActionListener (new ButtonActionListener(this,"ActualizarCuentaBanco"));
		
		
		this.jInternalFrameDetalleFormCuentaBanco.jButtonActualizarToolBarCuentaBanco.addActionListener(new ButtonActionListener(this,"ActualizarToolBarCuentaBanco"));
						
		this.jInternalFrameDetalleFormCuentaBanco.jMenuItemActualizarCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemActualizarCuentaBanco"));		
		
		
		
		this.jInternalFrameDetalleFormCuentaBanco.jButtonEliminarCuentaBanco.addActionListener (new ButtonActionListener(this,"EliminarCuentaBanco"));
		
		
		this.jInternalFrameDetalleFormCuentaBanco.jButtonEliminarToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"EliminarToolBarCuentaBanco"));
								
		this.jInternalFrameDetalleFormCuentaBanco.jMenuItemEliminarCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemEliminarCuentaBanco"));		
		
		
		
		this.jInternalFrameDetalleFormCuentaBanco.jButtonCancelarCuentaBanco.addActionListener (new ButtonActionListener(this,"CancelarCuentaBanco"));
		
		
		this.jInternalFrameDetalleFormCuentaBanco.jButtonCancelarToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"CancelarToolBarCuentaBanco"));
					
		this.jInternalFrameDetalleFormCuentaBanco.jMenuItemCancelarCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemCancelarCuentaBanco"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormCuentaBanco.jMenuItemDetalleCerrarCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarCuentaBanco"));		
		
		
		
		this.jInternalFrameDetalleFormCuentaBanco.jButtonGuardarCambiosToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarCuentaBanco"));
		
		
		
		this.jInternalFrameDetalleFormCuentaBanco.jButtonGuardarCambiosToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarCuentaBanco"));
		
		
		
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioCuentaBanco"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonidCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"idCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_empresaCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_empresaCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_sucursalCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_sucursalCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_bancoCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_bancoCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_bancoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_tipo_cuenta_banco_globalCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_tipo_cuenta_banco_globalCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtoncodigoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"codigoCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonnumero_cuentaCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cuentaCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonnumero_chequeCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_chequeCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonnumero_cheque_auxiliarCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cheque_auxiliarCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonsaldoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"saldoCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonprocedenciaCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"procedenciaCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtondestinoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"destinoCuentaBancoBusqueda"));
		//jButtonid_cuenta_contableCuentaBanco.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contableCuentaBancoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBanco.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaBanco"));
		//jButtonid_cuenta_contableCuentaBancoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContable("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBancoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaBancoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtones_bancoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"es_bancoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_estado_cuenta_bancoCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_estado_cuenta_bancoCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_estado_cuenta_bancoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_cuenta_bancoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_ingresoCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_ingresoCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_ingresoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_ingresoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_egresoCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_egresoCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_egresoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_egresoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_diarioCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_diarioCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_diarioCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_diarioCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_chequeCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_chequeCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_chequeCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_chequeCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_retencionCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_retencionCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_retencionCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_retencionCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_retencion_ivaCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_retencion_ivaCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_retencion_ivaCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_retencion_ivaCuentaBancoBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormCuentaBanco.jTabbedPaneRelacionesCuentaBanco.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesCuentaBanco"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameCuentaBanco"));
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarCuentaBanco"));
		}
		
		this.jTableDatosCuentaBanco.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarCuentaBanco"));
		
		this.jTableDatosCuentaBanco.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarCuentaBanco"));
		
		this.jButtonNuevoCuentaBanco.addActionListener(new ButtonActionListener(this,"NuevoCuentaBanco"));
		
		this.jButtonDuplicarCuentaBanco.addActionListener(new ButtonActionListener(this,"DuplicarCuentaBanco"));
		
		this.jButtonCopiarCuentaBanco.addActionListener(new ButtonActionListener(this,"CopiarCuentaBanco"));
		
		this.jButtonVerFormCuentaBanco.addActionListener(new ButtonActionListener(this,"VerFormCuentaBanco"));
		
		
		this.jButtonNuevoToolBarCuentaBanco.addActionListener(new ButtonActionListener(this,"NuevoToolBarCuentaBanco"));
			
		this.jButtonDuplicarToolBarCuentaBanco.addActionListener(new ButtonActionListener(this,"DuplicarToolBarCuentaBanco"));
			
		this.jMenuItemNuevoCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemNuevoCuentaBanco"));
			
		this.jMenuItemDuplicarCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarCuentaBanco"));		
		
		
		this.jButtonNuevoRelacionesCuentaBanco.addActionListener (new ButtonActionListener(this,"NuevoRelacionesCuentaBanco"));
		
		
		this.jButtonNuevoRelacionesToolBarCuentaBanco.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarCuentaBanco"));
			
		this.jMenuItemNuevoRelacionesCuentaBanco.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesCuentaBanco"));		
		
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.jButtonModificarCuentaBanco.addActionListener(new ButtonActionListener(this,"ModificarCuentaBanco"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.jButtonModificarToolBarCuentaBanco.addActionListener(new ButtonActionListener(this,"ModificarToolBarCuentaBanco"));
			
			this.jInternalFrameDetalleFormCuentaBanco.jMenuItemModificarCuentaBanco.addActionListener(new ButtonActionListener(this,"MenuItemModificarCuentaBanco"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormCuentaBanco.jButtonActualizarCuentaBanco.addActionListener (new ButtonActionListener(this,"ActualizarCuentaBanco"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.jButtonActualizarToolBarCuentaBanco.addActionListener(new ButtonActionListener(this,"ActualizarToolBarCuentaBanco"));
				
			this.jInternalFrameDetalleFormCuentaBanco.jMenuItemActualizarCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemActualizarCuentaBanco"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.jButtonEliminarCuentaBanco.addActionListener (new ButtonActionListener(this,"EliminarCuentaBanco"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.jButtonEliminarToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"EliminarToolBarCuentaBanco"));
						
			this.jInternalFrameDetalleFormCuentaBanco.jMenuItemEliminarCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemEliminarCuentaBanco"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.jButtonCancelarCuentaBanco.addActionListener (new ButtonActionListener(this,"CancelarCuentaBanco"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.jButtonCancelarToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"CancelarToolBarCuentaBanco"));
			
			this.jInternalFrameDetalleFormCuentaBanco.jMenuItemCancelarCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemCancelarCuentaBanco"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarCuentaBanco"));		
		
		
		this.jButtonCerrarCuentaBanco.addActionListener (new ButtonActionListener(this,"CerrarCuentaBanco"));
		
		
		this.jButtonCerrarToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"CerrarToolBarCuentaBanco"));
			
		this.jMenuItemCerrarCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemCerrarCuentaBanco"));
			
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.jMenuItemDetalleCerrarCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarCuentaBanco"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.jButtonGuardarCambiosCuentaBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosCuentaBanco"));
		}
		
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.jButtonGuardarCambiosToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarCuentaBanco"));
		}
		
		this.jButtonCopiarToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"CopiarToolBarCuentaBanco"));
			
		this.jButtonVerFormToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"VerFormToolBarCuentaBanco"));
		
		this.jMenuItemGuardarCambiosCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosCuentaBanco"));
			
		this.jMenuItemCopiarCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemCopiarCuentaBanco"));		
		
		this.jMenuItemVerFormCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemVerFormCuentaBanco"));		
		
		
		this.jButtonGuardarCambiosTablaCuentaBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaCuentaBanco"));
		
		
		this.jButtonGuardarCambiosTablaToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarCuentaBanco"));
			
		this.jMenuItemGuardarCambiosTablaCuentaBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaCuentaBanco"));		
		
		
		
		this.jButtonRecargarInformacionCuentaBanco.addActionListener (new ButtonActionListener(this,"RecargarInformacionCuentaBanco"));
					
		this.jButtonRecargarInformacionToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarCuentaBanco"));
		
		this.jMenuItemRecargarInformacionCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionCuentaBanco"));		
		
		
		
		this.jButtonAnterioresCuentaBanco.addActionListener (new ButtonActionListener(this,"AnterioresCuentaBanco"));
		
		
		this.jButtonAnterioresToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"AnterioresToolBarCuentaBanco"));
		
		this.jMenuItemAnterioresCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresCuentaBanco"));		
		
		
		this.jButtonSiguientesCuentaBanco.addActionListener (new ButtonActionListener(this,"SiguientesCuentaBanco"));
		
		
		this.jButtonSiguientesToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"SiguientesToolBarCuentaBanco"));
			
		this.jMenuItemSiguientesCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesCuentaBanco"));
			
		this.jMenuItemAbrirOrderByCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByCuentaBanco"));
			
		this.jMenuItemMostrarOcultarCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarCuentaBanco"));
			
		this.jMenuItemDetalleAbrirOrderByCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByCuentaBanco"));
			
		this.jMenuItemDetalleMostarOcultarCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarCuentaBanco"));		
		
		
		this.jButtonNuevoGuardarCambiosCuentaBanco.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosCuentaBanco"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarCuentaBanco"));
			
		this.jMenuItemNuevoGuardarCambiosCuentaBanco.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosCuentaBanco"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosCuentaBanco.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosCuentaBanco"));

		this.jCheckBoxSeleccionadosCuentaBanco.addItemListener(new CheckBoxItemListener(this,"SeleccionadosCuentaBanco"));
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioCuentaBanco"));
		}
		
		
		this.jComboBoxTiposRelacionesCuentaBanco.addActionListener (new ButtonActionListener(this,"TiposRelacionesCuentaBanco"));
			
		this.jComboBoxTiposAccionesCuentaBanco.addActionListener (new ButtonActionListener(this,"TiposAccionesCuentaBanco"));
					
		this.jComboBoxTiposSeleccionarCuentaBanco.addActionListener (new ButtonActionListener(this,"TiposSeleccionarCuentaBanco"));
			
		this.jTextFieldValorCampoGeneralCuentaBanco.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralCuentaBanco"));		
		
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonidCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"idCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_empresaCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_empresaCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_sucursalCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_sucursalCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_bancoCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_bancoCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_bancoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_tipo_cuenta_banco_globalCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_tipo_cuenta_banco_globalCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtoncodigoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"codigoCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonnumero_cuentaCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cuentaCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonnumero_chequeCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_chequeCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonnumero_cheque_auxiliarCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cheque_auxiliarCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonsaldoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"saldoCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonprocedenciaCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"procedenciaCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtondestinoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"destinoCuentaBancoBusqueda"));
		//jButtonid_cuenta_contableCuentaBanco.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contableCuentaBancoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBanco.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaBanco"));
		//jButtonid_cuenta_contableCuentaBancoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContable("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBancoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaBancoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtones_bancoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"es_bancoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_estado_cuenta_bancoCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_estado_cuenta_bancoCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_estado_cuenta_bancoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_cuenta_bancoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_ingresoCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_ingresoCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_ingresoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_ingresoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_egresoCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_egresoCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_egresoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_egresoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_diarioCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_diarioCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_diarioCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_diarioCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_chequeCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_chequeCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_chequeCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_chequeCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_retencionCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_retencionCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_retencionCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_retencionCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_retencion_ivaCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_retencion_ivaCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_retencion_ivaCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_retencion_ivaCuentaBancoBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonBusquedaPorCodigoCuentaBanco.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoCuentaBanco"));

			this.jButtonBusquedaPorNumeroChequeCuentaBanco.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroChequeCuentaBanco"));

			this.jButtonBusquedaPorNumeroCuentaCuentaBanco.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroCuentaCuentaBanco"));

			this.jButtonFK_IdBancoCuentaBanco.addActionListener(new ButtonActionListener(this,"FK_IdBancoCuentaBanco"));

			this.jButtonFK_IdEstadoCuentaBancoCuentaBanco.addActionListener(new ButtonActionListener(this,"FK_IdEstadoCuentaBancoCuentaBanco"));

			this.jButtonFK_IdTipoCuentaBancoGlobalCuentaBanco.addActionListener(new ButtonActionListener(this,"FK_IdTipoCuentaBancoGlobalCuentaBanco"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoCuentaBanco!=null) {
				this.jInternalFrameReporteDinamicoCuentaBanco.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoCuentaBanco"));
				this.jInternalFrameReporteDinamicoCuentaBanco.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoCuentaBanco"));
				this.jInternalFrameReporteDinamicoCuentaBanco.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoCuentaBanco"));
			}
			
			//this.jButtonCerrarReporteDinamicoCuentaBanco.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoCuentaBanco"));				
			//this.jButtonGenerarReporteDinamicoCuentaBanco.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoCuentaBanco"));
			//this.jButtonGenerarExcelReporteDinamicoCuentaBanco.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoCuentaBanco"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionCuentaBanco!=null) {
				this.jInternalFrameImportacionCuentaBanco.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionCuentaBanco"));
				this.jInternalFrameImportacionCuentaBanco.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionCuentaBanco"));
				this.jInternalFrameImportacionCuentaBanco.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionCuentaBanco"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByCuentaBanco.addActionListener (new ButtonActionListener(this,"AbrirOrderByCuentaBanco"));
			
			this.jButtonAbrirOrderByToolBarCuentaBanco.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarCuentaBanco"));			
			
			if(this.jInternalFrameOrderByCuentaBanco!=null) {
				this.jInternalFrameOrderByCuentaBanco.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByCuentaBanco"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCuentaBanco.jTabbedPaneRelacionesCuentaBanco.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesCuentaBanco"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameCuentaBanco();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormCuentaBanco.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormCuentaBanco = (JInternalFrameBase)event.getSource();
	            	
	            CuentaBancoBeanSwingJInternalFrame jInternalFrameParent=(CuentaBancoBeanSwingJInternalFrame)jInternalFrameDetalleFormCuentaBanco.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarCuentaBancoActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosCuentaBanco.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosCuentaBancoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosCuentaBanco.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosCuentaBanco.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentaBancoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentaBancoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentaBancoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoCuentaBanco";
		inputMap = this.jButtonNuevoCuentaBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoCuentaBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoCuentaBancoActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentaBancoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentaBancoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCuentaBancoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesCuentaBanco";
		inputMap = this.jButtonNuevoRelacionesCuentaBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesCuentaBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoCuentaBancoActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarCuentaBanco";
		inputMap = this.jButtonModificarCuentaBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarCuentaBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarCuentaBancoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarCuentaBanco";
		inputMap = this.jButtonActualizarCuentaBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarCuentaBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarCuentaBancoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarCuentaBanco";
		inputMap = this.jButtonEliminarCuentaBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarCuentaBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarCuentaBancoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarCuentaBanco";
		inputMap = this.jButtonCancelarCuentaBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarCuentaBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarCuentaBancoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarCuentaBanco";
		inputMap = this.jButtonCerrarCuentaBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarCuentaBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarCuentaBancoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormCuentaBanco.jButtonGuardarCambiosCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosCuentaBanco";
		inputMap = this.jInternalFrameDetalleFormCuentaBanco.jButtonGuardarCambiosCuentaBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormCuentaBanco.jButtonGuardarCambiosCuentaBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosCuentaBancoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosCuentaBanco.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosCuentaBancoItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesCuentaBanco.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesCuentaBancoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarCuentaBanco.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarCuentaBancoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralCuentaBanco.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralCuentaBancoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonidCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"idCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_empresaCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_empresaCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_sucursalCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_sucursalCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_bancoCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_bancoCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_bancoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_tipo_cuenta_banco_globalCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_tipo_cuenta_banco_globalCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_cuenta_banco_globalCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtoncodigoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"codigoCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonnumero_cuentaCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cuentaCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonnumero_chequeCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_chequeCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonnumero_cheque_auxiliarCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cheque_auxiliarCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonsaldoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"saldoCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonprocedenciaCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"procedenciaCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtondestinoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"destinoCuentaBancoBusqueda"));
		//jButtonid_cuenta_contableCuentaBanco.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contableCuentaBancoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBanco.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaBanco"));
		//jButtonid_cuenta_contableCuentaBancoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContable("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBancoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaBancoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableCuentaBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtones_bancoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"es_bancoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_estado_cuenta_bancoCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_estado_cuenta_bancoCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_estado_cuenta_bancoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_cuenta_bancoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_ingresoCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_ingresoCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_ingresoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_ingresoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_egresoCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_egresoCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_egresoCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_egresoCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_diarioCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_diarioCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_diarioCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_diarioCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_chequeCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_chequeCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_chequeCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_chequeCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_retencionCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_retencionCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_retencionCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_retencionCuentaBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_retencion_ivaCuentaBancoUpdate.addActionListener(new ButtonActionListener(this,"id_formato_retencion_ivaCuentaBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCuentaBanco.jButtonid_formato_retencion_ivaCuentaBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_formato_retencion_ivaCuentaBancoBusqueda"));
		
		
		this.jButtonBusquedaPorCodigoCuentaBanco.addActionListener(new ButtonActionListener(this,"BusquedaPorCodigoCuentaBanco"));

		this.jButtonBusquedaPorNumeroChequeCuentaBanco.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroChequeCuentaBanco"));

		this.jButtonBusquedaPorNumeroCuentaCuentaBanco.addActionListener(new ButtonActionListener(this,"BusquedaPorNumeroCuentaCuentaBanco"));

		this.jButtonFK_IdBancoCuentaBanco.addActionListener(new ButtonActionListener(this,"FK_IdBancoCuentaBanco"));

		this.jButtonFK_IdEstadoCuentaBancoCuentaBanco.addActionListener(new ButtonActionListener(this,"FK_IdEstadoCuentaBancoCuentaBanco"));

		this.jButtonFK_IdTipoCuentaBancoGlobalCuentaBanco.addActionListener(new ButtonActionListener(this,"FK_IdTipoCuentaBancoGlobalCuentaBanco"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionCuentaBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionCuentaBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarCuentaBancoActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarCuentaBanco.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosCuentaBanco(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(CuentaBanco cuentabancoAux:this.cuentabancoLogic.getCuentaBancos()) {
					cuentabancoAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(CuentaBanco cuentabancoAux:cuentabancos) {
					cuentabancoAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosCuentaBancoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingCuentaBanco(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(CuentaBanco cuentabancoAux:this.cuentabancoLogic.getCuentaBancos()) {
						cuentabancoAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(CuentaBanco cuentabancoAux:cuentabancos) {
						cuentabancoAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(CuentaBanco cuentabancoAux:this.cuentabancoLogic.getCuentaBancos()) {
					
						if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_ESBANCO)) {
							existe=true;
							cuentabancoAux.setes_banco(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(CuentaBanco cuentabancoAux:cuentabancos) {
						
						if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_ESBANCO)) {
							existe=true;
							cuentabancoAux.setes_banco(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaCuentaBanco(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosCuentaBanco.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosCuentaBanco.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosCuentaBancoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingCuentaBanco(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosCuentaBanco.getSelectedRows();
			
			CuentaBanco cuentabancoLocal=new CuentaBanco();
			
			//this.seleccionarTodosCuentaBanco(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLocal =(CuentaBanco) this.cuentabancoLogic.getCuentaBancos().toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					cuentabancoLocal =(CuentaBanco) this.cuentabancos.toArray()[this.jTableDatosCuentaBanco.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				cuentabancoLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(CuentaBanco cuentabancoAux:this.cuentabancoLogic.getCuentaBancos()) {
						cuentabancoAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(CuentaBanco cuentabancoAux:cuentabancos) {
						cuentabancoAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaCuentaBanco(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosCuentaBanco.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosCuentaBanco.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosCuentaBanco,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualCuentaBancoItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarCuentaBancoParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralCuentaBancoActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingCuentaBanco(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralCuentaBanco.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(CuentaBanco cuentabancoAux:this.cuentabancoLogic.getCuentaBancos()) {
				
						if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							cuentabancoAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA)) {
							existe=true;
							cuentabancoAux.setnumero_cuenta(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE)) {
							existe=true;
							cuentabancoAux.setnumero_cheque(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR)) {
							existe=true;
							cuentabancoAux.setnumero_cheque_auxiliar(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_SALDO)) {
							existe=true;
							cuentabancoAux.setsaldo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA)) {
							existe=true;
							cuentabancoAux.setprocedencia(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_DESTINO)) {
							existe=true;
							cuentabancoAux.setdestino(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(CuentaBanco cuentabancoAux:cuentabancos) {
					
						if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							cuentabancoAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA)) {
							existe=true;
							cuentabancoAux.setnumero_cuenta(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE)) {
							existe=true;
							cuentabancoAux.setnumero_cheque(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR)) {
							existe=true;
							cuentabancoAux.setnumero_cheque_auxiliar(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_SALDO)) {
							existe=true;
							cuentabancoAux.setsaldo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA)) {
							existe=true;
							cuentabancoAux.setprocedencia(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_DESTINO)) {
							existe=true;
							cuentabancoAux.setdestino(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaCuentaBanco(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesCuentaBancoActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingCuentaBanco(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioCuentaBanco=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesCuentaBanco.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteCuentaBanco) {				
					conSplash=true;//false;										
					
					//this.startProcessCuentaBanco(conSplash);
				
					this.generarReporteCuentaBancosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCuentaBanco.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoCuentaBancosSeleccionados();
				//this.jComboBoxTiposAccionesCuentaBanco.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoCuentaBancosSeleccionados(false);
				//this.jComboBoxTiposAccionesCuentaBanco.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoCuentaBancosSeleccionados(true);
				//this.jComboBoxTiposAccionesCuentaBanco.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessCuentaBanco();
				
				this.exportarCuentaBancosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCuentaBanco.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionCuentaBancos();
				//this.importarCuentaBancos();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCuentaBanco.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessCuentaBanco();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelCuentaBancosSeleccionados();
				//this.jComboBoxTiposAccionesCuentaBanco.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Cuenta Banco", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessCuentaBanco();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoCuentaBanco)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyCuentaBanco(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Cuenta Banco",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCuentaBanco.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.setSelectedIndex(0);					
				}	
			} 			
			else if(CuentaBancoBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteCuentaBanco) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessCuentaBanco(conSplash);
					
						//this.actualizarParametrosGeneralCuentaBanco();
						
						this.generarReporteProcesoAccionCuentaBancosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesCuentaBanco.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(CuentaBancoBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Cuenta BancoS SELECCIONADOS?", "MANTENIMIENTO DE Cuenta Banco", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessCuentaBanco();
				
						this.actualizarParametrosGeneralCuentaBanco();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.cuentabancoReturnGeneral=cuentabancoLogic.procesarAccionCuentaBancosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.cuentabancoLogic.getCuentaBancos(),this.cuentabancoParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarCuentaBancoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesCuentaBanco.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralCuentaBanco();
					
					CuentaBancoBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarCuentaBancoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesCuentaBanco.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormCuentaBanco.jComboBoxTiposAccionesFormularioCuentaBanco.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessCuentaBanco(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesCuentaBancoActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessCuentaBanco();
			
			if(this.jInternalFrameDetalleFormCuentaBanco==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();		
			CuentaBanco cuentabanco=new CuentaBanco();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingCuentaBanco(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesCuentaBanco.getSelectedItem();
			
			
			
			
			cuentabancosSeleccionados=this.getCuentaBancosSeleccionados(true);
			//this.sTipoAccion;
			
			if(cuentabancosSeleccionados.size()==1) {
				for(CuentaBanco cuentabancoAux:cuentabancosSeleccionados) {
					cuentabanco=cuentabancoAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Pago Auto")) {
					jButtonPagoAutoActionPerformed(null,rowIndex,true,false,cuentabanco);
				}
				else if(this.sTipoRelacion.equals("Autori Pago Orden Compra")) {
					jButtonAutoriPagoOrdenCompraActionPerformed(null,rowIndex,true,false,cuentabanco);
				}
				else if(this.sTipoRelacion.equals("Detalle Cheque Girado")) {
					jButtonDetalleChequeGiradoActionPerformed(null,rowIndex,true,false,cuentabanco);
				}
				else if(this.sTipoRelacion.equals("Autori Pago")) {
					jButtonAutoriPagoActionPerformed(null,rowIndex,true,false,cuentabanco);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessCuentaBanco();
			
      		//this.finishProcessCuentaBanco(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarCuentaBancoReturnGeneral() throws Exception {
		if(this.cuentabancoReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.cuentabancoReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.cuentabancoReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.cuentabancoReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.cuentabancoReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.cuentabancoReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingCuentaBanco(false);
		}
		
		if(this.cuentabancoReturnGeneral.getConRetornoLista() || this.cuentabancoReturnGeneral.getConRetornoObjeto()) {
			if(this.cuentabancoReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.cuentabancoLogic.setCuentaBancos(this.cuentabancoReturnGeneral.getCuentaBancos());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.cuentabancoReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.cuentabancoLogic.setCuentaBanco(this.cuentabancoReturnGeneral.getCuentaBanco());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingCuentaBanco(false);
		}
	}
	
	public void actualizarParametrosGeneralCuentaBanco() throws Exception {
		
		
	}
	
	public ArrayList<CuentaBanco> getCuentaBancosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioCuentaBanco) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(CuentaBanco cuentabancoAux:cuentabancoLogic.getCuentaBancos()) {
					if(cuentabancoAux.getIsSelected()) {
						cuentabancosSeleccionados.add(cuentabancoAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(CuentaBanco cuentabancoAux:this.cuentabancos) {
					if(cuentabancoAux.getIsSelected()) {
						cuentabancosSeleccionados.add(cuentabancoAux);				
					}
				}
			}
			
			if(cuentabancosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						cuentabancosSeleccionados.addAll(this.cuentabancoLogic.getCuentaBancos());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						cuentabancosSeleccionados.addAll(this.cuentabancos);				
					}
				}
			}
		} else {
			cuentabancosSeleccionados.add(this.cuentabanco);
		}
		
		return cuentabancosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteCuentaBancosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalCuentaBancosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoCuentaBancosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoCuentaBancosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoCuentaBancosSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesCuentaBancosSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Cuenta Banco",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesCuentaBancosSeleccionados() throws Exception {
		ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();		
		
		cuentabancosSeleccionados=this.getCuentaBancosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteCuentaBancos("Todos",cuentabancosSeleccionados);
		
	}	
	
	public void generarReporteNormalCuentaBancosSeleccionados() throws Exception {
		ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();		
		
		cuentabancosSeleccionados=this.getCuentaBancosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteCuentaBancos("Todos",cuentabancosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionCuentaBancosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();
		
		cuentabancosSeleccionados=this.getCuentaBancosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteCuentaBancos("Todos",cuentabancosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoCuentaBancosSeleccionados() throws Exception {
		ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();		
		
		
		this.abrirInicializarFrameReporteDinamicoCuentaBanco();
		
		
		cuentabancosSeleccionados=this.getCuentaBancosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoCuentaBanco();
		
		
		//this.generarReporteCuentaBancos("Todos",cuentabancosSeleccionados ,cuentabancoImplementable,cuentabancoImplementableHome);
	}
	
	public void mostrarImportacionCuentaBancos() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionCuentaBanco();
		
		this.abrirFrameImportacionCuentaBanco();		
		
			
		//this.generarReporteCuentaBancos("Todos",cuentabancosSeleccionados ,cuentabancoImplementable,cuentabancoImplementableHome);
	}
	
	public void importarCuentaBancos() throws Exception {		
	
	}
	
	public void exportarCuentaBancosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelCuentaBancosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoCuentaBancosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlCuentaBancosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Cuenta Banco",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoCuentaBancosSeleccionados() throws Exception {
		ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();		
		
		cuentabancosSeleccionados=this.getCuentaBancosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentabanco."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarCuentaBanco(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(CuentaBanco cuentabancoAux:cuentabancosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarCuentaBanco(cuentabancoAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//cuentabancoAux.setsDetalleGeneralEntityReporte(cuentabancoAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentabancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Banco",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarCuentaBanco(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_IDBANCO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_CODIGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_SALDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_DESTINO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_ESBANCO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarCuentaBanco(CuentaBanco cuentabanco,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=cuentabanco.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getbanco_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.gettipocuentabancoglobal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getcodigo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getnumero_cuenta();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getnumero_cheque();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getnumero_cheque_auxiliar();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getsaldo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getprocedencia();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getdestino();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getcuentacontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getes_banco().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getestadocuentabanco_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getformatoingreso_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getformatoegreso_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getformatodiario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getformatocheque_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getformatoretencion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=cuentabanco.getformatoretencioniva_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelCuentaBancosSeleccionados() throws Exception {
		ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();		
		
		cuentabancosSeleccionados=this.getCuentaBancosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentabanco.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("CuentaBancos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelCuentaBanco(row);				
				iRow++;
			}				
			
			for(CuentaBanco cuentabancoAux:cuentabancosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelCuentaBanco(cuentabancoAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentabancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Banco",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlCuentaBancosSeleccionados() throws Exception {
		ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();		
		
		cuentabancosSeleccionados=this.getCuentaBancosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"cuentabanco.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("cuentabancos");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("cuentabanco");
			//elementRoot.appendChild(element);
		
			for(CuentaBanco cuentabancoAux:cuentabancosSeleccionados) {
				element = document.createElement("cuentabanco");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlCuentaBanco(cuentabancoAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cuentabancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Cuenta Banco",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelCuentaBanco(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDBANCO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_CODIGO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_SALDO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_DESTINO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_ESBANCO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelCuentaBanco(CuentaBanco cuentabanco,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getbanco_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.gettipocuentabancoglobal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getcodigo());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getnumero_cuenta());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getnumero_cheque());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getnumero_cheque_auxiliar());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getsaldo());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getprocedencia());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getdestino());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getcuentacontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getes_banco());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getestadocuentabanco_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getformatoingreso_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getformatoegreso_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getformatodiario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getformatocheque_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getformatoretencion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(cuentabanco.getformatoretencioniva_descripcion());				
	}
	
	public void setFilaDatosExportarXmlCuentaBanco(CuentaBanco cuentabanco,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(CuentaBancoConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(cuentabanco.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(CuentaBancoConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(cuentabanco.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(CuentaBancoConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(cuentabanco.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(CuentaBancoConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(cuentabanco.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementbanco_descripcion = document.createElement(CuentaBancoConstantesFunciones.IDBANCO);
		elementbanco_descripcion.appendChild(document.createTextNode(cuentabanco.getbanco_descripcion()));
		element.appendChild(elementbanco_descripcion);

		Element elementtipocuentabancoglobal_descripcion = document.createElement(CuentaBancoConstantesFunciones.IDTIPOCUENTABANCOGLOBAL);
		elementtipocuentabancoglobal_descripcion.appendChild(document.createTextNode(cuentabanco.gettipocuentabancoglobal_descripcion()));
		element.appendChild(elementtipocuentabancoglobal_descripcion);

		Element elementcodigo = document.createElement(CuentaBancoConstantesFunciones.CODIGO);
		elementcodigo.appendChild(document.createTextNode(cuentabanco.getcodigo().trim()));
		element.appendChild(elementcodigo);

		Element elementnumero_cuenta = document.createElement(CuentaBancoConstantesFunciones.NUMEROCUENTA);
		elementnumero_cuenta.appendChild(document.createTextNode(cuentabanco.getnumero_cuenta().trim()));
		element.appendChild(elementnumero_cuenta);

		Element elementnumero_cheque = document.createElement(CuentaBancoConstantesFunciones.NUMEROCHEQUE);
		elementnumero_cheque.appendChild(document.createTextNode(cuentabanco.getnumero_cheque().trim()));
		element.appendChild(elementnumero_cheque);

		Element elementnumero_cheque_auxiliar = document.createElement(CuentaBancoConstantesFunciones.NUMEROCHEQUEAUXILIAR);
		elementnumero_cheque_auxiliar.appendChild(document.createTextNode(cuentabanco.getnumero_cheque_auxiliar().trim()));
		element.appendChild(elementnumero_cheque_auxiliar);

		Element elementsaldo = document.createElement(CuentaBancoConstantesFunciones.SALDO);
		elementsaldo.appendChild(document.createTextNode(cuentabanco.getsaldo().toString().trim()));
		element.appendChild(elementsaldo);

		Element elementprocedencia = document.createElement(CuentaBancoConstantesFunciones.PROCEDENCIA);
		elementprocedencia.appendChild(document.createTextNode(cuentabanco.getprocedencia().trim()));
		element.appendChild(elementprocedencia);

		Element elementdestino = document.createElement(CuentaBancoConstantesFunciones.DESTINO);
		elementdestino.appendChild(document.createTextNode(cuentabanco.getdestino().trim()));
		element.appendChild(elementdestino);

		Element elementcuentacontable_descripcion = document.createElement(CuentaBancoConstantesFunciones.IDCUENTACONTABLE);
		elementcuentacontable_descripcion.appendChild(document.createTextNode(cuentabanco.getcuentacontable_descripcion()));
		element.appendChild(elementcuentacontable_descripcion);

		Element elementes_banco = document.createElement(CuentaBancoConstantesFunciones.ESBANCO);
		elementes_banco.appendChild(document.createTextNode(cuentabanco.getes_banco().toString().trim()));
		element.appendChild(elementes_banco);

		Element elementestadocuentabanco_descripcion = document.createElement(CuentaBancoConstantesFunciones.IDESTADOCUENTABANCO);
		elementestadocuentabanco_descripcion.appendChild(document.createTextNode(cuentabanco.getestadocuentabanco_descripcion()));
		element.appendChild(elementestadocuentabanco_descripcion);

		Element elementformatoingreso_descripcion = document.createElement(CuentaBancoConstantesFunciones.IDFORMATOINGRESO);
		elementformatoingreso_descripcion.appendChild(document.createTextNode(cuentabanco.getformatoingreso_descripcion()));
		element.appendChild(elementformatoingreso_descripcion);

		Element elementformatoegreso_descripcion = document.createElement(CuentaBancoConstantesFunciones.IDFORMATOEGRESO);
		elementformatoegreso_descripcion.appendChild(document.createTextNode(cuentabanco.getformatoegreso_descripcion()));
		element.appendChild(elementformatoegreso_descripcion);

		Element elementformatodiario_descripcion = document.createElement(CuentaBancoConstantesFunciones.IDFORMATODIARIO);
		elementformatodiario_descripcion.appendChild(document.createTextNode(cuentabanco.getformatodiario_descripcion()));
		element.appendChild(elementformatodiario_descripcion);

		Element elementformatocheque_descripcion = document.createElement(CuentaBancoConstantesFunciones.IDFORMATOCHEQUE);
		elementformatocheque_descripcion.appendChild(document.createTextNode(cuentabanco.getformatocheque_descripcion()));
		element.appendChild(elementformatocheque_descripcion);

		Element elementformatoretencion_descripcion = document.createElement(CuentaBancoConstantesFunciones.IDFORMATORETENCION);
		elementformatoretencion_descripcion.appendChild(document.createTextNode(cuentabanco.getformatoretencion_descripcion()));
		element.appendChild(elementformatoretencion_descripcion);

		Element elementformatoretencioniva_descripcion = document.createElement(CuentaBancoConstantesFunciones.IDFORMATORETENCIONIVA);
		elementformatoretencioniva_descripcion.appendChild(document.createTextNode(cuentabanco.getformatoretencioniva_descripcion()));
		element.appendChild(elementformatoretencioniva_descripcion);
	}
	
	public void generarReporteGroupGenericoCuentaBancosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<CuentaBanco> cuentabancosSeleccionados=new ArrayList<CuentaBanco>();
		
		cuentabancosSeleccionados=this.getCuentaBancosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoCuentaBanco(cuentabancosSeleccionados);
		
		this.generarReporteCuentaBancos("Todos",cuentabancosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoCuentaBanco(ArrayList<CuentaBanco> cuentabancosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(CuentaBanco cuentabancoAux:cuentabancosSeleccionados) {
				cuentabancoAux.setsDetalleGeneralEntityReporte(cuentabancoAux.toString());
			
				if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_IDBANCO)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getbanco_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_IDTIPOCUENTABANCOGLOBAL)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.gettipocuentabancoglobal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_CODIGO)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getcodigo());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_NUMEROCUENTA)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getnumero_cuenta());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUE)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getnumero_cheque());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_NUMEROCHEQUEAUXILIAR)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getnumero_cheque_auxiliar());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_PROCEDENCIA)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getprocedencia());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_DESTINO)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getdestino());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_IDCUENTACONTABLE)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getcuentacontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_ESBANCO)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(cuentabancoAux.getes_banco()));
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_IDESTADOCUENTABANCO)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getestadocuentabanco_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_IDFORMATOINGRESO)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getformatoingreso_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_IDFORMATOEGRESO)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getformatoegreso_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_IDFORMATODIARIO)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getformatodiario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_IDFORMATOCHEQUE)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getformatocheque_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCION)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getformatoretencion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CuentaBancoConstantesFunciones.LABEL_IDFORMATORETENCIONIVA)) {
					existe=true;
					cuentabancoAux.setsDescripcionGeneralEntityReporte1(cuentabancoAux.getformatoretencioniva_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CuentaBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesCuentaBanco(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoCuentaBanco=true;
				this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=true;
				this.isVisibilidadCeldaGuardarCambiosCuentaBanco=true;
			}
			
			this.isVisibilidadCeldaModificarCuentaBanco=false;
			this.isVisibilidadCeldaActualizarCuentaBanco=false;
			this.isVisibilidadCeldaEliminarCuentaBanco=false;
			this.isVisibilidadCeldaCancelarCuentaBanco=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaBanco=true;
				} else {
					this.isVisibilidadCeldaGuardarCuentaBanco=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoCuentaBanco=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaBanco=false;
			this.isVisibilidadCeldaModificarCuentaBanco=false;
			this.isVisibilidadCeldaActualizarCuentaBanco=true;
			this.isVisibilidadCeldaEliminarCuentaBanco=false;
			this.isVisibilidadCeldaCancelarCuentaBanco=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaBanco=true;
				} else {
					this.isVisibilidadCeldaGuardarCuentaBanco=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoCuentaBanco=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaBanco=false;
			this.isVisibilidadCeldaModificarCuentaBanco=false;
			this.isVisibilidadCeldaActualizarCuentaBanco=true;
			this.isVisibilidadCeldaEliminarCuentaBanco=true;
			this.isVisibilidadCeldaCancelarCuentaBanco=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaBanco=true;
				} else {
					this.isVisibilidadCeldaGuardarCuentaBanco=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoCuentaBanco=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaBanco=false;
			this.isVisibilidadCeldaModificarCuentaBanco=false;
			this.isVisibilidadCeldaActualizarCuentaBanco=true;
			this.isVisibilidadCeldaEliminarCuentaBanco=false;
			this.isVisibilidadCeldaCancelarCuentaBanco=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaBanco=false;
				} else {
					this.isVisibilidadCeldaGuardarCuentaBanco=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoCuentaBanco=true;
			this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=true;
			this.isVisibilidadCeldaGuardarCambiosCuentaBanco=true;
			this.isVisibilidadCeldaModificarCuentaBanco=false;
			this.isVisibilidadCeldaActualizarCuentaBanco=false;
			this.isVisibilidadCeldaEliminarCuentaBanco=false;
			this.isVisibilidadCeldaCancelarCuentaBanco=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaBanco=true;
				} else {
					this.isVisibilidadCeldaGuardarCuentaBanco=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoCuentaBanco=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaBanco=false;
			this.isVisibilidadCeldaActualizarCuentaBanco=false;
			this.isVisibilidadCeldaEliminarCuentaBanco=false;
			this.isVisibilidadCeldaCancelarCuentaBanco=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaBanco=false;
				} else {
					this.isVisibilidadCeldaGuardarCuentaBanco=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoCuentaBanco=false;
			this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaBanco=false;
			this.isVisibilidadCeldaModificarCuentaBanco=true;
			this.isVisibilidadCeldaActualizarCuentaBanco=false;
			this.isVisibilidadCeldaEliminarCuentaBanco=false;
			this.isVisibilidadCeldaCancelarCuentaBanco=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCuentaBanco=false;
				} else {
					this.isVisibilidadCeldaGuardarCuentaBanco=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(CuentaBancoJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoCuentaBanco=true;
			this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=true;
			this.isVisibilidadCeldaGuardarCambiosCuentaBanco=true;
		} else {
			this.actualizarEstadoPanelsCuentaBanco(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarCuentaBanco=false;
			//this.isVisibilidadCeldaVerFormCuentaBanco=false;
			this.isVisibilidadCeldaDuplicarCuentaBanco=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!cuentabancoSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=false;
		} else {
			this.isVisibilidadCeldaNuevoCuentaBanco=false;
			this.isVisibilidadCeldaGuardarCambiosCuentaBanco=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(cuentabancoSessionBean.getEsGuardarRelacionado()) {
			if(!cuentabancoSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=false;												
			}
			
			this.jButtonCerrarCuentaBanco.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesCuentaBanco=false;
		}
		
		if(!this.permiteMantenimiento(this.cuentabanco)) {
			this.isVisibilidadCeldaActualizarCuentaBanco=false;
			this.isVisibilidadCeldaEliminarCuentaBanco=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesCuentaBanco() {
		this.isVisibilidadCeldaNuevoCuentaBanco=false;
		this.isVisibilidadCeldaGuardarCambiosCuentaBanco=false;
	}
	
	public void actualizarEstadoPanelsCuentaBanco(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionCuentaBanco!=null) {
				this.jScrollPanelDatosEdicionCuentaBanco.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaBanco!=null) {
				this.jTabbedPaneBusquedasCuentaBanco.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCuentaBanco!=null) {
				this.jScrollPanelDatosCuentaBanco.setVisible(true);
			}
			
			if(this.jPanelPaginacionCuentaBanco!=null) {
				this.jPanelPaginacionCuentaBanco.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCuentaBanco!=null) {
				this.jPanelParametrosReportesCuentaBanco.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionCuentaBanco!=null) {
				this.jScrollPanelDatosEdicionCuentaBanco.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaBanco!=null) {
				this.jTabbedPaneBusquedasCuentaBanco.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosCuentaBanco!=null) {
				this.jScrollPanelDatosCuentaBanco.setVisible(false);
			}
			
			if(this.jPanelPaginacionCuentaBanco!=null) {
				this.jPanelPaginacionCuentaBanco.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesCuentaBanco!=null) {
				this.jPanelParametrosReportesCuentaBanco.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionCuentaBanco!=null) {
				this.jScrollPanelDatosEdicionCuentaBanco.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaBanco!=null) {
				this.jTabbedPaneBusquedasCuentaBanco.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosCuentaBanco!=null) {
				this.jScrollPanelDatosCuentaBanco.setVisible(false);
			}
			
			if(this.jPanelPaginacionCuentaBanco!=null) {
				this.jPanelPaginacionCuentaBanco.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesCuentaBanco!=null) {
				this.jPanelParametrosReportesCuentaBanco.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionCuentaBanco!=null) {
				this.jScrollPanelDatosEdicionCuentaBanco.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaBanco!=null) {
				this.jTabbedPaneBusquedasCuentaBanco.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosCuentaBanco!=null) {
				this.jScrollPanelDatosCuentaBanco.setVisible(false);
			}
			
			if(this.jPanelPaginacionCuentaBanco!=null) {
				this.jPanelPaginacionCuentaBanco.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesCuentaBanco!=null) {
				this.jPanelParametrosReportesCuentaBanco.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionCuentaBanco!=null) {
				this.jScrollPanelDatosEdicionCuentaBanco.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaBanco!=null) {
				this.jTabbedPaneBusquedasCuentaBanco.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCuentaBanco!=null) {
				this.jScrollPanelDatosCuentaBanco.setVisible(true);
			}
			
			if(this.jPanelPaginacionCuentaBanco!=null) {
				this.jPanelPaginacionCuentaBanco.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCuentaBanco!=null) {
				this.jPanelParametrosReportesCuentaBanco.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionCuentaBanco!=null) {
				this.jScrollPanelDatosEdicionCuentaBanco.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaBanco!=null) {
				this.jTabbedPaneBusquedasCuentaBanco.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCuentaBanco!=null) {
				this.jScrollPanelDatosCuentaBanco.setVisible(true);
			}
			
			if(this.jPanelPaginacionCuentaBanco!=null) {
				this.jPanelPaginacionCuentaBanco.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCuentaBanco!=null) {
				this.jPanelParametrosReportesCuentaBanco.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionCuentaBanco!=null) {
				this.jScrollPanelDatosEdicionCuentaBanco.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaBanco!=null) {
				this.jTabbedPaneBusquedasCuentaBanco.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCuentaBanco!=null) {
				this.jScrollPanelDatosCuentaBanco.setVisible(true);
			}
			
			if(this.jPanelPaginacionCuentaBanco!=null) {
				this.jPanelPaginacionCuentaBanco.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCuentaBanco!=null) {
				this.jPanelParametrosReportesCuentaBanco.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasCuentaBanco!=null) {
					this.jTabbedPaneBusquedasCuentaBanco.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesCuentaBanco!=null) {
				this.jPanelParametrosReportesCuentaBanco.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.cuentabancoSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCuentaBanco!=null) {
				this.jTabbedPaneBusquedasCuentaBanco.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesCuentaBanco!=null) {
				this.jPanelParametrosReportesCuentaBanco.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadBusquedaPorCodigo=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorCodigoCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCheque=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCheque) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroChequeCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCuenta=isParaEmpresaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCuenta) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroCuentaCuentaBanco);}

			this.isVisibilidadFK_IdBanco=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdBancoCuentaBanco);}

			this.isVisibilidadFK_IdEstadoCuentaBanco=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoCuentaBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdEstadoCuentaBancoCuentaBanco);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadBusquedaPorCodigo=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorCodigoCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCheque=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCheque) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroChequeCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCuenta=isParaSucursalNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCuenta) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroCuentaCuentaBanco);}

			this.isVisibilidadFK_IdBanco=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdBancoCuentaBanco);}

			this.isVisibilidadFK_IdEstadoCuentaBanco=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoCuentaBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdEstadoCuentaBancoCuentaBanco);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaBanco(Boolean isParaBanco){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBancoNegation=!isParaBanco;

			this.isVisibilidadBusquedaPorCodigo=isParaBancoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorCodigoCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCheque=isParaBancoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCheque) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroChequeCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCuenta=isParaBancoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCuenta) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroCuentaCuentaBanco);}

			this.isVisibilidadFK_IdBanco=isParaBanco;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdBancoCuentaBanco);}

			this.isVisibilidadFK_IdEstadoCuentaBanco=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdEstadoCuentaBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdEstadoCuentaBancoCuentaBanco);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoCuentaBancoGlobal(Boolean isParaTipoCuentaBancoGlobal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoCuentaBancoGlobalNegation=!isParaTipoCuentaBancoGlobal;

			this.isVisibilidadBusquedaPorCodigo=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorCodigoCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCheque=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCheque) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroChequeCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCuenta=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCuenta) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroCuentaCuentaBanco);}

			this.isVisibilidadFK_IdBanco=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdBancoCuentaBanco);}

			this.isVisibilidadFK_IdEstadoCuentaBanco=isParaTipoCuentaBancoGlobalNegation;
			if(!this.isVisibilidadFK_IdEstadoCuentaBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdEstadoCuentaBancoCuentaBanco);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaTipoCuentaBancoGlobal;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContable(Boolean isParaCuentaContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableNegation=!isParaCuentaContable;

			this.isVisibilidadBusquedaPorCodigo=isParaCuentaContableNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorCodigoCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCheque=isParaCuentaContableNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCheque) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroChequeCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCuenta=isParaCuentaContableNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCuenta) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroCuentaCuentaBanco);}

			this.isVisibilidadFK_IdBanco=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdBancoCuentaBanco);}

			this.isVisibilidadFK_IdEstadoCuentaBanco=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdEstadoCuentaBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdEstadoCuentaBancoCuentaBanco);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoCuentaBanco(Boolean isParaEstadoCuentaBanco){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoCuentaBancoNegation=!isParaEstadoCuentaBanco;

			this.isVisibilidadBusquedaPorCodigo=isParaEstadoCuentaBancoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorCodigoCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCheque=isParaEstadoCuentaBancoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCheque) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroChequeCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCuenta=isParaEstadoCuentaBancoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCuenta) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroCuentaCuentaBanco);}

			this.isVisibilidadFK_IdBanco=isParaEstadoCuentaBancoNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdBancoCuentaBanco);}

			this.isVisibilidadFK_IdEstadoCuentaBanco=isParaEstadoCuentaBanco;
			if(!this.isVisibilidadFK_IdEstadoCuentaBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdEstadoCuentaBancoCuentaBanco);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaEstadoCuentaBancoNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoIngreso(Boolean isParaFormatoIngreso){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoIngresoNegation=!isParaFormatoIngreso;

			this.isVisibilidadBusquedaPorCodigo=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorCodigoCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCheque=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCheque) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroChequeCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCuenta=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCuenta) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroCuentaCuentaBanco);}

			this.isVisibilidadFK_IdBanco=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdBancoCuentaBanco);}

			this.isVisibilidadFK_IdEstadoCuentaBanco=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadFK_IdEstadoCuentaBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdEstadoCuentaBancoCuentaBanco);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaFormatoIngresoNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoEgreso(Boolean isParaFormatoEgreso){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoEgresoNegation=!isParaFormatoEgreso;

			this.isVisibilidadBusquedaPorCodigo=isParaFormatoEgresoNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorCodigoCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCheque=isParaFormatoEgresoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCheque) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroChequeCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCuenta=isParaFormatoEgresoNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCuenta) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroCuentaCuentaBanco);}

			this.isVisibilidadFK_IdBanco=isParaFormatoEgresoNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdBancoCuentaBanco);}

			this.isVisibilidadFK_IdEstadoCuentaBanco=isParaFormatoEgresoNegation;
			if(!this.isVisibilidadFK_IdEstadoCuentaBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdEstadoCuentaBancoCuentaBanco);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaFormatoEgresoNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoDiario(Boolean isParaFormatoDiario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoDiarioNegation=!isParaFormatoDiario;

			this.isVisibilidadBusquedaPorCodigo=isParaFormatoDiarioNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorCodigoCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCheque=isParaFormatoDiarioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCheque) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroChequeCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCuenta=isParaFormatoDiarioNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCuenta) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroCuentaCuentaBanco);}

			this.isVisibilidadFK_IdBanco=isParaFormatoDiarioNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdBancoCuentaBanco);}

			this.isVisibilidadFK_IdEstadoCuentaBanco=isParaFormatoDiarioNegation;
			if(!this.isVisibilidadFK_IdEstadoCuentaBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdEstadoCuentaBancoCuentaBanco);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaFormatoDiarioNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoCheque(Boolean isParaFormatoCheque){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoChequeNegation=!isParaFormatoCheque;

			this.isVisibilidadBusquedaPorCodigo=isParaFormatoChequeNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorCodigoCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCheque=isParaFormatoChequeNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCheque) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroChequeCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCuenta=isParaFormatoChequeNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCuenta) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroCuentaCuentaBanco);}

			this.isVisibilidadFK_IdBanco=isParaFormatoChequeNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdBancoCuentaBanco);}

			this.isVisibilidadFK_IdEstadoCuentaBanco=isParaFormatoChequeNegation;
			if(!this.isVisibilidadFK_IdEstadoCuentaBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdEstadoCuentaBancoCuentaBanco);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaFormatoChequeNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoRetencion(Boolean isParaFormatoRetencion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoRetencionNegation=!isParaFormatoRetencion;

			this.isVisibilidadBusquedaPorCodigo=isParaFormatoRetencionNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorCodigoCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCheque=isParaFormatoRetencionNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCheque) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroChequeCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCuenta=isParaFormatoRetencionNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCuenta) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroCuentaCuentaBanco);}

			this.isVisibilidadFK_IdBanco=isParaFormatoRetencionNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdBancoCuentaBanco);}

			this.isVisibilidadFK_IdEstadoCuentaBanco=isParaFormatoRetencionNegation;
			if(!this.isVisibilidadFK_IdEstadoCuentaBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdEstadoCuentaBancoCuentaBanco);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaFormatoRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormatoRetencionIva(Boolean isParaFormatoRetencionIva){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoRetencionIvaNegation=!isParaFormatoRetencionIva;

			this.isVisibilidadBusquedaPorCodigo=isParaFormatoRetencionIvaNegation;
			if(!this.isVisibilidadBusquedaPorCodigo) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorCodigoCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCheque=isParaFormatoRetencionIvaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCheque) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroChequeCuentaBanco);}

			this.isVisibilidadBusquedaPorNumeroCuenta=isParaFormatoRetencionIvaNegation;
			if(!this.isVisibilidadBusquedaPorNumeroCuenta) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelBusquedaPorNumeroCuentaCuentaBanco);}

			this.isVisibilidadFK_IdBanco=isParaFormatoRetencionIvaNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdBancoCuentaBanco);}

			this.isVisibilidadFK_IdEstadoCuentaBanco=isParaFormatoRetencionIvaNegation;
			if(!this.isVisibilidadFK_IdEstadoCuentaBanco) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdEstadoCuentaBancoCuentaBanco);}

			this.isVisibilidadFK_IdTipoCuentaBancoGlobal=isParaFormatoRetencionIvaNegation;
			if(!this.isVisibilidadFK_IdTipoCuentaBancoGlobal) {this.jTabbedPaneBusquedasCuentaBanco.remove(jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);}
		}
		
	}
	
	

	public String registrarSesionCuentaBancoParaPagoAutos() throws Exception {
		Boolean isPaginaPopupPagoAuto=false;

		try {

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.pagoautoSessionBean==null) {
				this.jInternalFrameDetalleFormCuentaBanco.pagoautoSessionBean=new PagoAutoSessionBean();
			}

			this.jInternalFrameDetalleFormCuentaBanco.pagoautoSessionBean.setsPathNavegacionActual(cuentabancoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+PagoAutoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormCuentaBanco.pagoautoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupPagoAuto=this.jInternalFrameDetalleFormCuentaBanco.pagoautoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormCuentaBanco.pagoautoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdePagoAuto(true);
			this.jInternalFrameDetalleFormCuentaBanco.pagoautoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdePagoAuto(CuentaBancoConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormCuentaBanco.pagoautoSessionBean.setisBusquedaDesdeForeignKeySesionCuentaBanco(true);
			this.jInternalFrameDetalleFormCuentaBanco.pagoautoSessionBean.setlidCuentaBancoActual(this.idCuentaBancoActual);

			cuentabancoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentaBanco(true);
			cuentabancoSessionBean.setlIdCuentaBancoActualForeignKey(this.idCuentaBancoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionCuentaBancoParaAutoriPagoOrdenCompras() throws Exception {
		Boolean isPaginaPopupAutoriPagoOrdenCompra=false;

		try {

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraSessionBean==null) {
				this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraSessionBean=new AutoriPagoOrdenCompraSessionBean();
			}

			this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraSessionBean.setsPathNavegacionActual(cuentabancoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AutoriPagoOrdenCompraConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupAutoriPagoOrdenCompra=this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAutoriPagoOrdenCompra(true);
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAutoriPagoOrdenCompra(CuentaBancoConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraSessionBean.setisBusquedaDesdeForeignKeySesionCuentaBanco(true);
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoordencompraSessionBean.setlidCuentaBancoActual(this.idCuentaBancoActual);

			cuentabancoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentaBanco(true);
			cuentabancoSessionBean.setlIdCuentaBancoActualForeignKey(this.idCuentaBancoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionCuentaBancoParaDetalleChequeGirados() throws Exception {
		Boolean isPaginaPopupDetalleChequeGirado=false;

		try {

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoSessionBean==null) {
				this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoSessionBean=new DetalleChequeGiradoSessionBean();
			}

			this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoSessionBean.setsPathNavegacionActual(cuentabancoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetalleChequeGiradoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetalleChequeGirado=this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetalleChequeGirado(true);
			this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetalleChequeGirado(CuentaBancoConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoSessionBean.setisBusquedaDesdeForeignKeySesionCuentaBanco(true);
			this.jInternalFrameDetalleFormCuentaBanco.detallechequegiradoSessionBean.setlidCuentaBancoActual(this.idCuentaBancoActual);

			cuentabancoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentaBanco(true);
			cuentabancoSessionBean.setlIdCuentaBancoActualForeignKey(this.idCuentaBancoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionCuentaBancoParaAutoriPagos() throws Exception {
		Boolean isPaginaPopupAutoriPago=false;

		try {

			if(this.cuentabancoSessionBean==null) {
				this.cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(this.jInternalFrameDetalleFormCuentaBanco.autoripagoSessionBean==null) {
				this.jInternalFrameDetalleFormCuentaBanco.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			this.jInternalFrameDetalleFormCuentaBanco.autoripagoSessionBean.setsPathNavegacionActual(cuentabancoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AutoriPagoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupAutoriPago=this.jInternalFrameDetalleFormCuentaBanco.autoripagoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAutoriPago(true);
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAutoriPago(CuentaBancoConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoSessionBean.setisBusquedaDesdeForeignKeySesionCuentaBanco(true);
			this.jInternalFrameDetalleFormCuentaBanco.autoripagoSessionBean.setlidCuentaBancoActual(this.idCuentaBancoActual);

			cuentabancoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentaBanco(true);
			cuentabancoSessionBean.setlIdCuentaBancoActualForeignKey(this.idCuentaBancoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionCuentaBancoParaBusquedaCuentaContables() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(cuentabancoSessionBean==null) {
				cuentabancoSessionBean=new CuentaBancoSessionBean();
			}

			if(cuentacontableSessionBean==null) {
				cuentacontableSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableSessionBean.setsPathNavegacionActual(cuentabancoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableSessionBean.getisPaginaPopup();
			cuentacontableSessionBean.setisPaginaPopup(false);
			cuentacontableSessionBean.setEstaModoBusqueda(true);
			cuentacontableSessionBean.setsFuncionBusquedaRapida("window.opener.cuentabancoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable(TO_REPLACE);");
			cuentacontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(CuentaBancoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionCuentaBanco(true);
			//cuentacontableSessionBean.setlidCuentaBancoActual(this.idCuentaBancoActual);

			cuentabancoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCuentaBanco(true);
			cuentabancoSessionBean.setlIdCuentaBancoActualForeignKey(this.idCuentaBancoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//CuentaBancoSessionBean cuentabancoSessionBean=new CuentaBancoSessionBean();
		
		if(this.cuentabancoSessionBean==null) {
			this.cuentabancoSessionBean=new CuentaBancoSessionBean();
		}
		
		this.cuentabancoSessionBean.setsUltimaBusquedaCuentaBanco(this.getsAccionBusqueda());
		this.cuentabancoSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.cuentabancoSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
			cuentabancoSessionBean.setcodigo(this.getcodigoBusquedaPorCodigo());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroCheque")) {
			cuentabancoSessionBean.setnumero_cheque(this.getnumero_chequeBusquedaPorNumeroCheque());	
		}
		else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroCuenta")) {
			cuentabancoSessionBean.setnumero_cuenta(this.getnumero_cuentaBusquedaPorNumeroCuenta());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdBanco")) {
			cuentabancoSessionBean.setid_banco(this.getid_bancoFK_IdBanco());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			cuentabancoSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoCuentaBanco")) {
			cuentabancoSessionBean.setid_estado_cuenta_banco(this.getid_estado_cuenta_bancoFK_IdEstadoCuentaBanco());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			cuentabancoSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoCuentaBancoGlobal")) {
			cuentabancoSessionBean.setid_tipo_cuenta_banco_global(this.getid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//CuentaBancoSessionBean cuentabancoSessionBean=new CuentaBancoSessionBean();
		
		if(this.cuentabancoSessionBean==null) {
			this.cuentabancoSessionBean=new CuentaBancoSessionBean();
		}
		
		if(this.cuentabancoSessionBean.getsUltimaBusquedaCuentaBanco()!=null&&!this.cuentabancoSessionBean.getsUltimaBusquedaCuentaBanco().equals("")) {
			this.setsAccionBusqueda(cuentabancoSessionBean.getsUltimaBusquedaCuentaBanco());
			this.setiNumeroPaginacion(cuentabancoSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(cuentabancoSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("BusquedaPorCodigo")) {
				this.setcodigoBusquedaPorCodigo(cuentabancoSessionBean.getcodigo());
				cuentabancoSessionBean.setcodigo("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroCheque")) {
				this.setnumero_chequeBusquedaPorNumeroCheque(cuentabancoSessionBean.getnumero_cheque());
				cuentabancoSessionBean.setnumero_cheque("");
			}
			 else if(this.getsAccionBusqueda().equals("BusquedaPorNumeroCuenta")) {
				this.setnumero_cuentaBusquedaPorNumeroCuenta(cuentabancoSessionBean.getnumero_cuenta());
				cuentabancoSessionBean.setnumero_cuenta("");
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdBanco")) {
				this.setid_bancoFK_IdBanco(cuentabancoSessionBean.getid_banco());
				cuentabancoSessionBean.setid_banco(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(cuentabancoSessionBean.getid_empresa());
				cuentabancoSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoCuentaBanco")) {
				this.setid_estado_cuenta_bancoFK_IdEstadoCuentaBanco(cuentabancoSessionBean.getid_estado_cuenta_banco());
				cuentabancoSessionBean.setid_estado_cuenta_banco(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(cuentabancoSessionBean.getid_sucursal());
				cuentabancoSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoCuentaBancoGlobal")) {
				this.setid_tipo_cuenta_banco_globalFK_IdTipoCuentaBancoGlobal(cuentabancoSessionBean.getid_tipo_cuenta_banco_global());
				cuentabancoSessionBean.setid_tipo_cuenta_banco_global(-1L);
			}
		}
		
		this.cuentabancoSessionBean.setsUltimaBusquedaCuentaBanco("");
		this.cuentabancoSessionBean.setiNumeroPaginacion(CuentaBancoConstantesFunciones.INUMEROPAGINACION);
		this.cuentabancoSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaCuentaBanco(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioCuentaBanco() {
		this.updateBorderResaltarBusquedasFormularioCuentaBanco();
		this.updateVisibilidadBusquedasFormularioCuentaBanco();
		this.updateHabilitarBusquedasFormularioCuentaBanco();
	}
	
	public void updateBorderResaltarBusquedasFormularioCuentaBanco() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasCuentaBanco.getComponents().length>0) {
	

		if(this.cuentabancoConstantesFunciones.resaltarBusquedaPorCodigoCuentaBanco!=null) {
			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelBusquedaPorCodigoCuentaBanco);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
				jPanel.setBorder(this.cuentabancoConstantesFunciones.resaltarBusquedaPorCodigoCuentaBanco);
			}
		}

		if(this.cuentabancoConstantesFunciones.resaltarBusquedaPorNumeroChequeCuentaBanco!=null) {
			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelBusquedaPorNumeroChequeCuentaBanco);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
				jPanel.setBorder(this.cuentabancoConstantesFunciones.resaltarBusquedaPorNumeroChequeCuentaBanco);
			}
		}

		if(this.cuentabancoConstantesFunciones.resaltarBusquedaPorNumeroCuentaCuentaBanco!=null) {
			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelBusquedaPorNumeroCuentaCuentaBanco);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
				jPanel.setBorder(this.cuentabancoConstantesFunciones.resaltarBusquedaPorNumeroCuentaCuentaBanco);
			}
		}

		if(this.cuentabancoConstantesFunciones.resaltarFK_IdBancoCuentaBanco!=null) {
			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelFK_IdBancoCuentaBanco);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
				jPanel.setBorder(this.cuentabancoConstantesFunciones.resaltarFK_IdBancoCuentaBanco);
			}
		}

		if(this.cuentabancoConstantesFunciones.resaltarFK_IdEstadoCuentaBancoCuentaBanco!=null) {
			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelFK_IdEstadoCuentaBancoCuentaBanco);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
				jPanel.setBorder(this.cuentabancoConstantesFunciones.resaltarFK_IdEstadoCuentaBancoCuentaBanco);
			}
		}

		if(this.cuentabancoConstantesFunciones.resaltarFK_IdTipoCuentaBancoGlobalCuentaBanco!=null) {
			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
				jPanel.setBorder(this.cuentabancoConstantesFunciones.resaltarFK_IdTipoCuentaBancoGlobalCuentaBanco);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioCuentaBanco() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasCuentaBanco.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelBusquedaPorCodigoCuentaBanco);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentabancoConstantesFunciones.mostrarBusquedaPorCodigoCuentaBanco);
			if(!this.cuentabancoConstantesFunciones.mostrarBusquedaPorCodigoCuentaBanco && index>-1) {
				this.jTabbedPaneBusquedasCuentaBanco.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelBusquedaPorNumeroChequeCuentaBanco);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentabancoConstantesFunciones.mostrarBusquedaPorNumeroChequeCuentaBanco);
			if(!this.cuentabancoConstantesFunciones.mostrarBusquedaPorNumeroChequeCuentaBanco && index>-1) {
				this.jTabbedPaneBusquedasCuentaBanco.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelBusquedaPorNumeroCuentaCuentaBanco);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentabancoConstantesFunciones.mostrarBusquedaPorNumeroCuentaCuentaBanco);
			if(!this.cuentabancoConstantesFunciones.mostrarBusquedaPorNumeroCuentaCuentaBanco && index>-1) {
				this.jTabbedPaneBusquedasCuentaBanco.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelFK_IdBancoCuentaBanco);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentabancoConstantesFunciones.mostrarFK_IdBancoCuentaBanco);
			if(!this.cuentabancoConstantesFunciones.mostrarFK_IdBancoCuentaBanco && index>-1) {
				this.jTabbedPaneBusquedasCuentaBanco.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelFK_IdEstadoCuentaBancoCuentaBanco);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentabancoConstantesFunciones.mostrarFK_IdEstadoCuentaBancoCuentaBanco);
			if(!this.cuentabancoConstantesFunciones.mostrarFK_IdEstadoCuentaBancoCuentaBanco && index>-1) {
				this.jTabbedPaneBusquedasCuentaBanco.remove(index);
			}

			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cuentabancoConstantesFunciones.mostrarFK_IdTipoCuentaBancoGlobalCuentaBanco);
			if(!this.cuentabancoConstantesFunciones.mostrarFK_IdTipoCuentaBancoGlobalCuentaBanco && index>-1) {
				this.jTabbedPaneBusquedasCuentaBanco.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioCuentaBanco() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasCuentaBanco.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelBusquedaPorCodigoCuentaBanco);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentabancoConstantesFunciones.activarBusquedaPorCodigoCuentaBanco);
				this.jTabbedPaneBusquedasCuentaBanco.setEnabledAt(index,this.cuentabancoConstantesFunciones.activarBusquedaPorCodigoCuentaBanco);
			}

			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelBusquedaPorNumeroChequeCuentaBanco);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentabancoConstantesFunciones.activarBusquedaPorNumeroChequeCuentaBanco);
				this.jTabbedPaneBusquedasCuentaBanco.setEnabledAt(index,this.cuentabancoConstantesFunciones.activarBusquedaPorNumeroChequeCuentaBanco);
			}

			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelBusquedaPorNumeroCuentaCuentaBanco);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentabancoConstantesFunciones.activarBusquedaPorNumeroCuentaCuentaBanco);
				this.jTabbedPaneBusquedasCuentaBanco.setEnabledAt(index,this.cuentabancoConstantesFunciones.activarBusquedaPorNumeroCuentaCuentaBanco);
			}

			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelFK_IdBancoCuentaBanco);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentabancoConstantesFunciones.activarFK_IdBancoCuentaBanco);
				this.jTabbedPaneBusquedasCuentaBanco.setEnabledAt(index,this.cuentabancoConstantesFunciones.activarFK_IdBancoCuentaBanco);
			}

			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelFK_IdEstadoCuentaBancoCuentaBanco);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentabancoConstantesFunciones.activarFK_IdEstadoCuentaBancoCuentaBanco);
				this.jTabbedPaneBusquedasCuentaBanco.setEnabledAt(index,this.cuentabancoConstantesFunciones.activarFK_IdEstadoCuentaBancoCuentaBanco);
			}

			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cuentabancoConstantesFunciones.activarFK_IdTipoCuentaBancoGlobalCuentaBanco);
				this.jTabbedPaneBusquedasCuentaBanco.setEnabledAt(index,this.cuentabancoConstantesFunciones.activarFK_IdTipoCuentaBancoGlobalCuentaBanco);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaCuentaBanco(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("BusquedaPorCodigo")) {
			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelBusquedaPorCodigoCuentaBanco);

			this.jTabbedPaneBusquedasCuentaBanco.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);

			this.cuentabancoConstantesFunciones.setResaltarBusquedaPorCodigoCuentaBanco(resaltar);

			jPanel.setBorder(this.cuentabancoConstantesFunciones.resaltarBusquedaPorCodigoCuentaBanco);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorNumeroCheque")) {
			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelBusquedaPorNumeroChequeCuentaBanco);

			this.jTabbedPaneBusquedasCuentaBanco.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);

			this.cuentabancoConstantesFunciones.setResaltarBusquedaPorNumeroChequeCuentaBanco(resaltar);

			jPanel.setBorder(this.cuentabancoConstantesFunciones.resaltarBusquedaPorNumeroChequeCuentaBanco);
			existe=true;
		}
		else if(sTipoBusqueda.equals("BusquedaPorNumeroCuenta")) {
			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelBusquedaPorNumeroCuentaCuentaBanco);

			this.jTabbedPaneBusquedasCuentaBanco.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);

			this.cuentabancoConstantesFunciones.setResaltarBusquedaPorNumeroCuentaCuentaBanco(resaltar);

			jPanel.setBorder(this.cuentabancoConstantesFunciones.resaltarBusquedaPorNumeroCuentaCuentaBanco);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdBanco")) {
			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelFK_IdBancoCuentaBanco);

			this.jTabbedPaneBusquedasCuentaBanco.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);

			this.cuentabancoConstantesFunciones.setResaltarFK_IdBancoCuentaBanco(resaltar);

			jPanel.setBorder(this.cuentabancoConstantesFunciones.resaltarFK_IdBancoCuentaBanco);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoCuentaBanco")) {
			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelFK_IdEstadoCuentaBancoCuentaBanco);

			this.jTabbedPaneBusquedasCuentaBanco.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);

			this.cuentabancoConstantesFunciones.setResaltarFK_IdEstadoCuentaBancoCuentaBanco(resaltar);

			jPanel.setBorder(this.cuentabancoConstantesFunciones.resaltarFK_IdEstadoCuentaBancoCuentaBanco);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoCuentaBancoGlobal")) {
			index= this.jTabbedPaneBusquedasCuentaBanco.indexOfComponent(this.jPanelFK_IdTipoCuentaBancoGlobalCuentaBanco);

			this.jTabbedPaneBusquedasCuentaBanco.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCuentaBanco.getComponent(index);

			this.cuentabancoConstantesFunciones.setResaltarFK_IdTipoCuentaBancoGlobalCuentaBanco(resaltar);

			jPanel.setBorder(this.cuentabancoConstantesFunciones.resaltarFK_IdTipoCuentaBancoGlobalCuentaBanco);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarCuentaBanco.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioCuentaBanco() throws Exception {

		if(this.jInternalFrameDetalleFormCuentaBanco==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioCuentaBanco();
		this.updateVisibilidadResaltarControlesFormularioCuentaBanco();
		this.updateHabilitarResaltarControlesFormularioCuentaBanco();
		
	}
	
	public void updateBorderResaltarControlesFormularioCuentaBanco() throws Exception {
		if(this.jInternalFrameDetalleFormCuentaBanco==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.cuentabancoConstantesFunciones.resaltaridCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jLabelidCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltaridCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarid_empresaCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarid_empresaCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarid_sucursalCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarid_sucursalCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarid_bancoCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarid_bancoCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarid_tipo_cuenta_banco_globalCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarid_tipo_cuenta_banco_globalCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarcodigoCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jTextAreacodigoCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarcodigoCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarnumero_cuentaCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cuentaCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarnumero_cuentaCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarnumero_chequeCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_chequeCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarnumero_chequeCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarnumero_cheque_auxiliarCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cheque_auxiliarCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarnumero_cheque_auxiliarCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarsaldoCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jTextFieldsaldoCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarsaldoCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarprocedenciaCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jTextAreaprocedenciaCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarprocedenciaCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltardestinoCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jTextAreadestinoCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltardestinoCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarid_cuenta_contableCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarid_cuenta_contableCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltares_bancoCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxes_bancoCuentaBanco.setBorderPainted(true);this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxes_bancoCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltares_bancoCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarid_estado_cuenta_bancoCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarid_estado_cuenta_bancoCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarid_formato_ingresoCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarid_formato_ingresoCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarid_formato_egresoCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarid_formato_egresoCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarid_formato_diarioCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarid_formato_diarioCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarid_formato_chequeCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarid_formato_chequeCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarid_formato_retencionCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarid_formato_retencionCuentaBanco);}
		if(this.cuentabancoConstantesFunciones.resaltarid_formato_retencion_ivaCuentaBanco!=null && this.jInternalFrameDetalleFormCuentaBanco!=null) {this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.setBorder(this.cuentabancoConstantesFunciones.resaltarid_formato_retencion_ivaCuentaBanco);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioCuentaBanco() throws Exception {		
		if(this.jInternalFrameDetalleFormCuentaBanco==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
	
		//this.jInternalFrameDetalleFormCuentaBanco.jLabelidCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostraridCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelidCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostraridCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_empresaCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelid_empresaCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_empresaCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_sucursalCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelid_sucursalCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_sucursalCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_bancoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelid_bancoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_bancoCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_tipo_cuenta_banco_globalCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelid_tipo_cuenta_banco_globalCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_tipo_cuenta_banco_globalCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jTextAreacodigoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarcodigoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelcodigoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarcodigoCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cuentaCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarnumero_cuentaCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelnumero_cuentaCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarnumero_cuentaCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_chequeCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarnumero_chequeCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelnumero_chequeCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarnumero_chequeCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cheque_auxiliarCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarnumero_cheque_auxiliarCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelnumero_cheque_auxiliarCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarnumero_cheque_auxiliarCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jTextFieldsaldoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarsaldoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelsaldoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarsaldoCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jTextAreaprocedenciaCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarprocedenciaCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelprocedenciaCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarprocedenciaCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jTextAreadestinoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrardestinoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPaneldestinoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrardestinoCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_cuenta_contableCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelid_cuenta_contableCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_cuenta_contableCuentaBanco);
			this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_cuenta_contableCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxes_bancoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrares_bancoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPaneles_bancoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrares_bancoCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_estado_cuenta_bancoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelid_estado_cuenta_bancoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_estado_cuenta_bancoCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_formato_ingresoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelid_formato_ingresoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_formato_ingresoCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_formato_egresoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelid_formato_egresoCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_formato_egresoCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_formato_diarioCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelid_formato_diarioCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_formato_diarioCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_formato_chequeCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelid_formato_chequeCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_formato_chequeCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_formato_retencionCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelid_formato_retencionCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_formato_retencionCuentaBanco);
		//this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_formato_retencion_ivaCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jPanelid_formato_retencion_ivaCuentaBanco.setVisible(this.cuentabancoConstantesFunciones.mostrarid_formato_retencion_ivaCuentaBanco);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioCuentaBanco() throws Exception {
		if(this.jInternalFrameDetalleFormCuentaBanco==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormCuentaBanco!=null) {
	
		this.jInternalFrameDetalleFormCuentaBanco.jLabelidCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activaridCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_empresaCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarid_empresaCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_sucursalCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarid_sucursalCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_bancoCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarid_bancoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_tipo_cuenta_banco_globalCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarid_tipo_cuenta_banco_globalCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jTextAreacodigoCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarcodigoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cuentaCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarnumero_cuentaCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_chequeCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarnumero_chequeCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jTextFieldnumero_cheque_auxiliarCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarnumero_cheque_auxiliarCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jTextFieldsaldoCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarsaldoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jTextAreaprocedenciaCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarprocedenciaCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jTextAreadestinoCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activardestinoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_cuenta_contableCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarid_cuenta_contableCuentaBanco);
			this.jInternalFrameDetalleFormCuentaBanco.jButtonid_cuenta_contableCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarid_cuenta_contableCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jCheckBoxes_bancoCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activares_bancoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_estado_cuenta_bancoCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarid_estado_cuenta_bancoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_ingresoCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarid_formato_ingresoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_egresoCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarid_formato_egresoCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_diarioCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarid_formato_diarioCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_chequeCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarid_formato_chequeCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencionCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarid_formato_retencionCuentaBanco);
		this.jInternalFrameDetalleFormCuentaBanco.jComboBoxid_formato_retencion_ivaCuentaBanco.setEnabled(this.cuentabancoConstantesFunciones.activarid_formato_retencion_ivaCuentaBanco);
		}
	}
	
		
}