/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.tesoreria.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.tesoreria.util.RegistroFormaPagoBancoConstantesFunciones;
import com.bydan.erp.tesoreria.util.RegistroFormaPagoBancoParameterReturnGeneral;
//import com.bydan.erp.tesoreria.util.RegistroFormaPagoBancoParameterGeneral;
//import com.bydan.erp.tesoreria.presentation.report.source.RegistroFormaPagoBancoBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.tesoreria.resources.reportes.AuxiliarReportes;


import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.tesoreria.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.tesoreria.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class RegistroFormaPagoBancoBeanSwingJInternalFrame extends RegistroFormaPagoBancoJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(RegistroFormaPagoBancoBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<RegistroFormaPagoBanco> registroformapagobancoValidator = new ClassValidator<RegistroFormaPagoBanco>(RegistroFormaPagoBanco.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public RegistroFormaPagoBanco registroformapagobanco;	
	public RegistroFormaPagoBanco registroformapagobancoAux;
	public RegistroFormaPagoBanco registroformapagobancoAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public RegistroFormaPagoBanco registroformapagobancoTotales;
	public Long idRegistroFormaPagoBancoActual;
	public Long iIdNuevoRegistroFormaPagoBanco=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAsientoContable="";

	public List<AsientoContable> asientocontablesForeignKey;

	public List<AsientoContable> getasientocontablesForeignKey() {
		return asientocontablesForeignKey;
	}

	public void setasientocontablesForeignKey(List<AsientoContable> asientocontablesForeignKey) {
		this.asientocontablesForeignKey = asientocontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public AsientoContable asientocontableForeignKey;

	public AsientoContable getasientocontableForeignKey() {
		return asientocontableForeignKey;
	}

	public void setasientocontableForeignKey(AsientoContable asientocontableForeignKey) {
		this.asientocontableForeignKey = asientocontableForeignKey;
	}

	public String sFinalQueryComboTipoFormaPago="";

	public List<TipoFormaPago> tipoformapagosForeignKey;

	public List<TipoFormaPago> gettipoformapagosForeignKey() {
		return tipoformapagosForeignKey;
	}

	public void settipoformapagosForeignKey(List<TipoFormaPago> tipoformapagosForeignKey) {
		this.tipoformapagosForeignKey = tipoformapagosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoFormaPago tipoformapagoForeignKey;

	public TipoFormaPago gettipoformapagoForeignKey() {
		return tipoformapagoForeignKey;
	}

	public void settipoformapagoForeignKey(TipoFormaPago tipoformapagoForeignKey) {
		this.tipoformapagoForeignKey = tipoformapagoForeignKey;
	}

	public String sFinalQueryComboEstadoRegistroFormaPagoBanco="";

	public List<EstadoRegistroFormaPagoBanco> estadoregistroformapagobancosForeignKey;

	public List<EstadoRegistroFormaPagoBanco> getestadoregistroformapagobancosForeignKey() {
		return estadoregistroformapagobancosForeignKey;
	}

	public void setestadoregistroformapagobancosForeignKey(List<EstadoRegistroFormaPagoBanco> estadoregistroformapagobancosForeignKey) {
		this.estadoregistroformapagobancosForeignKey = estadoregistroformapagobancosForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoRegistroFormaPagoBanco estadoregistroformapagobancoForeignKey;

	public EstadoRegistroFormaPagoBanco getestadoregistroformapagobancoForeignKey() {
		return estadoregistroformapagobancoForeignKey;
	}

	public void setestadoregistroformapagobancoForeignKey(EstadoRegistroFormaPagoBanco estadoregistroformapagobancoForeignKey) {
		this.estadoregistroformapagobancoForeignKey = estadoregistroformapagobancoForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idAsientoContableActual=0L;

	public Long getidAsientoContableActual() {
		return idAsientoContableActual;
	}

	public void setidAsientoContableActual(Long idAsientoContableActual) {
		this.idAsientoContableActual= idAsientoContableActual;
	}
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoRegistroFormaPagoBanco;
	public Boolean isPermisoNuevoRegistroFormaPagoBanco;
	public Boolean isPermisoActualizarRegistroFormaPagoBanco;
	public Boolean isPermisoActualizarOriginalRegistroFormaPagoBanco;
	public Boolean isPermisoEliminarRegistroFormaPagoBanco;
	public Boolean isPermisoGuardarCambiosRegistroFormaPagoBanco;
	public Boolean isPermisoConsultaRegistroFormaPagoBanco;
	public Boolean isPermisoBusquedaRegistroFormaPagoBanco;
	public Boolean isPermisoReporteRegistroFormaPagoBanco;
	public Boolean isPermisoPaginacionMedioRegistroFormaPagoBanco;
	public Boolean isPermisoPaginacionAltoRegistroFormaPagoBanco;
	public Boolean isPermisoPaginacionTodoRegistroFormaPagoBanco;
	public Boolean isPermisoCopiarRegistroFormaPagoBanco;
	public Boolean isPermisoVerFormRegistroFormaPagoBanco;
	public Boolean isPermisoDuplicarRegistroFormaPagoBanco;
	public Boolean isPermisoOrdenRegistroFormaPagoBanco;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public RegistroFormaPagoBancoParameterReturnGeneral registroformapagobancoReturnGeneral;
	public RegistroFormaPagoBancoParameterReturnGeneral registroformapagobancoParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoRegistroFormaPagoBanco=false;
	public Boolean esParaAccionDesdeFormularioRegistroFormaPagoBanco=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected RegistroFormaPagoBancoSessionBeanAdditional registroformapagobancoSessionBeanAdditional=null;
	
	public RegistroFormaPagoBancoSessionBeanAdditional getRegistroFormaPagoBancoSessionBeanAdditional() {
		return this.registroformapagobancoSessionBeanAdditional;
	}
	
	public void setRegistroFormaPagoBancoSessionBeanAdditional(RegistroFormaPagoBancoSessionBeanAdditional registroformapagobancoSessionBeanAdditional) {
		try {
			this.registroformapagobancoSessionBeanAdditional=registroformapagobancoSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional registroformapagobancoBeanSwingJInternalFrameAdditional=null;
	//public class RegistroFormaPagoBancoBeanSwingJInternalFrame
	
	public RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional getRegistroFormaPagoBancoBeanSwingJInternalFrameAdditional() {
		return this.registroformapagobancoBeanSwingJInternalFrameAdditional;
	}
	
	public void setRegistroFormaPagoBancoBeanSwingJInternalFrameAdditional(RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional registroformapagobancoBeanSwingJInternalFrameAdditional) {
		try {
			this.registroformapagobancoBeanSwingJInternalFrameAdditional=registroformapagobancoBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public RegistroFormaPagoBancoLogic registroformapagobancoLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public RegistroFormaPagoBanco registroformapagobancoBean;
	public RegistroFormaPagoBancoConstantesFunciones registroformapagobancoConstantesFunciones;
	//public RegistroFormaPagoBancoParameterReturnGeneral registroformapagobancoReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AsientoContableLogic asientocontableLogic;
	public TipoFormaPagoLogic tipoformapagoLogic;
	public EstadoRegistroFormaPagoBancoLogic estadoregistroformapagobancoLogic;
	public ClienteLogic clienteLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	
	//PARAMETROS
	
	
	//public List<RegistroFormaPagoBanco> registroformapagobancos;	
	//public List<RegistroFormaPagoBanco> registroformapagobancosEliminados;
	//public List<RegistroFormaPagoBanco> registroformapagobancosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoRegistroFormaPagoBanco=false;
	public Boolean isVisibilidadCeldaDuplicarRegistroFormaPagoBanco=true;
	public Boolean isVisibilidadCeldaCopiarRegistroFormaPagoBanco=true;
	public Boolean isVisibilidadCeldaVerFormRegistroFormaPagoBanco=true;
	public Boolean isVisibilidadCeldaOrdenRegistroFormaPagoBanco=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=false;
	public Boolean isVisibilidadCeldaModificarRegistroFormaPagoBanco=false;
	public Boolean isVisibilidadCeldaActualizarRegistroFormaPagoBanco=false;
	public Boolean isVisibilidadCeldaEliminarRegistroFormaPagoBanco=false;
	public Boolean isVisibilidadCeldaCancelarRegistroFormaPagoBanco=false;
	public Boolean isVisibilidadCeldaGuardarRegistroFormaPagoBanco=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdAsientoContable=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoRegistroFormaPagoBanco=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoFormaPago=false;
	
	public Long getiIdNuevoRegistroFormaPagoBanco() {
		return this.iIdNuevoRegistroFormaPagoBanco;
	}

	public void setiIdNuevoRegistroFormaPagoBanco(Long iIdNuevoRegistroFormaPagoBanco) {
		this.iIdNuevoRegistroFormaPagoBanco = iIdNuevoRegistroFormaPagoBanco;
	}
	
	public Long getidRegistroFormaPagoBancoActual() {
		return this.idRegistroFormaPagoBancoActual;
	}

	public void setidRegistroFormaPagoBancoActual(Long idRegistroFormaPagoBancoActual) {
		this.idRegistroFormaPagoBancoActual = idRegistroFormaPagoBancoActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public RegistroFormaPagoBanco getregistroformapagobanco() {
		return this.registroformapagobanco;
	}

	public void setregistroformapagobanco(RegistroFormaPagoBanco registroformapagobanco) {
		this.registroformapagobanco = registroformapagobanco;
	}
	
	public RegistroFormaPagoBanco getregistroformapagobancoAux() {
		return this.registroformapagobancoAux;
	}

	public void setregistroformapagobancoAux(RegistroFormaPagoBanco registroformapagobancoAux) {
		this.registroformapagobancoAux = registroformapagobancoAux;
	}				
	
	public RegistroFormaPagoBanco getregistroformapagobancoAnterior() {
		return this.registroformapagobancoAnterior;
	}

	public void setregistroformapagobancoAnterior(RegistroFormaPagoBanco registroformapagobancoAnterior) {
		this.registroformapagobancoAnterior = registroformapagobancoAnterior;
	}	
	
	public RegistroFormaPagoBanco getregistroformapagobancoTotales() {
		return this.registroformapagobancoTotales;
	}

	public void setregistroformapagobancoTotales(RegistroFormaPagoBanco registroformapagobancoTotales) {
		this.registroformapagobancoTotales = registroformapagobancoTotales;
	}	
	
	public RegistroFormaPagoBanco getregistroformapagobancoBean() {
		return this.registroformapagobancoBean;
	}

	public void setregistroformapagobancoBean(RegistroFormaPagoBanco registroformapagobancoBean) {
		this.registroformapagobancoBean = registroformapagobancoBean;
	}	
	
	public RegistroFormaPagoBancoParameterReturnGeneral getregistroformapagobancoReturnGeneral() {
		return this.registroformapagobancoReturnGeneral;
	}

	public void setregistroformapagobancoReturnGeneral(RegistroFormaPagoBancoParameterReturnGeneral registroformapagobancoReturnGeneral) {
		this.registroformapagobancoReturnGeneral = registroformapagobancoReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_asiento_contableFK_IdAsientoContable=-1L;

	public Long getid_asiento_contableFK_IdAsientoContable() {
		return this.id_asiento_contableFK_IdAsientoContable;
	}

	public void setid_asiento_contableFK_IdAsientoContable(Long id_asiento_contableFK_IdAsientoContable) {
		this.id_asiento_contableFK_IdAsientoContable = id_asiento_contableFK_IdAsientoContable;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco=-1L;

	public Long getid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco() {
		return this.id_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco;
	}

	public void setid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco(Long id_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco) {
		this.id_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco = id_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_forma_pagoFK_IdTipoFormaPago=-1L;

	public Long getid_tipo_forma_pagoFK_IdTipoFormaPago() {
		return this.id_tipo_forma_pagoFK_IdTipoFormaPago;
	}

	public void setid_tipo_forma_pagoFK_IdTipoFormaPago(Long id_tipo_forma_pagoFK_IdTipoFormaPago) {
		this.id_tipo_forma_pagoFK_IdTipoFormaPago = id_tipo_forma_pagoFK_IdTipoFormaPago;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public RegistroFormaPagoBancoLogic getRegistroFormaPagoBancoLogic()	{		
		return registroformapagobancoLogic;
	}

	public void setRegistroFormaPagoBancoLogic(RegistroFormaPagoBancoLogic registroformapagobancoLogic) {
		this.registroformapagobancoLogic = registroformapagobancoLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoRegistroFormaPagoBanco() {
		return isEsNuevoRegistroFormaPagoBanco;
	}

	public void setIsEsNuevoRegistroFormaPagoBanco(Boolean isEsNuevoRegistroFormaPagoBanco) {
		this.isEsNuevoRegistroFormaPagoBanco = isEsNuevoRegistroFormaPagoBanco;
	}

	public Boolean getEsParaAccionDesdeFormularioRegistroFormaPagoBanco() {
		return esParaAccionDesdeFormularioRegistroFormaPagoBanco;
	}
	
	public void setEsParaAccionDesdeFormularioRegistroFormaPagoBanco(Boolean esParaAccionDesdeFormularioRegistroFormaPagoBanco) {
		this.esParaAccionDesdeFormularioRegistroFormaPagoBanco = esParaAccionDesdeFormularioRegistroFormaPagoBanco;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.registroformapagobancoSessionBean==null) {
				this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(registroformapagobancoSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.registroformapagobancoSessionBean==null) {
				this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(registroformapagobancoSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.registroformapagobancoSessionBean==null) {
				this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(registroformapagobancoSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.registroformapagobancoSessionBean==null) {
				this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(registroformapagobancoSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAsientoContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AsientoContableLogic asientocontableLogic=new AsientoContableLogic();

			//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

			if(this.registroformapagobancoSessionBean==null) {
				this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

					asientocontableLogic.getTodosAsientoContablesWithConnection(sFinalQuery,new Pagination());

					this.asientocontablesForeignKey=asientocontableLogic.getAsientoContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAsientoContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(registroformapagobancoSessionBean.getlidAsientoContableActual());
					this.asientocontablesForeignKey.add(asientocontableLogic.getAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoFormaPagosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipoformapagosForeignKey=new ArrayList<TipoFormaPago>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoFormaPagoLogic tipoformapagoLogic=new TipoFormaPagoLogic();

			//tipoformapagoLogic.getTipoFormaPagoDataAccess().setIsForForeingKeyData(true);

			if(this.registroformapagobancoSessionBean==null) {
				this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionTipoFormaPago()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoformapagoLogic.getTipoFormaPagoDataAccess().setIsForForeingKeyData(true);

					tipoformapagoLogic.getTodosTipoFormaPagosWithConnection(sFinalQuery,new Pagination());

					this.tipoformapagosForeignKey=tipoformapagoLogic.getTipoFormaPagos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoFormaPago(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoformapagoLogic.getEntityWithConnection(registroformapagobancoSessionBean.getlidTipoFormaPagoActual());
					this.tipoformapagosForeignKey.add(tipoformapagoLogic.getTipoFormaPago());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoRegistroFormaPagoBancosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadoregistroformapagobancosForeignKey=new ArrayList<EstadoRegistroFormaPagoBanco>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoRegistroFormaPagoBancoLogic estadoregistroformapagobancoLogic=new EstadoRegistroFormaPagoBancoLogic();

			//estadoregistroformapagobancoLogic.getEstadoRegistroFormaPagoBancoDataAccess().setIsForForeingKeyData(true);

			if(this.registroformapagobancoSessionBean==null) {
				this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionEstadoRegistroFormaPagoBanco()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadoregistroformapagobancoLogic.getEstadoRegistroFormaPagoBancoDataAccess().setIsForForeingKeyData(true);

					estadoregistroformapagobancoLogic.getTodosEstadoRegistroFormaPagoBancosWithConnection(sFinalQuery,new Pagination());

					this.estadoregistroformapagobancosForeignKey=estadoregistroformapagobancoLogic.getEstadoRegistroFormaPagoBancos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoRegistroFormaPagoBanco(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadoregistroformapagobancoLogic.getEntityWithConnection(registroformapagobancoSessionBean.getlidEstadoRegistroFormaPagoBancoActual());
					this.estadoregistroformapagobancosForeignKey.add(estadoregistroformapagobancoLogic.getEstadoRegistroFormaPagoBanco());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.registroformapagobancoSessionBean==null) {
				this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(registroformapagobancoSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.registroformapagobancoSessionBean==null) {
				this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(registroformapagobancoSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.registroformapagobancoSessionBean==null) {
				this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(registroformapagobancoSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.registroformapagobanco!=null) {
						this.registroformapagobanco.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaRegistroFormaPagoBanco.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaRegistroFormaPagoBancoGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaRegistroFormaPagoBancoGenerico!=null && jComboBoxid_empresaRegistroFormaPagoBancoGenerico.getItemCount()>0) {
					jComboBoxid_empresaRegistroFormaPagoBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.registroformapagobanco!=null) {
						this.registroformapagobanco.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalRegistroFormaPagoBanco.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalRegistroFormaPagoBancoGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalRegistroFormaPagoBancoGenerico!=null && jComboBoxid_sucursalRegistroFormaPagoBancoGenerico.getItemCount()>0) {
					jComboBoxid_sucursalRegistroFormaPagoBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.registroformapagobanco!=null) {
						this.registroformapagobanco.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioRegistroFormaPagoBanco.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioRegistroFormaPagoBancoGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioRegistroFormaPagoBancoGenerico!=null && jComboBoxid_ejercicioRegistroFormaPagoBancoGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioRegistroFormaPagoBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.registroformapagobanco!=null) {
						this.registroformapagobanco.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoRegistroFormaPagoBanco.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoRegistroFormaPagoBancoGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoRegistroFormaPagoBancoGenerico!=null && jComboBoxid_periodoRegistroFormaPagoBancoGenerico.getItemCount()>0) {
					jComboBoxid_periodoRegistroFormaPagoBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAsientoContableForeignKey(Long idAsientoContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(asientocontableTemp!=null) {

					if(this.registroformapagobanco!=null) {
						this.registroformapagobanco.setAsientoContable(asientocontableTemp);
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.setSelectedItem(asientocontableTemp);
					}
				} else {
					//jComboBoxid_asiento_contableRegistroFormaPagoBanco.setSelectedItem(asientocontableTemp);
					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(asientocontableTemp!=null && jComboBoxid_asiento_contableFK_IdAsientoContableRegistroFormaPagoBanco!=null) {
						jComboBoxid_asiento_contableFK_IdAsientoContableRegistroFormaPagoBanco.setSelectedItem(asientocontableTemp);
					} else {
						if(jComboBoxid_asiento_contableFK_IdAsientoContableRegistroFormaPagoBanco!=null) {
							//jComboBoxid_asiento_contableFK_IdAsientoContableRegistroFormaPagoBanco.setSelectedItem(asientocontableTemp);
							if(jComboBoxid_asiento_contableFK_IdAsientoContableRegistroFormaPagoBanco.getItemCount()>0) {
								jComboBoxid_asiento_contableFK_IdAsientoContableRegistroFormaPagoBanco.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAsientoContableForeignKeyDescripcion(Long idAsientoContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}


			sDescripcion=AsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAsientoContableForeignKeyGenerico(Long idAsientoContableSeleccionado,JComboBox jComboBoxid_asiento_contableRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(asientocontableTemp!=null) {
				jComboBoxid_asiento_contableRegistroFormaPagoBancoGenerico.setSelectedItem(asientocontableTemp);
			} else {
				if(jComboBoxid_asiento_contableRegistroFormaPagoBancoGenerico!=null && jComboBoxid_asiento_contableRegistroFormaPagoBancoGenerico.getItemCount()>0) {
					jComboBoxid_asiento_contableRegistroFormaPagoBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoFormaPagoForeignKey(Long idTipoFormaPagoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoFormaPago  tipoformapagoTemp=null;

			for(TipoFormaPago tipoformapagoAux:tipoformapagosForeignKey) {
				if(tipoformapagoAux.getId()!=null && tipoformapagoAux.getId().equals(idTipoFormaPagoSeleccionado)) {
					tipoformapagoTemp=tipoformapagoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoformapagoTemp!=null) {

					if(this.registroformapagobanco!=null) {
						this.registroformapagobanco.setTipoFormaPago(tipoformapagoTemp);
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.setSelectedItem(tipoformapagoTemp);
					}
				} else {
					//jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.setSelectedItem(tipoformapagoTemp);
					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoFormaPago") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoformapagoTemp!=null && jComboBoxid_tipo_forma_pagoFK_IdTipoFormaPagoRegistroFormaPagoBanco!=null) {
						jComboBoxid_tipo_forma_pagoFK_IdTipoFormaPagoRegistroFormaPagoBanco.setSelectedItem(tipoformapagoTemp);
					} else {
						if(jComboBoxid_tipo_forma_pagoFK_IdTipoFormaPagoRegistroFormaPagoBanco!=null) {
							//jComboBoxid_tipo_forma_pagoFK_IdTipoFormaPagoRegistroFormaPagoBanco.setSelectedItem(tipoformapagoTemp);
							if(jComboBoxid_tipo_forma_pagoFK_IdTipoFormaPagoRegistroFormaPagoBanco.getItemCount()>0) {
								jComboBoxid_tipo_forma_pagoFK_IdTipoFormaPagoRegistroFormaPagoBanco.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoFormaPagoForeignKeyDescripcion(Long idTipoFormaPagoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoFormaPago  tipoformapagoTemp=null;

			for(TipoFormaPago tipoformapagoAux:tipoformapagosForeignKey) {
				if(tipoformapagoAux.getId()!=null && tipoformapagoAux.getId().equals(idTipoFormaPagoSeleccionado)) {
					tipoformapagoTemp=tipoformapagoAux;
					break;
				}
			}


			sDescripcion=TipoFormaPagoConstantesFunciones.getTipoFormaPagoDescripcion(tipoformapagoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoFormaPagoForeignKeyGenerico(Long idTipoFormaPagoSeleccionado,JComboBox jComboBoxid_tipo_forma_pagoRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			TipoFormaPago  tipoformapagoTemp=null;

			for(TipoFormaPago tipoformapagoAux:tipoformapagosForeignKey) {
				if(tipoformapagoAux.getId()!=null && tipoformapagoAux.getId().equals(idTipoFormaPagoSeleccionado)) {
					tipoformapagoTemp=tipoformapagoAux;
					break;
				}
			}

			if(tipoformapagoTemp!=null) {
				jComboBoxid_tipo_forma_pagoRegistroFormaPagoBancoGenerico.setSelectedItem(tipoformapagoTemp);
			} else {
				if(jComboBoxid_tipo_forma_pagoRegistroFormaPagoBancoGenerico!=null && jComboBoxid_tipo_forma_pagoRegistroFormaPagoBancoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_forma_pagoRegistroFormaPagoBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoRegistroFormaPagoBancoForeignKey(Long idEstadoRegistroFormaPagoBancoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoRegistroFormaPagoBanco  estadoregistroformapagobancoTemp=null;

			for(EstadoRegistroFormaPagoBanco estadoregistroformapagobancoAux:estadoregistroformapagobancosForeignKey) {
				if(estadoregistroformapagobancoAux.getId()!=null && estadoregistroformapagobancoAux.getId().equals(idEstadoRegistroFormaPagoBancoSeleccionado)) {
					estadoregistroformapagobancoTemp=estadoregistroformapagobancoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadoregistroformapagobancoTemp!=null) {

					if(this.registroformapagobanco!=null) {
						this.registroformapagobanco.setEstadoRegistroFormaPagoBanco(estadoregistroformapagobancoTemp);
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.setSelectedItem(estadoregistroformapagobancoTemp);
					}
				} else {
					//jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.setSelectedItem(estadoregistroformapagobancoTemp);
					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoRegistroFormaPagoBanco") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadoregistroformapagobancoTemp!=null && jComboBoxid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco!=null) {
						jComboBoxid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco.setSelectedItem(estadoregistroformapagobancoTemp);
					} else {
						if(jComboBoxid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco!=null) {
							//jComboBoxid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco.setSelectedItem(estadoregistroformapagobancoTemp);
							if(jComboBoxid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco.getItemCount()>0) {
								jComboBoxid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoRegistroFormaPagoBancoForeignKeyDescripcion(Long idEstadoRegistroFormaPagoBancoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoRegistroFormaPagoBanco  estadoregistroformapagobancoTemp=null;

			for(EstadoRegistroFormaPagoBanco estadoregistroformapagobancoAux:estadoregistroformapagobancosForeignKey) {
				if(estadoregistroformapagobancoAux.getId()!=null && estadoregistroformapagobancoAux.getId().equals(idEstadoRegistroFormaPagoBancoSeleccionado)) {
					estadoregistroformapagobancoTemp=estadoregistroformapagobancoAux;
					break;
				}
			}


			sDescripcion=EstadoRegistroFormaPagoBancoConstantesFunciones.getEstadoRegistroFormaPagoBancoDescripcion(estadoregistroformapagobancoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoRegistroFormaPagoBancoForeignKeyGenerico(Long idEstadoRegistroFormaPagoBancoSeleccionado,JComboBox jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			EstadoRegistroFormaPagoBanco  estadoregistroformapagobancoTemp=null;

			for(EstadoRegistroFormaPagoBanco estadoregistroformapagobancoAux:estadoregistroformapagobancosForeignKey) {
				if(estadoregistroformapagobancoAux.getId()!=null && estadoregistroformapagobancoAux.getId().equals(idEstadoRegistroFormaPagoBancoSeleccionado)) {
					estadoregistroformapagobancoTemp=estadoregistroformapagobancoAux;
					break;
				}
			}

			if(estadoregistroformapagobancoTemp!=null) {
				jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoGenerico.setSelectedItem(estadoregistroformapagobancoTemp);
			} else {
				if(jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoGenerico!=null && jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoGenerico.getItemCount()>0) {
					jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.registroformapagobanco!=null) {
						this.registroformapagobanco.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteRegistroFormaPagoBanco.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteRegistroFormaPagoBanco!=null) {
						jComboBoxid_clienteFK_IdClienteRegistroFormaPagoBanco.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteRegistroFormaPagoBanco!=null) {
							//jComboBoxid_clienteFK_IdClienteRegistroFormaPagoBanco.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteRegistroFormaPagoBanco.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteRegistroFormaPagoBanco.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteRegistroFormaPagoBancoGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteRegistroFormaPagoBancoGenerico!=null && jComboBoxid_clienteRegistroFormaPagoBancoGenerico.getItemCount()>0) {
					jComboBoxid_clienteRegistroFormaPagoBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.registroformapagobanco!=null) {
						this.registroformapagobanco.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioRegistroFormaPagoBanco.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioRegistroFormaPagoBancoGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioRegistroFormaPagoBancoGenerico!=null && jComboBoxid_anioRegistroFormaPagoBancoGenerico.getItemCount()>0) {
					jComboBoxid_anioRegistroFormaPagoBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.registroformapagobanco!=null) {
						this.registroformapagobanco.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesRegistroFormaPagoBanco.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.getItemCount()>0) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesRegistroFormaPagoBancoGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesRegistroFormaPagoBancoGenerico!=null && jComboBoxid_mesRegistroFormaPagoBancoGenerico.getItemCount()>0) {
					jComboBoxid_mesRegistroFormaPagoBancoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(RegistroFormaPagoBanco registroformapagobanco,JComboBox jComboBoxid_empresaRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaRegistroFormaPagoBancoGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaRegistroFormaPagoBancoGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				registroformapagobanco.setid_empresa(empresaAux.getId());
				registroformapagobanco.setempresa_descripcion(RegistroFormaPagoBancoConstantesFunciones.getEmpresaDescripcion(empresaAux));
				registroformapagobanco.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(RegistroFormaPagoBanco registroformapagobanco,JComboBox jComboBoxid_sucursalRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalRegistroFormaPagoBancoGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalRegistroFormaPagoBancoGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				registroformapagobanco.setid_sucursal(sucursalAux.getId());
				registroformapagobanco.setsucursal_descripcion(RegistroFormaPagoBancoConstantesFunciones.getSucursalDescripcion(sucursalAux));
				registroformapagobanco.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(RegistroFormaPagoBanco registroformapagobanco,JComboBox jComboBoxid_ejercicioRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioRegistroFormaPagoBancoGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioRegistroFormaPagoBancoGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				registroformapagobanco.setid_ejercicio(ejercicioAux.getId());
				registroformapagobanco.setejercicio_descripcion(RegistroFormaPagoBancoConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				registroformapagobanco.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(RegistroFormaPagoBanco registroformapagobanco,JComboBox jComboBoxid_periodoRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoRegistroFormaPagoBancoGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoRegistroFormaPagoBancoGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				registroformapagobanco.setid_periodo(periodoAux.getId());
				registroformapagobanco.setperiodo_descripcion(RegistroFormaPagoBancoConstantesFunciones.getPeriodoDescripcion(periodoAux));
				registroformapagobanco.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAsientoContableForeignKey(RegistroFormaPagoBanco registroformapagobanco,JComboBox jComboBoxid_asiento_contableRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableAux=new AsientoContable();

			if(jComboBoxid_asiento_contableRegistroFormaPagoBancoGenerico==null) {
				asientocontableAux=(AsientoContable)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.getSelectedItem();
			} else {
				asientocontableAux=(AsientoContable)jComboBoxid_asiento_contableRegistroFormaPagoBancoGenerico.getSelectedItem();
			}

			if(asientocontableAux!=null && asientocontableAux.getId()!=null) {
				registroformapagobanco.setid_asiento_contable(asientocontableAux.getId());
				registroformapagobanco.setasientocontable_descripcion(RegistroFormaPagoBancoConstantesFunciones.getAsientoContableDescripcion(asientocontableAux));
				registroformapagobanco.setAsientoContable(asientocontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoFormaPagoForeignKey(RegistroFormaPagoBanco registroformapagobanco,JComboBox jComboBoxid_tipo_forma_pagoRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			TipoFormaPago  tipoformapagoAux=new TipoFormaPago();

			if(jComboBoxid_tipo_forma_pagoRegistroFormaPagoBancoGenerico==null) {
				tipoformapagoAux=(TipoFormaPago)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.getSelectedItem();
			} else {
				tipoformapagoAux=(TipoFormaPago)jComboBoxid_tipo_forma_pagoRegistroFormaPagoBancoGenerico.getSelectedItem();
			}

			if(tipoformapagoAux!=null && tipoformapagoAux.getId()!=null) {
				registroformapagobanco.setid_tipo_forma_pago(tipoformapagoAux.getId());
				registroformapagobanco.settipoformapago_descripcion(RegistroFormaPagoBancoConstantesFunciones.getTipoFormaPagoDescripcion(tipoformapagoAux));
				registroformapagobanco.setTipoFormaPago(tipoformapagoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoRegistroFormaPagoBancoForeignKey(RegistroFormaPagoBanco registroformapagobanco,JComboBox jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			EstadoRegistroFormaPagoBanco  estadoregistroformapagobancoAux=new EstadoRegistroFormaPagoBanco();

			if(jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoGenerico==null) {
				estadoregistroformapagobancoAux=(EstadoRegistroFormaPagoBanco)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.getSelectedItem();
			} else {
				estadoregistroformapagobancoAux=(EstadoRegistroFormaPagoBanco)jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoGenerico.getSelectedItem();
			}

			if(estadoregistroformapagobancoAux!=null && estadoregistroformapagobancoAux.getId()!=null) {
				registroformapagobanco.setid_estado_registro_forma_pago_banco(estadoregistroformapagobancoAux.getId());
				registroformapagobanco.setestadoregistroformapagobanco_descripcion(RegistroFormaPagoBancoConstantesFunciones.getEstadoRegistroFormaPagoBancoDescripcion(estadoregistroformapagobancoAux));
				registroformapagobanco.setEstadoRegistroFormaPagoBanco(estadoregistroformapagobancoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(RegistroFormaPagoBanco registroformapagobanco,JComboBox jComboBoxid_clienteRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteRegistroFormaPagoBancoGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteRegistroFormaPagoBancoGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				registroformapagobanco.setid_cliente(clienteAux.getId());
				registroformapagobanco.setcliente_descripcion(RegistroFormaPagoBancoConstantesFunciones.getClienteDescripcion(clienteAux));
				registroformapagobanco.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(RegistroFormaPagoBanco registroformapagobanco,JComboBox jComboBoxid_anioRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioRegistroFormaPagoBancoGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioRegistroFormaPagoBancoGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				registroformapagobanco.setid_anio(anioAux.getId());
				registroformapagobanco.setanio_descripcion(RegistroFormaPagoBancoConstantesFunciones.getAnioDescripcion(anioAux));
				registroformapagobanco.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(RegistroFormaPagoBanco registroformapagobanco,JComboBox jComboBoxid_mesRegistroFormaPagoBancoGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesRegistroFormaPagoBancoGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesRegistroFormaPagoBancoGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				registroformapagobanco.setid_mes(mesAux.getId());
				registroformapagobanco.setmes_descripcion(RegistroFormaPagoBancoConstantesFunciones.getMesDescripcion(mesAux));
				registroformapagobanco.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
					}

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
					}

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
					}

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
					}

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAsientoContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAsientoContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.addItem(asientocontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
					}

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableRegistroFormaPagoBanco.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jComboBoxid_asiento_contableFK_IdAsientoContableRegistroFormaPagoBanco.addItem(asientocontable);
							}
						}

						if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoFormaPagosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoFormaPago=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.removeAllItems();

							for(TipoFormaPago tipoformapago:this.tipoformapagosForeignKey) {
								this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.addItem(tipoformapago);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
					}

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoFormaPago") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_forma_pagoFK_IdTipoFormaPagoRegistroFormaPagoBanco.removeAllItems();

							for(TipoFormaPago tipoformapago:this.tipoformapagosForeignKey) {
								this.jComboBoxid_tipo_forma_pagoFK_IdTipoFormaPagoRegistroFormaPagoBanco.addItem(tipoformapago);
							}
						}

						if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoRegistroFormaPagoBancosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoRegistroFormaPagoBanco=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.removeAllItems();

							for(EstadoRegistroFormaPagoBanco estadoregistroformapagobanco:this.estadoregistroformapagobancosForeignKey) {
								this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.addItem(estadoregistroformapagobanco);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
					}

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoRegistroFormaPagoBanco") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco.removeAllItems();

							for(EstadoRegistroFormaPagoBanco estadoregistroformapagobanco:this.estadoregistroformapagobancosForeignKey) {
								this.jComboBoxid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco.addItem(estadoregistroformapagobanco);
							}
						}

						if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
					}

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteRegistroFormaPagoBanco.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteRegistroFormaPagoBanco.addItem(cliente);
							}
						}

						if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
					}

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { 
					}

					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAsientoContableForeignKey(AsientoContable asientocontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.setSelectedItem(asientocontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableRegistroFormaPagoBanco.setSelectedItem(asientocontable);
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoFormaPagoForeignKey(TipoFormaPago tipoformapago,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.setSelectedItem(tipoformapago);
						}
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_forma_pagoFK_IdTipoFormaPagoRegistroFormaPagoBanco.setSelectedItem(tipoformapago);
						} else {
							this.jComboBoxid_tipo_forma_pagoFK_IdTipoFormaPagoRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoRegistroFormaPagoBancoForeignKey(EstadoRegistroFormaPagoBanco estadoregistroformapagobanco,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.setSelectedItem(estadoregistroformapagobanco);
						}
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco.setSelectedItem(estadoregistroformapagobanco);
						} else {
							this.jComboBoxid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteRegistroFormaPagoBanco.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesRegistroFormaPagoBanco() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			RegistroFormaPagoBancoConstantesFunciones.refrescarForeignKeysDescripcionesRegistroFormaPagoBanco(this.registroformapagobancoLogic.getRegistroFormaPagoBancos());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			RegistroFormaPagoBancoConstantesFunciones.refrescarForeignKeysDescripcionesRegistroFormaPagoBanco(this.registroformapagobancos);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(AsientoContable.class));
		classes.add(new Classe(TipoFormaPago.class));
		classes.add(new Classe(EstadoRegistroFormaPagoBanco.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//registroformapagobancoLogic.setRegistroFormaPagoBancos(this.registroformapagobancos);
			registroformapagobancoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public RegistroFormaPagoBancoParameterReturnGeneral getRegistroFormaPagoBancoParameterGeneral() {
		return this.registroformapagobancoParameterGeneral;
	}
	
	public void setRegistroFormaPagoBancoParameterGeneral(RegistroFormaPagoBancoParameterReturnGeneral registroformapagobancoParameterGeneral) {
		this.registroformapagobancoParameterGeneral = registroformapagobancoParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoRegistroFormaPagoBanco() {
		return isPermisoTodoRegistroFormaPagoBanco;
	}

	public void setIsPermisoTodoRegistroFormaPagoBanco(Boolean isPermisoTodoRegistroFormaPagoBanco) {
		this.isPermisoTodoRegistroFormaPagoBanco = isPermisoTodoRegistroFormaPagoBanco;
	}

	public Boolean getIsPermisoNuevoRegistroFormaPagoBanco() {
		return isPermisoNuevoRegistroFormaPagoBanco;
	}

	public void setIsPermisoNuevoRegistroFormaPagoBanco(Boolean isPermisoNuevoRegistroFormaPagoBanco) {
		this.isPermisoNuevoRegistroFormaPagoBanco = isPermisoNuevoRegistroFormaPagoBanco;
	}

	public Boolean getIsPermisoActualizarRegistroFormaPagoBanco() {
		return isPermisoActualizarRegistroFormaPagoBanco;
	}

	public void setIsPermisoActualizarRegistroFormaPagoBanco(Boolean isPermisoActualizarRegistroFormaPagoBanco) {
		this.isPermisoActualizarRegistroFormaPagoBanco = isPermisoActualizarRegistroFormaPagoBanco;
	}

	public Boolean getIsPermisoEliminarRegistroFormaPagoBanco() {
		return isPermisoEliminarRegistroFormaPagoBanco;
	}

	public void setIsPermisoEliminarRegistroFormaPagoBanco(Boolean isPermisoEliminarRegistroFormaPagoBanco) {
		this.isPermisoEliminarRegistroFormaPagoBanco = isPermisoEliminarRegistroFormaPagoBanco;
	}

	public Boolean getIsPermisoGuardarCambiosRegistroFormaPagoBanco() {
		return isPermisoGuardarCambiosRegistroFormaPagoBanco;
	}

	public void setIsPermisoGuardarCambiosRegistroFormaPagoBanco(Boolean isPermisoGuardarCambiosRegistroFormaPagoBanco) {
		this.isPermisoGuardarCambiosRegistroFormaPagoBanco = isPermisoGuardarCambiosRegistroFormaPagoBanco;
	}
	
	public Boolean getIsPermisoConsultaRegistroFormaPagoBanco() {
		return isPermisoConsultaRegistroFormaPagoBanco;
	}

	public void setIsPermisoConsultaRegistroFormaPagoBanco(Boolean isPermisoConsultaRegistroFormaPagoBanco) {
		this.isPermisoConsultaRegistroFormaPagoBanco = isPermisoConsultaRegistroFormaPagoBanco;
	}

	public Boolean getIsPermisoBusquedaRegistroFormaPagoBanco() {
		return isPermisoBusquedaRegistroFormaPagoBanco;
	}

	public void setIsPermisoBusquedaRegistroFormaPagoBanco(Boolean isPermisoBusquedaRegistroFormaPagoBanco) {
		this.isPermisoBusquedaRegistroFormaPagoBanco = isPermisoBusquedaRegistroFormaPagoBanco;
	}

	public Boolean getIsPermisoReporteRegistroFormaPagoBanco() {
		return isPermisoReporteRegistroFormaPagoBanco;
	}

	public void setIsPermisoReporteRegistroFormaPagoBanco(Boolean isPermisoReporteRegistroFormaPagoBanco) {
		this.isPermisoReporteRegistroFormaPagoBanco = isPermisoReporteRegistroFormaPagoBanco;
	}
	
	public Boolean getIsPermisoPaginacionMedioRegistroFormaPagoBanco() {
		return isPermisoPaginacionMedioRegistroFormaPagoBanco;
	}

	public void setIsPermisoPaginacionMedioRegistroFormaPagoBanco(Boolean isPermisoPaginacionMedioRegistroFormaPagoBanco) {
		this.isPermisoPaginacionMedioRegistroFormaPagoBanco = isPermisoPaginacionMedioRegistroFormaPagoBanco;
	}
	
	public Boolean getIsPermisoPaginacionTodoRegistroFormaPagoBanco() {
		return isPermisoPaginacionTodoRegistroFormaPagoBanco;
	}

	public void setIsPermisoPaginacionTodoRegistroFormaPagoBanco(Boolean isPermisoPaginacionTodoRegistroFormaPagoBanco) {
		this.isPermisoPaginacionTodoRegistroFormaPagoBanco = isPermisoPaginacionTodoRegistroFormaPagoBanco;
	}
	
	public Boolean getIsPermisoPaginacionAltoRegistroFormaPagoBanco() {
		return isPermisoPaginacionAltoRegistroFormaPagoBanco;
	}

	public void setIsPermisoPaginacionAltoRegistroFormaPagoBanco(Boolean isPermisoPaginacionAltoRegistroFormaPagoBanco) {
		this.isPermisoPaginacionAltoRegistroFormaPagoBanco = isPermisoPaginacionAltoRegistroFormaPagoBanco;
	}
	
	public Boolean getIsPermisoCopiarRegistroFormaPagoBanco() {
		return isPermisoCopiarRegistroFormaPagoBanco;
	}

	public void setIsPermisoCopiarRegistroFormaPagoBanco(Boolean isPermisoCopiarRegistroFormaPagoBanco) {
		this.isPermisoCopiarRegistroFormaPagoBanco = isPermisoCopiarRegistroFormaPagoBanco;
	}
	
	public Boolean getIsPermisoVerFormRegistroFormaPagoBanco() {
		return isPermisoVerFormRegistroFormaPagoBanco;
	}

	public void setIsPermisoVerFormRegistroFormaPagoBanco(Boolean isPermisoVerFormRegistroFormaPagoBanco) {
		this.isPermisoVerFormRegistroFormaPagoBanco = isPermisoVerFormRegistroFormaPagoBanco;
	}
	
	public Boolean getIsPermisoDuplicarRegistroFormaPagoBanco() {
		return isPermisoDuplicarRegistroFormaPagoBanco;
	}

	public void setIsPermisoDuplicarRegistroFormaPagoBanco(Boolean isPermisoDuplicarRegistroFormaPagoBanco) {
		this.isPermisoDuplicarRegistroFormaPagoBanco = isPermisoDuplicarRegistroFormaPagoBanco;
	}
	
	public Boolean getIsPermisoOrdenRegistroFormaPagoBanco() {
		return isPermisoOrdenRegistroFormaPagoBanco;
	}

	public void setIsPermisoOrdenRegistroFormaPagoBanco(Boolean isPermisoOrdenRegistroFormaPagoBanco) {
		this.isPermisoOrdenRegistroFormaPagoBanco = isPermisoOrdenRegistroFormaPagoBanco;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRegistroFormaPagoBanco() {
		return isVisibilidadCeldaNuevoRegistroFormaPagoBanco;
	}

	public void setIsVisibilidadCeldaNuevoRegistroFormaPagoBanco(Boolean isVisibilidadCeldaNuevoRegistroFormaPagoBanco) {
		this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco = isVisibilidadCeldaNuevoRegistroFormaPagoBanco;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarRegistroFormaPagoBanco() {
		return isVisibilidadCeldaDuplicarRegistroFormaPagoBanco;
	}

	public void setIsVisibilidadCeldaDuplicarRegistroFormaPagoBanco(Boolean isVisibilidadCeldaDuplicarRegistroFormaPagoBanco) {
		this.isVisibilidadCeldaDuplicarRegistroFormaPagoBanco = isVisibilidadCeldaDuplicarRegistroFormaPagoBanco;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarRegistroFormaPagoBanco() {
		return isVisibilidadCeldaCopiarRegistroFormaPagoBanco;
	}

	public void setIsVisibilidadCeldaCopiarRegistroFormaPagoBanco(Boolean isVisibilidadCeldaCopiarRegistroFormaPagoBanco) {
		this.isVisibilidadCeldaCopiarRegistroFormaPagoBanco = isVisibilidadCeldaCopiarRegistroFormaPagoBanco;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormRegistroFormaPagoBanco() {
		return isVisibilidadCeldaVerFormRegistroFormaPagoBanco;
	}

	public void setIsVisibilidadCeldaVerFormRegistroFormaPagoBanco(Boolean isVisibilidadCeldaVerFormRegistroFormaPagoBanco) {
		this.isVisibilidadCeldaVerFormRegistroFormaPagoBanco = isVisibilidadCeldaVerFormRegistroFormaPagoBanco;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenRegistroFormaPagoBanco() {
		return isVisibilidadCeldaOrdenRegistroFormaPagoBanco;
	}

	public void setIsVisibilidadCeldaOrdenRegistroFormaPagoBanco(Boolean isVisibilidadCeldaOrdenRegistroFormaPagoBanco) {
		this.isVisibilidadCeldaOrdenRegistroFormaPagoBanco = isVisibilidadCeldaOrdenRegistroFormaPagoBanco;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco() {
		return isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco(Boolean isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco) {
		this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco = isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco;
	}
	
	public Boolean getIsVisibilidadCeldaModificarRegistroFormaPagoBanco() {
		return isVisibilidadCeldaModificarRegistroFormaPagoBanco;
	}

	public void setIsVisibilidadCeldaModificarRegistroFormaPagoBanco(Boolean isVisibilidadCeldaModificarRegistroFormaPagoBanco) {
		this.isVisibilidadCeldaModificarRegistroFormaPagoBanco = isVisibilidadCeldaModificarRegistroFormaPagoBanco;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarRegistroFormaPagoBanco() {
		return isVisibilidadCeldaActualizarRegistroFormaPagoBanco;
	}

	public void setIsVisibilidadCeldaActualizarRegistroFormaPagoBanco(Boolean isVisibilidadCeldaActualizarRegistroFormaPagoBanco) {
		this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco = isVisibilidadCeldaActualizarRegistroFormaPagoBanco;
	}

	public Boolean getIsVisibilidadCeldaEliminarRegistroFormaPagoBanco() {
		return isVisibilidadCeldaEliminarRegistroFormaPagoBanco;
	}

	public void setIsVisibilidadCeldaEliminarRegistroFormaPagoBanco(Boolean isVisibilidadCeldaEliminarRegistroFormaPagoBanco) {
		this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco = isVisibilidadCeldaEliminarRegistroFormaPagoBanco;
	}

	public Boolean getIsVisibilidadCeldaCancelarRegistroFormaPagoBanco() {
		return isVisibilidadCeldaCancelarRegistroFormaPagoBanco;
	}

	public void setIsVisibilidadCeldaCancelarRegistroFormaPagoBanco(Boolean isVisibilidadCeldaCancelarRegistroFormaPagoBanco) {
		this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco = isVisibilidadCeldaCancelarRegistroFormaPagoBanco;
	}

	public Boolean getIsVisibilidadCeldaGuardarRegistroFormaPagoBanco() {
		return isVisibilidadCeldaGuardarRegistroFormaPagoBanco;
	}

	public void setIsVisibilidadCeldaGuardarRegistroFormaPagoBanco(Boolean isVisibilidadCeldaGuardarRegistroFormaPagoBanco) {
		this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco = isVisibilidadCeldaGuardarRegistroFormaPagoBanco;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco() {
		return isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco;
	}

	public void setIsVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco(Boolean isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco) {
		this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco = isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco;
	}
		
	public RegistroFormaPagoBancoSessionBean getregistroformapagobancoSessionBean() {
		return this.registroformapagobancoSessionBean;
	}
	
	public void setregistroformapagobancoSessionBean(RegistroFormaPagoBancoSessionBean registroformapagobancoSessionBean) {
		this.registroformapagobancoSessionBean=registroformapagobancoSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdAsientoContable() {
		return this.isVisibilidadFK_IdAsientoContable;
	}

	public void setisVisibilidadFK_IdAsientoContable(Boolean isVisibilidadFK_IdAsientoContable) {
		this.isVisibilidadFK_IdAsientoContable=isVisibilidadFK_IdAsientoContable;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoRegistroFormaPagoBanco() {
		return this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco;
	}

	public void setisVisibilidadFK_IdEstadoRegistroFormaPagoBanco(Boolean isVisibilidadFK_IdEstadoRegistroFormaPagoBanco) {
		this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco=isVisibilidadFK_IdEstadoRegistroFormaPagoBanco;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoFormaPago() {
		return this.isVisibilidadFK_IdTipoFormaPago;
	}

	public void setisVisibilidadFK_IdTipoFormaPago(Boolean isVisibilidadFK_IdTipoFormaPago) {
		this.isVisibilidadFK_IdTipoFormaPago=isVisibilidadFK_IdTipoFormaPago;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(registroformapagobanco,null);
				this.setActualParaGuardarSucursalForeignKey(registroformapagobanco,null);
				this.setActualParaGuardarEjercicioForeignKey(registroformapagobanco,null);
				this.setActualParaGuardarPeriodoForeignKey(registroformapagobanco,null);
				this.setActualParaGuardarAsientoContableForeignKey(registroformapagobanco,null);
				this.setActualParaGuardarTipoFormaPagoForeignKey(registroformapagobanco,null);
				this.setActualParaGuardarEstadoRegistroFormaPagoBancoForeignKey(registroformapagobanco,null);
				this.setActualParaGuardarClienteForeignKey(registroformapagobanco,null);
				this.setActualParaGuardarAnioForeignKey(registroformapagobanco,null);
				this.setActualParaGuardarMesForeignKey(registroformapagobanco,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(RegistroFormaPagoBanco registroformapagobanco,RegistroFormaPagoBanco registroformapagobancoAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalRegistroFormaPagoBanco(registroformapagobanco);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		registroformapagobancoAux.setId(registroformapagobanco.getId());
		registroformapagobancoAux.setVersionRow(registroformapagobanco.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessRegistroFormaPagoBanco();
		
			int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = registroformapagobancoValidator.getInvalidValues(this.registroformapagobanco);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			registroformapagobancoLogic.setDatosCliente(datosCliente);
			registroformapagobancoLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				registroformapagobancoAux=new  RegistroFormaPagoBanco();
				
				registroformapagobancoAux.setIsNew(true);
				registroformapagobancoAux.setIsChanged(true);
				
				registroformapagobancoAux.setRegistroFormaPagoBancoOriginal(this.registroformapagobanco);
				
				registroformapagobancoAux.setId(this.registroformapagobanco.getId());	
				registroformapagobancoAux.setVersionRow(this.registroformapagobanco.getVersionRow());	
				registroformapagobancoAux.setid_empresa(this.registroformapagobanco.getid_empresa());	
				registroformapagobancoAux.setid_sucursal(this.registroformapagobanco.getid_sucursal());	
				registroformapagobancoAux.setid_ejercicio(this.registroformapagobanco.getid_ejercicio());	
				registroformapagobancoAux.setid_periodo(this.registroformapagobanco.getid_periodo());	
				registroformapagobancoAux.setid_asiento_contable(this.registroformapagobanco.getid_asiento_contable());	
				registroformapagobancoAux.setid_tipo_forma_pago(this.registroformapagobanco.getid_tipo_forma_pago());	
				registroformapagobancoAux.setid_estado_registro_forma_pago_banco(this.registroformapagobanco.getid_estado_registro_forma_pago_banco());	
				registroformapagobancoAux.setid_cliente(this.registroformapagobanco.getid_cliente());	
				registroformapagobancoAux.setnombre_banco(this.registroformapagobanco.getnombre_banco());	
				registroformapagobancoAux.setnombre_girador(this.registroformapagobanco.getnombre_girador());	
				registroformapagobancoAux.setfecha_vencimiento(this.registroformapagobanco.getfecha_vencimiento());	
				registroformapagobancoAux.setnumero_cuenta(this.registroformapagobanco.getnumero_cuenta());	
				registroformapagobancoAux.setnumero_cheque(this.registroformapagobanco.getnumero_cheque());	
				registroformapagobancoAux.setvalor_monto(this.registroformapagobanco.getvalor_monto());	
				registroformapagobancoAux.setfecha(this.registroformapagobanco.getfecha());	
				registroformapagobancoAux.setfecha_vencimiento_original(this.registroformapagobanco.getfecha_vencimiento_original());	
				registroformapagobancoAux.setnumero_cambio(this.registroformapagobanco.getnumero_cambio());	
				registroformapagobancoAux.setid_anio(this.registroformapagobanco.getid_anio());	
				registroformapagobancoAux.setid_mes(this.registroformapagobanco.getid_mes());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.registroformapagobancoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.registroformapagobancoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(registroformapagobancoAux,registroformapagobancoLogic.getRegistroFormaPagoBancos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(registroformapagobancoAux,registroformapagobancos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.registroformapagobancoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.registroformapagobancoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancoLogic.saveRegistroFormaPagoBancos();//WithConnection
						//registroformapagobancoLogic.getSetVersionRowRegistroFormaPagoBancos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.registroformapagobanco,registroformapagobancoAux);
					
					this.refrescarForeignKeysDescripcionesRegistroFormaPagoBanco();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.registroformapagobancoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								registroformapagobancoLogic.saveRegistroFormaPagoBancoRelaciones(registroformapagobancoAux);//WithConnection
								//registroformapagobancoLogic.getSetVersionRowRegistroFormaPagoBancos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.registroformapagobanco,registroformapagobancoAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.registroformapagobancoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.registroformapagobancoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(registroformapagobancoAux,registroformapagobancoLogic.getRegistroFormaPagoBancos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(registroformapagobancoAux,registroformapagobancos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.registroformapagobanco,registroformapagobancoAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				registroformapagobancoAux=new  RegistroFormaPagoBanco();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado() 
					|| (this.registroformapagobancoSessionBean.getEsGuardarRelacionado() && this.registroformapagobanco.getId()>=0)) {
						
					registroformapagobancoAux.setIsNew(false);
				}
				
				registroformapagobancoAux.setIsDeleted(false);
			
				registroformapagobancoAux.setId(this.registroformapagobanco.getId());	
				registroformapagobancoAux.setVersionRow(this.registroformapagobanco.getVersionRow());	
				registroformapagobancoAux.setid_empresa(this.registroformapagobanco.getid_empresa());	
				registroformapagobancoAux.setid_sucursal(this.registroformapagobanco.getid_sucursal());	
				registroformapagobancoAux.setid_ejercicio(this.registroformapagobanco.getid_ejercicio());	
				registroformapagobancoAux.setid_periodo(this.registroformapagobanco.getid_periodo());	
				registroformapagobancoAux.setid_asiento_contable(this.registroformapagobanco.getid_asiento_contable());	
				registroformapagobancoAux.setid_tipo_forma_pago(this.registroformapagobanco.getid_tipo_forma_pago());	
				registroformapagobancoAux.setid_estado_registro_forma_pago_banco(this.registroformapagobanco.getid_estado_registro_forma_pago_banco());	
				registroformapagobancoAux.setid_cliente(this.registroformapagobanco.getid_cliente());	
				registroformapagobancoAux.setnombre_banco(this.registroformapagobanco.getnombre_banco());	
				registroformapagobancoAux.setnombre_girador(this.registroformapagobanco.getnombre_girador());	
				registroformapagobancoAux.setfecha_vencimiento(this.registroformapagobanco.getfecha_vencimiento());	
				registroformapagobancoAux.setnumero_cuenta(this.registroformapagobanco.getnumero_cuenta());	
				registroformapagobancoAux.setnumero_cheque(this.registroformapagobanco.getnumero_cheque());	
				registroformapagobancoAux.setvalor_monto(this.registroformapagobanco.getvalor_monto());	
				registroformapagobancoAux.setfecha(this.registroformapagobanco.getfecha());	
				registroformapagobancoAux.setfecha_vencimiento_original(this.registroformapagobanco.getfecha_vencimiento_original());	
				registroformapagobancoAux.setnumero_cambio(this.registroformapagobanco.getnumero_cambio());	
				registroformapagobancoAux.setid_anio(this.registroformapagobanco.getid_anio());	
				registroformapagobancoAux.setid_mes(this.registroformapagobanco.getid_mes());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(registroformapagobancoAux,registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(registroformapagobancoAux,registroformapagobancos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.registroformapagobancoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.registroformapagobancoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancoLogic.saveRegistroFormaPagoBancos();//WithConnection
						//registroformapagobancoLogic.getSetVersionRowRegistroFormaPagoBancos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.registroformapagobanco,registroformapagobancoAux);
					
					this.refrescarForeignKeysDescripcionesRegistroFormaPagoBanco();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.registroformapagobancoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								registroformapagobancoLogic.saveRegistroFormaPagoBancoRelaciones(registroformapagobancoAux);//WithConnection
								//registroformapagobancoLogic.getSetVersionRowRegistroFormaPagoBancos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.registroformapagobanco,registroformapagobancoAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.registroformapagobancoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.registroformapagobancoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(registroformapagobancoAux,registroformapagobancoLogic.getRegistroFormaPagoBancos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(registroformapagobancoAux,registroformapagobancos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.registroformapagobanco,registroformapagobancoAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				registroformapagobancoAux=new  RegistroFormaPagoBanco();
				
				registroformapagobancoAux.setIsNew(false);
				registroformapagobancoAux.setIsChanged(false);
				
				registroformapagobancoAux.setIsDeleted(true);
				
				registroformapagobancoAux.setId(this.registroformapagobanco.getId());	
				registroformapagobancoAux.setVersionRow(this.registroformapagobanco.getVersionRow());	
				registroformapagobancoAux.setid_empresa(this.registroformapagobanco.getid_empresa());	
				registroformapagobancoAux.setid_sucursal(this.registroformapagobanco.getid_sucursal());	
				registroformapagobancoAux.setid_ejercicio(this.registroformapagobanco.getid_ejercicio());	
				registroformapagobancoAux.setid_periodo(this.registroformapagobanco.getid_periodo());	
				registroformapagobancoAux.setid_asiento_contable(this.registroformapagobanco.getid_asiento_contable());	
				registroformapagobancoAux.setid_tipo_forma_pago(this.registroformapagobanco.getid_tipo_forma_pago());	
				registroformapagobancoAux.setid_estado_registro_forma_pago_banco(this.registroformapagobanco.getid_estado_registro_forma_pago_banco());	
				registroformapagobancoAux.setid_cliente(this.registroformapagobanco.getid_cliente());	
				registroformapagobancoAux.setnombre_banco(this.registroformapagobanco.getnombre_banco());	
				registroformapagobancoAux.setnombre_girador(this.registroformapagobanco.getnombre_girador());	
				registroformapagobancoAux.setfecha_vencimiento(this.registroformapagobanco.getfecha_vencimiento());	
				registroformapagobancoAux.setnumero_cuenta(this.registroformapagobanco.getnumero_cuenta());	
				registroformapagobancoAux.setnumero_cheque(this.registroformapagobanco.getnumero_cheque());	
				registroformapagobancoAux.setvalor_monto(this.registroformapagobanco.getvalor_monto());	
				registroformapagobancoAux.setfecha(this.registroformapagobanco.getfecha());	
				registroformapagobancoAux.setfecha_vencimiento_original(this.registroformapagobanco.getfecha_vencimiento_original());	
				registroformapagobancoAux.setnumero_cambio(this.registroformapagobanco.getnumero_cambio());	
				registroformapagobancoAux.setid_anio(this.registroformapagobanco.getid_anio());	
				registroformapagobancoAux.setid_mes(this.registroformapagobanco.getid_mes());	
				
				if(this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.registroformapagobancoAux.getId()>=0) {	
						this.registroformapagobancosEliminados.add(registroformapagobancoAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(registroformapagobancoAux,registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(registroformapagobancoAux,registroformapagobancos);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.registroformapagobancoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.registroformapagobancoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancoLogic.saveRegistroFormaPagoBancos();//WithConnection
						//registroformapagobancoLogic.getSetVersionRowRegistroFormaPagoBancos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.registroformapagobancoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								registroformapagobancoLogic.saveRegistroFormaPagoBancoRelaciones(registroformapagobancoAux);//WithConnection
								//registroformapagobancoLogic.getSetVersionRowRegistroFormaPagoBancos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.registroformapagobancoSessionBean.getEstaModoGuardarRelaciones() 
								|| this.registroformapagobancoSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(registroformapagobancoAux,registroformapagobancoLogic.getRegistroFormaPagoBancos());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(registroformapagobancoAux,registroformapagobancos);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getRegistroFormaPagoBancos().addAll(this.registroformapagobancosEliminados);
					
					registroformapagobancoLogic.saveRegistroFormaPagoBancos();//WithConnection
					//registroformapagobancoLogic.getSetVersionRowRegistroFormaPagoBancos();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesRegistroFormaPagoBanco();
				
				this.registroformapagobancosEliminados= new ArrayList<RegistroFormaPagoBanco>();		
			}
			
			if(this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Registro Forma Pago Banco GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Registro Forma Pago Banco",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.registroformapagobanco=registroformapagobancoAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessRegistroFormaPagoBanco();
      	}
		
	}	
	
	public void actualizarRelaciones(RegistroFormaPagoBanco registroformapagobancoLocal) throws Exception {
		
		if(this.registroformapagobancoSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(RegistroFormaPagoBanco registroformapagobancoLocal) throws Exception {	
		if(this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				registroformapagobancoLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				registroformapagobancoLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				registroformapagobancoLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				registroformapagobancoLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AsientoContableDetalleFormJInternalFrame.class)) {
				AsientoContableBeanSwingJInternalFrame asientocontableBeanSwingJInternalFrameLocal=(AsientoContableBeanSwingJInternalFrame) ((AsientoContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				asientocontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAsientoContable(asientocontableBeanSwingJInternalFrameLocal.getasientocontable(),true);
				asientocontableBeanSwingJInternalFrameLocal.actualizarLista(asientocontableBeanSwingJInternalFrameLocal.asientocontable,this.asientocontablesForeignKey);

				asientocontableBeanSwingJInternalFrameLocal.actualizarRelaciones(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				registroformapagobancoLocal.setAsientoContable(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey("Formulario");
				this.setActualAsientoContableForeignKey(asientocontableBeanSwingJInternalFrameLocal.asientocontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoFormaPagoDetalleFormJInternalFrame.class)) {
				TipoFormaPagoBeanSwingJInternalFrame tipoformapagoBeanSwingJInternalFrameLocal=(TipoFormaPagoBeanSwingJInternalFrame) ((TipoFormaPagoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoformapagoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoFormaPago(tipoformapagoBeanSwingJInternalFrameLocal.gettipoformapago(),true);
				tipoformapagoBeanSwingJInternalFrameLocal.actualizarLista(tipoformapagoBeanSwingJInternalFrameLocal.tipoformapago,this.tipoformapagosForeignKey);

				tipoformapagoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoformapagoBeanSwingJInternalFrameLocal.tipoformapago);

				registroformapagobancoLocal.setTipoFormaPago(tipoformapagoBeanSwingJInternalFrameLocal.tipoformapago);

				this.addItemDefectoCombosForeignKeyTipoFormaPago();
				this.cargarCombosFrameTipoFormaPagosForeignKey("Formulario");
				this.setActualTipoFormaPagoForeignKey(tipoformapagoBeanSwingJInternalFrameLocal.tipoformapago.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoRegistroFormaPagoBancoDetalleFormJInternalFrame.class)) {
				EstadoRegistroFormaPagoBancoBeanSwingJInternalFrame estadoregistroformapagobancoBeanSwingJInternalFrameLocal=(EstadoRegistroFormaPagoBancoBeanSwingJInternalFrame) ((EstadoRegistroFormaPagoBancoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadoregistroformapagobancoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoRegistroFormaPagoBanco(estadoregistroformapagobancoBeanSwingJInternalFrameLocal.getestadoregistroformapagobanco(),true);
				estadoregistroformapagobancoBeanSwingJInternalFrameLocal.actualizarLista(estadoregistroformapagobancoBeanSwingJInternalFrameLocal.estadoregistroformapagobanco,this.estadoregistroformapagobancosForeignKey);

				estadoregistroformapagobancoBeanSwingJInternalFrameLocal.actualizarRelaciones(estadoregistroformapagobancoBeanSwingJInternalFrameLocal.estadoregistroformapagobanco);

				registroformapagobancoLocal.setEstadoRegistroFormaPagoBanco(estadoregistroformapagobancoBeanSwingJInternalFrameLocal.estadoregistroformapagobanco);

				this.addItemDefectoCombosForeignKeyEstadoRegistroFormaPagoBanco();
				this.cargarCombosFrameEstadoRegistroFormaPagoBancosForeignKey("Formulario");
				this.setActualEstadoRegistroFormaPagoBancoForeignKey(estadoregistroformapagobancoBeanSwingJInternalFrameLocal.estadoregistroformapagobanco.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				registroformapagobancoLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				registroformapagobancoLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				registroformapagobancoLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarRegistroFormaPagoBancoActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = registroformapagobancoValidator.getInvalidValues(this.registroformapagobanco);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(RegistroFormaPagoBanco registroformapagobanco,List<RegistroFormaPagoBanco> registroformapagobancos) throws Exception {
		try	{		
			RegistroFormaPagoBancoConstantesFunciones.actualizarLista(registroformapagobanco,registroformapagobancos,this.registroformapagobancoSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(RegistroFormaPagoBanco registroformapagobanco,List<RegistroFormaPagoBanco> registroformapagobancos) throws Exception {
		try	{			
			RegistroFormaPagoBancoConstantesFunciones.actualizarSelectedLista(registroformapagobanco,registroformapagobancos);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<RegistroFormaPagoBanco> registroformapagobancosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				registroformapagobancosLocal=this.registroformapagobancoLogic.getRegistroFormaPagoBancos();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				registroformapagobancosLocal=this.registroformapagobancos;
			}
			//ARCHITECTURE
		
			for(RegistroFormaPagoBanco registroformapagobancoLocal:registroformapagobancosLocal) {
				if(this.permiteMantenimiento(registroformapagobancoLocal) && registroformapagobancoLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+RegistroFormaPagoBancoConstantesFunciones.getRegistroFormaPagoBancoLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_empresaRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_sucursalRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_ejercicioRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_periodoRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.IDASIENTOCONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_asiento_contableRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.IDTIPOFORMAPAGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_tipo_forma_pagoRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.IDESTADOREGISTROFORMAPAGOBANCO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_clienteRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.NOMBREBANCO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnombre_bancoRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.NOMBREGIRADOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnombre_giradorRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.FECHAVENCIMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelfecha_vencimientoRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.NUMEROCUENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnumero_cuentaRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.NUMEROCHEQUE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnumero_chequeRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.VALORMONTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelvalor_montoRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelfechaRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.FECHAVENCIMIENTOORIGINAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelfecha_vencimiento_originalRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.NUMEROCAMBIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnumero_cambioRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_anioRegistroFormaPagoBanco,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(RegistroFormaPagoBancoConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_mesRegistroFormaPagoBanco,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_empresaRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_sucursalRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_ejercicioRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_periodoRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_asiento_contableRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_tipo_forma_pagoRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_clienteRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnombre_bancoRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnombre_giradorRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelfecha_vencimientoRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnumero_cuentaRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnumero_chequeRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelvalor_montoRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelfechaRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelfecha_vencimiento_originalRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnumero_cambioRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_anioRegistroFormaPagoBanco,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelid_mesRegistroFormaPagoBanco,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoRegistroFormaPagoBanco--;	
		
		
		this.registroformapagobancoAux=new RegistroFormaPagoBanco();
		
		this.registroformapagobancoAux.setId(this.iIdNuevoRegistroFormaPagoBanco);
		this.registroformapagobancoAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.registroformapagobancoLogic.getRegistroFormaPagoBancos().add(this.registroformapagobancoAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.registroformapagobancos.add(this.registroformapagobancoAux);
		}
		//ARCHITECTURE
		
		this.registroformapagobanco=this.registroformapagobancoAux;
		
		if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioRegistroFormaPagoBanco(this.registroformapagobanco);
			this.setVariablesObjetoActualToFormularioForeignKeyRegistroFormaPagoBanco(this.registroformapagobanco);
		}
				
		//this.setDefaultControlesRegistroFormaPagoBanco();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyRegistroFormaPagoBanco();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyRegistroFormaPagoBanco();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyRegistroFormaPagoBanco();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualRegistroFormaPagoBanco(this.registroformapagobancoBean,this.registroformapagobanco,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.registroformapagobancoSessionBean.getConGuardarRelaciones()) {
			classes=RegistroFormaPagoBancoConstantesFunciones.getClassesRelationshipsOfRegistroFormaPagoBanco(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.registroformapagobancoReturnGeneral=registroformapagobancoLogic.procesarEventosRegistroFormaPagoBancosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.registroformapagobancoLogic.getRegistroFormaPagoBancos(),this.registroformapagobanco,this.registroformapagobancoParameterGeneral,this.isEsNuevoRegistroFormaPagoBanco,classes);//this.registroformapagobancoLogic.getRegistroFormaPagoBanco()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanRegistroFormaPagoBanco(this.registroformapagobancoReturnGeneral,this.registroformapagobancoBean,false);
		
		if(this.registroformapagobancoReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyRegistroFormaPagoBanco(this.registroformapagobancoReturnGeneral.getRegistroFormaPagoBanco());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioRegistroFormaPagoBanco(this.registroformapagobancoReturnGeneral.getRegistroFormaPagoBanco());
		}
		
		if(this.registroformapagobancoReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioRegistroFormaPagoBanco(this.registroformapagobancoReturnGeneral.getRegistroFormaPagoBanco(),classes);//this.registroformapagobancoBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyRegistroFormaPagoBanco();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyRegistroFormaPagoBanco();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.RecargarFormRegistroFormaPagoBanco(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
						
			if(registroformapagobancoSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualRegistroFormaPagoBanco();
			}
			
			this.actualizarVisualTableDatosRegistroFormaPagoBanco();
			
			this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(this.getIndiceNuevoRegistroFormaPagoBanco(), this.getIndiceNuevoRegistroFormaPagoBanco());
			
			this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
						
			this.actualizarEstadoCeldasBotonesRegistroFormaPagoBanco("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesRegistroFormaPagoBanco(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_bancoRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarnombre_bancoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_giradorRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarnombre_giradorRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimientoRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarfecha_vencimientoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cuentaRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarnumero_cuentaRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_chequeRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarnumero_chequeRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldvalor_montoRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarvalor_montoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfechaRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarfechaRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimiento_originalRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarfecha_vencimiento_originalRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cambioRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarnumero_cambioRegistroFormaPagoBanco);	
		//
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarid_empresaRegistroFormaPagoBanco);//
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarid_sucursalRegistroFormaPagoBanco);//
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarid_ejercicioRegistroFormaPagoBanco);//
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarid_periodoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarid_asiento_contableRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarid_tipo_forma_pagoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarid_clienteRegistroFormaPagoBanco);//
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarid_anioRegistroFormaPagoBanco);//
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.setEnabled(isHabilitar && this.registroformapagobancoConstantesFunciones.activarid_mesRegistroFormaPagoBanco);
	};
	
	public void setDefaultControlesRegistroFormaPagoBanco() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoRegistroFormaPagoBanco(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.registroformapagobancoSessionBean.setConGuardarRelaciones(true);			
			this.registroformapagobancoSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTabbedPaneRelacionesRegistroFormaPagoBanco.setVisible(true);
			
					
		} else {
			//this.registroformapagobancoSessionBean.setConGuardarRelaciones(false);			
			this.registroformapagobancoSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTabbedPaneRelacionesRegistroFormaPagoBanco.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoRegistroFormaPagoBanco() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancoLogic.getRegistroFormaPagoBancos()) {
				if(registroformapagobancoAux.getId().equals(this.iIdNuevoRegistroFormaPagoBanco)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancos) {
				if(registroformapagobancoAux.getId().equals(this.iIdNuevoRegistroFormaPagoBanco)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancoLogic.getRegistroFormaPagoBancos()) {
				if(registroformapagobancoAux.getId().equals(registroformapagobanco.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancos) {
				if(registroformapagobancoAux.getId().equals(registroformapagobanco.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobancoOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancoLogic.getRegistroFormaPagoBancos()) {
				if(registroformapagobancoAux.getRegistroFormaPagoBancoOriginal().getId().equals(registroformapagobancoOriginal.getId())) {
					existe=true;
					registroformapagobancoOriginal.setId(registroformapagobancoAux.getId());
					registroformapagobancoOriginal.setVersionRow(registroformapagobancoAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancos) {
				if(registroformapagobancoAux.getRegistroFormaPagoBancoOriginal().getId().equals(registroformapagobancoOriginal.getId())) {
					existe=true;
					registroformapagobancoOriginal.setId(registroformapagobancoAux.getId());
					registroformapagobancoOriginal.setVersionRow(registroformapagobancoAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosRegistroFormaPagoBanco(Boolean esParaCancelar) throws Exception {
		registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
		registroformapagobancoAux=new RegistroFormaPagoBanco();
		
		if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancoLogic.getRegistroFormaPagoBancos()) {
					if(registroformapagobancoAux.getId()<0) {
						registroformapagobancosAux.add(registroformapagobancoAux);
					}		
				}
				this.iIdNuevoRegistroFormaPagoBanco=0L;
				this.registroformapagobancoLogic.getRegistroFormaPagoBancos().removeAll(registroformapagobancosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancos) {
					if(registroformapagobancoAux.getId()<0) {
						registroformapagobancosAux.add(registroformapagobancoAux);
					}		
				}
				this.iIdNuevoRegistroFormaPagoBanco=0L;
				this.registroformapagobancos.removeAll(registroformapagobancosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoRegistroFormaPagoBanco 
					&& this.registroformapagobancoLogic.getRegistroFormaPagoBancos().size()>0
					) {
					registroformapagobancoAux=this.registroformapagobancoLogic.getRegistroFormaPagoBancos().get(this.registroformapagobancoLogic.getRegistroFormaPagoBancos().size() - 1);
				
					if(registroformapagobancoAux.getId()<0) {
						this.registroformapagobancoLogic.getRegistroFormaPagoBancos().remove(registroformapagobancoAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoRegistroFormaPagoBanco && this.registroformapagobancos.size()>0) {
					registroformapagobancoAux=this.registroformapagobancos.get(this.registroformapagobancos.size() - 1);
				
					if(registroformapagobancoAux.getId()<0) {
						this.registroformapagobancos.remove(registroformapagobancoAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoRegistroFormaPagoBanco(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(registroformapagobanco.getId()<0) {
				this.registroformapagobancoLogic.getRegistroFormaPagoBancos().remove(this.registroformapagobanco);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(registroformapagobanco.getId()<0) {
				this.registroformapagobancos.remove(this.registroformapagobanco);
			}
		}			
	}
	
	public void setEstadosInicialesRegistroFormaPagoBanco(List<RegistroFormaPagoBanco> registroformapagobancosAux) throws Exception {
		RegistroFormaPagoBancoConstantesFunciones.setEstadosInicialesRegistroFormaPagoBanco(registroformapagobancosAux);
	}
	
	public void setEstadosInicialesRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobancoAux) throws Exception {
		RegistroFormaPagoBancoConstantesFunciones.setEstadosInicialesRegistroFormaPagoBanco(registroformapagobancoAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarRegistroFormaPagoBancoActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesRegistroFormaPagoBanco("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarRegistroFormaPagoBancoActual()) {
				if(!this.isEsNuevoRegistroFormaPagoBanco) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesRegistroFormaPagoBanco("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoRegistroFormaPagoBanco=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarRegistroFormaPagoBancoActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Registro Forma Pago Banco ?", "MANTENIMIENTO DE Registro Forma Pago Banco", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesRegistroFormaPagoBanco("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(RegistroFormaPagoBanco registroformapagobanco) throws Exception {
		RegistroFormaPagoBancoConstantesFunciones.seleccionarAsignar(this.registroformapagobanco,registroformapagobanco);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarRegistroFormaPagoBanco=this.isPermisoActualizarOriginalRegistroFormaPagoBanco;
			
			
			this.seleccionarAsignar(registroformapagobanco);
			
			

			idAsientoContableActual=registroformapagobanco.getid_asiento_contable();
			this.seleccionarAsientoContableActual();

			idClienteActual=registroformapagobanco.getid_cliente();
			this.seleccionarClienteActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			RegistroFormaPagoBancoConstantesFunciones.quitarEspaciosRegistroFormaPagoBanco(this.registroformapagobanco,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesRegistroFormaPagoBanco("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.registroformapagobancoSessionBean.setsFuncionBusquedaRapida(this.registroformapagobancoSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarAsientoContableActual() throws Exception {
		try	{
			AsientoContable asientocontableAux=new AsientoContable();

			if(this.idAsientoContableActual != null && this.idAsientoContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(this.idAsientoContableActual);
					asientocontableAux= asientocontableLogic.getAsientoContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				asientocontablesForeignKey=new ArrayList<AsientoContable>();
				asientocontablesForeignKey.add(asientocontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoRegistroFormaPagoBanco) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosRegistroFormaPagoBanco(esParaCancelar);				
				this.cancelarNuevoRegistroFormaPagoBanco(esParaCancelar);								
			}
			
			this.registroformapagobanco=new RegistroFormaPagoBanco();
			
			this.inicializarRegistroFormaPagoBanco();
			
			this.actualizarEstadoCeldasBotonesRegistroFormaPagoBanco("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarRegistroFormaPagoBanco() throws Exception {
		try {
			RegistroFormaPagoBancoConstantesFunciones.inicializarRegistroFormaPagoBanco(this.registroformapagobanco);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.registroformapagobancoLogic.getRegistroFormaPagoBancos().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteRegistroFormaPagoBancos(String sAccionBusqueda,List<RegistroFormaPagoBanco> registroformapagobancosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="RegistroFormaPagoBanco"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="RegistroFormaPagoBancoMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("RegistroFormaPagoBancoMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="RegistroFormaPagoBanco"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Registro Forma Pago Bancos");		
		parameters.put("busquedapor", RegistroFormaPagoBancoConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceRegistroFormaPagoBanco=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			RegistroFormaPagoBancoConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			RegistroFormaPagoBancoConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceRegistroFormaPagoBanco=new JRBeanArrayDataSource(RegistroFormaPagoBancoJInternalFrame.TraerRegistroFormaPagoBancoBeans(registroformapagobancosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceRegistroFormaPagoBanco);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+RegistroFormaPagoBancoConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+RegistroFormaPagoBancoConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(RegistroFormaPagoBancoBean.TraerRegistroFormaPagoBancoBeans(registroformapagobancosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteRegistroFormaPagoBancos(sAccionBusqueda,sTipoArchivoReporte,registroformapagobancosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalRegistroFormaPagoBancos(sAccionBusqueda,sTipoArchivoReporte,registroformapagobancosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoRegistroFormaPagoBancoActionPerformed(null);
					//this.generarExcelReporteRegistroFormaPagoBancos(sAccionBusqueda,sTipoArchivoReporte,registroformapagobancosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalRegistroFormaPagoBancos(sAccionBusqueda,sTipoArchivoReporte,registroformapagobancosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesRegistroFormaPagoBancos(sAccionBusqueda,sTipoArchivoReporte,registroformapagobancosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesRegistroFormaPagoBancos(sAccionBusqueda,sTipoArchivoReporte,registroformapagobancosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRegistroFormaPagoBancos(String sAccionBusqueda,String sTipoArchivoReporte,List<RegistroFormaPagoBanco> registroformapagobancosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"registroformapagobanco";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("RegistroFormaPagoBancos");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderRegistroFormaPagoBanco("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(RegistroFormaPagoBanco registroformapagobanco : registroformapagobancosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			RegistroFormaPagoBancoConstantesFunciones.generarExcelReporteDataRegistroFormaPagoBanco("NORMAL",row,workbook,registroformapagobanco,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Registro Forma Pago Banco",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderRegistroFormaPagoBanco(String sTipo,Row row,Workbook workbook) {
		
		RegistroFormaPagoBancoConstantesFunciones.generarExcelReporteHeaderRegistroFormaPagoBanco(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalRegistroFormaPagoBancos(String sAccionBusqueda,String sTipoArchivoReporte,List<RegistroFormaPagoBanco> registroformapagobancosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"registroformapagobanco_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("RegistroFormaPagoBancos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(RegistroFormaPagoBanco registroformapagobanco : registroformapagobancosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.getRegistroFormaPagoBancoDescripcion(registroformapagobanco));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getasientocontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.gettipoformapago_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getestadoregistroformapagobanco_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getnombre_banco());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getnombre_girador());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getfecha_vencimiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getnumero_cuenta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getnumero_cheque());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getvalor_monto());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getfecha_vencimiento_original());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getnumero_cambio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(registroformapagobanco.getmes_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Registro Forma Pago Banco",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesRegistroFormaPagoBancos(String sAccionBusqueda,String sTipoArchivoReporte,List<RegistroFormaPagoBanco> registroformapagobancosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<RegistroFormaPagoBanco> registroformapagobancosRespaldo=null;
		
		classes=RegistroFormaPagoBancoConstantesFunciones.getClassesRelationshipsOfRegistroFormaPagoBanco(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.registroformapagobancoLogic.setDatosCliente(this.datosCliente);
		this.registroformapagobancoLogic.setDatosDeep(this.datosDeep);
		this.registroformapagobancoLogic.setIsConDeep(true);
		
		registroformapagobancosRespaldo=this.registroformapagobancoLogic.getRegistroFormaPagoBancos();
		
		this.registroformapagobancoLogic.setRegistroFormaPagoBancos(registroformapagobancosParaReportes);	
		this.registroformapagobancoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		registroformapagobancosParaReportes=this.registroformapagobancoLogic.getRegistroFormaPagoBancos();
		this.registroformapagobancoLogic.setRegistroFormaPagoBancos(registroformapagobancosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"registroformapagobanco_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("RegistroFormaPagoBancos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderRegistroFormaPagoBanco("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(RegistroFormaPagoBanco registroformapagobanco : registroformapagobancosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderRegistroFormaPagoBanco("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			RegistroFormaPagoBancoConstantesFunciones.generarExcelReporteDataRegistroFormaPagoBanco("NORMAL",row,workbook,registroformapagobanco,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.getRegistroFormaPagoBancoDescripcion(registroformapagobanco));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Registro Forma Pago Banco",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessRegistroFormaPagoBanco() throws Exception {		
		this.startProcessRegistroFormaPagoBanco(true);
	}
	
	public void startProcessRegistroFormaPagoBanco(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasRegistroFormaPagoBanco ,this.jPanelParametrosReportesRegistroFormaPagoBanco, this.jScrollPanelDatosRegistroFormaPagoBanco,this.jPanelPaginacionRegistroFormaPagoBanco, this.jScrollPanelDatosEdicionRegistroFormaPagoBanco, this.jPanelAccionesRegistroFormaPagoBanco,this.jPanelAccionesFormularioRegistroFormaPagoBanco,this.jmenuBarRegistroFormaPagoBanco,this.jmenuBarDetalleRegistroFormaPagoBanco,this.jTtoolBarRegistroFormaPagoBanco,this.jTtoolBarDetalleRegistroFormaPagoBanco);		
		
		final JTabbedPane jTabbedPaneBusquedasRegistroFormaPagoBanco=this.jTabbedPaneBusquedasRegistroFormaPagoBanco; 
		
		final JPanel jPanelParametrosReportesRegistroFormaPagoBanco=this.jPanelParametrosReportesRegistroFormaPagoBanco;
		//final JScrollPane jScrollPanelDatosRegistroFormaPagoBanco=this.jScrollPanelDatosRegistroFormaPagoBanco;
		final JTable jTableDatosRegistroFormaPagoBanco=this.jTableDatosRegistroFormaPagoBanco;		
		final JPanel jPanelPaginacionRegistroFormaPagoBanco=this.jPanelPaginacionRegistroFormaPagoBanco;
		//final JScrollPane jScrollPanelDatosEdicionRegistroFormaPagoBanco=this.jScrollPanelDatosEdicionRegistroFormaPagoBanco;
		final JPanel jPanelAccionesRegistroFormaPagoBanco=this.jPanelAccionesRegistroFormaPagoBanco;
		
		JPanel jPanelCamposAuxiliarRegistroFormaPagoBanco=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarRegistroFormaPagoBanco=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
			jPanelCamposAuxiliarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelCamposRegistroFormaPagoBanco;
			jPanelAccionesFormularioAuxiliarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelAccionesFormularioRegistroFormaPagoBanco;
		}
		
		final JPanel jPanelCamposRegistroFormaPagoBanco=jPanelCamposAuxiliarRegistroFormaPagoBanco;
		final JPanel jPanelAccionesFormularioRegistroFormaPagoBanco=jPanelAccionesFormularioAuxiliarRegistroFormaPagoBanco;
		
		
		final JMenuBar jmenuBarRegistroFormaPagoBanco=this.jmenuBarRegistroFormaPagoBanco;
		final JToolBar jTtoolBarRegistroFormaPagoBanco=this.jTtoolBarRegistroFormaPagoBanco;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarRegistroFormaPagoBanco=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarRegistroFormaPagoBanco=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
			jmenuBarDetalleAuxiliarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jmenuBarDetalleRegistroFormaPagoBanco;
			jTtoolBarDetalleAuxiliarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTtoolBarDetalleRegistroFormaPagoBanco;
		}
		
		final JMenuBar jmenuBarDetalleRegistroFormaPagoBanco=jmenuBarDetalleAuxiliarRegistroFormaPagoBanco;
		final JToolBar jTtoolBarDetalleRegistroFormaPagoBanco=jTtoolBarDetalleAuxiliarRegistroFormaPagoBanco;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasRegistroFormaPagoBanco;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesRegistroFormaPagoBanco;
			processRunnable.jTableDatos=jTableDatosRegistroFormaPagoBanco;
			processRunnable.jPanelCampos=jPanelCamposRegistroFormaPagoBanco;
			processRunnable.jPanelPaginacion=jPanelPaginacionRegistroFormaPagoBanco;
			processRunnable.jPanelAcciones=jPanelAccionesRegistroFormaPagoBanco;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioRegistroFormaPagoBanco;
			
			
			processRunnable.jmenuBar=jmenuBarRegistroFormaPagoBanco;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleRegistroFormaPagoBanco;
			processRunnable.jTtoolBar=jTtoolBarRegistroFormaPagoBanco;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleRegistroFormaPagoBanco;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasRegistroFormaPagoBanco ,jPanelParametrosReportesRegistroFormaPagoBanco,jTableDatosRegistroFormaPagoBanco, /*jScrollPanelDatosRegistroFormaPagoBanco,*/jPanelCamposRegistroFormaPagoBanco,jPanelPaginacionRegistroFormaPagoBanco, /*jScrollPanelDatosEdicionRegistroFormaPagoBanco,*/ jPanelAccionesRegistroFormaPagoBanco,jPanelAccionesFormularioRegistroFormaPagoBanco,jmenuBarRegistroFormaPagoBanco,jmenuBarDetalleRegistroFormaPagoBanco,jTtoolBarRegistroFormaPagoBanco,jTtoolBarDetalleRegistroFormaPagoBanco);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasRegistroFormaPagoBanco ,jPanelParametrosReportesRegistroFormaPagoBanco, jScrollPanelDatosRegistroFormaPagoBanco,jPanelPaginacionRegistroFormaPagoBanco, jScrollPanelDatosEdicionRegistroFormaPagoBanco, jPanelAccionesRegistroFormaPagoBanco,jPanelAccionesFormularioRegistroFormaPagoBanco,jmenuBarRegistroFormaPagoBanco,jmenuBarDetalleRegistroFormaPagoBanco,jTtoolBarRegistroFormaPagoBanco,jTtoolBarDetalleRegistroFormaPagoBanco);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessRegistroFormaPagoBanco() {// throws Exception 
		this.finishProcessRegistroFormaPagoBanco(true);
	}
	
	public void finishProcessRegistroFormaPagoBanco(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasRegistroFormaPagoBanco ,this.jPanelParametrosReportesRegistroFormaPagoBanco, this.jScrollPanelDatosRegistroFormaPagoBanco,this.jPanelPaginacionRegistroFormaPagoBanco, this.jScrollPanelDatosEdicionRegistroFormaPagoBanco, this.jPanelAccionesRegistroFormaPagoBanco,this.jPanelAccionesFormularioRegistroFormaPagoBanco,this.jmenuBarRegistroFormaPagoBanco,this.jmenuBarDetalleRegistroFormaPagoBanco,this.jTtoolBarRegistroFormaPagoBanco,this.jTtoolBarDetalleRegistroFormaPagoBanco);		
		
		final JTabbedPane jTabbedPaneBusquedasRegistroFormaPagoBanco=this.jTabbedPaneBusquedasRegistroFormaPagoBanco; 
		
		final JPanel jPanelParametrosReportesRegistroFormaPagoBanco=this.jPanelParametrosReportesRegistroFormaPagoBanco;
		//final JScrollPane jScrollPanelDatosRegistroFormaPagoBanco=this.jScrollPanelDatosRegistroFormaPagoBanco;
		final JTable jTableDatosRegistroFormaPagoBanco=this.jTableDatosRegistroFormaPagoBanco;		
		final JPanel jPanelPaginacionRegistroFormaPagoBanco=this.jPanelPaginacionRegistroFormaPagoBanco;
		//final JScrollPane jScrollPanelDatosEdicionRegistroFormaPagoBanco=this.jScrollPanelDatosEdicionRegistroFormaPagoBanco;
		final JPanel jPanelAccionesRegistroFormaPagoBanco=this.jPanelAccionesRegistroFormaPagoBanco;
		
		JPanel jPanelCamposAuxiliarRegistroFormaPagoBanco=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarRegistroFormaPagoBanco=new JPanel();
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
			jPanelCamposAuxiliarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelCamposRegistroFormaPagoBanco;
			jPanelAccionesFormularioAuxiliarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelAccionesFormularioRegistroFormaPagoBanco;
		}
		
		final JPanel jPanelCamposRegistroFormaPagoBanco=jPanelCamposAuxiliarRegistroFormaPagoBanco;
		final JPanel jPanelAccionesFormularioRegistroFormaPagoBanco=jPanelAccionesFormularioAuxiliarRegistroFormaPagoBanco;
		
		
		final JMenuBar jmenuBarRegistroFormaPagoBanco=this.jmenuBarRegistroFormaPagoBanco;		
		final JToolBar jTtoolBarRegistroFormaPagoBanco=this.jTtoolBarRegistroFormaPagoBanco;
				
		JMenuBar jmenuBarDetalleAuxiliarRegistroFormaPagoBanco=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarRegistroFormaPagoBanco=new JToolBar();
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
			jmenuBarDetalleAuxiliarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jmenuBarDetalleRegistroFormaPagoBanco;
			jTtoolBarDetalleAuxiliarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTtoolBarDetalleRegistroFormaPagoBanco;		
		}
		
		final JMenuBar jmenuBarDetalleRegistroFormaPagoBanco=jmenuBarDetalleAuxiliarRegistroFormaPagoBanco;
		final JToolBar jTtoolBarDetalleRegistroFormaPagoBanco=jTtoolBarDetalleAuxiliarRegistroFormaPagoBanco;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasRegistroFormaPagoBanco;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesRegistroFormaPagoBanco;
			processRunnable.jTableDatos=jTableDatosRegistroFormaPagoBanco;
			processRunnable.jPanelCampos=jPanelCamposRegistroFormaPagoBanco;
			processRunnable.jPanelPaginacion=jPanelPaginacionRegistroFormaPagoBanco;
			processRunnable.jPanelAcciones=jPanelAccionesRegistroFormaPagoBanco;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioRegistroFormaPagoBanco;
			
			
			processRunnable.jmenuBar=jmenuBarRegistroFormaPagoBanco;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleRegistroFormaPagoBanco;
			processRunnable.jTtoolBar=jTtoolBarRegistroFormaPagoBanco;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleRegistroFormaPagoBanco;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasRegistroFormaPagoBanco ,jPanelParametrosReportesRegistroFormaPagoBanco, jTableDatosRegistroFormaPagoBanco,/*jScrollPanelDatosRegistroFormaPagoBanco,*/jPanelCamposRegistroFormaPagoBanco,jPanelPaginacionRegistroFormaPagoBanco, /*jScrollPanelDatosEdicionRegistroFormaPagoBanco,*/ jPanelAccionesRegistroFormaPagoBanco,jPanelAccionesFormularioRegistroFormaPagoBanco,jmenuBarRegistroFormaPagoBanco,jmenuBarDetalleRegistroFormaPagoBanco,jTtoolBarRegistroFormaPagoBanco,jTtoolBarDetalleRegistroFormaPagoBanco));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesRegistroFormaPagoBanco(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarRegistroFormaPagoBanco(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuRegistroFormaPagoBanco(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarRegistroFormaPagoBanco(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarRegistroFormaPagoBanco,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleRegistroFormaPagoBanco,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuRegistroFormaPagoBanco(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarRegistroFormaPagoBanco,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleRegistroFormaPagoBanco,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.registroformapagobancoConstantesFunciones.getsFinalQueryRegistroFormaPagoBanco();
		String  finalQueryPaginacionTodos=this.registroformapagobancoConstantesFunciones.getsFinalQueryRegistroFormaPagoBanco();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=RegistroFormaPagoBancoConstantesFunciones.getArrayColumnasGlobalesNoRegistroFormaPagoBanco(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=RegistroFormaPagoBancoConstantesFunciones.getArrayColumnasGlobalesRegistroFormaPagoBanco(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,RegistroFormaPagoBancoConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.registroformapagobancosEliminados= new ArrayList<RegistroFormaPagoBanco>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessRegistroFormaPagoBanco();
		
				///*RegistroFormaPagoBancoSessionBean*/this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			
			if(this.registroformapagobancoSessionBean==null) {
				this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=RegistroFormaPagoBancoConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=RegistroFormaPagoBancoConstantesFunciones.getClassesForeignKeysOfRegistroFormaPagoBanco(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/registroformapagobanco."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			registroformapagobancosAux= new ArrayList<RegistroFormaPagoBanco>();
			
				
			registroformapagobancoLogic.setDatosCliente(this.datosCliente);
			registroformapagobancoLogic.setDatosDeep(this.datosDeep);
			registroformapagobancoLogic.setIsConDeep(true);
			
			
			registroformapagobancoLogic.getRegistroFormaPagoBancoDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					registroformapagobancoLogic.getTodosRegistroFormaPagoBancos(finalQueryGlobal,pagination);
					
					//registroformapagobancoLogic.getTodosRegistroFormaPagoBancosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(registroformapagobancoLogic.getRegistroFormaPagoBancos()==null|| registroformapagobancoLogic.getRegistroFormaPagoBancos().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							registroformapagobancosAux= new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancosAux.addAll(registroformapagobancoLogic.getRegistroFormaPagoBancos());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancosAux= new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancosAux.addAll(registroformapagobancos);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							registroformapagobancoLogic.getTodosRegistroFormaPagoBancos(finalQueryGlobal+"",this.pagination);												
							
							//registroformapagobancoLogic.getTodosRegistroFormaPagoBancosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteRegistroFormaPagoBancos("Todos",registroformapagobancoLogic.getRegistroFormaPagoBancos() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							registroformapagobancoLogic.setRegistroFormaPagoBancos(new ArrayList<RegistroFormaPagoBanco>());					
							registroformapagobancoLogic.getRegistroFormaPagoBancos().addAll(registroformapagobancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancos=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancos.addAll(registroformapagobancosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idRegistroFormaPagoBanco=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idRegistroFormaPagoBanco=this.idActual;
				
				} else if(this.idRegistroFormaPagoBancoActual!=null && this.idRegistroFormaPagoBancoActual!=0L) {
					idRegistroFormaPagoBanco=idRegistroFormaPagoBancoActual;
				}
				
					
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndicePorId(idRegistroFormaPagoBanco);
				
				this.registroformapagobancos=new ArrayList<RegistroFormaPagoBanco>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					registroformapagobancoLogic.getEntity(idRegistroFormaPagoBanco);
					
					//registroformapagobancoLogic.getEntityWithConnection(idRegistroFormaPagoBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					registroformapagobancoLogic.setRegistroFormaPagoBancos(new ArrayList<RegistroFormaPagoBanco>());
					registroformapagobancoLogic.getRegistroFormaPagoBancos().add(registroformapagobancoLogic.getRegistroFormaPagoBanco());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.registroformapagobancos=new ArrayList<RegistroFormaPagoBanco>();
					this.registroformapagobancos.add(registroformapagobanco);
				}
				
				if(registroformapagobancoLogic.getRegistroFormaPagoBanco()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdAsientoContable")) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=registroformapagobancoLogic.getRegistroFormaPagoBancos()==null||registroformapagobancoLogic.getRegistroFormaPagoBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=registroformapagobancos==null|| registroformapagobancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
						registroformapagobancosAux.addAll(registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancosAux.addAll(registroformapagobancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRegistroFormaPagoBancos("FK_IdAsientoContable",registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRegistroFormaPagoBancos("FK_IdAsientoContable",registroformapagobancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancoLogic.setRegistroFormaPagoBancos(new ArrayList<RegistroFormaPagoBanco>());
						registroformapagobancoLogic.getRegistroFormaPagoBancos().addAll(registroformapagobancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancos=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancos.addAll(registroformapagobancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=registroformapagobancoLogic.getRegistroFormaPagoBancos()==null||registroformapagobancoLogic.getRegistroFormaPagoBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=registroformapagobancos==null|| registroformapagobancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
						registroformapagobancosAux.addAll(registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancosAux.addAll(registroformapagobancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRegistroFormaPagoBancos("FK_IdCliente",registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRegistroFormaPagoBancos("FK_IdCliente",registroformapagobancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancoLogic.setRegistroFormaPagoBancos(new ArrayList<RegistroFormaPagoBanco>());
						registroformapagobancoLogic.getRegistroFormaPagoBancos().addAll(registroformapagobancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancos=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancos.addAll(registroformapagobancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=registroformapagobancoLogic.getRegistroFormaPagoBancos()==null||registroformapagobancoLogic.getRegistroFormaPagoBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=registroformapagobancos==null|| registroformapagobancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
						registroformapagobancosAux.addAll(registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancosAux.addAll(registroformapagobancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRegistroFormaPagoBancos("FK_IdEjercicio",registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRegistroFormaPagoBancos("FK_IdEjercicio",registroformapagobancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancoLogic.setRegistroFormaPagoBancos(new ArrayList<RegistroFormaPagoBanco>());
						registroformapagobancoLogic.getRegistroFormaPagoBancos().addAll(registroformapagobancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancos=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancos.addAll(registroformapagobancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=registroformapagobancoLogic.getRegistroFormaPagoBancos()==null||registroformapagobancoLogic.getRegistroFormaPagoBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=registroformapagobancos==null|| registroformapagobancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
						registroformapagobancosAux.addAll(registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancosAux.addAll(registroformapagobancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRegistroFormaPagoBancos("FK_IdEmpresa",registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRegistroFormaPagoBancos("FK_IdEmpresa",registroformapagobancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancoLogic.setRegistroFormaPagoBancos(new ArrayList<RegistroFormaPagoBanco>());
						registroformapagobancoLogic.getRegistroFormaPagoBancos().addAll(registroformapagobancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancos=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancos.addAll(registroformapagobancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoRegistroFormaPagoBanco")) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEstadoRegistroFormaPagoBanco(id_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdEstadoRegistroFormaPagoBanco(finalQueryGlobal,pagination,id_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEstadoRegistroFormaPagoBanco(id_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEstadoRegistroFormaPagoBanco(id_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=registroformapagobancoLogic.getRegistroFormaPagoBancos()==null||registroformapagobancoLogic.getRegistroFormaPagoBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=registroformapagobancos==null|| registroformapagobancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
						registroformapagobancosAux.addAll(registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancosAux.addAll(registroformapagobancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdEstadoRegistroFormaPagoBanco(finalQueryGlobal,pagination,id_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEstadoRegistroFormaPagoBanco(id_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdEstadoRegistroFormaPagoBanco(id_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRegistroFormaPagoBancos("FK_IdEstadoRegistroFormaPagoBanco",registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRegistroFormaPagoBancos("FK_IdEstadoRegistroFormaPagoBanco",registroformapagobancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancoLogic.setRegistroFormaPagoBancos(new ArrayList<RegistroFormaPagoBanco>());
						registroformapagobancoLogic.getRegistroFormaPagoBancos().addAll(registroformapagobancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancos=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancos.addAll(registroformapagobancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=registroformapagobancoLogic.getRegistroFormaPagoBancos()==null||registroformapagobancoLogic.getRegistroFormaPagoBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=registroformapagobancos==null|| registroformapagobancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
						registroformapagobancosAux.addAll(registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancosAux.addAll(registroformapagobancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRegistroFormaPagoBancos("FK_IdPeriodo",registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRegistroFormaPagoBancos("FK_IdPeriodo",registroformapagobancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancoLogic.setRegistroFormaPagoBancos(new ArrayList<RegistroFormaPagoBanco>());
						registroformapagobancoLogic.getRegistroFormaPagoBancos().addAll(registroformapagobancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancos=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancos.addAll(registroformapagobancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=registroformapagobancoLogic.getRegistroFormaPagoBancos()==null||registroformapagobancoLogic.getRegistroFormaPagoBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=registroformapagobancos==null|| registroformapagobancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
						registroformapagobancosAux.addAll(registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancosAux.addAll(registroformapagobancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRegistroFormaPagoBancos("FK_IdSucursal",registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRegistroFormaPagoBancos("FK_IdSucursal",registroformapagobancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancoLogic.setRegistroFormaPagoBancos(new ArrayList<RegistroFormaPagoBanco>());
						registroformapagobancoLogic.getRegistroFormaPagoBancos().addAll(registroformapagobancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancos=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancos.addAll(registroformapagobancosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoFormaPago")) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdTipoFormaPago(id_tipo_forma_pagoFK_IdTipoFormaPago);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdTipoFormaPago(finalQueryGlobal,pagination,id_tipo_forma_pagoFK_IdTipoFormaPago);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdTipoFormaPago(id_tipo_forma_pagoFK_IdTipoFormaPago);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdTipoFormaPago(id_tipo_forma_pagoFK_IdTipoFormaPago);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=registroformapagobancoLogic.getRegistroFormaPagoBancos()==null||registroformapagobancoLogic.getRegistroFormaPagoBancos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=registroformapagobancos==null|| registroformapagobancos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
						registroformapagobancosAux.addAll(registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancosAux=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancosAux.addAll(registroformapagobancos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdTipoFormaPago(finalQueryGlobal,pagination,id_tipo_forma_pagoFK_IdTipoFormaPago);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdTipoFormaPago(id_tipo_forma_pagoFK_IdTipoFormaPago);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=RegistroFormaPagoBancoConstantesFunciones.getDetalleIndiceFK_IdTipoFormaPago(id_tipo_forma_pagoFK_IdTipoFormaPago);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteRegistroFormaPagoBancos("FK_IdTipoFormaPago",registroformapagobancoLogic.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteRegistroFormaPagoBancos("FK_IdTipoFormaPago",registroformapagobancos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancoLogic.setRegistroFormaPagoBancos(new ArrayList<RegistroFormaPagoBanco>());
						registroformapagobancoLogic.getRegistroFormaPagoBancos().addAll(registroformapagobancosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancos=new ArrayList<RegistroFormaPagoBanco>();
							registroformapagobancos.addAll(registroformapagobancosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesRegistroFormaPagoBanco();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessRegistroFormaPagoBanco();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=registroformapagobancoLogic.getRegistroFormaPagoBancos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=registroformapagobancos.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=registroformapagobancoLogic.getRegistroFormaPagoBancos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=registroformapagobancos.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(RegistroFormaPagoBanco registroformapagobanco) {
		Boolean permite=true;
		
		if(this.registroformapagobanco.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=RegistroFormaPagoBancoConstantesFunciones.getOrderByListaRegistroFormaPagoBanco();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=RegistroFormaPagoBancoConstantesFunciones.getOrderByListaRegistroFormaPagoBanco();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancoLogic.getRegistroFormaPagoBancos()) {
				if(registroformapagobanco.getsType().equals(Constantes2.S_TOTALES)) {
					registroformapagobancoTotales=registroformapagobanco;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(RegistroFormaPagoBanco registroformapagobanco:this.registroformapagobancos) {
				if(registroformapagobanco.getsType().equals(Constantes2.S_TOTALES)) {
					registroformapagobancoTotales=registroformapagobanco;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.registroformapagobancoAux=new RegistroFormaPagoBanco();
			this.registroformapagobancoAux.setsType(Constantes2.S_TOTALES);
			this.registroformapagobancoAux.setIsNew(false);
			this.registroformapagobancoAux.setIsChanged(false);
			this.registroformapagobancoAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				RegistroFormaPagoBancoConstantesFunciones.TotalizarValoresFilaRegistroFormaPagoBanco(this.registroformapagobancoLogic.getRegistroFormaPagoBancos(),this.registroformapagobancoAux);
				
				this.registroformapagobancoLogic.getRegistroFormaPagoBancos().add(this.registroformapagobancoAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				RegistroFormaPagoBancoConstantesFunciones.TotalizarValoresFilaRegistroFormaPagoBanco(this.registroformapagobancos,this.registroformapagobancoAux);
				
				this.registroformapagobancos.add(this.registroformapagobancoAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		registroformapagobancoTotales=new RegistroFormaPagoBanco();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.registroformapagobancoLogic.getRegistroFormaPagoBancos().remove(registroformapagobancoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.registroformapagobancos.remove(registroformapagobancoTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		registroformapagobancoTotales=new RegistroFormaPagoBanco();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancoLogic.getRegistroFormaPagoBancos()) {
				if(registroformapagobanco.getsType().equals(Constantes2.S_TOTALES)) {
					registroformapagobancoTotales=registroformapagobanco;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				RegistroFormaPagoBancoConstantesFunciones.TotalizarValoresFilaRegistroFormaPagoBanco(this.registroformapagobancoLogic.getRegistroFormaPagoBancos(),registroformapagobancoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(RegistroFormaPagoBanco registroformapagobanco:this.registroformapagobancos) {
				if(registroformapagobanco.getsType().equals(Constantes2.S_TOTALES)) {
					registroformapagobancoTotales=registroformapagobanco;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				RegistroFormaPagoBancoConstantesFunciones.TotalizarValoresFilaRegistroFormaPagoBanco(this.registroformapagobancos,registroformapagobancoTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getRegistroFormaPagoBancosFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getRegistroFormaPagoBancosFK_IdAsientoContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdAsientoContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getRegistroFormaPagoBancosFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getRegistroFormaPagoBancosFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getRegistroFormaPagoBancosFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getRegistroFormaPagoBancosFK_IdEstadoRegistroFormaPagoBanco()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoRegistroFormaPagoBanco";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getRegistroFormaPagoBancosFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getRegistroFormaPagoBancosFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getRegistroFormaPagoBancosFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getRegistroFormaPagoBancosFK_IdTipoFormaPago()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoFormaPago";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getRegistroFormaPagoBancosFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getRegistroFormaPagoBancosFK_IdAsientoContable(String sFinalQuery,Long id_asiento_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdAsientoContable(sFinalQuery,this.pagination,id_asiento_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getRegistroFormaPagoBancosFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getRegistroFormaPagoBancosFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getRegistroFormaPagoBancosFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getRegistroFormaPagoBancosFK_IdEstadoRegistroFormaPagoBanco(String sFinalQuery,Long id_estado_registro_forma_pago_banco)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdEstadoRegistroFormaPagoBanco(sFinalQuery,this.pagination,id_estado_registro_forma_pago_banco);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getRegistroFormaPagoBancosFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getRegistroFormaPagoBancosFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getRegistroFormaPagoBancosFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getRegistroFormaPagoBancosFK_IdTipoFormaPago(String sFinalQuery,Long id_tipo_forma_pago)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					registroformapagobancoLogic.getRegistroFormaPagoBancosFK_IdTipoFormaPago(sFinalQuery,this.pagination,id_tipo_forma_pago);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosRegistroFormaPagoBanco() {
		this.isPermisoTodoRegistroFormaPagoBanco=false;
		this.isPermisoNuevoRegistroFormaPagoBanco=false;
		this.isPermisoActualizarRegistroFormaPagoBanco=false;
		this.isPermisoActualizarOriginalRegistroFormaPagoBanco=false;
		this.isPermisoEliminarRegistroFormaPagoBanco=false;
		this.isPermisoGuardarCambiosRegistroFormaPagoBanco=false;
		this.isPermisoConsultaRegistroFormaPagoBanco=false;
		this.isPermisoBusquedaRegistroFormaPagoBanco=false;
		this.isPermisoReporteRegistroFormaPagoBanco=false;		
		this.isPermisoOrdenRegistroFormaPagoBanco=false;		
		this.isPermisoPaginacionMedioRegistroFormaPagoBanco=false;		
		this.isPermisoPaginacionAltoRegistroFormaPagoBanco=false;
		this.isPermisoPaginacionTodoRegistroFormaPagoBanco=false;
		this.isPermisoCopiarRegistroFormaPagoBanco=false;		
		this.isPermisoVerFormRegistroFormaPagoBanco=false;		
		this.isPermisoDuplicarRegistroFormaPagoBanco=false;		
		this.isPermisoOrdenRegistroFormaPagoBanco=false;		
	}
	
	public void setPermisosUsuarioRegistroFormaPagoBanco(Boolean isPermiso) {
		this.isPermisoTodoRegistroFormaPagoBanco=isPermiso;
		this.isPermisoNuevoRegistroFormaPagoBanco=isPermiso;
		this.isPermisoActualizarRegistroFormaPagoBanco=isPermiso;
		this.isPermisoActualizarOriginalRegistroFormaPagoBanco=isPermiso;
		this.isPermisoEliminarRegistroFormaPagoBanco=isPermiso;
		this.isPermisoGuardarCambiosRegistroFormaPagoBanco=isPermiso;
		this.isPermisoConsultaRegistroFormaPagoBanco=isPermiso;
		this.isPermisoBusquedaRegistroFormaPagoBanco=isPermiso;
		this.isPermisoReporteRegistroFormaPagoBanco=isPermiso;
		this.isPermisoOrdenRegistroFormaPagoBanco=isPermiso;		
		this.isPermisoPaginacionMedioRegistroFormaPagoBanco=isPermiso;		
		this.isPermisoPaginacionAltoRegistroFormaPagoBanco=isPermiso;		
		this.isPermisoPaginacionTodoRegistroFormaPagoBanco=isPermiso;		
		this.isPermisoCopiarRegistroFormaPagoBanco=isPermiso;		
		this.isPermisoVerFormRegistroFormaPagoBanco=isPermiso;		
		this.isPermisoDuplicarRegistroFormaPagoBanco=isPermiso;
		this.isPermisoOrdenRegistroFormaPagoBanco=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioRegistroFormaPagoBanco(Boolean isPermiso) {
		//this.isPermisoTodoRegistroFormaPagoBanco=isPermiso;
		this.isPermisoNuevoRegistroFormaPagoBanco=isPermiso;
		this.isPermisoActualizarRegistroFormaPagoBanco=isPermiso;
		this.isPermisoActualizarOriginalRegistroFormaPagoBanco=isPermiso;
		this.isPermisoEliminarRegistroFormaPagoBanco=isPermiso;
		this.isPermisoGuardarCambiosRegistroFormaPagoBanco=isPermiso;
		//this.isPermisoConsultaRegistroFormaPagoBanco=isPermiso;
		//this.isPermisoBusquedaRegistroFormaPagoBanco=isPermiso;
		//this.isPermisoReporteRegistroFormaPagoBanco=isPermiso;
		//this.isPermisoOrdenRegistroFormaPagoBanco=isPermiso;		
		//this.isPermisoPaginacionMedioRegistroFormaPagoBanco=isPermiso;		
		//this.isPermisoPaginacionAltoRegistroFormaPagoBanco=isPermiso;		
		//this.isPermisoPaginacionTodoRegistroFormaPagoBanco=isPermiso;		
		//this.isPermisoCopiarRegistroFormaPagoBanco=isPermiso;		
		//this.isPermisoDuplicarRegistroFormaPagoBanco=isPermiso;
		//this.isPermisoOrdenRegistroFormaPagoBanco=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioRegistroFormaPagoBancoClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(RegistroFormaPagoBancoJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebRegistroFormaPagoBanco(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioRegistroFormaPagoBancoClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioRegistroFormaPagoBancoClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionRegistroFormaPagoBancoClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioRegistroFormaPagoBancoClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioRegistroFormaPagoBanco() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(RegistroFormaPagoBancoJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, RegistroFormaPagoBancoConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoRegistroFormaPagoBanco=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarRegistroFormaPagoBanco=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalRegistroFormaPagoBanco=this.isPermisoActualizarRegistroFormaPagoBanco;
			this.isPermisoEliminarRegistroFormaPagoBanco=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosRegistroFormaPagoBanco=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaRegistroFormaPagoBanco=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaRegistroFormaPagoBanco=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoRegistroFormaPagoBanco=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteRegistroFormaPagoBanco=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenRegistroFormaPagoBanco=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioRegistroFormaPagoBanco=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoRegistroFormaPagoBanco=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoRegistroFormaPagoBanco=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarRegistroFormaPagoBanco=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormRegistroFormaPagoBanco=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarRegistroFormaPagoBanco=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenRegistroFormaPagoBanco=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosRegistroFormaPagoBanco.setToolTipText(this.jTableDatosRegistroFormaPagoBanco.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioRegistroFormaPagoBanco(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioRegistroFormaPagoBanco(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(RegistroFormaPagoBancoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(RegistroFormaPagoBancoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioRegistroFormaPagoBanco() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyRegistroFormaPagoBancoListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.asientocontablesForeignKey=new ArrayList();
				this.tipoformapagosForeignKey=new ArrayList();
				this.estadoregistroformapagobancosForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyRegistroFormaPagoBancoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(RegistroFormaPagoBancoJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyRegistroFormaPagoBancoListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoFormaPagoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoRegistroFormaPagoBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AsientoContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoFormaPagoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipoformapagosForeignKey==null||this.tipoformapagosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoFormaPagoConstantesFunciones.getArrayColumnasGlobalesTipoFormaPago(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoFormaPagoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoFormaPagoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoFormaPagosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoRegistroFormaPagoBancoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadoregistroformapagobancosForeignKey==null||this.estadoregistroformapagobancosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoRegistroFormaPagoBancoConstantesFunciones.getArrayColumnasGlobalesEstadoRegistroFormaPagoBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoRegistroFormaPagoBancoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoRegistroFormaPagoBancoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoRegistroFormaPagoBancosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyRegistroFormaPagoBancoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			RegistroFormaPagoBancoParameterReturnGeneral registroformapagobancoReturnGeneral=new RegistroFormaPagoBancoParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.registroformapagobancoConstantesFunciones.cargarid_empresaRegistroFormaPagoBanco)
					 || (this.esRecargarFks && this.registroformapagobancoConstantesFunciones.cargarid_empresaRegistroFormaPagoBanco)) {

					if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+registroformapagobancoSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.registroformapagobancoConstantesFunciones.cargarid_sucursalRegistroFormaPagoBanco)
					 || (this.esRecargarFks && this.registroformapagobancoConstantesFunciones.cargarid_sucursalRegistroFormaPagoBanco)) {

					if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+registroformapagobancoSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.registroformapagobancoConstantesFunciones.cargarid_ejercicioRegistroFormaPagoBanco)
					 || (this.esRecargarFks && this.registroformapagobancoConstantesFunciones.cargarid_ejercicioRegistroFormaPagoBanco)) {

					if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+registroformapagobancoSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.registroformapagobancoConstantesFunciones.cargarid_periodoRegistroFormaPagoBanco)
					 || (this.esRecargarFks && this.registroformapagobancoConstantesFunciones.cargarid_periodoRegistroFormaPagoBanco)) {

					if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+registroformapagobancoSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAsientoContable="";

				if(((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0) && this.registroformapagobancoConstantesFunciones.cargarid_asiento_contableRegistroFormaPagoBanco)
					 || (this.esRecargarFks && this.registroformapagobancoConstantesFunciones.cargarid_asiento_contableRegistroFormaPagoBanco)) {

					if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAsientoContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

						finalQueryGlobalAsientoContable=Funciones.GetFinalQueryAppend(finalQueryGlobalAsientoContable, "");
						finalQueryGlobalAsientoContable+=AsientoContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAsientoContable=" WHERE " + ConstantesSql.ID + "="+registroformapagobancoSessionBean.getlidAsientoContableActual();
					}
				} else {
					finalQueryGlobalAsientoContable="NONE";
				}


				String finalQueryGlobalTipoFormaPago="";

				if(((this.tipoformapagosForeignKey==null||this.tipoformapagosForeignKey.size()<=0) && this.registroformapagobancoConstantesFunciones.cargarid_tipo_forma_pagoRegistroFormaPagoBanco)
					 || (this.esRecargarFks && this.registroformapagobancoConstantesFunciones.cargarid_tipo_forma_pagoRegistroFormaPagoBanco)) {

					if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionTipoFormaPago()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoFormaPagoConstantesFunciones.getArrayColumnasGlobalesTipoFormaPago(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoFormaPago=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoFormaPagoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoFormaPago=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoFormaPago, "");
						finalQueryGlobalTipoFormaPago+=TipoFormaPagoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoFormaPagosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoFormaPago=" WHERE " + ConstantesSql.ID + "="+registroformapagobancoSessionBean.getlidTipoFormaPagoActual();
					}
				} else {
					finalQueryGlobalTipoFormaPago="NONE";
				}


				String finalQueryGlobalEstadoRegistroFormaPagoBanco="";

				if(((this.estadoregistroformapagobancosForeignKey==null||this.estadoregistroformapagobancosForeignKey.size()<=0) && this.registroformapagobancoConstantesFunciones.cargarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco)
					 || (this.esRecargarFks && this.registroformapagobancoConstantesFunciones.cargarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco)) {

					if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionEstadoRegistroFormaPagoBanco()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoRegistroFormaPagoBancoConstantesFunciones.getArrayColumnasGlobalesEstadoRegistroFormaPagoBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoRegistroFormaPagoBanco=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoRegistroFormaPagoBancoConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoRegistroFormaPagoBanco=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoRegistroFormaPagoBanco, "");
						finalQueryGlobalEstadoRegistroFormaPagoBanco+=EstadoRegistroFormaPagoBancoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoRegistroFormaPagoBancosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoRegistroFormaPagoBanco=" WHERE " + ConstantesSql.ID + "="+registroformapagobancoSessionBean.getlidEstadoRegistroFormaPagoBancoActual();
					}
				} else {
					finalQueryGlobalEstadoRegistroFormaPagoBanco="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.registroformapagobancoConstantesFunciones.cargarid_clienteRegistroFormaPagoBanco)
					 || (this.esRecargarFks && this.registroformapagobancoConstantesFunciones.cargarid_clienteRegistroFormaPagoBanco)) {

					if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+registroformapagobancoSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.registroformapagobancoConstantesFunciones.cargarid_anioRegistroFormaPagoBanco)
					 || (this.esRecargarFks && this.registroformapagobancoConstantesFunciones.cargarid_anioRegistroFormaPagoBanco)) {

					if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+registroformapagobancoSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.registroformapagobancoConstantesFunciones.cargarid_mesRegistroFormaPagoBanco)
					 || (this.esRecargarFks && this.registroformapagobancoConstantesFunciones.cargarid_mesRegistroFormaPagoBanco)) {

					if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+registroformapagobancoSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				registroformapagobancoReturnGeneral=registroformapagobancoLogic.cargarCombosLoteForeignKeyRegistroFormaPagoBanco(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAsientoContable,finalQueryGlobalTipoFormaPago,finalQueryGlobalEstadoRegistroFormaPagoBanco,finalQueryGlobalCliente,finalQueryGlobalAnio,finalQueryGlobalMes);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=registroformapagobancoReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=registroformapagobancoReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=registroformapagobancoReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=registroformapagobancoReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAsientoContable.equals("NONE")) {
				this.asientocontablesForeignKey=registroformapagobancoReturnGeneral.getasientocontablesForeignKey();
			}

			if(!finalQueryGlobalTipoFormaPago.equals("NONE")) {
				this.tipoformapagosForeignKey=registroformapagobancoReturnGeneral.gettipoformapagosForeignKey();
			}

			if(!finalQueryGlobalEstadoRegistroFormaPagoBanco.equals("NONE")) {
				this.estadoregistroformapagobancosForeignKey=registroformapagobancoReturnGeneral.getestadoregistroformapagobancosForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=registroformapagobancoReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=registroformapagobancoReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=registroformapagobancoReturnGeneral.getmessForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyRegistroFormaPagoBanco()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAsientoContable();
			this.addItemDefectoCombosForeignKeyTipoFormaPago();
			this.addItemDefectoCombosForeignKeyEstadoRegistroFormaPagoBanco();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.registroformapagobancoSessionBean==null) {
				this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAsientoContable()throws Exception {
		try {

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				AsientoContable asientocontable=new AsientoContable();
				AsientoContableConstantesFunciones.setAsientoContableDescripcion(asientocontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				asientocontable.setId(null);

				if(!AsientoContableConstantesFunciones.ExisteEnLista(this.asientocontablesForeignKey,asientocontable,true)) {

					this.asientocontablesForeignKey.add(0,asientocontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoFormaPago()throws Exception {
		try {

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionTipoFormaPago()) {
				TipoFormaPago tipoformapago=new TipoFormaPago();
				TipoFormaPagoConstantesFunciones.setTipoFormaPagoDescripcion(tipoformapago,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoformapago.setId(null);

				if(!TipoFormaPagoConstantesFunciones.ExisteEnLista(this.tipoformapagosForeignKey,tipoformapago,true)) {

					this.tipoformapagosForeignKey.add(0,tipoformapago);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoRegistroFormaPagoBanco()throws Exception {
		try {

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionEstadoRegistroFormaPagoBanco()) {
				EstadoRegistroFormaPagoBanco estadoregistroformapagobanco=new EstadoRegistroFormaPagoBanco();
				EstadoRegistroFormaPagoBancoConstantesFunciones.setEstadoRegistroFormaPagoBancoDescripcion(estadoregistroformapagobanco,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadoregistroformapagobanco.setId(null);

				if(!EstadoRegistroFormaPagoBancoConstantesFunciones.ExisteEnLista(this.estadoregistroformapagobancosForeignKey,estadoregistroformapagobanco,true)) {

					this.estadoregistroformapagobancosForeignKey.add(0,estadoregistroformapagobanco);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.registroformapagobancoSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyRegistroFormaPagoBanco()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyRegistroFormaPagoBanco(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyRegistroFormaPagoBanco()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
			
			
				this.registroformapagobanco.setfecha_vencimiento(this.parametroGeneralUsuario.getfecha_sistema());
				this.registroformapagobanco.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
				this.registroformapagobanco.setfecha_vencimiento_original(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyRegistroFormaPagoBanco();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco)throws Exception {	
		try {
			
			this.setActualAsientoContableForeignKey(registroformapagobanco.getid_asiento_contable(),false,"Formulario");
			this.setActualTipoFormaPagoForeignKey(registroformapagobanco.getid_tipo_forma_pago(),false,"Formulario");
			this.setActualEstadoRegistroFormaPagoBancoForeignKey(registroformapagobanco.getid_estado_registro_forma_pago_banco(),false,"Formulario");
			this.setActualClienteForeignKey(registroformapagobanco.getid_cliente(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco,String sTipoEvento)throws Exception {	
		try {
			
			

				if(registroformapagobanco.getAsientoContable()!=null && !sTipoEvento.equals("id_asiento_contableRegistroFormaPagoBanco")) { //sTipoEvento Evita Bucle Infinito

					this.asientocontablesForeignKey=new ArrayList<AsientoContable>();
					this.asientocontablesForeignKey.add(registroformapagobanco.getAsientoContable());

					this.addItemDefectoCombosForeignKeyAsientoContable();
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				if(registroformapagobanco.getCliente()!=null && !sTipoEvento.equals("id_clienteRegistroFormaPagoBanco")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(registroformapagobanco.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyRegistroFormaPagoBanco()throws Exception {	
		try {
			
			this.setActualAsientoContableForeignKey(this.registroformapagobancoConstantesFunciones.getid_asiento_contable(),false,"Formulario");
			this.setActualTipoFormaPagoForeignKey(this.registroformapagobancoConstantesFunciones.getid_tipo_forma_pago(),false,"Formulario");
			this.setActualEstadoRegistroFormaPagoBancoForeignKey(this.registroformapagobancoConstantesFunciones.getid_estado_registro_forma_pago_banco(),false,"Formulario");
			this.setActualClienteForeignKey(this.registroformapagobancoConstantesFunciones.getid_cliente(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyRegistroFormaPagoBanco()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyRegistroFormaPagoBanco()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyRegistroFormaPagoBanco()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroRegistroFormaPagoBanco()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyRegistroFormaPagoBanco()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAsientoContablesForeignKey("Todos");
			this.cargarCombosFrameTipoFormaPagosForeignKey("Todos");
			this.cargarCombosFrameEstadoRegistroFormaPagoBancosForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyRegistroFormaPagoBanco(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoFormaPagosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoRegistroFormaPagoBancosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyRegistroFormaPagoBanco()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.getItemCount()>0) {
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	




















	
	

	public RegistroFormaPagoBancoBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public RegistroFormaPagoBancoBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public RegistroFormaPagoBancoBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean(); 
		this.registroformapagobancoConstantesFunciones=new RegistroFormaPagoBancoConstantesFunciones(); 
		this.registroformapagobancoBean=new RegistroFormaPagoBanco();//(this.registroformapagobancoConstantesFunciones); 		
		this.registroformapagobancoReturnGeneral=new RegistroFormaPagoBancoParameterReturnGeneral(); 
		
		this.registroformapagobancoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.registroformapagobancoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public RegistroFormaPagoBancoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public RegistroFormaPagoBancoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public RegistroFormaPagoBancoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessRegistroFormaPagoBanco(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.registroformapagobancoConstantesFunciones=new RegistroFormaPagoBancoConstantesFunciones(); 
			this.registroformapagobancoBean=new RegistroFormaPagoBanco();//this.registroformapagobancoConstantesFunciones); 			
			this.registroformapagobancoReturnGeneral=new RegistroFormaPagoBancoParameterReturnGeneral(); 
		
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Registro Forma Pago Banco Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.registroformapagobanco=new RegistroFormaPagoBanco();
			this.registroformapagobancos = new ArrayList<RegistroFormaPagoBanco>();
			this.registroformapagobancosAux = new ArrayList<RegistroFormaPagoBanco>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic=new RegistroFormaPagoBancoLogic();
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}
			
			//this.registroformapagobancoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.registroformapagobancoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormRegistroFormaPagoBanco);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco);	
					}
					
					if(this.jInternalFrameImportacionRegistroFormaPagoBanco!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionRegistroFormaPagoBanco);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByRegistroFormaPagoBanco!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByRegistroFormaPagoBanco);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormRegistroFormaPagoBanco);
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setVisible(false);
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco);
					this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.setVisible(false);
					this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionRegistroFormaPagoBanco!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionRegistroFormaPagoBanco);
					this.jInternalFrameImportacionRegistroFormaPagoBanco.setVisible(false);
					this.jInternalFrameImportacionRegistroFormaPagoBanco.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByRegistroFormaPagoBanco!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByRegistroFormaPagoBanco);
					this.jInternalFrameOrderByRegistroFormaPagoBanco.setVisible(false);
					this.jInternalFrameOrderByRegistroFormaPagoBanco.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idRegistroFormaPagoBancoActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=RegistroFormaPagoBancoConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.registroformapagobancoReturnGeneral=new RegistroFormaPagoBancoParameterReturnGeneral();
			
			this.registroformapagobancoParameterGeneral=new RegistroFormaPagoBancoParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.registroformapagobancoLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(RegistroFormaPagoBancoJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,RegistroFormaPagoBancoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.registroformapagobancoSessionBean.getEsGuardarRelacionado(),this.registroformapagobancoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,RegistroFormaPagoBancoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.registroformapagobancoSessionBean.getEsGuardarRelacionado(),this.registroformapagobancoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaDuplicarRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaCopiarRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaVerFormRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaOrdenRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaModificarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdAsientoContable=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoFormaPago=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesRegistroFormaPagoBanco("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosRegistroFormaPagoBanco();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioRegistroFormaPagoBanco(false);
			
			this.setPermisosUsuarioRegistroFormaPagoBanco();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado() 
				|| (this.registroformapagobancoSessionBean.getEsGuardarRelacionado() && this.registroformapagobancoSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioRegistroFormaPagoBancoClasesRelacionadas();
			}
			
			if(this.registroformapagobancoSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioRegistroFormaPagoBancoClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosRegistroFormaPagoBanco();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualRegistroFormaPagoBanco();
			}
			
			if(!this.isPermisoBusquedaRegistroFormaPagoBanco) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioRegistroFormaPagoBanco,this.isPermisoPaginacionMedioRegistroFormaPagoBanco,this.isPermisoPaginacionTodoRegistroFormaPagoBanco);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(RegistroFormaPagoBancoConstantesFunciones.getTiposSeleccionarRegistroFormaPagoBanco());
				
				this.tiposColumnasSelect=RegistroFormaPagoBancoConstantesFunciones.getTiposSeleccionarRegistroFormaPagoBanco(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioRegistroFormaPagoBanco();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioRegistroFormaPagoBanco(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioRegistroFormaPagoBanco(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesRegistroFormaPagoBanco() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.asientocontableLogic=new AsientoContableLogic();
			this.tipoformapagoLogic=new TipoFormaPagoLogic();
			this.estadoregistroformapagobancoLogic=new EstadoRegistroFormaPagoBancoLogic();
			this.clienteLogic=new ClienteLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				registroformapagobancoImplementable= (RegistroFormaPagoBancoImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+RegistroFormaPagoBancoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				registroformapagobancoImplementableHome= (RegistroFormaPagoBancoImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+RegistroFormaPagoBancoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.registroformapagobancos= new ArrayList<RegistroFormaPagoBanco>();
			this.registroformapagobancosEliminados= new ArrayList<RegistroFormaPagoBanco>();
						
			this.isEsNuevoRegistroFormaPagoBanco=false;
			this.esParaAccionDesdeFormularioRegistroFormaPagoBanco=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idAsientoContableActual=0L;
			this.idClienteActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>() ;
			this.tipoformapagosForeignKey=new ArrayList<TipoFormaPago>() ;
			this.estadoregistroformapagobancosForeignKey=new ArrayList<EstadoRegistroFormaPagoBanco>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyRegistroFormaPagoBanco(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroRegistroFormaPagoBanco();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=RegistroFormaPagoBancoConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesRegistroFormaPagoBanco("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingRegistroFormaPagoBanco(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioRegistroFormaPagoBanco();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioRegistroFormaPagoBanco();
			}
			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getTabCount(); i++) {
					this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessRegistroFormaPagoBanco(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga RegistroFormaPagoBanco: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectRegistroFormaPagoBanco() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesRegistroFormaPagoBanco")) {
				iIndex=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTabbedPaneRelacionesRegistroFormaPagoBanco.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTabbedPaneRelacionesRegistroFormaPagoBanco.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessRegistroFormaPagoBanco();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyRegistroFormaPagoBanco(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyRegistroFormaPagoBanco(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyRegistroFormaPagoBanco(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyRegistroFormaPagoBancoListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyRegistroFormaPagoBanco();
		
		this.cargarCombosFrameForeignKeyRegistroFormaPagoBanco();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyRegistroFormaPagoBanco();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyRegistroFormaPagoBanco();
		}
	}
	
	

	public void cargarCombosForeignKeyAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoFormaPago(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoFormaPagoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoFormaPago();
				this.cargarCombosFrameTipoFormaPagosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoFormaPago(this.tipoformapagosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoRegistroFormaPagoBanco(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoRegistroFormaPagoBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoRegistroFormaPagoBanco();
				this.cargarCombosFrameEstadoRegistroFormaPagoBancosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEstadoRegistroFormaPagoBanco(this.estadoregistroformapagobancosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoRegistroFormaPagoBancoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.registroformapagobancoSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			
			
			if(jTableDatosRegistroFormaPagoBanco.getRowCount()>=1) {
				jTableDatosRegistroFormaPagoBanco.removeRowSelectionInterval(0, jTableDatosRegistroFormaPagoBanco.getRowCount()-1);						
			}
			
			this.isEsNuevoRegistroFormaPagoBanco=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoRegistroFormaPagoBanco(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesRegistroFormaPagoBanco(true);			
			//this.registroformapagobanco=new RegistroFormaPagoBanco();
			//this.registroformapagobanco.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesRegistroFormaPagoBanco(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualRegistroFormaPagoBanco() ;
			
			if(RegistroFormaPagoBancoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleRegistroFormaPagoBanco(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.registroformapagobanco);	
			this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);				
			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			
			if(this.registroformapagobancoSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar RegistroFormaPagoBanco: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarRegistroFormaPagoBancoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosRegistroFormaPagoBanco.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosRegistroFormaPagoBanco.getSelectedRows().length;			
			}
			
			registroformapagobancosSeleccionados=this.getRegistroFormaPagoBancosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoRegistroFormaPagoBanco--;			
				//RegistroFormaPagoBanco registroformapagobancoAux= new RegistroFormaPagoBanco();			
				//registroformapagobancoAux.setId(this.iIdNuevoRegistroFormaPagoBanco);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//RegistroFormaPagoBanco registroformapagobancoOrigen=new RegistroFormaPagoBanco();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(RegistroFormaPagoBanco registroformapagobancoOrigen : registroformapagobancosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							registroformapagobancoOrigen =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							registroformapagobancoOrigen =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaRegistroFormaPagoBanco();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.registroformapagobanco.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosRegistroFormaPagoBanco(registroformapagobancoOrigen,this.registroformapagobanco,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.registroformapagobancoLogic.getRegistroFormaPagoBancos().add(this.registroformapagobancoAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.registroformapagobancos.add(this.registroformapagobancoAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
				
				this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(this.getIndiceNuevoRegistroFormaPagoBanco(), this.getIndiceNuevoRegistroFormaPagoBanco());
				
				int iLastRow =  this.jTableDatosRegistroFormaPagoBanco.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosRegistroFormaPagoBanco.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosRegistroFormaPagoBanco.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();									
		
			RegistroFormaPagoBanco registroformapagobancoOrigen=new RegistroFormaPagoBanco();
			RegistroFormaPagoBanco registroformapagobancoDestino=new RegistroFormaPagoBanco();
				
			registroformapagobancosSeleccionados=this.getRegistroFormaPagoBancosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosRegistroFormaPagoBanco.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || registroformapagobancosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosRegistroFormaPagoBanco.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancoOrigen =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						registroformapagobancoOrigen =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						registroformapagobancoDestino =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						registroformapagobancoDestino =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				registroformapagobancoOrigen =registroformapagobancosSeleccionados.get(0);
				registroformapagobancoDestino =registroformapagobancosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosRegistroFormaPagoBanco(registroformapagobancoOrigen,registroformapagobancoDestino,true,false);
				
				registroformapagobancoDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(registroformapagobancoDestino,registroformapagobancoLogic.getRegistroFormaPagoBancos());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(registroformapagobancoDestino,registroformapagobancos);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
				
				//this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(this.getIndiceNuevoRegistroFormaPagoBanco(), this.getIndiceNuevoRegistroFormaPagoBanco());
				
				int iLastRow =  this.jTableDatosRegistroFormaPagoBanco.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosRegistroFormaPagoBanco.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosRegistroFormaPagoBanco.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesRegistroFormaPagoBanco.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesRegistroFormaPagoBanco.setVisible(!isVisible);
			this.jPanelPaginacionRegistroFormaPagoBanco.setVisible(!isVisible);
			this.jPanelAccionesRegistroFormaPagoBanco.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameRegistroFormaPagoBanco();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoRegistroFormaPagoBanco();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionRegistroFormaPagoBanco();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByRegistroFormaPagoBanco();
			
			this.abrirFrameOrderByRegistroFormaPagoBanco();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByRegistroFormaPagoBanco();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleRegistroFormaPagoBanco(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormRegistroFormaPagoBanco);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.isMaximum()) {
					this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setSize(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.iWidthFormulario,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormRegistroFormaPagoBanco.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormRegistroFormaPagoBanco.isMaximum()) {
						this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jContentPaneDetalleRegistroFormaPagoBanco.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTabbedPaneRelacionesRegistroFormaPagoBanco.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jContentPaneDetalleRegistroFormaPagoBanco.getWidth(),RegistroFormaPagoBancoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTabbedPaneRelacionesRegistroFormaPagoBanco.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jContentPaneDetalleRegistroFormaPagoBanco.getWidth(),RegistroFormaPagoBancoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTabbedPaneRelacionesRegistroFormaPagoBanco.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jContentPaneDetalleRegistroFormaPagoBanco.getWidth(),RegistroFormaPagoBancoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setVisible(true);
	        this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByRegistroFormaPagoBanco() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByRegistroFormaPagoBanco==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByRegistroFormaPagoBanco=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByRegistroFormaPagoBanco,false,this);
				} else {
					this.jInternalFrameOrderByRegistroFormaPagoBanco=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByRegistroFormaPagoBanco,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByRegistroFormaPagoBanco);
				this.jInternalFrameOrderByRegistroFormaPagoBanco.setVisible(false);
				this.jInternalFrameOrderByRegistroFormaPagoBanco.setSelected(false);
				
				this.jInternalFrameOrderByRegistroFormaPagoBanco.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByRegistroFormaPagoBanco"));
				
				this.inicializarActualizarBindingTablaOrderByRegistroFormaPagoBanco();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionRegistroFormaPagoBanco() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionRegistroFormaPagoBanco==null) {
				
				this.jInternalFrameImportacionRegistroFormaPagoBanco=new ImportacionJInternalFrame(RegistroFormaPagoBancoConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionRegistroFormaPagoBanco);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionRegistroFormaPagoBanco);
				this.jInternalFrameImportacionRegistroFormaPagoBanco.setVisible(false);
				this.jInternalFrameImportacionRegistroFormaPagoBanco.setSelected(false);


				this.jInternalFrameImportacionRegistroFormaPagoBanco.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionRegistroFormaPagoBanco"));
				this.jInternalFrameImportacionRegistroFormaPagoBanco.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionRegistroFormaPagoBanco"));
				this.jInternalFrameImportacionRegistroFormaPagoBanco.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionRegistroFormaPagoBanco"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoRegistroFormaPagoBanco() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco==null) {
				this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco=new ReporteDinamicoJInternalFrame(RegistroFormaPagoBancoConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco);
				this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.setVisible(false);
				this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoRegistroFormaPagoBanco"));
				this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoRegistroFormaPagoBanco"));
				this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoRegistroFormaPagoBanco"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualRegistroFormaPagoBanco();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleRegistroFormaPagoBanco() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormRegistroFormaPagoBanco);
			
	       	this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setVisible(false);
	        this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setSelected(false);
			
			//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.dispose();
			//this.jInternalFrameDetalleFormRegistroFormaPagoBanco=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoRegistroFormaPagoBanco() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.setVisible(true);
	        this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionRegistroFormaPagoBanco() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionRegistroFormaPagoBanco.setVisible(true);
	        this.jInternalFrameImportacionRegistroFormaPagoBanco.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByRegistroFormaPagoBanco() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByRegistroFormaPagoBanco.setVisible(true);
	        this.jInternalFrameOrderByRegistroFormaPagoBanco.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByRegistroFormaPagoBanco() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByRegistroFormaPagoBanco.setVisible(false);
	        this.jInternalFrameOrderByRegistroFormaPagoBanco.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoRegistroFormaPagoBanco() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.setVisible(false);
	        this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionRegistroFormaPagoBanco() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionRegistroFormaPagoBanco.setVisible(false);
	        this.jInternalFrameImportacionRegistroFormaPagoBanco.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarRegistroFormaPagoBanco(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarRegistroFormaPagoBanco(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesRegistroFormaPagoBanco(true);
			//this.isEsNuevoRegistroFormaPagoBanco=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesRegistroFormaPagoBanco("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesRegistroFormaPagoBanco(false) ;
			
			if(registroformapagobancoSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(RegistroFormaPagoBancoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleRegistroFormaPagoBanco(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualRegistroFormaPagoBanco(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaRegistroFormaPagoBancoActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarRegistroFormaPagoBanco(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesRegistroFormaPagoBanco(true);
			//this.isEsNuevoRegistroFormaPagoBanco=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.registroformapagobanco.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesRegistroFormaPagoBanco("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesRegistroFormaPagoBanco(false) ;
			
			if(RegistroFormaPagoBancoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleRegistroFormaPagoBanco(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualRegistroFormaPagoBanco(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("AsientoContable")) {
				if(!this.registroformapagobancoConstantesFunciones.cargarid_asiento_contableRegistroFormaPagoBanco) {
					this.cargarCombosAsientoContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_asiento_contable (id);

				this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

			}
			
			if(sType.equals("Cliente")) {
				if(!this.registroformapagobancoConstantesFunciones.cargarid_clienteRegistroFormaPagoBanco) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
					
	
	public void recargarComboTablaAsientoContable(List<AsientoContable> asientocontablesForeignKey)throws Exception{
		TableColumn tableColumnAsientoContable=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE));
		TableCellEditor tableCellEditorAsientoContable =tableColumnAsientoContable.getCellEditor();

		AsientoContableTableCell asientocontableTableCellFk=(AsientoContableTableCell)tableCellEditorAsientoContable;

		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.setasientocontablesForeignKey(asientocontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//asientocontableTableCellFk.setRowActual(intSelectedRow);
			//asientocontableTableCellFk.setasientocontablesForeignKeyActual(asientocontablesForeignKey);
		//}


		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.RecargarAsientoContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoFormaPago(List<TipoFormaPago> tipoformapagosForeignKey)throws Exception{
		TableColumn tableColumnTipoFormaPago=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO));
		TableCellEditor tableCellEditorTipoFormaPago =tableColumnTipoFormaPago.getCellEditor();

		TipoFormaPagoTableCell tipoformapagoTableCellFk=(TipoFormaPagoTableCell)tableCellEditorTipoFormaPago;

		if(tipoformapagoTableCellFk!=null) {
			tipoformapagoTableCellFk.settipoformapagosForeignKey(tipoformapagosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoformapagoTableCellFk.setRowActual(intSelectedRow);
			//tipoformapagoTableCellFk.settipoformapagosForeignKeyActual(tipoformapagosForeignKey);
		//}


		if(tipoformapagoTableCellFk!=null) {
			tipoformapagoTableCellFk.RecargarTipoFormaPagosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoRegistroFormaPagoBanco(List<EstadoRegistroFormaPagoBanco> estadoregistroformapagobancosForeignKey)throws Exception{
		TableColumn tableColumnEstadoRegistroFormaPagoBanco=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO));
		TableCellEditor tableCellEditorEstadoRegistroFormaPagoBanco =tableColumnEstadoRegistroFormaPagoBanco.getCellEditor();

		EstadoRegistroFormaPagoBancoTableCell estadoregistroformapagobancoTableCellFk=(EstadoRegistroFormaPagoBancoTableCell)tableCellEditorEstadoRegistroFormaPagoBanco;

		if(estadoregistroformapagobancoTableCellFk!=null) {
			estadoregistroformapagobancoTableCellFk.setestadoregistroformapagobancosForeignKey(estadoregistroformapagobancosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadoregistroformapagobancoTableCellFk.setRowActual(intSelectedRow);
			//estadoregistroformapagobancoTableCellFk.setestadoregistroformapagobancosForeignKeyActual(estadoregistroformapagobancosForeignKey);
		//}


		if(estadoregistroformapagobancoTableCellFk!=null) {
			estadoregistroformapagobancoTableCellFk.RecargarEstadoRegistroFormaPagoBancosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_asiento_contable (Long id) throws Exception {
		this.setActualAsientoContableForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesRegistroFormaPagoBanco(false);
			
			//if(!this.isEsNuevoRegistroFormaPagoBanco) {								
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
				this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				
			}
			
			if(this.permiteMantenimiento(this.registroformapagobanco)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoRegistroFormaPagoBanco=true;
					this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
					this.isEsNuevoRegistroFormaPagoBanco=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoRegistroFormaPagoBanco=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoRegistroFormaPagoBanco=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesRegistroFormaPagoBanco(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualRegistroFormaPagoBanco(false);
				
				this.habilitarDeshabilitarControlesRegistroFormaPagoBanco(false);
			
												
				
				if(RegistroFormaPagoBancoJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleRegistroFormaPagoBanco();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,registroformapagobancoSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualRegistroFormaPagoBanco(this.registroformapagobanco,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,registroformapagobancoSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.registroformapagobanco.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(RegistroFormaPagoBanco.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",RegistroFormaPagoBanco.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				this.registroformapagobanco.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				this.registroformapagobanco.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.registroformapagobanco)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((RegistroFormaPagoBancoModel) this.jTableDatosRegistroFormaPagoBanco.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoRegistroFormaPagoBanco=true;
				this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
				this.isEsNuevoRegistroFormaPagoBanco=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesRegistroFormaPagoBanco(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualRegistroFormaPagoBanco(false);
				
				this.habilitarDeshabilitarControlesRegistroFormaPagoBanco(false);
				
				
				
				if(RegistroFormaPagoBancoJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleRegistroFormaPagoBanco();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosRegistroFormaPagoBanco.getRowCount()>=1) {
				jTableDatosRegistroFormaPagoBanco.removeRowSelectionInterval(0, jTableDatosRegistroFormaPagoBanco.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesRegistroFormaPagoBanco(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesRegistroFormaPagoBanco(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualRegistroFormaPagoBanco(false) ;
			
			this.isEsNuevoRegistroFormaPagoBanco=false;
			
			if(RegistroFormaPagoBancoJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleRegistroFormaPagoBanco();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				
				//SI ES MANUAL
				if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualRegistroFormaPagoBanco();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoRegistroFormaPagoBanco--;			
			//RegistroFormaPagoBanco registroformapagobancoAux= new RegistroFormaPagoBanco();			
			//registroformapagobancoAux.setId(this.iIdNuevoRegistroFormaPagoBanco);
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaRegistroFormaPagoBanco();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
			
			this.registroformapagobanco.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.registroformapagobancoLogic.getRegistroFormaPagoBancos().add(this.registroformapagobancoAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.registroformapagobancos.add(this.registroformapagobancoAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
			
			this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(this.getIndiceNuevoRegistroFormaPagoBanco(), this.getIndiceNuevoRegistroFormaPagoBanco());
			
			int iLastRow =  this.jTableDatosRegistroFormaPagoBanco.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosRegistroFormaPagoBanco.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosRegistroFormaPagoBanco.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
			
			//SI ES MANUAL
			if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualRegistroFormaPagoBanco();
			}
			
			//this.abrirFrameTreeRegistroFormaPagoBanco();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Registro Forma Pago BancoS ?", "MANTENIMIENTO DE Registro Forma Pago Banco", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionRegistroFormaPagoBanco.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralRegistroFormaPagoBanco();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.registroformapagobancoReturnGeneral=registroformapagobancoLogic.procesarImportacionRegistroFormaPagoBancosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.registroformapagobancoParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarRegistroFormaPagoBancoReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionRegistroFormaPagoBanco.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionRegistroFormaPagoBanco.setFileImportacion(this.jInternalFrameImportacionRegistroFormaPagoBanco.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionRegistroFormaPagoBanco.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionRegistroFormaPagoBanco.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionRegistroFormaPagoBanco.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionRegistroFormaPagoBanco.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();		

		registroformapagobancosSeleccionados=this.getRegistroFormaPagoBancosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("RegistroFormaPagoBancoBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"RegistroFormaPagoBancoBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteRegistroFormaPagoBancos("Todos",registroformapagobancosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Registro Forma Pago Banco",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_AsientoContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_AsientoContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_AsientoContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_AsientoContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoFormaPago_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoFormaPago_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoFormaPago_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoFormaPago_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoRegistroFormaPagoBanco_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoRegistroFormaPagoBanco_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoRegistroFormaPagoBanco_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoRegistroFormaPagoBanco_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreBanco_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreBanco_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreBanco_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreBanco_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreGirador_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreGirador_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreGirador_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreGirador_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaVencimiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaVencimiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaVencimiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaVencimiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroCuenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroCuenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroCuenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroCuenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroCheque_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroCheque_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroCheque_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroCheque_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorMonto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorMonto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorMonto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorMonto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaVencimientoOriginal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaVencimientoOriginal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaVencimientoOriginal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaVencimientoOriginal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroCambio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroCambio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroCambio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroCambio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoria="id_asiento_contable";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO:
					sNombreCampoCategoria="id_tipo_forma_pago";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO:
					sNombreCampoCategoria="id_estado_registro_forma_pago_banco";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO:
					sNombreCampoCategoria="nombre_banco";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR:
					sNombreCampoCategoria="nombre_girador";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					sNombreCampoCategoria="fecha_vencimiento";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA:
					sNombreCampoCategoria="numero_cuenta";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE:
					sNombreCampoCategoria="numero_cheque";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO:
					sNombreCampoCategoria="valor_monto";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL:
					sNombreCampoCategoria="fecha_vencimiento_original";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO:
					sNombreCampoCategoria="numero_cambio";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoriaValor="id_asiento_contable";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO:
					sNombreCampoCategoriaValor="id_tipo_forma_pago";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO:
					sNombreCampoCategoriaValor="id_estado_registro_forma_pago_banco";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO:
					sNombreCampoCategoriaValor="nombre_banco";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR:
					sNombreCampoCategoriaValor="nombre_girador";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					sNombreCampoCategoriaValor="fecha_vencimiento";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA:
					sNombreCampoCategoriaValor="numero_cuenta";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE:
					sNombreCampoCategoriaValor="numero_cheque";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO:
					sNombreCampoCategoriaValor="valor_monto";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL:
					sNombreCampoCategoriaValor="fecha_vencimiento_original";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO:
					sNombreCampoCategoriaValor="numero_cambio";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Asiento Contable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_asiento_contable");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Forma Pago",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_forma_pago");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado Registro Forma Pago Banco",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_registro_forma_pago_banco");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Banco",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_banco");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Girador",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_girador");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Vencimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_vencimiento");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Cuenta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_cuenta");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Cheque",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_cheque");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor Monto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_monto");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Vencimiento Original",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_vencimiento_original");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Cambio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_cambio");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();		
		
		registroformapagobancosSeleccionados=this.getRegistroFormaPagoBancosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"registroformapagobanco";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("RegistroFormaPagoBancos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getasientocontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.gettipoformapago_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getestadoregistroformapagobanco_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getnombre_banco());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getnombre_girador());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getfecha_vencimiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getnumero_cuenta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getnumero_cheque());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getvalor_monto());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getfecha_vencimiento_original());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getnumero_cambio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(RegistroFormaPagoBanco registroformapagobanco:registroformapagobancosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(registroformapagobanco.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelRegistroFormaPagoBanco(row);				
			//	iRow++;
			//}				
			
			//for(RegistroFormaPagoBanco registroformapagobancoAux:registroformapagobancosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelRegistroFormaPagoBanco(registroformapagobancoAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Registro Forma Pago Banco",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
			
			//SI ES MANUAL
			if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualRegistroFormaPagoBanco();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
			
			//SI ES MANUAL
			if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualRegistroFormaPagoBanco();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
			
			//SI ES MANUAL
			if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualRegistroFormaPagoBanco();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaRegistroFormaPagoBanco() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosRegistroFormaPagoBanco.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosRegistroFormaPagoBanco.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosRegistroFormaPagoBanco.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosRegistroFormaPagoBanco.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosRegistroFormaPagoBanco.setMinimumSize(dimensionMinimum);
		this.jTableDatosRegistroFormaPagoBanco.setMaximumSize(dimensionMaximum);
		this.jTableDatosRegistroFormaPagoBanco.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingRegistroFormaPagoBanco(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingRegistroFormaPagoBanco(esInicializar,true);
	}
	
	public void inicializarActualizarBindingRegistroFormaPagoBanco(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesRegistroFormaPagoBanco(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasRegistroFormaPagoBanco(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesRegistroFormaPagoBanco(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesRegistroFormaPagoBanco(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualRegistroFormaPagoBanco() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaRegistroFormaPagoBanco();
		
		this.inicializarActualizarBindingBotonesManualRegistroFormaPagoBanco(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualRegistroFormaPagoBanco();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesRegistroFormaPagoBanco() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualRegistroFormaPagoBanco(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualRegistroFormaPagoBanco(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosRegistroFormaPagoBanco.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosRegistroFormaPagoBanco.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteRegistroFormaPagoBanco.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jCheckBoxPostAccionNuevoRegistroFormaPagoBanco.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jCheckBoxPostAccionSinCerrarRegistroFormaPagoBanco.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jCheckBoxPostAccionSinMensajeRegistroFormaPagoBanco.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosRegistroFormaPagoBanco.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosRegistroFormaPagoBanco.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteRegistroFormaPagoBanco.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jCheckBoxPostAccionNuevoRegistroFormaPagoBanco.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jCheckBoxPostAccionSinCerrarRegistroFormaPagoBanco.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jCheckBoxPostAccionSinMensajeRegistroFormaPagoBanco.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionRegistroFormaPagoBanco.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionRegistroFormaPagoBanco.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesRegistroFormaPagoBanco.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesRegistroFormaPagoBanco.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesRegistroFormaPagoBanco.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarRegistroFormaPagoBanco.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesRegistroFormaPagoBanco.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesRegistroFormaPagoBanco.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralRegistroFormaPagoBanco.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesRegistroFormaPagoBanco(Boolean esInicializar) throws Exception {
		try	{	
			if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualRegistroFormaPagoBanco(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesRegistroFormaPagoBanco() throws Exception {
		try	{
			if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualRegistroFormaPagoBanco();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleRegistroFormaPagoBanco() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualRegistroFormaPagoBanco() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesRegistroFormaPagoBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesRegistroFormaPagoBanco.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesRegistroFormaPagoBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesRegistroFormaPagoBanco.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesRegistroFormaPagoBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesRegistroFormaPagoBanco.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionRegistroFormaPagoBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionRegistroFormaPagoBanco.addItem(reporte);
			}
			
			
			if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionRegistroFormaPagoBanco.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionRegistroFormaPagoBanco.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesRegistroFormaPagoBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesRegistroFormaPagoBanco.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesRegistroFormaPagoBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesRegistroFormaPagoBanco.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarRegistroFormaPagoBanco.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarRegistroFormaPagoBanco.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarRegistroFormaPagoBanco.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualRegistroFormaPagoBanco();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualRegistroFormaPagoBanco() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco!=null) {
				this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco!=null) {
				this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco!=null) {
				
				if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=RegistroFormaPagoBancoConstantesFunciones.getTiposSeleccionarRegistroFormaPagoBanco(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=RegistroFormaPagoBancoConstantesFunciones.getTiposSeleccionarRegistroFormaPagoBanco(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=RegistroFormaPagoBancoConstantesFunciones.getTiposSeleccionarRegistroFormaPagoBanco(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualRegistroFormaPagoBanco()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_asiento_contableFK_IdAsientoContableRegistroFormaPagoBanco.getSelectedItem()!=null){this.id_asiento_contableFK_IdAsientoContable=((AsientoContable)this.jComboBoxid_asiento_contableFK_IdAsientoContableRegistroFormaPagoBanco.getSelectedItem()).getId();}
		if(this.jComboBoxid_clienteFK_IdClienteRegistroFormaPagoBanco.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteRegistroFormaPagoBanco.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco.getSelectedItem()!=null){this.id_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco=((EstadoRegistroFormaPagoBanco)this.jComboBoxid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_forma_pagoFK_IdTipoFormaPagoRegistroFormaPagoBanco.getSelectedItem()!=null){this.id_tipo_forma_pagoFK_IdTipoFormaPago=((TipoFormaPago)this.jComboBoxid_tipo_forma_pagoFK_IdTipoFormaPagoRegistroFormaPagoBanco.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasRegistroFormaPagoBanco(Boolean esInicializar) throws Exception {				
		if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualRegistroFormaPagoBanco();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaRegistroFormaPagoBanco() throws Exception {
		this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByRegistroFormaPagoBanco() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByRegistroFormaPagoBanco.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByRegistroFormaPagoBanco.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByRegistroFormaPagoBanco.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByRegistroFormaPagoBanco.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByRegistroFormaPagoBanco.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosRegistroFormaPagoBancoOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBancoOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByRegistroFormaPagoBanco.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByRegistroFormaPagoBanco.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByRegistroFormaPagoBanco.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaRegistroFormaPagoBanco(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=registroformapagobancoLogic.getRegistroFormaPagoBancos().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=registroformapagobancos.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosRegistroFormaPagoBanco.setModel(new RegistroFormaPagoBancoModel(this.registroformapagobancoLogic.getRegistroFormaPagoBancos(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosRegistroFormaPagoBanco.setModel(new RegistroFormaPagoBancoModel(this.registroformapagobancos,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByRegistroFormaPagoBanco!=null && this.jInternalFrameOrderByRegistroFormaPagoBanco.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByRegistroFormaPagoBanco();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+RegistroFormaPagoBancoConstantesFunciones.SCLASSWEBTITULO,registroformapagobancoConstantesFunciones.resaltarSeleccionarRegistroFormaPagoBanco,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+RegistroFormaPagoBancoConstantesFunciones.SCLASSWEBTITULO,registroformapagobancoConstantesFunciones.resaltarSeleccionarRegistroFormaPagoBanco,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_ID));

		if(this.registroformapagobancoConstantesFunciones.mostraridRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.registroformapagobancoConstantesFunciones.resaltaridRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activaridRegistroFormaPagoBanco,iSizeTabla,this,true,"idRegistroFormaPagoBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.registroformapagobancoConstantesFunciones.resaltaridRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activaridRegistroFormaPagoBanco,this,true,"idRegistroFormaPagoBanco","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEMPRESA));

		if(this.registroformapagobancoConstantesFunciones.mostrarid_empresaRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_empresaRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_empresaRegistroFormaPagoBanco,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_empresaRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_empresaRegistroFormaPagoBanco,false,"id_empresaRegistroFormaPagoBanco","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.registroformapagobancoConstantesFunciones.mostrarid_sucursalRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_sucursalRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_sucursalRegistroFormaPagoBanco,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_sucursalRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_sucursalRegistroFormaPagoBanco,false,"id_sucursalRegistroFormaPagoBanco","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.registroformapagobancoConstantesFunciones.mostrarid_ejercicioRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_ejercicioRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_ejercicioRegistroFormaPagoBanco,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_ejercicioRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_ejercicioRegistroFormaPagoBanco,false,"id_ejercicioRegistroFormaPagoBanco","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDPERIODO));

		if(this.registroformapagobancoConstantesFunciones.mostrarid_periodoRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_periodoRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_periodoRegistroFormaPagoBanco,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_periodoRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_periodoRegistroFormaPagoBanco,false,"id_periodoRegistroFormaPagoBanco","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE));

		if(this.registroformapagobancoConstantesFunciones.mostrarid_asiento_contableRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AsientoContableTableCell(this.asientocontablesForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_asiento_contableRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_asiento_contableRegistroFormaPagoBanco,iSizeTabla));
			tableColumn.setCellEditor(new AsientoContableTableCell(this.asientocontablesForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_asiento_contableRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_asiento_contableRegistroFormaPagoBanco,true,"id_asiento_contableRegistroFormaPagoBanco","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO));

		if(this.registroformapagobancoConstantesFunciones.mostrarid_tipo_forma_pagoRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoFormaPagoTableCell(this.tipoformapagosForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_tipo_forma_pagoRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_tipo_forma_pagoRegistroFormaPagoBanco,iSizeTabla));
			tableColumn.setCellEditor(new TipoFormaPagoTableCell(this.tipoformapagosForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_tipo_forma_pagoRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_tipo_forma_pagoRegistroFormaPagoBanco,true,"id_tipo_forma_pagoRegistroFormaPagoBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO));

		if(this.registroformapagobancoConstantesFunciones.mostrarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoRegistroFormaPagoBancoTableCell(this.estadoregistroformapagobancosForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco,iSizeTabla));
			tableColumn.setCellEditor(new EstadoRegistroFormaPagoBancoTableCell(this.estadoregistroformapagobancosForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco,true,"id_estado_registro_forma_pago_bancoRegistroFormaPagoBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE));

		if(this.registroformapagobancoConstantesFunciones.mostrarid_clienteRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_clienteRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_clienteRegistroFormaPagoBanco,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_clienteRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_clienteRegistroFormaPagoBanco,true,"id_clienteRegistroFormaPagoBanco","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO));

		if(this.registroformapagobancoConstantesFunciones.mostrarnombre_bancoRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.registroformapagobancoConstantesFunciones.resaltarnombre_bancoRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarnombre_bancoRegistroFormaPagoBanco,iSizeTabla,this,true,"nombre_bancoRegistroFormaPagoBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.registroformapagobancoConstantesFunciones.resaltarnombre_bancoRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarnombre_bancoRegistroFormaPagoBanco,this,true,"nombre_bancoRegistroFormaPagoBanco","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR));

		if(this.registroformapagobancoConstantesFunciones.mostrarnombre_giradorRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.registroformapagobancoConstantesFunciones.resaltarnombre_giradorRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarnombre_giradorRegistroFormaPagoBanco,iSizeTabla,this,true,"nombre_giradorRegistroFormaPagoBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.registroformapagobancoConstantesFunciones.resaltarnombre_giradorRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarnombre_giradorRegistroFormaPagoBanco,this,true,"nombre_giradorRegistroFormaPagoBanco","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO));

		if(this.registroformapagobancoConstantesFunciones.mostrarfecha_vencimientoRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.registroformapagobancoConstantesFunciones.resaltarfecha_vencimientoRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarfecha_vencimientoRegistroFormaPagoBanco,iSizeTabla,this,true,"fecha_vencimientoRegistroFormaPagoBanco","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.registroformapagobancoConstantesFunciones.resaltarfecha_vencimientoRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarfecha_vencimientoRegistroFormaPagoBanco,this,true,"fecha_vencimientoRegistroFormaPagoBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA));

		if(this.registroformapagobancoConstantesFunciones.mostrarnumero_cuentaRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.registroformapagobancoConstantesFunciones.resaltarnumero_cuentaRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarnumero_cuentaRegistroFormaPagoBanco,iSizeTabla,this,true,"numero_cuentaRegistroFormaPagoBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.registroformapagobancoConstantesFunciones.resaltarnumero_cuentaRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarnumero_cuentaRegistroFormaPagoBanco,this,true,"numero_cuentaRegistroFormaPagoBanco","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE));

		if(this.registroformapagobancoConstantesFunciones.mostrarnumero_chequeRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.registroformapagobancoConstantesFunciones.resaltarnumero_chequeRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarnumero_chequeRegistroFormaPagoBanco,iSizeTabla,this,true,"numero_chequeRegistroFormaPagoBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.registroformapagobancoConstantesFunciones.resaltarnumero_chequeRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarnumero_chequeRegistroFormaPagoBanco,this,true,"numero_chequeRegistroFormaPagoBanco","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO));

		if(this.registroformapagobancoConstantesFunciones.mostrarvalor_montoRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.registroformapagobancoConstantesFunciones.resaltarvalor_montoRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarvalor_montoRegistroFormaPagoBanco,iSizeTabla,this,true,"valor_montoRegistroFormaPagoBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.registroformapagobancoConstantesFunciones.resaltarvalor_montoRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarvalor_montoRegistroFormaPagoBanco,this,true,"valor_montoRegistroFormaPagoBanco","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA));

		if(this.registroformapagobancoConstantesFunciones.mostrarfechaRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.registroformapagobancoConstantesFunciones.resaltarfechaRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarfechaRegistroFormaPagoBanco,iSizeTabla,this,true,"fechaRegistroFormaPagoBanco","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.registroformapagobancoConstantesFunciones.resaltarfechaRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarfechaRegistroFormaPagoBanco,this,true,"fechaRegistroFormaPagoBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL));

		if(this.registroformapagobancoConstantesFunciones.mostrarfecha_vencimiento_originalRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.registroformapagobancoConstantesFunciones.resaltarfecha_vencimiento_originalRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarfecha_vencimiento_originalRegistroFormaPagoBanco,iSizeTabla,this,true,"fecha_vencimiento_originalRegistroFormaPagoBanco","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.registroformapagobancoConstantesFunciones.resaltarfecha_vencimiento_originalRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarfecha_vencimiento_originalRegistroFormaPagoBanco,this,true,"fecha_vencimiento_originalRegistroFormaPagoBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO));

		if(this.registroformapagobancoConstantesFunciones.mostrarnumero_cambioRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.registroformapagobancoConstantesFunciones.resaltarnumero_cambioRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarnumero_cambioRegistroFormaPagoBanco,iSizeTabla,this,true,"numero_cambioRegistroFormaPagoBanco","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.registroformapagobancoConstantesFunciones.resaltarnumero_cambioRegistroFormaPagoBanco,this.registroformapagobancoConstantesFunciones.activarnumero_cambioRegistroFormaPagoBanco,this,true,"numero_cambioRegistroFormaPagoBanco","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO));

		if(this.registroformapagobancoConstantesFunciones.mostrarid_anioRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_anioRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_anioRegistroFormaPagoBanco,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_anioRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_anioRegistroFormaPagoBanco,true,"id_anioRegistroFormaPagoBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES));

		if(this.registroformapagobancoConstantesFunciones.mostrarid_mesRegistroFormaPagoBanco && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_mesRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_mesRegistroFormaPagoBanco,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.registroformapagobancoConstantesFunciones.resaltarid_mesRegistroFormaPagoBanco,this,this.registroformapagobancoConstantesFunciones.activarid_mesRegistroFormaPagoBanco,true,"id_mesRegistroFormaPagoBanco","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new RegistroFormaPagoBancoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.registroformapagobancoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.registroformapagobancoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosRegistroFormaPagoBanco.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.registroformapagobancoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.registroformapagobancoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosRegistroFormaPagoBanco.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarRegistroFormaPagoBanco && this.isPermisoGuardarCambiosRegistroFormaPagoBanco) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.registroformapagobancoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.registroformapagobancoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosRegistroFormaPagoBanco.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosRegistroFormaPagoBanco.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarRegistroFormaPagoBanco && this.isPermisoGuardarCambiosRegistroFormaPagoBanco) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarRegistroFormaPagoBanco && this.isPermisoGuardarCambiosRegistroFormaPagoBanco) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosRegistroFormaPagoBanco.moveColumn(this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosRegistroFormaPagoBanco.moveColumn(this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosRegistroFormaPagoBanco.moveColumn(this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosRegistroFormaPagoBanco.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosRegistroFormaPagoBanco.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosRegistroFormaPagoBanco,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosRegistroFormaPagoBanco.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosRegistroFormaPagoBanco.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosRegistroFormaPagoBanco.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=registroformapagobancoLogic.getRegistroFormaPagoBancos().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=registroformapagobancos.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosRegistroFormaPagoBanco.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosRegistroFormaPagoBanco.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosRegistroFormaPagoBanco();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoRegistroFormaPagoBanco=false;
					
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			
				if(this.registroformapagobancoSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosRegistroFormaPagoBanco.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.registroformapagobanco.getsType().equals("DUPLICADO")
				   || this.registroformapagobanco.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoRegistroFormaPagoBanco=true;
				
				} else {
					this.isEsNuevoRegistroFormaPagoBanco=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
					if(this.registroformapagobanco.getId()>=0 && !this.registroformapagobanco.getIsNew()) {						
						this.isEsNuevoRegistroFormaPagoBanco=false;
						
					} else {
						this.isEsNuevoRegistroFormaPagoBanco=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoRegistroFormaPagoBanco(esRelaciones);						
				
				this.seleccionarRegistroFormaPagoBanco(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.registroformapagobanco.getId()<0) {
					this.isEsNuevoRegistroFormaPagoBanco=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarRegistroFormaPagoBanco(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarRegistroFormaPagoBanco(evt,rowIndex);
				}	
				
				if(this.registroformapagobancoSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion RegistroFormaPagoBanco: " + this.dDif); 
					}
				}								
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarRegistroFormaPagoBanco(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.registroformapagobanco)) {
					if(this.registroformapagobanco.getId()>0) {
						this.registroformapagobanco.setIsDeleted(true);
						
						this.registroformapagobancosEliminados.add(this.registroformapagobanco);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.registroformapagobancoLogic.getRegistroFormaPagoBancos().remove(this.registroformapagobanco);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.registroformapagobancos.remove(this.registroformapagobanco);				
					}
					
					
					((RegistroFormaPagoBancoModel) this.jTableDatosRegistroFormaPagoBanco.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarRegistroFormaPagoBanco(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoRegistroFormaPagoBanco) {
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosRegistroFormaPagoBanco.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioRegistroFormaPagoBanco(this.registroformapagobanco);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.registroformapagobancoConstantesFunciones.cargarid_empresaRegistroFormaPagoBanco || this.registroformapagobancoConstantesFunciones.event_dependid_empresaRegistroFormaPagoBanco) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.registroformapagobanco.getid_empresa());
									//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(registroformapagobanco.getEmpresa()!=null) {
							this.empresasForeignKey.add(registroformapagobanco.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.registroformapagobanco.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.registroformapagobancoConstantesFunciones.cargarid_sucursalRegistroFormaPagoBanco || this.registroformapagobancoConstantesFunciones.event_dependid_sucursalRegistroFormaPagoBanco) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.registroformapagobanco.getid_sucursal());
									//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(registroformapagobanco.getSucursal()!=null) {
							this.sucursalsForeignKey.add(registroformapagobanco.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.registroformapagobanco.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.registroformapagobancoConstantesFunciones.cargarid_ejercicioRegistroFormaPagoBanco || this.registroformapagobancoConstantesFunciones.event_dependid_ejercicioRegistroFormaPagoBanco) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.registroformapagobanco.getid_ejercicio());
									//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(registroformapagobanco.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(registroformapagobanco.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.registroformapagobanco.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.registroformapagobancoConstantesFunciones.cargarid_periodoRegistroFormaPagoBanco || this.registroformapagobancoConstantesFunciones.event_dependid_periodoRegistroFormaPagoBanco) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.registroformapagobanco.getid_periodo());
									//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(registroformapagobanco.getPeriodo()!=null) {
							this.periodosForeignKey.add(registroformapagobanco.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.registroformapagobanco.getid_periodo(),false,"Formulario");

					//AsientoContable
					if(!this.registroformapagobancoConstantesFunciones.cargarid_asiento_contableRegistroFormaPagoBanco || this.registroformapagobancoConstantesFunciones.event_dependid_asiento_contableRegistroFormaPagoBanco) {
						//this.cargarCombosAsientoContablesForeignKeyLista(" where id="+this.registroformapagobanco.getid_asiento_contable());
									//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
						this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

						if(registroformapagobanco.getAsientoContable()!=null) {
							this.asientocontablesForeignKey.add(registroformapagobanco.getAsientoContable());
						}

						this.addItemDefectoCombosForeignKeyAsientoContable();
						this.cargarCombosFrameAsientoContablesForeignKey("Todos");
					}
					this.setActualAsientoContableForeignKey(this.registroformapagobanco.getid_asiento_contable(),false,"Formulario");

					//TipoFormaPago
					if(!this.registroformapagobancoConstantesFunciones.cargarid_tipo_forma_pagoRegistroFormaPagoBanco || this.registroformapagobancoConstantesFunciones.event_dependid_tipo_forma_pagoRegistroFormaPagoBanco) {
						//this.cargarCombosTipoFormaPagosForeignKeyLista(" where id="+this.registroformapagobanco.getid_tipo_forma_pago());
									//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
						this.tipoformapagosForeignKey=new ArrayList<TipoFormaPago>();

						if(registroformapagobanco.getTipoFormaPago()!=null) {
							this.tipoformapagosForeignKey.add(registroformapagobanco.getTipoFormaPago());
						}

						this.addItemDefectoCombosForeignKeyTipoFormaPago();
						this.cargarCombosFrameTipoFormaPagosForeignKey("Todos");
					}
					this.setActualTipoFormaPagoForeignKey(this.registroformapagobanco.getid_tipo_forma_pago(),false,"Formulario");

					//EstadoRegistroFormaPagoBanco
					if(!this.registroformapagobancoConstantesFunciones.cargarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco || this.registroformapagobancoConstantesFunciones.event_dependid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco) {
						//this.cargarCombosEstadoRegistroFormaPagoBancosForeignKeyLista(" where id="+this.registroformapagobanco.getid_estado_registro_forma_pago_banco());
									//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
						this.estadoregistroformapagobancosForeignKey=new ArrayList<EstadoRegistroFormaPagoBanco>();

						if(registroformapagobanco.getEstadoRegistroFormaPagoBanco()!=null) {
							this.estadoregistroformapagobancosForeignKey.add(registroformapagobanco.getEstadoRegistroFormaPagoBanco());
						}

						this.addItemDefectoCombosForeignKeyEstadoRegistroFormaPagoBanco();
						this.cargarCombosFrameEstadoRegistroFormaPagoBancosForeignKey("Todos");
					}
					this.setActualEstadoRegistroFormaPagoBancoForeignKey(this.registroformapagobanco.getid_estado_registro_forma_pago_banco(),false,"Formulario");

					//Cliente
					if(!this.registroformapagobancoConstantesFunciones.cargarid_clienteRegistroFormaPagoBanco || this.registroformapagobancoConstantesFunciones.event_dependid_clienteRegistroFormaPagoBanco) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.registroformapagobanco.getid_cliente());
									//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(registroformapagobanco.getCliente()!=null) {
							this.clientesForeignKey.add(registroformapagobanco.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.registroformapagobanco.getid_cliente(),false,"Formulario");

					//Anio
					if(!this.registroformapagobancoConstantesFunciones.cargarid_anioRegistroFormaPagoBanco || this.registroformapagobancoConstantesFunciones.event_dependid_anioRegistroFormaPagoBanco) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.registroformapagobanco.getid_anio());
									//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(registroformapagobanco.getAnio()!=null) {
							this.aniosForeignKey.add(registroformapagobanco.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.registroformapagobanco.getid_anio(),false,"Formulario");

					//Mes
					if(!this.registroformapagobancoConstantesFunciones.cargarid_mesRegistroFormaPagoBanco || this.registroformapagobancoConstantesFunciones.event_dependid_mesRegistroFormaPagoBanco) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.registroformapagobanco.getid_mes());
									//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(registroformapagobanco.getMes()!=null) {
							this.messForeignKey.add(registroformapagobanco.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.registroformapagobanco.getid_mes(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesRegistroFormaPagoBanco("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesRegistroFormaPagoBanco(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualRegistroFormaPagoBanco() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoRegistroFormaPagoBanco(registroformapagobanco,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioRegistroFormaPagoBanco(registroformapagobanco);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyRegistroFormaPagoBanco(registroformapagobanco,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyRegistroFormaPagoBanco(registroformapagobanco);
	}
	
	public void setVariablesObjetoActualToFormularioRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelidRegistroFormaPagoBanco.setText(registroformapagobanco.getId().toString());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_bancoRegistroFormaPagoBanco.setText(registroformapagobanco.getnombre_banco());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_giradorRegistroFormaPagoBanco.setText(registroformapagobanco.getnombre_girador());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimientoRegistroFormaPagoBanco.setDate(registroformapagobanco.getfecha_vencimiento());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cuentaRegistroFormaPagoBanco.setText(registroformapagobanco.getnumero_cuenta());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_chequeRegistroFormaPagoBanco.setText(registroformapagobanco.getnumero_cheque());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldvalor_montoRegistroFormaPagoBanco.setText(registroformapagobanco.getvalor_monto().toString());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfechaRegistroFormaPagoBanco.setDate(registroformapagobanco.getfecha());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimiento_originalRegistroFormaPagoBanco.setDate(registroformapagobanco.getfecha_vencimiento_original());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cambioRegistroFormaPagoBanco.setText(registroformapagobanco.getnumero_cambio().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,RegistroFormaPagoBanco registroformapagobancoLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,registroformapagobancoLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,RegistroFormaPagoBanco registroformapagobancoLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				registroformapagobancoLocal=this.registroformapagobanco;
			} else {
				registroformapagobancoLocal=this.registroformapagobancoAnterior;
			}
		}
		
		if(this.permiteMantenimiento(registroformapagobancoLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoRegistroFormaPagoBanco(registroformapagobancoLocal,true);
					
					if(registroformapagobancoSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(registroformapagobancoLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(registroformapagobancoLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(registroformapagobanco,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(registroformapagobanco);
	}
	
	public void setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(registroformapagobanco,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelidRegistroFormaPagoBanco.getText()==null || this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelidRegistroFormaPagoBanco.getText()=="" || this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelidRegistroFormaPagoBanco.getText()=="Id") {
				this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelidRegistroFormaPagoBanco.setText("0");
			}

			if(conColumnasBase) {registroformapagobanco.setId(Long.parseLong(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelidRegistroFormaPagoBanco.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RegistroFormaPagoBancoConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelIdRegistroFormaPagoBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			registroformapagobanco.setnombre_banco(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_bancoRegistroFormaPagoBanco.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnombre_bancoRegistroFormaPagoBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			registroformapagobanco.setnombre_girador(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_giradorRegistroFormaPagoBanco.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnombre_giradorRegistroFormaPagoBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			registroformapagobanco.setfecha_vencimiento(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimientoRegistroFormaPagoBanco.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelfecha_vencimientoRegistroFormaPagoBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			registroformapagobanco.setnumero_cuenta(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cuentaRegistroFormaPagoBanco.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnumero_cuentaRegistroFormaPagoBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			registroformapagobanco.setnumero_cheque(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_chequeRegistroFormaPagoBanco.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnumero_chequeRegistroFormaPagoBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			registroformapagobanco.setvalor_monto(Double.parseDouble(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldvalor_montoRegistroFormaPagoBanco.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelvalor_montoRegistroFormaPagoBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			registroformapagobanco.setfecha(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfechaRegistroFormaPagoBanco.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelfechaRegistroFormaPagoBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			registroformapagobanco.setfecha_vencimiento_original(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimiento_originalRegistroFormaPagoBanco.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelfecha_vencimiento_originalRegistroFormaPagoBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			registroformapagobanco.setnumero_cambio(Integer.parseInt(this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cambioRegistroFormaPagoBanco.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelnumero_cambioRegistroFormaPagoBanco,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobancoBean,RegistroFormaPagoBanco registroformapagobanco,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobancoOrigen,RegistroFormaPagoBanco registroformapagobanco,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && registroformapagobancoOrigen.getId()!=null && !registroformapagobancoOrigen.getId().equals(0L))) {registroformapagobanco.setId(registroformapagobancoOrigen.getId());}}
			if(conDefault || (!conDefault && registroformapagobancoOrigen.getnombre_banco()!=null && !registroformapagobancoOrigen.getnombre_banco().equals(""))) {registroformapagobanco.setnombre_banco(registroformapagobancoOrigen.getnombre_banco());}
			if(conDefault || (!conDefault && registroformapagobancoOrigen.getnombre_girador()!=null && !registroformapagobancoOrigen.getnombre_girador().equals(""))) {registroformapagobanco.setnombre_girador(registroformapagobancoOrigen.getnombre_girador());}
			if(conDefault || (!conDefault && registroformapagobancoOrigen.getfecha_vencimiento()!=null && !registroformapagobancoOrigen.getfecha_vencimiento().equals(new Date()))) {registroformapagobanco.setfecha_vencimiento(registroformapagobancoOrigen.getfecha_vencimiento());}
			if(conDefault || (!conDefault && registroformapagobancoOrigen.getnumero_cuenta()!=null && !registroformapagobancoOrigen.getnumero_cuenta().equals(""))) {registroformapagobanco.setnumero_cuenta(registroformapagobancoOrigen.getnumero_cuenta());}
			if(conDefault || (!conDefault && registroformapagobancoOrigen.getnumero_cheque()!=null && !registroformapagobancoOrigen.getnumero_cheque().equals(""))) {registroformapagobanco.setnumero_cheque(registroformapagobancoOrigen.getnumero_cheque());}
			if(conDefault || (!conDefault && registroformapagobancoOrigen.getvalor_monto()!=null && !registroformapagobancoOrigen.getvalor_monto().equals(0.0))) {registroformapagobanco.setvalor_monto(registroformapagobancoOrigen.getvalor_monto());}
			if(conDefault || (!conDefault && registroformapagobancoOrigen.getfecha()!=null && !registroformapagobancoOrigen.getfecha().equals(new Date()))) {registroformapagobanco.setfecha(registroformapagobancoOrigen.getfecha());}
			if(conDefault || (!conDefault && registroformapagobancoOrigen.getfecha_vencimiento_original()!=null && !registroformapagobancoOrigen.getfecha_vencimiento_original().equals(new Date()))) {registroformapagobanco.setfecha_vencimiento_original(registroformapagobancoOrigen.getfecha_vencimiento_original());}
			if(conDefault || (!conDefault && registroformapagobancoOrigen.getnumero_cambio()!=null && !registroformapagobancoOrigen.getnumero_cambio().equals(0))) {registroformapagobanco.setnumero_cambio(registroformapagobancoOrigen.getnumero_cambio());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelidRegistroFormaPagoBanco.setText(registroformapagobanco.getId().toString());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_bancoRegistroFormaPagoBanco.setText(registroformapagobanco.getnombre_banco());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_giradorRegistroFormaPagoBanco.setText(registroformapagobanco.getnombre_girador());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimientoRegistroFormaPagoBanco.setDate(registroformapagobanco.getfecha_vencimiento());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cuentaRegistroFormaPagoBanco.setText(registroformapagobanco.getnumero_cuenta());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_chequeRegistroFormaPagoBanco.setText(registroformapagobanco.getnumero_cheque());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldvalor_montoRegistroFormaPagoBanco.setText(registroformapagobanco.getvalor_monto().toString());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfechaRegistroFormaPagoBanco.setDate(registroformapagobanco.getfecha());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimiento_originalRegistroFormaPagoBanco.setDate(registroformapagobanco.getfecha_vencimiento_original());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cambioRegistroFormaPagoBanco.setText(registroformapagobanco.getnumero_cambio().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioRegistroFormaPagoBanco(RegistroFormaPagoBancoBean registroformapagobancoBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelidRegistroFormaPagoBanco.setText(registroformapagobancoBean.getId().toString());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_bancoRegistroFormaPagoBanco.setText(registroformapagobancoBean.getnombre_banco());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_giradorRegistroFormaPagoBanco.setText(registroformapagobancoBean.getnombre_girador());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimientoRegistroFormaPagoBanco.setDate(registroformapagobancoBean.getfecha_vencimiento());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cuentaRegistroFormaPagoBanco.setText(registroformapagobancoBean.getnumero_cuenta());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_chequeRegistroFormaPagoBanco.setText(registroformapagobancoBean.getnumero_cheque());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldvalor_montoRegistroFormaPagoBanco.setText(registroformapagobancoBean.getvalor_monto().toString());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfechaRegistroFormaPagoBanco.setDate(registroformapagobancoBean.getfecha());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimiento_originalRegistroFormaPagoBanco.setDate(registroformapagobancoBean.getfecha_vencimiento_original());
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cambioRegistroFormaPagoBanco.setText(registroformapagobancoBean.getnumero_cambio().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanRegistroFormaPagoBanco(RegistroFormaPagoBancoParameterReturnGeneral registroformapagobancoReturnGeneral,RegistroFormaPagoBancoBean registroformapagobancoBean,Boolean conDefault) throws Exception { 
		try {
			RegistroFormaPagoBanco registroformapagobancoLocal=new RegistroFormaPagoBanco();
			
			registroformapagobancoLocal=registroformapagobancoReturnGeneral.getRegistroFormaPagoBanco();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && registroformapagobancoLocal.getId()!=null && !registroformapagobancoLocal.getId().equals(0L))) {registroformapagobancoBean.setId(registroformapagobancoLocal.getId());}}
			if(conDefault || (!conDefault && registroformapagobancoLocal.getnombre_banco()!=null && !registroformapagobancoLocal.getnombre_banco().equals(""))) {registroformapagobancoBean.setnombre_banco(registroformapagobancoLocal.getnombre_banco());}
			if(conDefault || (!conDefault && registroformapagobancoLocal.getnombre_girador()!=null && !registroformapagobancoLocal.getnombre_girador().equals(""))) {registroformapagobancoBean.setnombre_girador(registroformapagobancoLocal.getnombre_girador());}
			if(conDefault || (!conDefault && registroformapagobancoLocal.getfecha_vencimiento()!=null && !registroformapagobancoLocal.getfecha_vencimiento().equals(new Date()))) {registroformapagobancoBean.setfecha_vencimiento(registroformapagobancoLocal.getfecha_vencimiento());}
			if(conDefault || (!conDefault && registroformapagobancoLocal.getnumero_cuenta()!=null && !registroformapagobancoLocal.getnumero_cuenta().equals(""))) {registroformapagobancoBean.setnumero_cuenta(registroformapagobancoLocal.getnumero_cuenta());}
			if(conDefault || (!conDefault && registroformapagobancoLocal.getnumero_cheque()!=null && !registroformapagobancoLocal.getnumero_cheque().equals(""))) {registroformapagobancoBean.setnumero_cheque(registroformapagobancoLocal.getnumero_cheque());}
			if(conDefault || (!conDefault && registroformapagobancoLocal.getvalor_monto()!=null && !registroformapagobancoLocal.getvalor_monto().equals(0.0))) {registroformapagobancoBean.setvalor_monto(registroformapagobancoLocal.getvalor_monto());}
			if(conDefault || (!conDefault && registroformapagobancoLocal.getfecha()!=null && !registroformapagobancoLocal.getfecha().equals(new Date()))) {registroformapagobancoBean.setfecha(registroformapagobancoLocal.getfecha());}
			if(conDefault || (!conDefault && registroformapagobancoLocal.getfecha_vencimiento_original()!=null && !registroformapagobancoLocal.getfecha_vencimiento_original().equals(new Date()))) {registroformapagobancoBean.setfecha_vencimiento_original(registroformapagobancoLocal.getfecha_vencimiento_original());}
			if(conDefault || (!conDefault && registroformapagobancoLocal.getnumero_cambio()!=null && !registroformapagobancoLocal.getnumero_cambio().equals(0))) {registroformapagobancoBean.setnumero_cambio(registroformapagobancoLocal.getnumero_cambio());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxRegistroFormaPagoBancoGenerico(Long idRegistroFormaPagoBancoSeleccionado,JComboBox jComboBoxRegistroFormaPagoBanco,List<RegistroFormaPagoBanco> registroformapagobancosLocal)throws Exception {
		try {
			RegistroFormaPagoBanco  registroformapagobancoTemp=null;

			for(RegistroFormaPagoBanco registroformapagobancoAux:registroformapagobancosLocal) {
				if(registroformapagobancoAux.getId()!=null && registroformapagobancoAux.getId().equals(idRegistroFormaPagoBancoSeleccionado)) {
					registroformapagobancoTemp=registroformapagobancoAux;
					break;
				}
			}

			jComboBoxRegistroFormaPagoBanco.setSelectedItem(registroformapagobancoTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxRegistroFormaPagoBancoGenerico(JComboBox jComboBoxRegistroFormaPagoBanco,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxRegistroFormaPagoBanco.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxRegistroFormaPagoBanco.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxRegistroFormaPagoBanco.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxRegistroFormaPagoBanco.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxRegistroFormaPagoBanco.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxRegistroFormaPagoBanco.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxRegistroFormaPagoBanco.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxRegistroFormaPagoBanco.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxRegistroFormaPagoBanco.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxRegistroFormaPagoBanco.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			registroformapagobanco=(RegistroFormaPagoBanco) registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			registroformapagobanco =(RegistroFormaPagoBanco) registroformapagobancos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!registroformapagobanco.getIsNew() && !registroformapagobanco.getIsChanged() && !registroformapagobanco.getIsDeleted()) {
				sDescripcion=registroformapagobanco.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=registroformapagobanco.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!registroformapagobanco.getIsNew() && !registroformapagobanco.getIsChanged() && !registroformapagobanco.getIsDeleted()) {
				sDescripcion=registroformapagobanco.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=registroformapagobanco.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!registroformapagobanco.getIsNew() && !registroformapagobanco.getIsChanged() && !registroformapagobanco.getIsDeleted()) {
				sDescripcion=registroformapagobanco.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=registroformapagobanco.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!registroformapagobanco.getIsNew() && !registroformapagobanco.getIsChanged() && !registroformapagobanco.getIsDeleted()) {
				sDescripcion=registroformapagobanco.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=registroformapagobanco.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("AsientoContable")) {
			//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
			if(!registroformapagobanco.getIsNew() && !registroformapagobanco.getIsChanged() && !registroformapagobanco.getIsDeleted()) {
				sDescripcion=registroformapagobanco.getasientocontable_descripcion();
			} else {
				//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
				sDescripcion=registroformapagobanco.getasientocontable_descripcion();
			}
		}

		if(sTipo.equals("TipoFormaPago")) {
			//sDescripcion=this.getActualTipoFormaPagoForeignKeyDescripcion((Long)value);
			if(!registroformapagobanco.getIsNew() && !registroformapagobanco.getIsChanged() && !registroformapagobanco.getIsDeleted()) {
				sDescripcion=registroformapagobanco.gettipoformapago_descripcion();
			} else {
				//sDescripcion=this.getActualTipoFormaPagoForeignKeyDescripcion((Long)value);
				sDescripcion=registroformapagobanco.gettipoformapago_descripcion();
			}
		}

		if(sTipo.equals("EstadoRegistroFormaPagoBanco")) {
			//sDescripcion=this.getActualEstadoRegistroFormaPagoBancoForeignKeyDescripcion((Long)value);
			if(!registroformapagobanco.getIsNew() && !registroformapagobanco.getIsChanged() && !registroformapagobanco.getIsDeleted()) {
				sDescripcion=registroformapagobanco.getestadoregistroformapagobanco_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoRegistroFormaPagoBancoForeignKeyDescripcion((Long)value);
				sDescripcion=registroformapagobanco.getestadoregistroformapagobanco_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!registroformapagobanco.getIsNew() && !registroformapagobanco.getIsChanged() && !registroformapagobanco.getIsDeleted()) {
				sDescripcion=registroformapagobanco.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=registroformapagobanco.getcliente_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!registroformapagobanco.getIsNew() && !registroformapagobanco.getIsChanged() && !registroformapagobanco.getIsDeleted()) {
				sDescripcion=registroformapagobanco.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=registroformapagobanco.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!registroformapagobanco.getIsNew() && !registroformapagobanco.getIsChanged() && !registroformapagobanco.getIsDeleted()) {
				sDescripcion=registroformapagobanco.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=registroformapagobanco.getmes_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		RegistroFormaPagoBanco registroformapagobancoRow=new RegistroFormaPagoBanco();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			registroformapagobancoRow=(RegistroFormaPagoBanco) registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			registroformapagobancoRow=(RegistroFormaPagoBanco) registroformapagobancos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualRegistroFormaPagoBanco(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco && this.isPermisoNuevoRegistroFormaPagoBanco));			
			this.jButtonDuplicarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaDuplicarRegistroFormaPagoBanco && this.isPermisoDuplicarRegistroFormaPagoBanco));			
			this.jButtonCopiarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaCopiarRegistroFormaPagoBanco && this.isPermisoCopiarRegistroFormaPagoBanco));
			this.jButtonVerFormRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaVerFormRegistroFormaPagoBanco && this.isPermisoVerFormRegistroFormaPagoBanco));
			
			this.jButtonAbrirOrderByRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaOrdenRegistroFormaPagoBanco && this.isPermisoOrdenRegistroFormaPagoBanco));			
			
			this.jButtonNuevoRelacionesRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco && this.isPermisoNuevoRegistroFormaPagoBanco));			
			this.jButtonNuevoGuardarCambiosRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco && this.isPermisoNuevoRegistroFormaPagoBanco && this.isPermisoGuardarCambiosRegistroFormaPagoBanco));
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonModificarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaModificarRegistroFormaPagoBanco && this.isPermisoActualizarRegistroFormaPagoBanco));	
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonActualizarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco && this.isPermisoActualizarRegistroFormaPagoBanco));	
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonEliminarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco && this.isPermisoEliminarRegistroFormaPagoBanco));
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonCancelarRegistroFormaPagoBanco.setVisible(this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco);							
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonGuardarCambiosRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco && this.isPermisoGuardarCambiosRegistroFormaPagoBanco));			
			
			}
						
			this.jButtonGuardarCambiosTablaRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco && this.isPermisoGuardarCambiosRegistroFormaPagoBanco));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco && this.isPermisoNuevoRegistroFormaPagoBanco));						
			this.jButtonDuplicarToolBarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaDuplicarRegistroFormaPagoBanco && this.isPermisoDuplicarRegistroFormaPagoBanco));						
			this.jButtonCopiarToolBarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaCopiarRegistroFormaPagoBanco && this.isPermisoCopiarRegistroFormaPagoBanco));			
			this.jButtonVerFormToolBarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaVerFormRegistroFormaPagoBanco && this.isPermisoVerFormRegistroFormaPagoBanco));			
			this.jButtonAbrirOrderByToolBarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaOrdenRegistroFormaPagoBanco && this.isPermisoOrdenRegistroFormaPagoBanco));
			this.jButtonNuevoRelacionesToolBarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco && this.isPermisoNuevoRegistroFormaPagoBanco));			
			this.jButtonNuevoGuardarCambiosToolBarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco && this.isPermisoNuevoRegistroFormaPagoBanco && this.isPermisoGuardarCambiosRegistroFormaPagoBanco));			
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonModificarToolBarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaModificarRegistroFormaPagoBanco && this.isPermisoActualizarRegistroFormaPagoBanco));	
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonActualizarToolBarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco  && this.isPermisoActualizarRegistroFormaPagoBanco));	
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonEliminarToolBarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco && this.isPermisoEliminarRegistroFormaPagoBanco));
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonCancelarToolBarRegistroFormaPagoBanco.setVisible(this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco);				
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonGuardarCambiosToolBarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco && this.isPermisoGuardarCambiosRegistroFormaPagoBanco));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco && this.isPermisoGuardarCambiosRegistroFormaPagoBanco));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco && this.isPermisoNuevoRegistroFormaPagoBanco));			
			this.jMenuItemDuplicarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaDuplicarRegistroFormaPagoBanco && this.isPermisoDuplicarRegistroFormaPagoBanco));			
			this.jMenuItemCopiarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaCopiarRegistroFormaPagoBanco && this.isPermisoCopiarRegistroFormaPagoBanco));			
			this.jMenuItemVerFormRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaVerFormRegistroFormaPagoBanco && this.isPermisoVerFormRegistroFormaPagoBanco));			
			this.jMenuItemAbrirOrderByRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaOrdenRegistroFormaPagoBanco && this.isPermisoOrdenRegistroFormaPagoBanco));			
			//this.jMenuItemMostrarOcultarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaOrdenRegistroFormaPagoBanco && this.isPermisoOrdenRegistroFormaPagoBanco));
			this.jMenuItemDetalleAbrirOrderByRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaOrdenRegistroFormaPagoBanco && this.isPermisoOrdenRegistroFormaPagoBanco));			
			//this.jMenuItemDetalleMostrarOcultarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaOrdenRegistroFormaPagoBanco && this.isPermisoOrdenRegistroFormaPagoBanco));			
			this.jMenuItemNuevoRelacionesRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco && this.isPermisoNuevoRegistroFormaPagoBanco));			
			this.jMenuItemNuevoGuardarCambiosRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco && this.isPermisoNuevoRegistroFormaPagoBanco && this.isPermisoGuardarCambiosRegistroFormaPagoBanco));									
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemModificarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaModificarRegistroFormaPagoBanco && this.isPermisoActualizarRegistroFormaPagoBanco));	
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemActualizarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco && this.isPermisoActualizarRegistroFormaPagoBanco));	
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemEliminarRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco && this.isPermisoEliminarRegistroFormaPagoBanco));
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemCancelarRegistroFormaPagoBanco.setVisible(this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco);				
			}
			
			this.jMenuItemGuardarCambiosRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco && this.isPermisoGuardarCambiosRegistroFormaPagoBanco));						
			this.jMenuItemGuardarCambiosTablaRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco && this.isPermisoGuardarCambiosRegistroFormaPagoBanco));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco=this.jButtonNuevoRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaDuplicarRegistroFormaPagoBanco=this.jButtonDuplicarRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaCopiarRegistroFormaPagoBanco=this.jButtonCopiarRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaVerFormRegistroFormaPagoBanco=this.jButtonVerFormRegistroFormaPagoBanco.isVisible();
			
			this.isVisibilidadCeldaOrdenRegistroFormaPagoBanco=this.jButtonAbrirOrderByRegistroFormaPagoBanco.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=this.jButtonNuevoRelacionesRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaModificarRegistroFormaPagoBanco=this.jButtonModificarRegistroFormaPagoBanco.isVisible();
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
			this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonActualizarRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonEliminarRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonCancelarRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonGuardarCambiosRegistroFormaPagoBanco.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=this.jButtonGuardarCambiosTablaRegistroFormaPagoBanco.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco=this.jButtonNuevoToolBarRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=this.jButtonNuevoRelacionesToolBarRegistroFormaPagoBanco.isVisible();
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
			this.isVisibilidadCeldaModificarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonModificarToolBarRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonActualizarToolBarRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonEliminarToolBarRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonCancelarToolBarRegistroFormaPagoBanco.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=this.jButtonGuardarCambiosToolBarRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=this.jButtonGuardarCambiosTablaToolBarRegistroFormaPagoBanco.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco=this.jMenuItemNuevoRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=this.jMenuItemNuevoRelacionesRegistroFormaPagoBanco.isVisible();
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
			this.isVisibilidadCeldaModificarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemModificarRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemActualizarRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemEliminarRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco=this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemCancelarRegistroFormaPagoBanco.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=this.jMenuItemGuardarCambiosRegistroFormaPagoBanco.isVisible();
			this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=this.jMenuItemGuardarCambiosTablaRegistroFormaPagoBanco.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesRegistroFormaPagoBanco(Boolean esInicializar) {
		if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {			
			if(this.registroformapagobancoSessionBean.getConGuardarRelaciones()) {
				//if(this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesRegistroFormaPagoBanco();
			}
			
			this.inicializarActualizarBindingBotonesManualRegistroFormaPagoBanco(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualRegistroFormaPagoBanco() {
		this.jButtonNuevoRegistroFormaPagoBanco.setVisible(this.isPermisoNuevoRegistroFormaPagoBanco);			
		this.jButtonDuplicarRegistroFormaPagoBanco.setVisible(this.isPermisoDuplicarRegistroFormaPagoBanco);			
		this.jButtonCopiarRegistroFormaPagoBanco.setVisible(this.isPermisoCopiarRegistroFormaPagoBanco);			
		this.jButtonVerFormRegistroFormaPagoBanco.setVisible(this.isPermisoVerFormRegistroFormaPagoBanco);			
		
		this.jButtonAbrirOrderByRegistroFormaPagoBanco.setVisible(this.isPermisoOrdenRegistroFormaPagoBanco);					
		
		this.jButtonNuevoRelacionesRegistroFormaPagoBanco.setVisible(this.isPermisoNuevoRegistroFormaPagoBanco);			
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonModificarRegistroFormaPagoBanco.setVisible(this.isPermisoActualizarRegistroFormaPagoBanco);	
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonActualizarRegistroFormaPagoBanco.setVisible(this.isPermisoActualizarRegistroFormaPagoBanco);	
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonEliminarRegistroFormaPagoBanco.setVisible(this.isPermisoEliminarRegistroFormaPagoBanco);
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonCancelarRegistroFormaPagoBanco.setVisible(this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco);						
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonGuardarCambiosRegistroFormaPagoBanco.setVisible(this.isPermisoGuardarCambiosRegistroFormaPagoBanco);							
		}
		
		this.jButtonGuardarCambiosTablaRegistroFormaPagoBanco.setVisible(this.isPermisoActualizarRegistroFormaPagoBanco);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleRegistroFormaPagoBanco() {
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonModificarRegistroFormaPagoBanco.setVisible(this.isPermisoActualizarRegistroFormaPagoBanco);	
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonActualizarRegistroFormaPagoBanco.setVisible(this.isPermisoActualizarRegistroFormaPagoBanco);	
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonEliminarRegistroFormaPagoBanco.setVisible(this.isPermisoEliminarRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonCancelarRegistroFormaPagoBanco.setVisible(this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco);							
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonGuardarCambiosRegistroFormaPagoBanco.setVisible((this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco && this.isPermisoGuardarCambiosRegistroFormaPagoBanco));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosRegistroFormaPagoBanco() {
		if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualRegistroFormaPagoBanco();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesRegistroFormaPagoBanco() {
	}
	
	public void jTableDatosRegistroFormaPagoBancoListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarRegistroFormaPagoBanco(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.registroformapagobanco.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaRegistroFormaPagoBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebRegistroFormaPagoBanco(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRegistroFormaPagoBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.registroformapagobancoLogic.getConnexion());

				if(this.registroformapagobanco.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.registroformapagobanco.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRegistroFormaPagoBanco=(TitledBorder)this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderRegistroFormaPagoBanco.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.registroformapagobanco.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalRegistroFormaPagoBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebRegistroFormaPagoBanco(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRegistroFormaPagoBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.registroformapagobancoLogic.getConnexion());

				if(this.registroformapagobanco.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.registroformapagobanco.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRegistroFormaPagoBanco=(TitledBorder)this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderRegistroFormaPagoBanco.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.registroformapagobanco.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioRegistroFormaPagoBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebRegistroFormaPagoBanco(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRegistroFormaPagoBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.registroformapagobancoLogic.getConnexion());

				if(this.registroformapagobanco.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.registroformapagobanco.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRegistroFormaPagoBanco=(TitledBorder)this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderRegistroFormaPagoBanco.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.registroformapagobanco.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoRegistroFormaPagoBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebRegistroFormaPagoBanco(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRegistroFormaPagoBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.registroformapagobancoLogic.getConnexion());

				if(this.registroformapagobanco.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.registroformapagobanco.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRegistroFormaPagoBanco=(TitledBorder)this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderRegistroFormaPagoBanco.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.registroformapagobanco.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_asiento_contableRegistroFormaPagoBancoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="AsientoContable";

			if(!this.sFinalQueryGeneral_asientocontable.equals("")) {
				this.asientocontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_asientocontable);
				this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.asientocontableBeanSwingJInternalFrame.procesarBusqueda(this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingAsientoContable(false);
			}

			if(!this.sFinalQueryComboAsientoContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderRegistroFormaPagoBanco=null;
			TitledBorder titledBorderasientocontable=null;

			if(!this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderRegistroFormaPagoBanco=(TitledBorder)this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder();
				titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderRegistroFormaPagoBanco.getTitle() + " -> Asiento Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_asiento_contableRegistroFormaPagoBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoasientocontable=true;

			idTienePermisoasientocontable=this.tienePermisosUsuarioEnPaginaWebRegistroFormaPagoBanco(AsientoContableConstantesFunciones.CLASSNAME);

			if(idTienePermisoasientocontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRegistroFormaPagoBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);

				this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.asientocontableBeanSwingJInternalFrame.getAsientoContableLogic().setConnexion(this.registroformapagobancoLogic.getConnexion());

				if(this.registroformapagobanco.getid_asiento_contable()!=null) {
					this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.asientocontableBeanSwingJInternalFrame.setIdActual(this.registroformapagobanco.getid_asiento_contable());
					this.asientocontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaAsientoContable();
				}

				JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRegistroFormaPagoBanco=(TitledBorder)this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder();
				TitledBorder titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderRegistroFormaPagoBanco.getTitle() + " -> Asiento Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_asiento_contableRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getid_asiento_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_asiento_contable = "+this.registroformapagobanco.getid_asiento_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_forma_pagoRegistroFormaPagoBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoformapago=true;

			idTienePermisotipoformapago=this.tienePermisosUsuarioEnPaginaWebRegistroFormaPagoBanco(TipoFormaPagoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoformapago) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRegistroFormaPagoBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);

				this.tipoformapagoBeanSwingJInternalFrame=new TipoFormaPagoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoformapagoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoformapagoBeanSwingJInternalFrame.getTipoFormaPagoLogic().setConnexion(this.registroformapagobancoLogic.getConnexion());

				if(this.registroformapagobanco.getid_tipo_forma_pago()!=null) {
					this.tipoformapagoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoformapagoBeanSwingJInternalFrame.setIdActual(this.registroformapagobanco.getid_tipo_forma_pago());
					this.tipoformapagoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoformapagoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoformapagoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoFormaPago();
				}

				JInternalFrameBase jinternalFrame =this.tipoformapagoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRegistroFormaPagoBanco=(TitledBorder)this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder();
				TitledBorder titledBordertipoformapago=(TitledBorder)this.tipoformapagoBeanSwingJInternalFrame.jScrollPanelDatosTipoFormaPago.getBorder();

				titledBordertipoformapago.setTitle(titledBorderRegistroFormaPagoBanco.getTitle() + " -> Tipo Forma Pago");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_forma_pagoRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getid_tipo_forma_pago()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_forma_pago = "+this.registroformapagobanco.getid_tipo_forma_pago().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadoregistroformapagobanco=true;

			idTienePermisoestadoregistroformapagobanco=this.tienePermisosUsuarioEnPaginaWebRegistroFormaPagoBanco(EstadoRegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadoregistroformapagobanco) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRegistroFormaPagoBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);

				this.estadoregistroformapagobancoBeanSwingJInternalFrame=new EstadoRegistroFormaPagoBancoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadoregistroformapagobancoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadoregistroformapagobancoBeanSwingJInternalFrame.getEstadoRegistroFormaPagoBancoLogic().setConnexion(this.registroformapagobancoLogic.getConnexion());

				if(this.registroformapagobanco.getid_estado_registro_forma_pago_banco()!=null) {
					this.estadoregistroformapagobancoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadoregistroformapagobancoBeanSwingJInternalFrame.setIdActual(this.registroformapagobanco.getid_estado_registro_forma_pago_banco());
					this.estadoregistroformapagobancoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadoregistroformapagobancoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadoregistroformapagobancoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoRegistroFormaPagoBanco();
				}

				JInternalFrameBase jinternalFrame =this.estadoregistroformapagobancoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRegistroFormaPagoBanco=(TitledBorder)this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder();
				TitledBorder titledBorderestadoregistroformapagobanco=(TitledBorder)this.estadoregistroformapagobancoBeanSwingJInternalFrame.jScrollPanelDatosEstadoRegistroFormaPagoBanco.getBorder();

				titledBorderestadoregistroformapagobanco.setTitle(titledBorderRegistroFormaPagoBanco.getTitle() + " -> Estado Registro Forma Pago Banco");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getid_estado_registro_forma_pago_banco()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_registro_forma_pago_banco = "+this.registroformapagobanco.getid_estado_registro_forma_pago_banco().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteRegistroFormaPagoBancoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderRegistroFormaPagoBanco=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderRegistroFormaPagoBanco=(TitledBorder)this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderRegistroFormaPagoBanco.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteRegistroFormaPagoBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebRegistroFormaPagoBanco(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRegistroFormaPagoBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.registroformapagobancoLogic.getConnexion());

				if(this.registroformapagobanco.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.registroformapagobanco.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRegistroFormaPagoBanco=(TitledBorder)this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderRegistroFormaPagoBanco.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.registroformapagobanco.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_bancoRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getnombre_banco()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_banco like '%"+this.registroformapagobanco.getnombre_banco()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_giradorRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getnombre_girador()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_girador like '%"+this.registroformapagobanco.getnombre_girador()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_vencimientoRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getfecha_vencimiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_vencimiento = '"+Funciones2.getStringPostgresDate(this.registroformapagobanco.getfecha_vencimiento())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_cuentaRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getnumero_cuenta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_cuenta like '%"+this.registroformapagobanco.getnumero_cuenta()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_chequeRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getnumero_cheque()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_cheque like '%"+this.registroformapagobanco.getnumero_cheque()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_montoRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getvalor_monto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_monto = "+this.registroformapagobanco.getvalor_monto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.registroformapagobanco.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_vencimiento_originalRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getfecha_vencimiento_original()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_vencimiento_original = '"+Funciones2.getStringPostgresDate(this.registroformapagobanco.getfecha_vencimiento_original())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_cambioRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getnumero_cambio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_cambio = "+this.registroformapagobanco.getnumero_cambio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioRegistroFormaPagoBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebRegistroFormaPagoBanco(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRegistroFormaPagoBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.registroformapagobancoLogic.getConnexion());

				if(this.registroformapagobanco.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.registroformapagobanco.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRegistroFormaPagoBanco=(TitledBorder)this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderRegistroFormaPagoBanco.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.registroformapagobanco.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesRegistroFormaPagoBancoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebRegistroFormaPagoBanco(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosRegistroFormaPagoBanco.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosRegistroFormaPagoBanco.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.registroformapagobancoLogic.getConnexion());

				if(this.registroformapagobanco.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.registroformapagobanco.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderRegistroFormaPagoBanco=(TitledBorder)this.jScrollPanelDatosRegistroFormaPagoBanco.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderRegistroFormaPagoBanco.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesRegistroFormaPagoBancoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.getregistroformapagobanco(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.registroformapagobanco==null) {
						this.registroformapagobanco = new RegistroFormaPagoBanco();
					}

					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);
				}

				if(this.registroformapagobanco.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.registroformapagobanco.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAnioRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);

			this.getRegistroFormaPagoBancosFK_IdAnio();

			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);

			//if(RegistroFormaPagoBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdAsientoContableRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);

			this.getRegistroFormaPagoBancosFK_IdAsientoContable();

			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);

			//if(RegistroFormaPagoBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClienteRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);

			this.getRegistroFormaPagoBancosFK_IdCliente();

			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);

			//if(RegistroFormaPagoBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);

			this.getRegistroFormaPagoBancosFK_IdEjercicio();

			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);

			//if(RegistroFormaPagoBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);

			this.getRegistroFormaPagoBancosFK_IdEmpresa();

			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);

			//if(RegistroFormaPagoBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);

			this.getRegistroFormaPagoBancosFK_IdEstadoRegistroFormaPagoBanco();

			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);

			//if(RegistroFormaPagoBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);

			this.getRegistroFormaPagoBancosFK_IdMes();

			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);

			//if(RegistroFormaPagoBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);

			this.getRegistroFormaPagoBancosFK_IdPeriodo();

			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);

			//if(RegistroFormaPagoBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);

			this.getRegistroFormaPagoBancosFK_IdSucursal();

			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);

			//if(RegistroFormaPagoBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoFormaPagoRegistroFormaPagoBancoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);

			this.getRegistroFormaPagoBancosFK_IdTipoFormaPago();

			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);

			//if(RegistroFormaPagoBancoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.registroformapagobancoLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameRegistroFormaPagoBanco() {
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setVisible(false);	    			
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.dispose();
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco!=null) {
			this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.dispose();
			this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco=null;
		}
		
		if(this.jInternalFrameImportacionRegistroFormaPagoBanco!=null) {
			this.jInternalFrameImportacionRegistroFormaPagoBanco.setVisible(false);	    			
			this.jInternalFrameImportacionRegistroFormaPagoBanco.dispose();
			this.jInternalFrameImportacionRegistroFormaPagoBanco=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessRegistroFormaPagoBanco();
			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			
			
			if(sTipo.equals("NuevoRegistroFormaPagoBanco")) {
				jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarRegistroFormaPagoBanco")) {
				jButtonDuplicarRegistroFormaPagoBancoActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarRegistroFormaPagoBanco")) {
				jButtonCopiarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("VerFormRegistroFormaPagoBanco")) {
				jButtonVerFormRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarRegistroFormaPagoBanco")) {
				jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarRegistroFormaPagoBanco")) {
				jButtonDuplicarRegistroFormaPagoBancoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoRegistroFormaPagoBanco")) {
				jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarRegistroFormaPagoBanco")) {
				jButtonDuplicarRegistroFormaPagoBancoActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesRegistroFormaPagoBanco")) {
				jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarRegistroFormaPagoBanco")) {
				jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesRegistroFormaPagoBanco")) {
				jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarRegistroFormaPagoBanco")) {
				jButtonModificarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarRegistroFormaPagoBanco")) {
				jButtonModificarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarRegistroFormaPagoBanco")) {
				jButtonModificarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarRegistroFormaPagoBanco")) {
				jButtonActualizarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarRegistroFormaPagoBanco")) {
				jButtonActualizarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarRegistroFormaPagoBanco")) {
				jButtonActualizarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("EliminarRegistroFormaPagoBanco")) {
				jButtonEliminarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarRegistroFormaPagoBanco")) {
				jButtonEliminarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarRegistroFormaPagoBanco")) {
				jButtonEliminarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("CancelarRegistroFormaPagoBanco")) {
				jButtonCancelarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarRegistroFormaPagoBanco")) {
				jButtonCancelarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarRegistroFormaPagoBanco")) {
				jButtonCancelarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("CerrarRegistroFormaPagoBanco")) {
				jButtonCerrarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarRegistroFormaPagoBanco")) {
				jButtonCerrarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarRegistroFormaPagoBanco")) {
				jButtonCerrarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarRegistroFormaPagoBanco")) {
				jButtonMostrarOcultarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarRegistroFormaPagoBanco")) {
				jButtonCancelarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosRegistroFormaPagoBanco")) {
				jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarRegistroFormaPagoBanco")) {
				jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarRegistroFormaPagoBanco")) {
				jButtonCopiarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarRegistroFormaPagoBanco")) {
				jButtonVerFormRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosRegistroFormaPagoBanco")) {
				jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarRegistroFormaPagoBanco")) {
				jButtonCopiarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormRegistroFormaPagoBanco")) {
				jButtonVerFormRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaRegistroFormaPagoBanco")) {
				jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarRegistroFormaPagoBanco")) {
				jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaRegistroFormaPagoBanco")) {
				jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionRegistroFormaPagoBanco")) {
				jButtonRecargarInformacionRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarRegistroFormaPagoBanco")) {
				jButtonRecargarInformacionRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionRegistroFormaPagoBanco")) {
				jButtonRecargarInformacionRegistroFormaPagoBancoActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresRegistroFormaPagoBanco")) {
				jButtonAnterioresRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarRegistroFormaPagoBanco")) {
				jButtonAnterioresRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreRegistroFormaPagoBanco")) {
				jButtonAnterioresRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesRegistroFormaPagoBanco")) {
				jButtonSiguientesRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarRegistroFormaPagoBanco")) {
				jButtonSiguientesRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesRegistroFormaPagoBanco")) {
				jButtonSiguientesRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByRegistroFormaPagoBanco") || sTipo.equals("MenuItemDetalleAbrirOrderByRegistroFormaPagoBanco")) {
				jButtonAbrirOrderByRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarRegistroFormaPagoBanco") || sTipo.equals("MenuItemDetalleMostrarOcultarRegistroFormaPagoBanco")) {
				jButtonMostrarOcultarRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosRegistroFormaPagoBanco")) {
				jButtonNuevoGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarRegistroFormaPagoBanco")) {
				jButtonNuevoGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosRegistroFormaPagoBanco")) {
				jButtonNuevoGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoRegistroFormaPagoBanco")) {
				jButtonCerrarReporteDinamicoRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoRegistroFormaPagoBanco")) {
				jButtonGenerarReporteDinamicoRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoRegistroFormaPagoBanco")) {
				
				jButtonGenerarExcelReporteDinamicoRegistroFormaPagoBancoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionRegistroFormaPagoBanco")) {
				jButtonCerrarImportacionRegistroFormaPagoBancoActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionRegistroFormaPagoBanco")) {
				
				jButtonGenerarImportacionRegistroFormaPagoBancoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionRegistroFormaPagoBanco")) {
				
				jButtonAbrirImportacionRegistroFormaPagoBancoActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesRegistroFormaPagoBanco")) {
				jComboBoxTiposAccionesRegistroFormaPagoBancoActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesRegistroFormaPagoBanco")) {
				jComboBoxTiposRelacionesRegistroFormaPagoBancoActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioRegistroFormaPagoBanco")) {
				jComboBoxTiposAccionesRegistroFormaPagoBancoActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarRegistroFormaPagoBanco")) {
				
				jComboBoxTiposSeleccionarRegistroFormaPagoBancoActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralRegistroFormaPagoBanco")) {
				jTextFieldValorCampoGeneralRegistroFormaPagoBancoActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByRegistroFormaPagoBanco")) {
				jButtonAbrirOrderByRegistroFormaPagoBancoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarRegistroFormaPagoBanco")) {
				jButtonAbrirOrderByRegistroFormaPagoBancoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByRegistroFormaPagoBanco")) {
				jButtonCerrarOrderByRegistroFormaPagoBancoActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idRegistroFormaPagoBancoBusqueda")) {
				this.jButtonidRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_empresaRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_empresaRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_sucursalRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_sucursalRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_ejercicioRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_ejercicioRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_periodoRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_periodoRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableRegistroFormaPagoBanco")) {
				this.jButtonid_asiento_contableRegistroFormaPagoBancoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_asiento_contableRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_asiento_contableRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_forma_pagoRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_tipo_forma_pagoRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_forma_pagoRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_tipo_forma_pagoRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_registro_forma_pago_bancoRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_registro_forma_pago_bancoRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteRegistroFormaPagoBanco")) {
				this.jButtonid_clienteRegistroFormaPagoBancoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_clienteRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_clienteRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_bancoRegistroFormaPagoBancoBusqueda")) {
				this.jButtonnombre_bancoRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_giradorRegistroFormaPagoBancoBusqueda")) {
				this.jButtonnombre_giradorRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimientoRegistroFormaPagoBancoBusqueda")) {
				this.jButtonfecha_vencimientoRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_cuentaRegistroFormaPagoBancoBusqueda")) {
				this.jButtonnumero_cuentaRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_chequeRegistroFormaPagoBancoBusqueda")) {
				this.jButtonnumero_chequeRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_montoRegistroFormaPagoBancoBusqueda")) {
				this.jButtonvalor_montoRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaRegistroFormaPagoBancoBusqueda")) {
				this.jButtonfechaRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimiento_originalRegistroFormaPagoBancoBusqueda")) {
				this.jButtonfecha_vencimiento_originalRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_cambioRegistroFormaPagoBancoBusqueda")) {
				this.jButtonnumero_cambioRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_anioRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_anioRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_mesRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_mesRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_asiento_contableRegistroFormaPagoBanco")) {
				this.jButtonid_asiento_contableRegistroFormaPagoBancoActionPerformed(evt);
			}
			else if(sTipo.equals("id_clienteRegistroFormaPagoBanco")) {
				this.jButtonid_clienteRegistroFormaPagoBancoActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdAsientoContableRegistroFormaPagoBanco")) {
				this.jButtonFK_IdAsientoContableRegistroFormaPagoBancoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdClienteRegistroFormaPagoBanco")) {
				this.jButtonFK_IdClienteRegistroFormaPagoBancoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco")) {
				this.jButtonFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBancoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoFormaPagoRegistroFormaPagoBanco")) {
				this.jButtonFK_IdTipoFormaPagoRegistroFormaPagoBancoActionPerformed(evt);
			}
			
			;
			
			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessRegistroFormaPagoBanco();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				


				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(RegistroFormaPagoBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",RegistroFormaPagoBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			RegistroFormaPagoBanco registroformapagobancoLocal=null;
			
			if(!this.getEsControlTabla()) {
				registroformapagobancoLocal=this.registroformapagobanco;
			} else {
				registroformapagobancoLocal=this.registroformapagobancoAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
							
				
				


				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(RegistroFormaPagoBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",RegistroFormaPagoBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
								
						
				


				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(RegistroFormaPagoBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",RegistroFormaPagoBanco.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
								
				
				


				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(RegistroFormaPagoBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",RegistroFormaPagoBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
			
			this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
							
				
				


				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(RegistroFormaPagoBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",RegistroFormaPagoBanco.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
			
			this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
								
				
				


				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(RegistroFormaPagoBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",RegistroFormaPagoBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
			
			this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosRegistroFormaPagoBanco")) {
					jCheckBoxSeleccionarTodosRegistroFormaPagoBancoItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosRegistroFormaPagoBanco")) {
					jCheckBoxSeleccionadosRegistroFormaPagoBancoItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarRegistroFormaPagoBanco")) {
					
				}
				
				


				
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(RegistroFormaPagoBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",RegistroFormaPagoBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
												
				
				


				
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(RegistroFormaPagoBanco.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",RegistroFormaPagoBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(RegistroFormaPagoBanco.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",RegistroFormaPagoBanco.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.registroformapagobanco);
				
				this.actualizarInformacion("INFO_PADRE",false,this.registroformapagobanco);
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(RegistroFormaPagoBanco.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",RegistroFormaPagoBanco.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaRegistroFormaPagoBancoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.registroformapagobancoAnterior =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarRegistroFormaPagoBanco")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosRegistroFormaPagoBancoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosRegistroFormaPagoBanco.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.registroformapagobanco =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.registroformapagobanco);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarRegistroFormaPagoBanco")) {
				
				}
				
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarRegistroFormaPagoBanco")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosRegistroFormaPagoBanco.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarRegistroFormaPagoBanco")) {
			
			}
			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessRegistroFormaPagoBanco();
			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			
			if(sTipo.equals("NuevoRegistroFormaPagoBanco")) {
				jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarRegistroFormaPagoBanco")) {
				jButtonDuplicarRegistroFormaPagoBancoActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarRegistroFormaPagoBanco")) {
				jButtonCopiarRegistroFormaPagoBancoActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormRegistroFormaPagoBanco")) {
				jButtonVerFormRegistroFormaPagoBancoActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesRegistroFormaPagoBanco")) {
				jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarRegistroFormaPagoBanco")) {
				jButtonModificarRegistroFormaPagoBancoActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarRegistroFormaPagoBanco")) {
				jButtonActualizarRegistroFormaPagoBancoActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarRegistroFormaPagoBanco")) {
				jButtonEliminarRegistroFormaPagoBancoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaRegistroFormaPagoBanco")) {
				jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarRegistroFormaPagoBanco")) {
				jButtonCancelarRegistroFormaPagoBancoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarRegistroFormaPagoBanco")) {
				jButtonCerrarRegistroFormaPagoBancoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosRegistroFormaPagoBanco")) {
				jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosRegistroFormaPagoBanco")) {
				jButtonNuevoGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByRegistroFormaPagoBanco")) {
				jButtonAbrirOrderByRegistroFormaPagoBancoActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionRegistroFormaPagoBanco")) {
				jButtonRecargarInformacionRegistroFormaPagoBancoActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresRegistroFormaPagoBanco")) {
				jButtonAnterioresRegistroFormaPagoBancoActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesRegistroFormaPagoBanco")) {
				jButtonSiguientesRegistroFormaPagoBancoActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idRegistroFormaPagoBancoBusqueda")) {
				this.jButtonidRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_empresaRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_empresaRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_sucursalRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_sucursalRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_ejercicioRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_ejercicioRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_periodoRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_periodoRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableRegistroFormaPagoBanco")) {
				this.jButtonid_asiento_contableRegistroFormaPagoBancoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_asiento_contableRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_asiento_contableRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_forma_pagoRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_tipo_forma_pagoRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_forma_pagoRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_tipo_forma_pagoRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_registro_forma_pago_bancoRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_registro_forma_pago_bancoRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteRegistroFormaPagoBanco")) {
				this.jButtonid_clienteRegistroFormaPagoBancoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_clienteRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_clienteRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_bancoRegistroFormaPagoBancoBusqueda")) {
				this.jButtonnombre_bancoRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_giradorRegistroFormaPagoBancoBusqueda")) {
				this.jButtonnombre_giradorRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimientoRegistroFormaPagoBancoBusqueda")) {
				this.jButtonfecha_vencimientoRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_cuentaRegistroFormaPagoBancoBusqueda")) {
				this.jButtonnumero_cuentaRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_chequeRegistroFormaPagoBancoBusqueda")) {
				this.jButtonnumero_chequeRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_montoRegistroFormaPagoBancoBusqueda")) {
				this.jButtonvalor_montoRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaRegistroFormaPagoBancoBusqueda")) {
				this.jButtonfechaRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimiento_originalRegistroFormaPagoBancoBusqueda")) {
				this.jButtonfecha_vencimiento_originalRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_cambioRegistroFormaPagoBancoBusqueda")) {
				this.jButtonnumero_cambioRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_anioRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_anioRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesRegistroFormaPagoBancoUpdate")) {
				this.jButtonid_mesRegistroFormaPagoBancoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesRegistroFormaPagoBancoBusqueda")) {
				this.jButtonid_mesRegistroFormaPagoBancoBusquedaActionPerformed(evt);
			}
			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessRegistroFormaPagoBanco();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameRegistroFormaPagoBanco")) {
				closingInternalFrameRegistroFormaPagoBanco();
				
			} else if(sTipo.equals("jButtonCancelarRegistroFormaPagoBanco")) {
				JInternalFrameBase jInternalFrameDetalleFormRegistroFormaPagoBanco = (JInternalFrameBase)evt.getSource();
	            	
	            RegistroFormaPagoBancoBeanSwingJInternalFrame jInternalFrameParent=(RegistroFormaPagoBancoBeanSwingJInternalFrame)jInternalFrameDetalleFormRegistroFormaPagoBanco.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarRegistroFormaPagoBancoActionPerformed(null);
			}
			
			RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.registroformapagobanco,new Object(),this.registroformapagobancoParameterGeneral,this.registroformapagobancoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormRegistroFormaPagoBanco(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormRegistroFormaPagoBanco(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormRegistroFormaPagoBanco(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.registroformapagobanco)) {
			if(!esControlTabla) {
				if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);			
				}
				
				if(this.registroformapagobancoSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.registroformapagobancoReturnGeneral=registroformapagobancoLogic.procesarEventosRegistroFormaPagoBancosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.registroformapagobancoLogic.getRegistroFormaPagoBancos(),this.registroformapagobanco,this.registroformapagobancoParameterGeneral,this.isEsNuevoRegistroFormaPagoBanco,classes);//this.registroformapagobancoLogic.getRegistroFormaPagoBanco()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanRegistroFormaPagoBanco(this.registroformapagobancoReturnGeneral,this.registroformapagobancoBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.registroformapagobancoSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanRegistroFormaPagoBanco(classes,this.registroformapagobancoReturnGeneral,this.registroformapagobancoBean,false);
					}
						
					if(this.registroformapagobancoReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyRegistroFormaPagoBanco(this.registroformapagobancoReturnGeneral.getRegistroFormaPagoBanco());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioRegistroFormaPagoBanco(this.registroformapagobancoReturnGeneral.getRegistroFormaPagoBanco());	
					}
						
					if(this.registroformapagobancoReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioRegistroFormaPagoBanco(this.registroformapagobancoReturnGeneral.getRegistroFormaPagoBanco(),classes);//this.registroformapagobancoBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioRegistroFormaPagoBanco(this.registroformapagobanco,classes);//this.registroformapagobancoBean);									
				}
			
				if(RegistroFormaPagoBancoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualRegistroFormaPagoBanco(this.registroformapagobanco,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysRegistroFormaPagoBanco(this.registroformapagobanco);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.registroformapagobancoAnterior!=null) {
						this.registroformapagobanco=this.registroformapagobancoAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.registroformapagobancoReturnGeneral=registroformapagobancoLogic.procesarEventosRegistroFormaPagoBancosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.registroformapagobancoLogic.getRegistroFormaPagoBancos(),this.registroformapagobanco,this.registroformapagobancoParameterGeneral,this.isEsNuevoRegistroFormaPagoBanco,classes);//this.registroformapagobancoLogic.getRegistroFormaPagoBanco()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.registroformapagobancoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.registroformapagobancoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.registroformapagobancoReturnGeneral.getRegistroFormaPagoBanco(),registroformapagobancoLogic.getRegistroFormaPagoBancos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.registroformapagobancoReturnGeneral.getRegistroFormaPagoBanco(),this.registroformapagobancos);
				}
				//ARCHITECTURE
				
				//this.jTableDatosRegistroFormaPagoBanco.repaint();
				
				//((AbstractTableModel) this.jTableDatosRegistroFormaPagoBanco.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosRegistroFormaPagoBanco();
			}
		}
	}
	
	public void actualizarVisualTableDatosRegistroFormaPagoBanco() throws Exception {
		
		RegistroFormaPagoBancoModel registroformapagobancoModel=(RegistroFormaPagoBancoModel)this.jTableDatosRegistroFormaPagoBanco.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			registroformapagobancoModel.registroformapagobancos=this.registroformapagobancoLogic.getRegistroFormaPagoBancos();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			registroformapagobancoModel.registroformapagobancos=this.registroformapagobancos;
		}
		
		
		((RegistroFormaPagoBancoModel) this.jTableDatosRegistroFormaPagoBanco.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaRegistroFormaPagoBanco() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getregistroformapagobancoAnterior(),this.registroformapagobancoLogic.getRegistroFormaPagoBancos());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getregistroformapagobancoAnterior(),this.registroformapagobancos);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosRegistroFormaPagoBanco();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.registroformapagobanco,new Object(),generalEntityParameterGeneral,this.registroformapagobancoReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.registroformapagobancoSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=RegistroFormaPagoBancoConstantesFunciones.getClassesRelationshipsOfRegistroFormaPagoBanco(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=RegistroFormaPagoBancoConstantesFunciones.getClassesRelationshipsFromStringsOfRegistroFormaPagoBanco(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormRegistroFormaPagoBanco(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.registroformapagobanco,new Object(),generalEntityParameterGeneral,this.registroformapagobancoReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioRegistroFormaPagoBanco(RegistroFormaPagoBancoBean registroformapagobancoBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanRegistroFormaPagoBanco(ArrayList<Classe> classes,RegistroFormaPagoBancoReturnGeneral registroformapagobancoReturnGeneral,RegistroFormaPagoBancoBean registroformapagobancoBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.registroformapagobanco)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco = new RegistroFormaPagoBancoDetalleFormJInternalFrame(jDesktopPane,this.registroformapagobancoSessionBean.getConGuardarRelaciones(),this.registroformapagobancoSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setVisible(false);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setSelected(false);						
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.registroformapagobancoLogic=this.registroformapagobancoLogic;
		
		this.cargarCombosFrameForeignKeyRegistroFormaPagoBanco("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleRegistroFormaPagoBanco();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleRegistroFormaPagoBanco();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyRegistroFormaPagoBanco("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyRegistroFormaPagoBanco();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarRegistroFormaPagoBanco"));
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonModificarRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"ModificarRegistroFormaPagoBanco"));

		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonModificarToolBarRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"ModificarToolBarRegistroFormaPagoBanco"));
					
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemModificarRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"MenuItemModificarRegistroFormaPagoBanco"));		
		
		
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonActualizarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"ActualizarRegistroFormaPagoBanco"));
		
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonActualizarToolBarRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"ActualizarToolBarRegistroFormaPagoBanco"));
						
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemActualizarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemActualizarRegistroFormaPagoBanco"));		
		
		
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonEliminarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"EliminarRegistroFormaPagoBanco"));
		
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonEliminarToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"EliminarToolBarRegistroFormaPagoBanco"));
								
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemEliminarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemEliminarRegistroFormaPagoBanco"));		
		
		
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonCancelarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"CancelarRegistroFormaPagoBanco"));
		
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonCancelarToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"CancelarToolBarRegistroFormaPagoBanco"));
					
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemCancelarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemCancelarRegistroFormaPagoBanco"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemDetalleCerrarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarRegistroFormaPagoBanco"));		
		
		
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonGuardarCambiosToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarRegistroFormaPagoBanco"));
		
		
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonGuardarCambiosToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarRegistroFormaPagoBanco"));
		
		
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioRegistroFormaPagoBanco"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonidRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"idRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_empresaRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_empresaRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_sucursalRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_sucursalRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_ejercicioRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_ejercicioRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_periodoRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_periodoRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_periodoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoRegistroFormaPagoBancoBusqueda"));
		//jButtonid_asiento_contableRegistroFormaPagoBanco.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableRegistroFormaPagoBancoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_asiento_contableRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"id_asiento_contableRegistroFormaPagoBanco"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_asiento_contableRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_asiento_contableRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_tipo_forma_pagoRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_forma_pagoRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_tipo_forma_pagoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_forma_pagoRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_estado_registro_forma_pago_bancoRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_registro_forma_pago_bancoRegistroFormaPagoBancoBusqueda"));
		//jButtonid_clienteRegistroFormaPagoBanco.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteRegistroFormaPagoBancoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_clienteRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"id_clienteRegistroFormaPagoBanco"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_clienteRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_clienteRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_clienteRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnombre_bancoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"nombre_bancoRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnombre_giradorRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"nombre_giradorRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonfecha_vencimientoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnumero_cuentaRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cuentaRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnumero_chequeRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_chequeRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonvalor_montoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"valor_montoRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonfechaRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"fechaRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonfecha_vencimiento_originalRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimiento_originalRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnumero_cambioRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cambioRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_anioRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_anioRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_anioRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_anioRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_mesRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_mesRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_mesRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_mesRegistroFormaPagoBancoBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTabbedPaneRelacionesRegistroFormaPagoBanco.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesRegistroFormaPagoBanco"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameRegistroFormaPagoBanco"));
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarRegistroFormaPagoBanco"));
		}
		
		this.jTableDatosRegistroFormaPagoBanco.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarRegistroFormaPagoBanco"));
		
		this.jTableDatosRegistroFormaPagoBanco.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarRegistroFormaPagoBanco"));
		
		this.jButtonNuevoRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"NuevoRegistroFormaPagoBanco"));
		
		this.jButtonDuplicarRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"DuplicarRegistroFormaPagoBanco"));
		
		this.jButtonCopiarRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"CopiarRegistroFormaPagoBanco"));
		
		this.jButtonVerFormRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"VerFormRegistroFormaPagoBanco"));
		
		
		this.jButtonNuevoToolBarRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"NuevoToolBarRegistroFormaPagoBanco"));
			
		this.jButtonDuplicarToolBarRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"DuplicarToolBarRegistroFormaPagoBanco"));
			
		this.jMenuItemNuevoRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemNuevoRegistroFormaPagoBanco"));
			
		this.jMenuItemDuplicarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarRegistroFormaPagoBanco"));		
		
		
		this.jButtonNuevoRelacionesRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"NuevoRelacionesRegistroFormaPagoBanco"));
		
		
		this.jButtonNuevoRelacionesToolBarRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarRegistroFormaPagoBanco"));
			
		this.jMenuItemNuevoRelacionesRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesRegistroFormaPagoBanco"));		
		
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonModificarRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"ModificarRegistroFormaPagoBanco"));
		}
		
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonModificarToolBarRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"ModificarToolBarRegistroFormaPagoBanco"));
			
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemModificarRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"MenuItemModificarRegistroFormaPagoBanco"));		
		}
		
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonActualizarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"ActualizarRegistroFormaPagoBanco"));
		}
		
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonActualizarToolBarRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"ActualizarToolBarRegistroFormaPagoBanco"));
				
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemActualizarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemActualizarRegistroFormaPagoBanco"));		
		}
		
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonEliminarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"EliminarRegistroFormaPagoBanco"));
		}
		
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonEliminarToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"EliminarToolBarRegistroFormaPagoBanco"));
						
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemEliminarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemEliminarRegistroFormaPagoBanco"));		
		}
		
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonCancelarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"CancelarRegistroFormaPagoBanco"));
		}
		
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonCancelarToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"CancelarToolBarRegistroFormaPagoBanco"));
			
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemCancelarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemCancelarRegistroFormaPagoBanco"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarRegistroFormaPagoBanco"));		
		
		
		this.jButtonCerrarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"CerrarRegistroFormaPagoBanco"));
		
		
		this.jButtonCerrarToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"CerrarToolBarRegistroFormaPagoBanco"));
			
		this.jMenuItemCerrarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemCerrarRegistroFormaPagoBanco"));
			
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jMenuItemDetalleCerrarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarRegistroFormaPagoBanco"));		
		}
		
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonGuardarCambiosRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosRegistroFormaPagoBanco"));
		}
		
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonGuardarCambiosToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarRegistroFormaPagoBanco"));
		}
		
		this.jButtonCopiarToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"CopiarToolBarRegistroFormaPagoBanco"));
			
		this.jButtonVerFormToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"VerFormToolBarRegistroFormaPagoBanco"));
		
		this.jMenuItemGuardarCambiosRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosRegistroFormaPagoBanco"));
			
		this.jMenuItemCopiarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemCopiarRegistroFormaPagoBanco"));		
		
		this.jMenuItemVerFormRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemVerFormRegistroFormaPagoBanco"));		
		
		
		this.jButtonGuardarCambiosTablaRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaRegistroFormaPagoBanco"));
		
		
		this.jButtonGuardarCambiosTablaToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarRegistroFormaPagoBanco"));
			
		this.jMenuItemGuardarCambiosTablaRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaRegistroFormaPagoBanco"));		
		
		
		
		this.jButtonRecargarInformacionRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"RecargarInformacionRegistroFormaPagoBanco"));
					
		this.jButtonRecargarInformacionToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarRegistroFormaPagoBanco"));
		
		this.jMenuItemRecargarInformacionRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionRegistroFormaPagoBanco"));		
		
		
		
		this.jButtonAnterioresRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"AnterioresRegistroFormaPagoBanco"));
		
		
		this.jButtonAnterioresToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"AnterioresToolBarRegistroFormaPagoBanco"));
		
		this.jMenuItemAnterioresRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresRegistroFormaPagoBanco"));		
		
		
		this.jButtonSiguientesRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"SiguientesRegistroFormaPagoBanco"));
		
		
		this.jButtonSiguientesToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"SiguientesToolBarRegistroFormaPagoBanco"));
			
		this.jMenuItemSiguientesRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesRegistroFormaPagoBanco"));
			
		this.jMenuItemAbrirOrderByRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByRegistroFormaPagoBanco"));
			
		this.jMenuItemMostrarOcultarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarRegistroFormaPagoBanco"));
			
		this.jMenuItemDetalleAbrirOrderByRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByRegistroFormaPagoBanco"));
			
		this.jMenuItemDetalleMostarOcultarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarRegistroFormaPagoBanco"));		
		
		
		this.jButtonNuevoGuardarCambiosRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosRegistroFormaPagoBanco"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarRegistroFormaPagoBanco"));
			
		this.jMenuItemNuevoGuardarCambiosRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosRegistroFormaPagoBanco"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosRegistroFormaPagoBanco.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosRegistroFormaPagoBanco"));

		this.jCheckBoxSeleccionadosRegistroFormaPagoBanco.addItemListener(new CheckBoxItemListener(this,"SeleccionadosRegistroFormaPagoBanco"));
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioRegistroFormaPagoBanco"));
		}
		
		
		this.jComboBoxTiposRelacionesRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"TiposRelacionesRegistroFormaPagoBanco"));
			
		this.jComboBoxTiposAccionesRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"TiposAccionesRegistroFormaPagoBanco"));
					
		this.jComboBoxTiposSeleccionarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"TiposSeleccionarRegistroFormaPagoBanco"));
			
		this.jTextFieldValorCampoGeneralRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralRegistroFormaPagoBanco"));		
		
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonidRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"idRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_empresaRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_empresaRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_sucursalRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_sucursalRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_ejercicioRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_ejercicioRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_periodoRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_periodoRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_periodoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoRegistroFormaPagoBancoBusqueda"));
		//jButtonid_asiento_contableRegistroFormaPagoBanco.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableRegistroFormaPagoBancoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_asiento_contableRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"id_asiento_contableRegistroFormaPagoBanco"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_asiento_contableRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_asiento_contableRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_tipo_forma_pagoRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_forma_pagoRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_tipo_forma_pagoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_forma_pagoRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_estado_registro_forma_pago_bancoRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_registro_forma_pago_bancoRegistroFormaPagoBancoBusqueda"));
		//jButtonid_clienteRegistroFormaPagoBanco.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteRegistroFormaPagoBancoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_clienteRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"id_clienteRegistroFormaPagoBanco"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_clienteRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_clienteRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_clienteRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnombre_bancoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"nombre_bancoRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnombre_giradorRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"nombre_giradorRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonfecha_vencimientoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnumero_cuentaRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cuentaRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnumero_chequeRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_chequeRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonvalor_montoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"valor_montoRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonfechaRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"fechaRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonfecha_vencimiento_originalRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimiento_originalRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnumero_cambioRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cambioRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_anioRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_anioRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_anioRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_anioRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_mesRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_mesRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_mesRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_mesRegistroFormaPagoBancoBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdAsientoContableRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableRegistroFormaPagoBanco"));

			this.jButtonBuscarFK_IdAsientoContableid_asiento_contableRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"id_asiento_contableRegistroFormaPagoBanco"));

			this.jButtonFK_IdClienteRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"FK_IdClienteRegistroFormaPagoBanco"));

			this.jButtonBuscarFK_IdClienteid_clienteRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"id_clienteRegistroFormaPagoBanco"));

			this.jButtonFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"FK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco"));

			this.jButtonFK_IdTipoFormaPagoRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"FK_IdTipoFormaPagoRegistroFormaPagoBanco"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco!=null) {
				this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoRegistroFormaPagoBanco"));
				this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoRegistroFormaPagoBanco"));
				this.jInternalFrameReporteDinamicoRegistroFormaPagoBanco.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoRegistroFormaPagoBanco"));
			}
			
			//this.jButtonCerrarReporteDinamicoRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoRegistroFormaPagoBanco"));				
			//this.jButtonGenerarReporteDinamicoRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoRegistroFormaPagoBanco"));
			//this.jButtonGenerarExcelReporteDinamicoRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoRegistroFormaPagoBanco"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionRegistroFormaPagoBanco!=null) {
				this.jInternalFrameImportacionRegistroFormaPagoBanco.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionRegistroFormaPagoBanco"));
				this.jInternalFrameImportacionRegistroFormaPagoBanco.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionRegistroFormaPagoBanco"));
				this.jInternalFrameImportacionRegistroFormaPagoBanco.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionRegistroFormaPagoBanco"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"AbrirOrderByRegistroFormaPagoBanco"));
			
			this.jButtonAbrirOrderByToolBarRegistroFormaPagoBanco.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarRegistroFormaPagoBanco"));			
			
			if(this.jInternalFrameOrderByRegistroFormaPagoBanco!=null) {
				this.jInternalFrameOrderByRegistroFormaPagoBanco.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByRegistroFormaPagoBanco"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTabbedPaneRelacionesRegistroFormaPagoBanco.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesRegistroFormaPagoBanco"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameRegistroFormaPagoBanco();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormRegistroFormaPagoBanco = (JInternalFrameBase)event.getSource();
	            	
	            RegistroFormaPagoBancoBeanSwingJInternalFrame jInternalFrameParent=(RegistroFormaPagoBancoBeanSwingJInternalFrame)jInternalFrameDetalleFormRegistroFormaPagoBanco.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarRegistroFormaPagoBancoActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosRegistroFormaPagoBanco.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosRegistroFormaPagoBancoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosRegistroFormaPagoBanco.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosRegistroFormaPagoBanco.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRegistroFormaPagoBanco";
		inputMap = this.jButtonNuevoRegistroFormaPagoBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRegistroFormaPagoBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesRegistroFormaPagoBanco";
		inputMap = this.jButtonNuevoRelacionesRegistroFormaPagoBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesRegistroFormaPagoBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoRegistroFormaPagoBancoActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarRegistroFormaPagoBanco";
		inputMap = this.jButtonModificarRegistroFormaPagoBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarRegistroFormaPagoBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarRegistroFormaPagoBancoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarRegistroFormaPagoBanco";
		inputMap = this.jButtonActualizarRegistroFormaPagoBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarRegistroFormaPagoBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarRegistroFormaPagoBancoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarRegistroFormaPagoBanco";
		inputMap = this.jButtonEliminarRegistroFormaPagoBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarRegistroFormaPagoBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarRegistroFormaPagoBancoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarRegistroFormaPagoBanco";
		inputMap = this.jButtonCancelarRegistroFormaPagoBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarRegistroFormaPagoBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarRegistroFormaPagoBancoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarRegistroFormaPagoBanco";
		inputMap = this.jButtonCerrarRegistroFormaPagoBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarRegistroFormaPagoBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarRegistroFormaPagoBancoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonGuardarCambiosRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosRegistroFormaPagoBanco";
		inputMap = this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonGuardarCambiosRegistroFormaPagoBanco.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonGuardarCambiosRegistroFormaPagoBanco.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosRegistroFormaPagoBanco.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosRegistroFormaPagoBancoItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesRegistroFormaPagoBanco.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesRegistroFormaPagoBancoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarRegistroFormaPagoBanco.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarRegistroFormaPagoBancoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralRegistroFormaPagoBanco.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralRegistroFormaPagoBancoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonidRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"idRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_empresaRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_empresaRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_sucursalRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_sucursalRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_ejercicioRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_ejercicioRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_periodoRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_periodoRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_periodoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoRegistroFormaPagoBancoBusqueda"));
		//jButtonid_asiento_contableRegistroFormaPagoBanco.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableRegistroFormaPagoBancoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_asiento_contableRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"id_asiento_contableRegistroFormaPagoBanco"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_asiento_contableRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_asiento_contableRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_tipo_forma_pagoRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_forma_pagoRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_tipo_forma_pagoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_forma_pagoRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_estado_registro_forma_pago_bancoRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_estado_registro_forma_pago_bancoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_registro_forma_pago_bancoRegistroFormaPagoBancoBusqueda"));
		//jButtonid_clienteRegistroFormaPagoBanco.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteRegistroFormaPagoBancoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_clienteRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"id_clienteRegistroFormaPagoBanco"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_clienteRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_clienteRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_clienteRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnombre_bancoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"nombre_bancoRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnombre_giradorRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"nombre_giradorRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonfecha_vencimientoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnumero_cuentaRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cuentaRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnumero_chequeRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_chequeRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonvalor_montoRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"valor_montoRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonfechaRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"fechaRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonfecha_vencimiento_originalRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimiento_originalRegistroFormaPagoBancoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonnumero_cambioRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"numero_cambioRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_anioRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_anioRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_anioRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_anioRegistroFormaPagoBancoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_mesRegistroFormaPagoBancoUpdate.addActionListener(new ButtonActionListener(this,"id_mesRegistroFormaPagoBancoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_mesRegistroFormaPagoBancoBusqueda.addActionListener(new ButtonActionListener(this,"id_mesRegistroFormaPagoBancoBusqueda"));
		
		
		this.jButtonFK_IdAsientoContableRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableRegistroFormaPagoBanco"));

		this.jButtonBuscarFK_IdAsientoContableid_asiento_contableRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"id_asiento_contableRegistroFormaPagoBanco"));

		this.jButtonFK_IdClienteRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"FK_IdClienteRegistroFormaPagoBanco"));

		this.jButtonBuscarFK_IdClienteid_clienteRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"id_clienteRegistroFormaPagoBanco"));

		this.jButtonFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"FK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco"));

		this.jButtonFK_IdTipoFormaPagoRegistroFormaPagoBanco.addActionListener(new ButtonActionListener(this,"FK_IdTipoFormaPagoRegistroFormaPagoBanco"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionRegistroFormaPagoBanco.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionRegistroFormaPagoBancoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarRegistroFormaPagoBancoActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarRegistroFormaPagoBanco.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosRegistroFormaPagoBanco(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancoLogic.getRegistroFormaPagoBancos()) {
					registroformapagobancoAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(RegistroFormaPagoBanco registroformapagobancoAux:registroformapagobancos) {
					registroformapagobancoAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosRegistroFormaPagoBancoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancoLogic.getRegistroFormaPagoBancos()) {
						registroformapagobancoAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(RegistroFormaPagoBanco registroformapagobancoAux:registroformapagobancos) {
						registroformapagobancoAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancoLogic.getRegistroFormaPagoBancos()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(RegistroFormaPagoBanco registroformapagobancoAux:registroformapagobancos) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosRegistroFormaPagoBanco.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosRegistroFormaPagoBanco.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosRegistroFormaPagoBancoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosRegistroFormaPagoBanco.getSelectedRows();
			
			RegistroFormaPagoBanco registroformapagobancoLocal=new RegistroFormaPagoBanco();
			
			//this.seleccionarTodosRegistroFormaPagoBanco(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					registroformapagobancoLocal =(RegistroFormaPagoBanco) this.registroformapagobancoLogic.getRegistroFormaPagoBancos().toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					registroformapagobancoLocal =(RegistroFormaPagoBanco) this.registroformapagobancos.toArray()[this.jTableDatosRegistroFormaPagoBanco.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				registroformapagobancoLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancoLogic.getRegistroFormaPagoBancos()) {
						registroformapagobancoAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(RegistroFormaPagoBanco registroformapagobancoAux:registroformapagobancos) {
						registroformapagobancoAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosRegistroFormaPagoBanco.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosRegistroFormaPagoBanco.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosRegistroFormaPagoBanco,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualRegistroFormaPagoBancoItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarRegistroFormaPagoBancoParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralRegistroFormaPagoBancoActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralRegistroFormaPagoBanco.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancoLogic.getRegistroFormaPagoBancos()) {
				
						if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO)) {
							existe=true;
							registroformapagobancoAux.setnombre_banco(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR)) {
							existe=true;
							registroformapagobancoAux.setnombre_girador(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
							existe=true;
							registroformapagobancoAux.setfecha_vencimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA)) {
							existe=true;
							registroformapagobancoAux.setnumero_cuenta(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE)) {
							existe=true;
							registroformapagobancoAux.setnumero_cheque(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO)) {
							existe=true;
							registroformapagobancoAux.setvalor_monto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							registroformapagobancoAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL)) {
							existe=true;
							registroformapagobancoAux.setfecha_vencimiento_original(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO)) {
							existe=true;
							registroformapagobancoAux.setnumero_cambio(Integer.parseInt(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(RegistroFormaPagoBanco registroformapagobancoAux:registroformapagobancos) {
					
						if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO)) {
							existe=true;
							registroformapagobancoAux.setnombre_banco(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR)) {
							existe=true;
							registroformapagobancoAux.setnombre_girador(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
							existe=true;
							registroformapagobancoAux.setfecha_vencimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA)) {
							existe=true;
							registroformapagobancoAux.setnumero_cuenta(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE)) {
							existe=true;
							registroformapagobancoAux.setnumero_cheque(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO)) {
							existe=true;
							registroformapagobancoAux.setvalor_monto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							registroformapagobancoAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL)) {
							existe=true;
							registroformapagobancoAux.setfecha_vencimiento_original(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO)) {
							existe=true;
							registroformapagobancoAux.setnumero_cambio(Integer.parseInt(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesRegistroFormaPagoBancoActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioRegistroFormaPagoBanco=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesRegistroFormaPagoBanco.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteRegistroFormaPagoBanco) {				
					conSplash=true;//false;										
					
					//this.startProcessRegistroFormaPagoBanco(conSplash);
				
					this.generarReporteRegistroFormaPagoBancosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesRegistroFormaPagoBanco.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoRegistroFormaPagoBancosSeleccionados();
				//this.jComboBoxTiposAccionesRegistroFormaPagoBanco.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoRegistroFormaPagoBancosSeleccionados(false);
				//this.jComboBoxTiposAccionesRegistroFormaPagoBanco.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoRegistroFormaPagoBancosSeleccionados(true);
				//this.jComboBoxTiposAccionesRegistroFormaPagoBanco.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessRegistroFormaPagoBanco();
				
				this.exportarRegistroFormaPagoBancosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesRegistroFormaPagoBanco.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionRegistroFormaPagoBancos();
				//this.importarRegistroFormaPagoBancos();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesRegistroFormaPagoBanco.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessRegistroFormaPagoBanco();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelRegistroFormaPagoBancosSeleccionados();
				//this.jComboBoxTiposAccionesRegistroFormaPagoBanco.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Registro Forma Pago Banco", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessRegistroFormaPagoBanco();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoRegistroFormaPagoBanco)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyRegistroFormaPagoBanco(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Registro Forma Pago Banco",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesRegistroFormaPagoBanco.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.setSelectedIndex(0);					
				}	
			} 			
			else if(RegistroFormaPagoBancoBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteRegistroFormaPagoBanco) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessRegistroFormaPagoBanco(conSplash);
					
						//this.actualizarParametrosGeneralRegistroFormaPagoBanco();
						
						this.generarReporteProcesoAccionRegistroFormaPagoBancosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesRegistroFormaPagoBanco.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Registro Forma Pago BancoS SELECCIONADOS?", "MANTENIMIENTO DE Registro Forma Pago Banco", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessRegistroFormaPagoBanco();
				
						this.actualizarParametrosGeneralRegistroFormaPagoBanco();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.registroformapagobancoReturnGeneral=registroformapagobancoLogic.procesarAccionRegistroFormaPagoBancosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.registroformapagobancoLogic.getRegistroFormaPagoBancos(),this.registroformapagobancoParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarRegistroFormaPagoBancoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesRegistroFormaPagoBanco.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralRegistroFormaPagoBanco();
					
					RegistroFormaPagoBancoBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarRegistroFormaPagoBancoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesRegistroFormaPagoBanco.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxTiposAccionesFormularioRegistroFormaPagoBanco.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessRegistroFormaPagoBanco(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesRegistroFormaPagoBancoActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessRegistroFormaPagoBanco();
			
			if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();		
			RegistroFormaPagoBanco registroformapagobanco=new RegistroFormaPagoBanco();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesRegistroFormaPagoBanco.getSelectedItem();
			
			
			
			
			registroformapagobancosSeleccionados=this.getRegistroFormaPagoBancosSeleccionados(true);
			//this.sTipoAccion;
			
			if(registroformapagobancosSeleccionados.size()==1) {
				for(RegistroFormaPagoBanco registroformapagobancoAux:registroformapagobancosSeleccionados) {
					registroformapagobanco=registroformapagobancoAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessRegistroFormaPagoBanco();
			
      		//this.finishProcessRegistroFormaPagoBanco(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarRegistroFormaPagoBancoReturnGeneral() throws Exception {
		if(this.registroformapagobancoReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.registroformapagobancoReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.registroformapagobancoReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.registroformapagobancoReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.registroformapagobancoReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.registroformapagobancoReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
		}
		
		if(this.registroformapagobancoReturnGeneral.getConRetornoLista() || this.registroformapagobancoReturnGeneral.getConRetornoObjeto()) {
			if(this.registroformapagobancoReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.registroformapagobancoLogic.setRegistroFormaPagoBancos(this.registroformapagobancoReturnGeneral.getRegistroFormaPagoBancos());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.registroformapagobancoReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.registroformapagobancoLogic.setRegistroFormaPagoBanco(this.registroformapagobancoReturnGeneral.getRegistroFormaPagoBanco());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingRegistroFormaPagoBanco(false);
		}
	}
	
	public void actualizarParametrosGeneralRegistroFormaPagoBanco() throws Exception {
		
		
	}
	
	public ArrayList<RegistroFormaPagoBanco> getRegistroFormaPagoBancosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioRegistroFormaPagoBanco) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(RegistroFormaPagoBanco registroformapagobancoAux:registroformapagobancoLogic.getRegistroFormaPagoBancos()) {
					if(registroformapagobancoAux.getIsSelected()) {
						registroformapagobancosSeleccionados.add(registroformapagobancoAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(RegistroFormaPagoBanco registroformapagobancoAux:this.registroformapagobancos) {
					if(registroformapagobancoAux.getIsSelected()) {
						registroformapagobancosSeleccionados.add(registroformapagobancoAux);				
					}
				}
			}
			
			if(registroformapagobancosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						registroformapagobancosSeleccionados.addAll(this.registroformapagobancoLogic.getRegistroFormaPagoBancos());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						registroformapagobancosSeleccionados.addAll(this.registroformapagobancos);				
					}
				}
			}
		} else {
			registroformapagobancosSeleccionados.add(this.registroformapagobanco);
		}
		
		return registroformapagobancosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteRegistroFormaPagoBancosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalRegistroFormaPagoBancosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoRegistroFormaPagoBancosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoRegistroFormaPagoBancosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoRegistroFormaPagoBancosSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Registro Forma Pago Banco",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesRegistroFormaPagoBancosSeleccionados() throws Exception {
		ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();		
		
		registroformapagobancosSeleccionados=this.getRegistroFormaPagoBancosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteRegistroFormaPagoBancos("Todos",registroformapagobancosSeleccionados);
		
	}	
	
	public void generarReporteNormalRegistroFormaPagoBancosSeleccionados() throws Exception {
		ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();		
		
		registroformapagobancosSeleccionados=this.getRegistroFormaPagoBancosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteRegistroFormaPagoBancos("Todos",registroformapagobancosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionRegistroFormaPagoBancosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();
		
		registroformapagobancosSeleccionados=this.getRegistroFormaPagoBancosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteRegistroFormaPagoBancos("Todos",registroformapagobancosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoRegistroFormaPagoBancosSeleccionados() throws Exception {
		ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();		
		
		
		this.abrirInicializarFrameReporteDinamicoRegistroFormaPagoBanco();
		
		
		registroformapagobancosSeleccionados=this.getRegistroFormaPagoBancosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoRegistroFormaPagoBanco();
		
		
		//this.generarReporteRegistroFormaPagoBancos("Todos",registroformapagobancosSeleccionados ,registroformapagobancoImplementable,registroformapagobancoImplementableHome);
	}
	
	public void mostrarImportacionRegistroFormaPagoBancos() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionRegistroFormaPagoBanco();
		
		this.abrirFrameImportacionRegistroFormaPagoBanco();		
		
			
		//this.generarReporteRegistroFormaPagoBancos("Todos",registroformapagobancosSeleccionados ,registroformapagobancoImplementable,registroformapagobancoImplementableHome);
	}
	
	public void importarRegistroFormaPagoBancos() throws Exception {		
	
	}
	
	public void exportarRegistroFormaPagoBancosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelRegistroFormaPagoBancosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoRegistroFormaPagoBancosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlRegistroFormaPagoBancosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Registro Forma Pago Banco",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoRegistroFormaPagoBancosSeleccionados() throws Exception {
		ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();		
		
		registroformapagobancosSeleccionados=this.getRegistroFormaPagoBancosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"registroformapagobanco."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarRegistroFormaPagoBanco(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(RegistroFormaPagoBanco registroformapagobancoAux:registroformapagobancosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarRegistroFormaPagoBanco(registroformapagobancoAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//registroformapagobancoAux.setsDetalleGeneralEntityReporte(registroformapagobancoAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Registro Forma Pago Banco",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarRegistroFormaPagoBanco(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=registroformapagobanco.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getasientocontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.gettipoformapago_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getestadoregistroformapagobanco_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getnombre_banco();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getnombre_girador();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getfecha_vencimiento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getnumero_cuenta();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getnumero_cheque();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getvalor_monto().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getfecha_vencimiento_original().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getnumero_cambio().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=registroformapagobanco.getmes_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelRegistroFormaPagoBancosSeleccionados() throws Exception {
		ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();		
		
		registroformapagobancosSeleccionados=this.getRegistroFormaPagoBancosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"registroformapagobanco.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("RegistroFormaPagoBancos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelRegistroFormaPagoBanco(row);				
				iRow++;
			}				
			
			for(RegistroFormaPagoBanco registroformapagobancoAux:registroformapagobancosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelRegistroFormaPagoBanco(registroformapagobancoAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Registro Forma Pago Banco",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlRegistroFormaPagoBancosSeleccionados() throws Exception {
		ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();		
		
		registroformapagobancosSeleccionados=this.getRegistroFormaPagoBancosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"registroformapagobanco.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("registroformapagobancos");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("registroformapagobanco");
			//elementRoot.appendChild(element);
		
			for(RegistroFormaPagoBanco registroformapagobancoAux:registroformapagobancosSeleccionados) {
				element = document.createElement("registroformapagobanco");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlRegistroFormaPagoBanco(registroformapagobancoAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Registro Forma Pago Banco",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelRegistroFormaPagoBanco(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_VALORMONTO);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getasientocontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.gettipoformapago_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getestadoregistroformapagobanco_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getnombre_banco());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getnombre_girador());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getfecha_vencimiento());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getnumero_cuenta());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getnumero_cheque());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getvalor_monto());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getfecha_vencimiento_original());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getnumero_cambio());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(registroformapagobanco.getmes_descripcion());				
	}
	
	public void setFilaDatosExportarXmlRegistroFormaPagoBanco(RegistroFormaPagoBanco registroformapagobanco,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(RegistroFormaPagoBancoConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(registroformapagobanco.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(RegistroFormaPagoBancoConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(registroformapagobanco.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(RegistroFormaPagoBancoConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(registroformapagobanco.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(RegistroFormaPagoBancoConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(registroformapagobanco.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(RegistroFormaPagoBancoConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(registroformapagobanco.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(RegistroFormaPagoBancoConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(registroformapagobanco.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementasientocontable_descripcion = document.createElement(RegistroFormaPagoBancoConstantesFunciones.IDASIENTOCONTABLE);
		elementasientocontable_descripcion.appendChild(document.createTextNode(registroformapagobanco.getasientocontable_descripcion()));
		element.appendChild(elementasientocontable_descripcion);

		Element elementtipoformapago_descripcion = document.createElement(RegistroFormaPagoBancoConstantesFunciones.IDTIPOFORMAPAGO);
		elementtipoformapago_descripcion.appendChild(document.createTextNode(registroformapagobanco.gettipoformapago_descripcion()));
		element.appendChild(elementtipoformapago_descripcion);

		Element elementestadoregistroformapagobanco_descripcion = document.createElement(RegistroFormaPagoBancoConstantesFunciones.IDESTADOREGISTROFORMAPAGOBANCO);
		elementestadoregistroformapagobanco_descripcion.appendChild(document.createTextNode(registroformapagobanco.getestadoregistroformapagobanco_descripcion()));
		element.appendChild(elementestadoregistroformapagobanco_descripcion);

		Element elementcliente_descripcion = document.createElement(RegistroFormaPagoBancoConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(registroformapagobanco.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementnombre_banco = document.createElement(RegistroFormaPagoBancoConstantesFunciones.NOMBREBANCO);
		elementnombre_banco.appendChild(document.createTextNode(registroformapagobanco.getnombre_banco().trim()));
		element.appendChild(elementnombre_banco);

		Element elementnombre_girador = document.createElement(RegistroFormaPagoBancoConstantesFunciones.NOMBREGIRADOR);
		elementnombre_girador.appendChild(document.createTextNode(registroformapagobanco.getnombre_girador().trim()));
		element.appendChild(elementnombre_girador);

		Element elementfecha_vencimiento = document.createElement(RegistroFormaPagoBancoConstantesFunciones.FECHAVENCIMIENTO);
		elementfecha_vencimiento.appendChild(document.createTextNode(registroformapagobanco.getfecha_vencimiento().toString().trim()));
		element.appendChild(elementfecha_vencimiento);

		Element elementnumero_cuenta = document.createElement(RegistroFormaPagoBancoConstantesFunciones.NUMEROCUENTA);
		elementnumero_cuenta.appendChild(document.createTextNode(registroformapagobanco.getnumero_cuenta().trim()));
		element.appendChild(elementnumero_cuenta);

		Element elementnumero_cheque = document.createElement(RegistroFormaPagoBancoConstantesFunciones.NUMEROCHEQUE);
		elementnumero_cheque.appendChild(document.createTextNode(registroformapagobanco.getnumero_cheque().trim()));
		element.appendChild(elementnumero_cheque);

		Element elementvalor_monto = document.createElement(RegistroFormaPagoBancoConstantesFunciones.VALORMONTO);
		elementvalor_monto.appendChild(document.createTextNode(registroformapagobanco.getvalor_monto().toString().trim()));
		element.appendChild(elementvalor_monto);

		Element elementfecha = document.createElement(RegistroFormaPagoBancoConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(registroformapagobanco.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementfecha_vencimiento_original = document.createElement(RegistroFormaPagoBancoConstantesFunciones.FECHAVENCIMIENTOORIGINAL);
		elementfecha_vencimiento_original.appendChild(document.createTextNode(registroformapagobanco.getfecha_vencimiento_original().toString().trim()));
		element.appendChild(elementfecha_vencimiento_original);

		Element elementnumero_cambio = document.createElement(RegistroFormaPagoBancoConstantesFunciones.NUMEROCAMBIO);
		elementnumero_cambio.appendChild(document.createTextNode(registroformapagobanco.getnumero_cambio().toString().trim()));
		element.appendChild(elementnumero_cambio);

		Element elementanio_descripcion = document.createElement(RegistroFormaPagoBancoConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(registroformapagobanco.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(RegistroFormaPagoBancoConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(registroformapagobanco.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);
	}
	
	public void generarReporteGroupGenericoRegistroFormaPagoBancosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados=new ArrayList<RegistroFormaPagoBanco>();
		
		registroformapagobancosSeleccionados=this.getRegistroFormaPagoBancosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoRegistroFormaPagoBanco(registroformapagobancosSeleccionados);
		
		this.generarReporteRegistroFormaPagoBancos("Todos",registroformapagobancosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoRegistroFormaPagoBanco(ArrayList<RegistroFormaPagoBanco> registroformapagobancosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(RegistroFormaPagoBanco registroformapagobancoAux:registroformapagobancosSeleccionados) {
				registroformapagobancoAux.setsDetalleGeneralEntityReporte(registroformapagobancoAux.toString());
			
				if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDASIENTOCONTABLE)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getasientocontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDTIPOFORMAPAGO)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.gettipoformapago_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDESTADOREGISTROFORMAPAGOBANCO)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getestadoregistroformapagobanco_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREBANCO)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getnombre_banco());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NOMBREGIRADOR)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getnombre_girador());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(registroformapagobancoAux.getfecha_vencimiento()));
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCUENTA)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getnumero_cuenta());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCHEQUE)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getnumero_cheque());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(registroformapagobancoAux.getfecha()));
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_FECHAVENCIMIENTOORIGINAL)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(registroformapagobancoAux.getfecha_vencimiento_original()));
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_NUMEROCAMBIO)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getnumero_cambio().toString());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(RegistroFormaPagoBancoConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					registroformapagobancoAux.setsDescripcionGeneralEntityReporte1(registroformapagobancoAux.getmes_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,RegistroFormaPagoBancoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesRegistroFormaPagoBanco(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco=true;
				this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=true;
				this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=true;
			}
			
			this.isVisibilidadCeldaModificarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=true;
				} else {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaModificarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=true;
				} else {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaModificarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=true;
				} else {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaModificarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=false;
				} else {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaModificarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=true;
				} else {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=false;
				} else {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaModificarRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaCancelarRegistroFormaPagoBanco=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=false;
				} else {
					this.isVisibilidadCeldaGuardarRegistroFormaPagoBanco=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(RegistroFormaPagoBancoJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=true;
			this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=true;
		} else {
			this.actualizarEstadoPanelsRegistroFormaPagoBanco(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarRegistroFormaPagoBanco=false;
			//this.isVisibilidadCeldaVerFormRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaDuplicarRegistroFormaPagoBanco=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!registroformapagobancoSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=false;
		} else {
			this.isVisibilidadCeldaNuevoRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaGuardarCambiosRegistroFormaPagoBanco=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
			if(!registroformapagobancoSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=false;												
			}
			
			this.jButtonCerrarRegistroFormaPagoBanco.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesRegistroFormaPagoBanco=false;
		}
		
		if(!this.permiteMantenimiento(this.registroformapagobanco)) {
			this.isVisibilidadCeldaActualizarRegistroFormaPagoBanco=false;
			this.isVisibilidadCeldaEliminarRegistroFormaPagoBanco=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesRegistroFormaPagoBanco() {
	}
	
	public void actualizarEstadoPanelsRegistroFormaPagoBanco(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosEdicionRegistroFormaPagoBanco.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasRegistroFormaPagoBanco!=null) {
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosRegistroFormaPagoBanco.setVisible(true);
			}
			
			if(this.jPanelPaginacionRegistroFormaPagoBanco!=null) {
				this.jPanelPaginacionRegistroFormaPagoBanco.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesRegistroFormaPagoBanco!=null) {
				this.jPanelParametrosReportesRegistroFormaPagoBanco.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosEdicionRegistroFormaPagoBanco.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasRegistroFormaPagoBanco!=null) {
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosRegistroFormaPagoBanco.setVisible(false);
			}
			
			if(this.jPanelPaginacionRegistroFormaPagoBanco!=null) {
				this.jPanelPaginacionRegistroFormaPagoBanco.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesRegistroFormaPagoBanco!=null) {
				this.jPanelParametrosReportesRegistroFormaPagoBanco.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosEdicionRegistroFormaPagoBanco.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasRegistroFormaPagoBanco!=null) {
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosRegistroFormaPagoBanco.setVisible(false);
			}
			
			if(this.jPanelPaginacionRegistroFormaPagoBanco!=null) {
				this.jPanelPaginacionRegistroFormaPagoBanco.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesRegistroFormaPagoBanco!=null) {
				this.jPanelParametrosReportesRegistroFormaPagoBanco.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosEdicionRegistroFormaPagoBanco.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasRegistroFormaPagoBanco!=null) {
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosRegistroFormaPagoBanco.setVisible(false);
			}
			
			if(this.jPanelPaginacionRegistroFormaPagoBanco!=null) {
				this.jPanelPaginacionRegistroFormaPagoBanco.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesRegistroFormaPagoBanco!=null) {
				this.jPanelParametrosReportesRegistroFormaPagoBanco.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosEdicionRegistroFormaPagoBanco.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasRegistroFormaPagoBanco!=null) {
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosRegistroFormaPagoBanco.setVisible(true);
			}
			
			if(this.jPanelPaginacionRegistroFormaPagoBanco!=null) {
				this.jPanelPaginacionRegistroFormaPagoBanco.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesRegistroFormaPagoBanco!=null) {
				this.jPanelParametrosReportesRegistroFormaPagoBanco.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosEdicionRegistroFormaPagoBanco.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasRegistroFormaPagoBanco!=null) {
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosRegistroFormaPagoBanco.setVisible(true);
			}
			
			if(this.jPanelPaginacionRegistroFormaPagoBanco!=null) {
				this.jPanelPaginacionRegistroFormaPagoBanco.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesRegistroFormaPagoBanco!=null) {
				this.jPanelParametrosReportesRegistroFormaPagoBanco.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosEdicionRegistroFormaPagoBanco.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasRegistroFormaPagoBanco!=null) {
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosRegistroFormaPagoBanco!=null) {
				this.jScrollPanelDatosRegistroFormaPagoBanco.setVisible(true);
			}
			
			if(this.jPanelPaginacionRegistroFormaPagoBanco!=null) {
				this.jPanelPaginacionRegistroFormaPagoBanco.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesRegistroFormaPagoBanco!=null) {
				this.jPanelParametrosReportesRegistroFormaPagoBanco.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasRegistroFormaPagoBanco!=null) {
					this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesRegistroFormaPagoBanco!=null) {
				this.jPanelParametrosReportesRegistroFormaPagoBanco.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.registroformapagobancoSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasRegistroFormaPagoBanco!=null) {
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesRegistroFormaPagoBanco!=null) {
				this.jPanelParametrosReportesRegistroFormaPagoBanco.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdAsientoContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdAsientoContableRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdClienteRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdTipoFormaPago=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoFormaPago) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdAsientoContable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdAsientoContableRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdClienteRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdTipoFormaPago=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoFormaPago) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdAsientoContable=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdAsientoContableRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdCliente=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdClienteRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdTipoFormaPago=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoFormaPago) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdAsientoContable=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdAsientoContableRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdCliente=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdClienteRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdTipoFormaPago=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoFormaPago) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaAsientoContable(Boolean isParaAsientoContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAsientoContableNegation=!isParaAsientoContable;

			this.isVisibilidadFK_IdAsientoContable=isParaAsientoContable;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdAsientoContableRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdCliente=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdClienteRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdTipoFormaPago=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoFormaPago) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoFormaPago(Boolean isParaTipoFormaPago){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoFormaPagoNegation=!isParaTipoFormaPago;

			this.isVisibilidadFK_IdAsientoContable=isParaTipoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdAsientoContableRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdCliente=isParaTipoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdClienteRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco=isParaTipoFormaPagoNegation;
			if(!this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdTipoFormaPago=isParaTipoFormaPago;
			if(!this.isVisibilidadFK_IdTipoFormaPago) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoRegistroFormaPagoBanco(Boolean isParaEstadoRegistroFormaPagoBanco){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoRegistroFormaPagoBancoNegation=!isParaEstadoRegistroFormaPagoBanco;

			this.isVisibilidadFK_IdAsientoContable=isParaEstadoRegistroFormaPagoBancoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdAsientoContableRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdCliente=isParaEstadoRegistroFormaPagoBancoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdClienteRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco=isParaEstadoRegistroFormaPagoBanco;
			if(!this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdTipoFormaPago=isParaEstadoRegistroFormaPagoBancoNegation;
			if(!this.isVisibilidadFK_IdTipoFormaPago) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadFK_IdAsientoContable=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdAsientoContableRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdClienteRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdTipoFormaPago=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoFormaPago) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdAsientoContable=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdAsientoContableRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdCliente=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdClienteRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdTipoFormaPago=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoFormaPago) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdAsientoContable=isParaMesNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdAsientoContableRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdCliente=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdClienteRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEstadoRegistroFormaPagoBanco) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);}

			this.isVisibilidadFK_IdTipoFormaPago=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoFormaPago) {this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);}
		}
		
	}
	
	
	
	

	public String registrarSesionRegistroFormaPagoBancoParaBusquedaAsientoContables() throws Exception {
		Boolean isPaginaPopupAsientoContable=false;

		try {

			if(registroformapagobancoSessionBean==null) {
				registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}

			if(asientocontableSessionBean==null) {
				asientocontableSessionBean=new AsientoContableSessionBean();
			}

			asientocontableSessionBean.setsPathNavegacionActual(registroformapagobancoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AsientoContableConstantesFunciones.SCLASSWEBTITULO);
			asientocontableSessionBean.setisPermiteRecargarInformacion(false);
			asientocontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupAsientoContable=asientocontableSessionBean.getisPaginaPopup();
			asientocontableSessionBean.setisPaginaPopup(false);
			asientocontableSessionBean.setEstaModoBusqueda(true);
			asientocontableSessionBean.setsFuncionBusquedaRapida("window.opener.registroformapagobancoFuncionGeneral.setCombosCodigoDesdeBusquedaid_asiento_contable(TO_REPLACE);");
			asientocontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAsientoContable(true);
			asientocontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAsientoContable(RegistroFormaPagoBancoConstantesFunciones.SNOMBREOPCION);
			//asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionRegistroFormaPagoBanco(true);
			//asientocontableSessionBean.setlidRegistroFormaPagoBancoActual(this.idRegistroFormaPagoBancoActual);

			registroformapagobancoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyRegistroFormaPagoBanco(true);
			registroformapagobancoSessionBean.setlIdRegistroFormaPagoBancoActualForeignKey(this.idRegistroFormaPagoBancoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionRegistroFormaPagoBancoParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(registroformapagobancoSessionBean==null) {
				registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(registroformapagobancoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.registroformapagobancoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(RegistroFormaPagoBancoConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionRegistroFormaPagoBanco(true);
			//clienteSessionBean.setlidRegistroFormaPagoBancoActual(this.idRegistroFormaPagoBancoActual);

			registroformapagobancoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyRegistroFormaPagoBanco(true);
			registroformapagobancoSessionBean.setlIdRegistroFormaPagoBancoActualForeignKey(this.idRegistroFormaPagoBancoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//RegistroFormaPagoBancoSessionBean registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
		
		if(this.registroformapagobancoSessionBean==null) {
			this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
		}
		
		this.registroformapagobancoSessionBean.setsUltimaBusquedaRegistroFormaPagoBanco(this.getsAccionBusqueda());
		this.registroformapagobancoSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.registroformapagobancoSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
			registroformapagobancoSessionBean.setid_asiento_contable(this.getid_asiento_contableFK_IdAsientoContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			registroformapagobancoSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			registroformapagobancoSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			registroformapagobancoSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoRegistroFormaPagoBanco")) {
			registroformapagobancoSessionBean.setid_estado_registro_forma_pago_banco(this.getid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			registroformapagobancoSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			registroformapagobancoSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoFormaPago")) {
			registroformapagobancoSessionBean.setid_tipo_forma_pago(this.getid_tipo_forma_pagoFK_IdTipoFormaPago());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//RegistroFormaPagoBancoSessionBean registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
		
		if(this.registroformapagobancoSessionBean==null) {
			this.registroformapagobancoSessionBean=new RegistroFormaPagoBancoSessionBean();
		}
		
		if(this.registroformapagobancoSessionBean.getsUltimaBusquedaRegistroFormaPagoBanco()!=null&&!this.registroformapagobancoSessionBean.getsUltimaBusquedaRegistroFormaPagoBanco().equals("")) {
			this.setsAccionBusqueda(registroformapagobancoSessionBean.getsUltimaBusquedaRegistroFormaPagoBanco());
			this.setiNumeroPaginacion(registroformapagobancoSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(registroformapagobancoSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
				this.setid_asiento_contableFK_IdAsientoContable(registroformapagobancoSessionBean.getid_asiento_contable());
				registroformapagobancoSessionBean.setid_asiento_contable(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(registroformapagobancoSessionBean.getid_cliente());
				registroformapagobancoSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(registroformapagobancoSessionBean.getid_ejercicio());
				registroformapagobancoSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(registroformapagobancoSessionBean.getid_empresa());
				registroformapagobancoSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoRegistroFormaPagoBanco")) {
				this.setid_estado_registro_forma_pago_bancoFK_IdEstadoRegistroFormaPagoBanco(registroformapagobancoSessionBean.getid_estado_registro_forma_pago_banco());
				registroformapagobancoSessionBean.setid_estado_registro_forma_pago_banco(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(registroformapagobancoSessionBean.getid_periodo());
				registroformapagobancoSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(registroformapagobancoSessionBean.getid_sucursal());
				registroformapagobancoSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoFormaPago")) {
				this.setid_tipo_forma_pagoFK_IdTipoFormaPago(registroformapagobancoSessionBean.getid_tipo_forma_pago());
				registroformapagobancoSessionBean.setid_tipo_forma_pago(-1L);
			}
		}
		
		this.registroformapagobancoSessionBean.setsUltimaBusquedaRegistroFormaPagoBanco("");
		this.registroformapagobancoSessionBean.setiNumeroPaginacion(RegistroFormaPagoBancoConstantesFunciones.INUMEROPAGINACION);
		this.registroformapagobancoSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaRegistroFormaPagoBanco(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioRegistroFormaPagoBanco() {
		this.updateBorderResaltarBusquedasFormularioRegistroFormaPagoBanco();
		this.updateVisibilidadBusquedasFormularioRegistroFormaPagoBanco();
		this.updateHabilitarBusquedasFormularioRegistroFormaPagoBanco();
	}
	
	public void updateBorderResaltarBusquedasFormularioRegistroFormaPagoBanco() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponents().length>0) {
	

		if(this.registroformapagobancoConstantesFunciones.resaltarFK_IdAsientoContableRegistroFormaPagoBanco!=null) {
			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdAsientoContableRegistroFormaPagoBanco);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);
				jPanel.setBorder(this.registroformapagobancoConstantesFunciones.resaltarFK_IdAsientoContableRegistroFormaPagoBanco);
			}
		}

		if(this.registroformapagobancoConstantesFunciones.resaltarFK_IdClienteRegistroFormaPagoBanco!=null) {
			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdClienteRegistroFormaPagoBanco);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);
				jPanel.setBorder(this.registroformapagobancoConstantesFunciones.resaltarFK_IdClienteRegistroFormaPagoBanco);
			}
		}

		if(this.registroformapagobancoConstantesFunciones.resaltarFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco!=null) {
			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);
				jPanel.setBorder(this.registroformapagobancoConstantesFunciones.resaltarFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);
			}
		}

		if(this.registroformapagobancoConstantesFunciones.resaltarFK_IdTipoFormaPagoRegistroFormaPagoBanco!=null) {
			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);
				jPanel.setBorder(this.registroformapagobancoConstantesFunciones.resaltarFK_IdTipoFormaPagoRegistroFormaPagoBanco);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioRegistroFormaPagoBanco() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdAsientoContableRegistroFormaPagoBanco);
			jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.registroformapagobancoConstantesFunciones.mostrarFK_IdAsientoContableRegistroFormaPagoBanco);
			if(!this.registroformapagobancoConstantesFunciones.mostrarFK_IdAsientoContableRegistroFormaPagoBanco && index>-1) {
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(index);
			}

			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdClienteRegistroFormaPagoBanco);
			jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.registroformapagobancoConstantesFunciones.mostrarFK_IdClienteRegistroFormaPagoBanco);
			if(!this.registroformapagobancoConstantesFunciones.mostrarFK_IdClienteRegistroFormaPagoBanco && index>-1) {
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(index);
			}

			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);
			jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.registroformapagobancoConstantesFunciones.mostrarFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);
			if(!this.registroformapagobancoConstantesFunciones.mostrarFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco && index>-1) {
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(index);
			}

			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);
			jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.registroformapagobancoConstantesFunciones.mostrarFK_IdTipoFormaPagoRegistroFormaPagoBanco);
			if(!this.registroformapagobancoConstantesFunciones.mostrarFK_IdTipoFormaPagoRegistroFormaPagoBanco && index>-1) {
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioRegistroFormaPagoBanco() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdAsientoContableRegistroFormaPagoBanco);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.registroformapagobancoConstantesFunciones.activarFK_IdAsientoContableRegistroFormaPagoBanco);
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setEnabledAt(index,this.registroformapagobancoConstantesFunciones.activarFK_IdAsientoContableRegistroFormaPagoBanco);
			}

			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdClienteRegistroFormaPagoBanco);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.registroformapagobancoConstantesFunciones.activarFK_IdClienteRegistroFormaPagoBanco);
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setEnabledAt(index,this.registroformapagobancoConstantesFunciones.activarFK_IdClienteRegistroFormaPagoBanco);
			}

			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.registroformapagobancoConstantesFunciones.activarFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setEnabledAt(index,this.registroformapagobancoConstantesFunciones.activarFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);
			}

			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.registroformapagobancoConstantesFunciones.activarFK_IdTipoFormaPagoRegistroFormaPagoBanco);
				this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setEnabledAt(index,this.registroformapagobancoConstantesFunciones.activarFK_IdTipoFormaPagoRegistroFormaPagoBanco);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaRegistroFormaPagoBanco(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdAsientoContable")) {
			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdAsientoContableRegistroFormaPagoBanco);

			this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);

			this.registroformapagobancoConstantesFunciones.setResaltarFK_IdAsientoContableRegistroFormaPagoBanco(resaltar);

			jPanel.setBorder(this.registroformapagobancoConstantesFunciones.resaltarFK_IdAsientoContableRegistroFormaPagoBanco);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdClienteRegistroFormaPagoBanco);

			this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);

			this.registroformapagobancoConstantesFunciones.setResaltarFK_IdClienteRegistroFormaPagoBanco(resaltar);

			jPanel.setBorder(this.registroformapagobancoConstantesFunciones.resaltarFK_IdClienteRegistroFormaPagoBanco);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoRegistroFormaPagoBanco")) {
			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);

			this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);

			this.registroformapagobancoConstantesFunciones.setResaltarFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco(resaltar);

			jPanel.setBorder(this.registroformapagobancoConstantesFunciones.resaltarFK_IdEstadoRegistroFormaPagoBancoRegistroFormaPagoBanco);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoFormaPago")) {
			index= this.jTabbedPaneBusquedasRegistroFormaPagoBanco.indexOfComponent(this.jPanelFK_IdTipoFormaPagoRegistroFormaPagoBanco);

			this.jTabbedPaneBusquedasRegistroFormaPagoBanco.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasRegistroFormaPagoBanco.getComponent(index);

			this.registroformapagobancoConstantesFunciones.setResaltarFK_IdTipoFormaPagoRegistroFormaPagoBanco(resaltar);

			jPanel.setBorder(this.registroformapagobancoConstantesFunciones.resaltarFK_IdTipoFormaPagoRegistroFormaPagoBanco);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarRegistroFormaPagoBanco.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioRegistroFormaPagoBanco() throws Exception {

		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioRegistroFormaPagoBanco();
		this.updateVisibilidadResaltarControlesFormularioRegistroFormaPagoBanco();
		this.updateHabilitarResaltarControlesFormularioRegistroFormaPagoBanco();
		
	}
	
	public void updateBorderResaltarControlesFormularioRegistroFormaPagoBanco() throws Exception {
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.registroformapagobancoConstantesFunciones.resaltaridRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelidRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltaridRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarid_empresaRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarid_empresaRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarid_sucursalRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarid_sucursalRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarid_ejercicioRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarid_ejercicioRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarid_periodoRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarid_periodoRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarid_asiento_contableRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarid_asiento_contableRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarid_tipo_forma_pagoRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarid_tipo_forma_pagoRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarid_clienteRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarid_clienteRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarnombre_bancoRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_bancoRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarnombre_bancoRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarnombre_giradorRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_giradorRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarnombre_giradorRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarfecha_vencimientoRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimientoRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarfecha_vencimientoRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarnumero_cuentaRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cuentaRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarnumero_cuentaRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarnumero_chequeRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_chequeRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarnumero_chequeRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarvalor_montoRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldvalor_montoRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarvalor_montoRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarfechaRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfechaRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarfechaRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarfecha_vencimiento_originalRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimiento_originalRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarfecha_vencimiento_originalRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarnumero_cambioRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cambioRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarnumero_cambioRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarid_anioRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarid_anioRegistroFormaPagoBanco);}
		if(this.registroformapagobancoConstantesFunciones.resaltarid_mesRegistroFormaPagoBanco!=null && this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.setBorder(this.registroformapagobancoConstantesFunciones.resaltarid_mesRegistroFormaPagoBanco);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioRegistroFormaPagoBanco() throws Exception {		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
	
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelidRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostraridRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelidRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostraridRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_empresaRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelid_empresaRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_empresaRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_sucursalRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelid_sucursalRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_sucursalRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_ejercicioRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelid_ejercicioRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_ejercicioRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_periodoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelid_periodoRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_periodoRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_asiento_contableRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelid_asiento_contableRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_asiento_contableRegistroFormaPagoBanco);
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_asiento_contableRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_asiento_contableRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_tipo_forma_pagoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelid_tipo_forma_pagoRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_tipo_forma_pagoRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_clienteRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelid_clienteRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_clienteRegistroFormaPagoBanco);
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_clienteRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_clienteRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_bancoRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarnombre_bancoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelnombre_bancoRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarnombre_bancoRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_giradorRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarnombre_giradorRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelnombre_giradorRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarnombre_giradorRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimientoRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarfecha_vencimientoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelfecha_vencimientoRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarfecha_vencimientoRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cuentaRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarnumero_cuentaRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelnumero_cuentaRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarnumero_cuentaRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_chequeRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarnumero_chequeRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelnumero_chequeRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarnumero_chequeRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldvalor_montoRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarvalor_montoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelvalor_montoRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarvalor_montoRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfechaRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarfechaRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelfechaRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarfechaRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimiento_originalRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarfecha_vencimiento_originalRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelfecha_vencimiento_originalRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarfecha_vencimiento_originalRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cambioRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarnumero_cambioRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelnumero_cambioRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarnumero_cambioRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_anioRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelid_anioRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_anioRegistroFormaPagoBanco);
		//this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_mesRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jPanelid_mesRegistroFormaPagoBanco.setVisible(this.registroformapagobancoConstantesFunciones.mostrarid_mesRegistroFormaPagoBanco);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioRegistroFormaPagoBanco() throws Exception {
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormRegistroFormaPagoBanco!=null) {
	
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jLabelidRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activaridRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_empresaRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarid_empresaRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_sucursalRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarid_sucursalRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_ejercicioRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarid_ejercicioRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_periodoRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarid_periodoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_asiento_contableRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarid_asiento_contableRegistroFormaPagoBanco);
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_asiento_contableRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarid_asiento_contableRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_tipo_forma_pagoRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarid_tipo_forma_pagoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarid_estado_registro_forma_pago_bancoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_clienteRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarid_clienteRegistroFormaPagoBanco);
			this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jButtonid_clienteRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarid_clienteRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_bancoRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarnombre_bancoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextAreanombre_giradorRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarnombre_giradorRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimientoRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarfecha_vencimientoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cuentaRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarnumero_cuentaRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_chequeRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarnumero_chequeRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldvalor_montoRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarvalor_montoRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfechaRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarfechaRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jDateChooserfecha_vencimiento_originalRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarfecha_vencimiento_originalRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jTextFieldnumero_cambioRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarnumero_cambioRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_anioRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarid_anioRegistroFormaPagoBanco);
		this.jInternalFrameDetalleFormRegistroFormaPagoBanco.jComboBoxid_mesRegistroFormaPagoBanco.setEnabled(this.registroformapagobancoConstantesFunciones.activarid_mesRegistroFormaPagoBanco);
		}
	}
	
		
}