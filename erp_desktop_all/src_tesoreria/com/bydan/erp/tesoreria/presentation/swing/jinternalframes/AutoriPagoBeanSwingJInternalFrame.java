/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.tesoreria.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.tesoreria.util.AutoriPagoConstantesFunciones;
import com.bydan.erp.tesoreria.util.AutoriPagoParameterReturnGeneral;
//import com.bydan.erp.tesoreria.util.AutoriPagoParameterGeneral;
//import com.bydan.erp.tesoreria.presentation.report.source.AutoriPagoBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.tesoreria.resources.reportes.AuxiliarReportes;


import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.tesoreria.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.tesoreria.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class AutoriPagoBeanSwingJInternalFrame extends AutoriPagoJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(AutoriPagoBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<AutoriPago> autoripagoValidator = new ClassValidator<AutoriPago>(AutoriPago.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public AutoriPago autoripago;	
	public AutoriPago autoripagoAux;
	public AutoriPago autoripagoAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public AutoriPago autoripagoTotales;
	public Long idAutoriPagoActual;
	public Long iIdNuevoAutoriPago=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboFactura="";

	public List<Factura> facturasForeignKey;

	public List<Factura> getfacturasForeignKey() {
		return facturasForeignKey;
	}

	public void setfacturasForeignKey(List<Factura> facturasForeignKey) {
		this.facturasForeignKey = facturasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Factura facturaForeignKey;

	public Factura getfacturaForeignKey() {
		return facturaForeignKey;
	}

	public void setfacturaForeignKey(Factura facturaForeignKey) {
		this.facturaForeignKey = facturaForeignKey;
	}

	public String sFinalQueryComboAsientoContable="";

	public List<AsientoContable> asientocontablesForeignKey;

	public List<AsientoContable> getasientocontablesForeignKey() {
		return asientocontablesForeignKey;
	}

	public void setasientocontablesForeignKey(List<AsientoContable> asientocontablesForeignKey) {
		this.asientocontablesForeignKey = asientocontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public AsientoContable asientocontableForeignKey;

	public AsientoContable getasientocontableForeignKey() {
		return asientocontableForeignKey;
	}

	public void setasientocontableForeignKey(AsientoContable asientocontableForeignKey) {
		this.asientocontableForeignKey = asientocontableForeignKey;
	}

	public String sFinalQueryComboCentroCosto="";

	public List<CentroCosto> centrocostosForeignKey;

	public List<CentroCosto> getcentrocostosForeignKey() {
		return centrocostosForeignKey;
	}

	public void setcentrocostosForeignKey(List<CentroCosto> centrocostosForeignKey) {
		this.centrocostosForeignKey = centrocostosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroCosto centrocostoForeignKey;

	public CentroCosto getcentrocostoForeignKey() {
		return centrocostoForeignKey;
	}

	public void setcentrocostoForeignKey(CentroCosto centrocostoForeignKey) {
		this.centrocostoForeignKey = centrocostoForeignKey;
	}

	public String sFinalQueryComboCentroActividad="";

	public List<CentroActividad> centroactividadsForeignKey;

	public List<CentroActividad> getcentroactividadsForeignKey() {
		return centroactividadsForeignKey;
	}

	public void setcentroactividadsForeignKey(List<CentroActividad> centroactividadsForeignKey) {
		this.centroactividadsForeignKey = centroactividadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CentroActividad centroactividadForeignKey;

	public CentroActividad getcentroactividadForeignKey() {
		return centroactividadForeignKey;
	}

	public void setcentroactividadForeignKey(CentroActividad centroactividadForeignKey) {
		this.centroactividadForeignKey = centroactividadForeignKey;
	}

	public String sFinalQueryComboBanco="";

	public List<Banco> bancosForeignKey;

	public List<Banco> getbancosForeignKey() {
		return bancosForeignKey;
	}

	public void setbancosForeignKey(List<Banco> bancosForeignKey) {
		this.bancosForeignKey = bancosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Banco bancoForeignKey;

	public Banco getbancoForeignKey() {
		return bancoForeignKey;
	}

	public void setbancoForeignKey(Banco bancoForeignKey) {
		this.bancoForeignKey = bancoForeignKey;
	}

	public String sFinalQueryComboCuentaBanco="";

	public List<CuentaBanco> cuentabancosForeignKey;

	public List<CuentaBanco> getcuentabancosForeignKey() {
		return cuentabancosForeignKey;
	}

	public void setcuentabancosForeignKey(List<CuentaBanco> cuentabancosForeignKey) {
		this.cuentabancosForeignKey = cuentabancosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaBanco cuentabancoForeignKey;

	public CuentaBanco getcuentabancoForeignKey() {
		return cuentabancoForeignKey;
	}

	public void setcuentabancoForeignKey(CuentaBanco cuentabancoForeignKey) {
		this.cuentabancoForeignKey = cuentabancoForeignKey;
	}

	public String sFinalQueryComboDetalleProve="";

	public List<DetalleProve> detalleprovesForeignKey;

	public List<DetalleProve> getdetalleprovesForeignKey() {
		return detalleprovesForeignKey;
	}

	public void setdetalleprovesForeignKey(List<DetalleProve> detalleprovesForeignKey) {
		this.detalleprovesForeignKey = detalleprovesForeignKey;
	}

	//OBJETO FK ACTUAL
	public DetalleProve detalleproveForeignKey;

	public DetalleProve getdetalleproveForeignKey() {
		return detalleproveForeignKey;
	}

	public void setdetalleproveForeignKey(DetalleProve detalleproveForeignKey) {
		this.detalleproveForeignKey = detalleproveForeignKey;
	}

	public String sFinalQueryComboTransaccion="";

	public List<Transaccion> transaccionsForeignKey;

	public List<Transaccion> gettransaccionsForeignKey() {
		return transaccionsForeignKey;
	}

	public void settransaccionsForeignKey(List<Transaccion> transaccionsForeignKey) {
		this.transaccionsForeignKey = transaccionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transaccion transaccionForeignKey;

	public Transaccion gettransaccionForeignKey() {
		return transaccionForeignKey;
	}

	public void settransaccionForeignKey(Transaccion transaccionForeignKey) {
		this.transaccionForeignKey = transaccionForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	public Long idFacturaActual=0L;

	public Long getidFacturaActual() {
		return idFacturaActual;
	}

	public void setidFacturaActual(Long idFacturaActual) {
		this.idFacturaActual= idFacturaActual;
	}
	public Long idAsientoContableActual=0L;

	public Long getidAsientoContableActual() {
		return idAsientoContableActual;
	}

	public void setidAsientoContableActual(Long idAsientoContableActual) {
		this.idAsientoContableActual= idAsientoContableActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoAutoriPago;
	public Boolean isPermisoNuevoAutoriPago;
	public Boolean isPermisoActualizarAutoriPago;
	public Boolean isPermisoActualizarOriginalAutoriPago;
	public Boolean isPermisoEliminarAutoriPago;
	public Boolean isPermisoGuardarCambiosAutoriPago;
	public Boolean isPermisoConsultaAutoriPago;
	public Boolean isPermisoBusquedaAutoriPago;
	public Boolean isPermisoReporteAutoriPago;
	public Boolean isPermisoPaginacionMedioAutoriPago;
	public Boolean isPermisoPaginacionAltoAutoriPago;
	public Boolean isPermisoPaginacionTodoAutoriPago;
	public Boolean isPermisoCopiarAutoriPago;
	public Boolean isPermisoVerFormAutoriPago;
	public Boolean isPermisoDuplicarAutoriPago;
	public Boolean isPermisoOrdenAutoriPago;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public AutoriPagoParameterReturnGeneral autoripagoReturnGeneral;
	public AutoriPagoParameterReturnGeneral autoripagoParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoAutoriPago=false;
	public Boolean esParaAccionDesdeFormularioAutoriPago=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected AutoriPagoSessionBeanAdditional autoripagoSessionBeanAdditional=null;
	
	public AutoriPagoSessionBeanAdditional getAutoriPagoSessionBeanAdditional() {
		return this.autoripagoSessionBeanAdditional;
	}
	
	public void setAutoriPagoSessionBeanAdditional(AutoriPagoSessionBeanAdditional autoripagoSessionBeanAdditional) {
		try {
			this.autoripagoSessionBeanAdditional=autoripagoSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected AutoriPagoBeanSwingJInternalFrameAdditional autoripagoBeanSwingJInternalFrameAdditional=null;
	//public class AutoriPagoBeanSwingJInternalFrame
	
	public AutoriPagoBeanSwingJInternalFrameAdditional getAutoriPagoBeanSwingJInternalFrameAdditional() {
		return this.autoripagoBeanSwingJInternalFrameAdditional;
	}
	
	public void setAutoriPagoBeanSwingJInternalFrameAdditional(AutoriPagoBeanSwingJInternalFrameAdditional autoripagoBeanSwingJInternalFrameAdditional) {
		try {
			this.autoripagoBeanSwingJInternalFrameAdditional=autoripagoBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public AutoriPagoLogic autoripagoLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public AutoriPago autoripagoBean;
	public AutoriPagoConstantesFunciones autoripagoConstantesFunciones;
	//public AutoriPagoParameterReturnGeneral autoripagoReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public ClienteLogic clienteLogic;
	public FacturaLogic facturaLogic;
	public AsientoContableLogic asientocontableLogic;
	public CentroCostoLogic centrocostoLogic;
	public CentroActividadLogic centroactividadLogic;
	public BancoLogic bancoLogic;
	public CuentaBancoLogic cuentabancoLogic;
	public DetalleProveLogic detalleproveLogic;
	public TransaccionLogic transaccionLogic;
	
	//PARAMETROS
	
	
	//public List<AutoriPago> autoripagos;	
	//public List<AutoriPago> autoripagosEliminados;
	//public List<AutoriPago> autoripagosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoAutoriPago=false;
	public Boolean isVisibilidadCeldaDuplicarAutoriPago=true;
	public Boolean isVisibilidadCeldaCopiarAutoriPago=true;
	public Boolean isVisibilidadCeldaVerFormAutoriPago=true;
	public Boolean isVisibilidadCeldaOrdenAutoriPago=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesAutoriPago=false;
	public Boolean isVisibilidadCeldaModificarAutoriPago=false;
	public Boolean isVisibilidadCeldaActualizarAutoriPago=false;
	public Boolean isVisibilidadCeldaEliminarAutoriPago=false;
	public Boolean isVisibilidadCeldaCancelarAutoriPago=false;
	public Boolean isVisibilidadCeldaGuardarAutoriPago=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosAutoriPago=false;	
	
	
	public Boolean isVisibilidadFK_IdAsientoContable=false;
	public Boolean isVisibilidadFK_IdBanco=false;
	public Boolean isVisibilidadFK_IdCentroActividad=false;
	public Boolean isVisibilidadFK_IdCentroCosto=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdCuentaBanco=false;
	public Boolean isVisibilidadFK_IdDetalleProve=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdFactura=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTransaccion=false;
	
	public Long getiIdNuevoAutoriPago() {
		return this.iIdNuevoAutoriPago;
	}

	public void setiIdNuevoAutoriPago(Long iIdNuevoAutoriPago) {
		this.iIdNuevoAutoriPago = iIdNuevoAutoriPago;
	}
	
	public Long getidAutoriPagoActual() {
		return this.idAutoriPagoActual;
	}

	public void setidAutoriPagoActual(Long idAutoriPagoActual) {
		this.idAutoriPagoActual = idAutoriPagoActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public AutoriPago getautoripago() {
		return this.autoripago;
	}

	public void setautoripago(AutoriPago autoripago) {
		this.autoripago = autoripago;
	}
	
	public AutoriPago getautoripagoAux() {
		return this.autoripagoAux;
	}

	public void setautoripagoAux(AutoriPago autoripagoAux) {
		this.autoripagoAux = autoripagoAux;
	}				
	
	public AutoriPago getautoripagoAnterior() {
		return this.autoripagoAnterior;
	}

	public void setautoripagoAnterior(AutoriPago autoripagoAnterior) {
		this.autoripagoAnterior = autoripagoAnterior;
	}	
	
	public AutoriPago getautoripagoTotales() {
		return this.autoripagoTotales;
	}

	public void setautoripagoTotales(AutoriPago autoripagoTotales) {
		this.autoripagoTotales = autoripagoTotales;
	}	
	
	public AutoriPago getautoripagoBean() {
		return this.autoripagoBean;
	}

	public void setautoripagoBean(AutoriPago autoripagoBean) {
		this.autoripagoBean = autoripagoBean;
	}	
	
	public AutoriPagoParameterReturnGeneral getautoripagoReturnGeneral() {
		return this.autoripagoReturnGeneral;
	}

	public void setautoripagoReturnGeneral(AutoriPagoParameterReturnGeneral autoripagoReturnGeneral) {
		this.autoripagoReturnGeneral = autoripagoReturnGeneral;
	}	
	
	
	public Long id_asiento_contableFK_IdAsientoContable=-1L;

	public Long getid_asiento_contableFK_IdAsientoContable() {
		return this.id_asiento_contableFK_IdAsientoContable;
	}

	public void setid_asiento_contableFK_IdAsientoContable(Long id_asiento_contableFK_IdAsientoContable) {
		this.id_asiento_contableFK_IdAsientoContable = id_asiento_contableFK_IdAsientoContable;
	}

	public Long id_bancoFK_IdBanco=-1L;

	public Long getid_bancoFK_IdBanco() {
		return this.id_bancoFK_IdBanco;
	}

	public void setid_bancoFK_IdBanco(Long id_bancoFK_IdBanco) {
		this.id_bancoFK_IdBanco = id_bancoFK_IdBanco;
	}

	public Long id_centro_actividadFK_IdCentroActividad=null;

	public Long getid_centro_actividadFK_IdCentroActividad() {
		return this.id_centro_actividadFK_IdCentroActividad;
	}

	public void setid_centro_actividadFK_IdCentroActividad(Long id_centro_actividadFK_IdCentroActividad) {
		this.id_centro_actividadFK_IdCentroActividad = id_centro_actividadFK_IdCentroActividad;
	}

	public Long id_centro_costoFK_IdCentroCosto=null;

	public Long getid_centro_costoFK_IdCentroCosto() {
		return this.id_centro_costoFK_IdCentroCosto;
	}

	public void setid_centro_costoFK_IdCentroCosto(Long id_centro_costoFK_IdCentroCosto) {
		this.id_centro_costoFK_IdCentroCosto = id_centro_costoFK_IdCentroCosto;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_cuenta_bancoFK_IdCuentaBanco=-1L;

	public Long getid_cuenta_bancoFK_IdCuentaBanco() {
		return this.id_cuenta_bancoFK_IdCuentaBanco;
	}

	public void setid_cuenta_bancoFK_IdCuentaBanco(Long id_cuenta_bancoFK_IdCuentaBanco) {
		this.id_cuenta_bancoFK_IdCuentaBanco = id_cuenta_bancoFK_IdCuentaBanco;
	}

	public Long id_detalle_proveFK_IdDetalleProve=-1L;

	public Long getid_detalle_proveFK_IdDetalleProve() {
		return this.id_detalle_proveFK_IdDetalleProve;
	}

	public void setid_detalle_proveFK_IdDetalleProve(Long id_detalle_proveFK_IdDetalleProve) {
		this.id_detalle_proveFK_IdDetalleProve = id_detalle_proveFK_IdDetalleProve;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_facturaFK_IdFactura=-1L;

	public Long getid_facturaFK_IdFactura() {
		return this.id_facturaFK_IdFactura;
	}

	public void setid_facturaFK_IdFactura(Long id_facturaFK_IdFactura) {
		this.id_facturaFK_IdFactura = id_facturaFK_IdFactura;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_transaccionFK_IdTransaccion=-1L;

	public Long getid_transaccionFK_IdTransaccion() {
		return this.id_transaccionFK_IdTransaccion;
	}

	public void setid_transaccionFK_IdTransaccion(Long id_transaccionFK_IdTransaccion) {
		this.id_transaccionFK_IdTransaccion = id_transaccionFK_IdTransaccion;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public AutoriPagoLogic getAutoriPagoLogic()	{		
		return autoripagoLogic;
	}

	public void setAutoriPagoLogic(AutoriPagoLogic autoripagoLogic) {
		this.autoripagoLogic = autoripagoLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoAutoriPago() {
		return isEsNuevoAutoriPago;
	}

	public void setIsEsNuevoAutoriPago(Boolean isEsNuevoAutoriPago) {
		this.isEsNuevoAutoriPago = isEsNuevoAutoriPago;
	}

	public Boolean getEsParaAccionDesdeFormularioAutoriPago() {
		return esParaAccionDesdeFormularioAutoriPago;
	}
	
	public void setEsParaAccionDesdeFormularioAutoriPago(Boolean esParaAccionDesdeFormularioAutoriPago) {
		this.esParaAccionDesdeFormularioAutoriPago = esParaAccionDesdeFormularioAutoriPago;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(autoripagoSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(autoripagoSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(autoripagoSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(autoripagoSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFacturasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.facturasForeignKey=new ArrayList<Factura>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FacturaLogic facturaLogic=new FacturaLogic();

			//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

					facturaLogic.getTodosFacturasWithConnection(sFinalQuery,new Pagination());

					this.facturasForeignKey=facturaLogic.getFacturas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFactura(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(autoripagoSessionBean.getlidFacturaActual());
					this.facturasForeignKey.add(facturaLogic.getFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAsientoContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AsientoContableLogic asientocontableLogic=new AsientoContableLogic();

			//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

					asientocontableLogic.getTodosAsientoContablesWithConnection(sFinalQuery,new Pagination());

					this.asientocontablesForeignKey=asientocontableLogic.getAsientoContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAsientoContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(autoripagoSessionBean.getlidAsientoContableActual());
					this.asientocontablesForeignKey.add(asientocontableLogic.getAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroCostosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centrocostosForeignKey=new ArrayList<CentroCosto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroCostoLogic centrocostoLogic=new CentroCostoLogic();

			//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centrocostoLogic.getCentroCostoDataAccess().setIsForForeingKeyData(true);

					centrocostoLogic.getTodosCentroCostosWithConnection(sFinalQuery,new Pagination());

					this.centrocostosForeignKey=centrocostoLogic.getCentroCostos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroCosto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centrocostoLogic.getEntityWithConnection(autoripagoSessionBean.getlidCentroCostoActual());
					this.centrocostosForeignKey.add(centrocostoLogic.getCentroCosto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCentroActividadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.centroactividadsForeignKey=new ArrayList<CentroActividad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CentroActividadLogic centroactividadLogic=new CentroActividadLogic();

			//centroactividadLogic.getCentroActividadDataAccess().setIsForForeingKeyData(true);

			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionCentroActividad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//centroactividadLogic.getCentroActividadDataAccess().setIsForForeingKeyData(true);

					centroactividadLogic.getTodosCentroActividadsWithConnection(sFinalQuery,new Pagination());

					this.centroactividadsForeignKey=centroactividadLogic.getCentroActividads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCentroActividad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					centroactividadLogic.getEntityWithConnection(autoripagoSessionBean.getlidCentroActividadActual());
					this.centroactividadsForeignKey.add(centroactividadLogic.getCentroActividad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBancosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bancosForeignKey=new ArrayList<Banco>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BancoLogic bancoLogic=new BancoLogic();

			//bancoLogic.getBancoDataAccess().setIsForForeingKeyData(true);

			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bancoLogic.getBancoDataAccess().setIsForForeingKeyData(true);

					bancoLogic.getTodosBancosWithConnection(sFinalQuery,new Pagination());

					this.bancosForeignKey=bancoLogic.getBancos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBanco(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bancoLogic.getEntityWithConnection(autoripagoSessionBean.getlidBancoActual());
					this.bancosForeignKey.add(bancoLogic.getBanco());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaBancosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentabancosForeignKey=new ArrayList<CuentaBanco>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaBancoLogic cuentabancoLogic=new CuentaBancoLogic();

			//cuentabancoLogic.getCuentaBancoDataAccess().setIsForForeingKeyData(true);

			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaBanco()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentabancoLogic.getCuentaBancoDataAccess().setIsForForeingKeyData(true);

					cuentabancoLogic.getTodosCuentaBancosWithConnection(sFinalQuery,new Pagination());

					this.cuentabancosForeignKey=cuentabancoLogic.getCuentaBancos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaBanco(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentabancoLogic.getEntityWithConnection(autoripagoSessionBean.getlidCuentaBancoActual());
					this.cuentabancosForeignKey.add(cuentabancoLogic.getCuentaBanco());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosDetalleProvesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.detalleprovesForeignKey=new ArrayList<DetalleProve>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			DetalleProveLogic detalleproveLogic=new DetalleProveLogic();

			//detalleproveLogic.getDetalleProveDataAccess().setIsForForeingKeyData(true);

			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionDetalleProve()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//detalleproveLogic.getDetalleProveDataAccess().setIsForForeingKeyData(true);

					detalleproveLogic.getTodosDetalleProvesWithConnection(sFinalQuery,new Pagination());

					this.detalleprovesForeignKey=detalleproveLogic.getDetalleProves();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaDetalleProve(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleproveLogic.getEntityWithConnection(autoripagoSessionBean.getlidDetalleProveActual());
					this.detalleprovesForeignKey.add(detalleproveLogic.getDetalleProve());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransaccionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transaccionsForeignKey=new ArrayList<Transaccion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TransaccionLogic transaccionLogic=new TransaccionLogic();

			//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

					transaccionLogic.getTodosTransaccionsWithConnection(sFinalQuery,new Pagination());

					this.transaccionsForeignKey=transaccionLogic.getTransaccions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransaccion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transaccionLogic.getEntityWithConnection(autoripagoSessionBean.getlidTransaccionActual());
					this.transaccionsForeignKey.add(transaccionLogic.getTransaccion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.autoripago!=null) {
						this.autoripago.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaAutoriPago.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.getItemCount()>0) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaAutoriPagoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaAutoriPagoGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaAutoriPagoGenerico!=null && jComboBoxid_empresaAutoriPagoGenerico.getItemCount()>0) {
					jComboBoxid_empresaAutoriPagoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.autoripago!=null) {
						this.autoripago.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalAutoriPago.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.getItemCount()>0) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalAutoriPagoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalAutoriPagoGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalAutoriPagoGenerico!=null && jComboBoxid_sucursalAutoriPagoGenerico.getItemCount()>0) {
					jComboBoxid_sucursalAutoriPagoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.autoripago!=null) {
						this.autoripago.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioAutoriPago.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.getItemCount()>0) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioAutoriPagoGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioAutoriPagoGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioAutoriPagoGenerico!=null && jComboBoxid_ejercicioAutoriPagoGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioAutoriPagoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.autoripago!=null) {
						this.autoripago.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteAutoriPago.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.getItemCount()>0) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteAutoriPago!=null) {
						jComboBoxid_clienteFK_IdClienteAutoriPago.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteAutoriPago!=null) {
							//jComboBoxid_clienteFK_IdClienteAutoriPago.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteAutoriPago.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteAutoriPago.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteAutoriPagoGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteAutoriPagoGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteAutoriPagoGenerico!=null && jComboBoxid_clienteAutoriPagoGenerico.getItemCount()>0) {
					jComboBoxid_clienteAutoriPagoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFacturaForeignKey(Long idFacturaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(facturaTemp!=null) {

					if(this.autoripago!=null) {
						this.autoripago.setFactura(facturaTemp);
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.setSelectedItem(facturaTemp);
					}
				} else {
					//jComboBoxid_facturaAutoriPago.setSelectedItem(facturaTemp);
					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.getItemCount()>0) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){
					if(facturaTemp!=null && jComboBoxid_facturaFK_IdFacturaAutoriPago!=null) {
						jComboBoxid_facturaFK_IdFacturaAutoriPago.setSelectedItem(facturaTemp);
					} else {
						if(jComboBoxid_facturaFK_IdFacturaAutoriPago!=null) {
							//jComboBoxid_facturaFK_IdFacturaAutoriPago.setSelectedItem(facturaTemp);
							if(jComboBoxid_facturaFK_IdFacturaAutoriPago.getItemCount()>0) {
								jComboBoxid_facturaFK_IdFacturaAutoriPago.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFacturaForeignKeyDescripcion(Long idFacturaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}


			sDescripcion=FacturaConstantesFunciones.getFacturaDescripcion(facturaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFacturaForeignKeyGenerico(Long idFacturaSeleccionado,JComboBox jComboBoxid_facturaAutoriPagoGenerico)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(facturaTemp!=null) {
				jComboBoxid_facturaAutoriPagoGenerico.setSelectedItem(facturaTemp);
			} else {
				if(jComboBoxid_facturaAutoriPagoGenerico!=null && jComboBoxid_facturaAutoriPagoGenerico.getItemCount()>0) {
					jComboBoxid_facturaAutoriPagoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAsientoContableForeignKey(Long idAsientoContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(asientocontableTemp!=null) {

					if(this.autoripago!=null) {
						this.autoripago.setAsientoContable(asientocontableTemp);
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.setSelectedItem(asientocontableTemp);
					}
				} else {
					//jComboBoxid_asiento_contableAutoriPago.setSelectedItem(asientocontableTemp);
					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.getItemCount()>0) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(asientocontableTemp!=null && jComboBoxid_asiento_contableFK_IdAsientoContableAutoriPago!=null) {
						jComboBoxid_asiento_contableFK_IdAsientoContableAutoriPago.setSelectedItem(asientocontableTemp);
					} else {
						if(jComboBoxid_asiento_contableFK_IdAsientoContableAutoriPago!=null) {
							//jComboBoxid_asiento_contableFK_IdAsientoContableAutoriPago.setSelectedItem(asientocontableTemp);
							if(jComboBoxid_asiento_contableFK_IdAsientoContableAutoriPago.getItemCount()>0) {
								jComboBoxid_asiento_contableFK_IdAsientoContableAutoriPago.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAsientoContableForeignKeyDescripcion(Long idAsientoContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}


			sDescripcion=AsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAsientoContableForeignKeyGenerico(Long idAsientoContableSeleccionado,JComboBox jComboBoxid_asiento_contableAutoriPagoGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(asientocontableTemp!=null) {
				jComboBoxid_asiento_contableAutoriPagoGenerico.setSelectedItem(asientocontableTemp);
			} else {
				if(jComboBoxid_asiento_contableAutoriPagoGenerico!=null && jComboBoxid_asiento_contableAutoriPagoGenerico.getItemCount()>0) {
					jComboBoxid_asiento_contableAutoriPagoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroCostoForeignKey(Long idCentroCostoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centrocostoTemp!=null) {

					if(this.autoripago!=null) {
						this.autoripago.setCentroCosto(centrocostoTemp);
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.setSelectedItem(centrocostoTemp);
					}
				} else {
					//jComboBoxid_centro_costoAutoriPago.setSelectedItem(centrocostoTemp);
					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.getItemCount()>0) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){
					if(centrocostoTemp!=null && jComboBoxid_centro_costoFK_IdCentroCostoAutoriPago!=null) {
						jComboBoxid_centro_costoFK_IdCentroCostoAutoriPago.setSelectedItem(centrocostoTemp);
					} else {
						if(jComboBoxid_centro_costoFK_IdCentroCostoAutoriPago!=null) {
							//jComboBoxid_centro_costoFK_IdCentroCostoAutoriPago.setSelectedItem(centrocostoTemp);
							if(jComboBoxid_centro_costoFK_IdCentroCostoAutoriPago.getItemCount()>0) {
								jComboBoxid_centro_costoFK_IdCentroCostoAutoriPago.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroCostoForeignKeyDescripcion(Long idCentroCostoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}


			sDescripcion=CentroCostoConstantesFunciones.getCentroCostoDescripcion(centrocostoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroCostoForeignKeyGenerico(Long idCentroCostoSeleccionado,JComboBox jComboBoxid_centro_costoAutoriPagoGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoTemp=null;

			for(CentroCosto centrocostoAux:centrocostosForeignKey) {
				if(centrocostoAux.getId()!=null && centrocostoAux.getId().equals(idCentroCostoSeleccionado)) {
					centrocostoTemp=centrocostoAux;
					break;
				}
			}

			if(centrocostoTemp!=null) {
				jComboBoxid_centro_costoAutoriPagoGenerico.setSelectedItem(centrocostoTemp);
			} else {
				if(jComboBoxid_centro_costoAutoriPagoGenerico!=null && jComboBoxid_centro_costoAutoriPagoGenerico.getItemCount()>0) {
					jComboBoxid_centro_costoAutoriPagoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCentroActividadForeignKey(Long idCentroActividadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CentroActividad  centroactividadTemp=null;

			for(CentroActividad centroactividadAux:centroactividadsForeignKey) {
				if(centroactividadAux.getId()!=null && centroactividadAux.getId().equals(idCentroActividadSeleccionado)) {
					centroactividadTemp=centroactividadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(centroactividadTemp!=null) {

					if(this.autoripago!=null) {
						this.autoripago.setCentroActividad(centroactividadTemp);
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.setSelectedItem(centroactividadTemp);
					}
				} else {
					//jComboBoxid_centro_actividadAutoriPago.setSelectedItem(centroactividadTemp);
					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.getItemCount()>0) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCentroActividad") || sFormularioTipoBusqueda.equals("Todos")){
					if(centroactividadTemp!=null && jComboBoxid_centro_actividadFK_IdCentroActividadAutoriPago!=null) {
						jComboBoxid_centro_actividadFK_IdCentroActividadAutoriPago.setSelectedItem(centroactividadTemp);
					} else {
						if(jComboBoxid_centro_actividadFK_IdCentroActividadAutoriPago!=null) {
							//jComboBoxid_centro_actividadFK_IdCentroActividadAutoriPago.setSelectedItem(centroactividadTemp);
							if(jComboBoxid_centro_actividadFK_IdCentroActividadAutoriPago.getItemCount()>0) {
								jComboBoxid_centro_actividadFK_IdCentroActividadAutoriPago.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCentroActividadForeignKeyDescripcion(Long idCentroActividadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CentroActividad  centroactividadTemp=null;

			for(CentroActividad centroactividadAux:centroactividadsForeignKey) {
				if(centroactividadAux.getId()!=null && centroactividadAux.getId().equals(idCentroActividadSeleccionado)) {
					centroactividadTemp=centroactividadAux;
					break;
				}
			}


			sDescripcion=CentroActividadConstantesFunciones.getCentroActividadDescripcion(centroactividadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCentroActividadForeignKeyGenerico(Long idCentroActividadSeleccionado,JComboBox jComboBoxid_centro_actividadAutoriPagoGenerico)throws Exception
	{
		try
		{
			CentroActividad  centroactividadTemp=null;

			for(CentroActividad centroactividadAux:centroactividadsForeignKey) {
				if(centroactividadAux.getId()!=null && centroactividadAux.getId().equals(idCentroActividadSeleccionado)) {
					centroactividadTemp=centroactividadAux;
					break;
				}
			}

			if(centroactividadTemp!=null) {
				jComboBoxid_centro_actividadAutoriPagoGenerico.setSelectedItem(centroactividadTemp);
			} else {
				if(jComboBoxid_centro_actividadAutoriPagoGenerico!=null && jComboBoxid_centro_actividadAutoriPagoGenerico.getItemCount()>0) {
					jComboBoxid_centro_actividadAutoriPagoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBancoForeignKey(Long idBancoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bancoTemp!=null) {

					if(this.autoripago!=null) {
						this.autoripago.setBanco(bancoTemp);
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.setSelectedItem(bancoTemp);
					}
				} else {
					//jComboBoxid_bancoAutoriPago.setSelectedItem(bancoTemp);
					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.getItemCount()>0) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBanco") || sFormularioTipoBusqueda.equals("Todos")){
					if(bancoTemp!=null && jComboBoxid_bancoFK_IdBancoAutoriPago!=null) {
						jComboBoxid_bancoFK_IdBancoAutoriPago.setSelectedItem(bancoTemp);
					} else {
						if(jComboBoxid_bancoFK_IdBancoAutoriPago!=null) {
							//jComboBoxid_bancoFK_IdBancoAutoriPago.setSelectedItem(bancoTemp);
							if(jComboBoxid_bancoFK_IdBancoAutoriPago.getItemCount()>0) {
								jComboBoxid_bancoFK_IdBancoAutoriPago.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBancoForeignKeyDescripcion(Long idBancoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}


			sDescripcion=BancoConstantesFunciones.getBancoDescripcion(bancoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBancoForeignKeyGenerico(Long idBancoSeleccionado,JComboBox jComboBoxid_bancoAutoriPagoGenerico)throws Exception
	{
		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}

			if(bancoTemp!=null) {
				jComboBoxid_bancoAutoriPagoGenerico.setSelectedItem(bancoTemp);
			} else {
				if(jComboBoxid_bancoAutoriPagoGenerico!=null && jComboBoxid_bancoAutoriPagoGenerico.getItemCount()>0) {
					jComboBoxid_bancoAutoriPagoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaBancoForeignKey(Long idCuentaBancoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaBanco  cuentabancoTemp=null;

			for(CuentaBanco cuentabancoAux:cuentabancosForeignKey) {
				if(cuentabancoAux.getId()!=null && cuentabancoAux.getId().equals(idCuentaBancoSeleccionado)) {
					cuentabancoTemp=cuentabancoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentabancoTemp!=null) {

					if(this.autoripago!=null) {
						this.autoripago.setCuentaBanco(cuentabancoTemp);
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.setSelectedItem(cuentabancoTemp);
					}
				} else {
					//jComboBoxid_cuenta_bancoAutoriPago.setSelectedItem(cuentabancoTemp);
					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.getItemCount()>0) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaBanco") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentabancoTemp!=null && jComboBoxid_cuenta_bancoFK_IdCuentaBancoAutoriPago!=null) {
						jComboBoxid_cuenta_bancoFK_IdCuentaBancoAutoriPago.setSelectedItem(cuentabancoTemp);
					} else {
						if(jComboBoxid_cuenta_bancoFK_IdCuentaBancoAutoriPago!=null) {
							//jComboBoxid_cuenta_bancoFK_IdCuentaBancoAutoriPago.setSelectedItem(cuentabancoTemp);
							if(jComboBoxid_cuenta_bancoFK_IdCuentaBancoAutoriPago.getItemCount()>0) {
								jComboBoxid_cuenta_bancoFK_IdCuentaBancoAutoriPago.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaBancoForeignKeyDescripcion(Long idCuentaBancoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaBanco  cuentabancoTemp=null;

			for(CuentaBanco cuentabancoAux:cuentabancosForeignKey) {
				if(cuentabancoAux.getId()!=null && cuentabancoAux.getId().equals(idCuentaBancoSeleccionado)) {
					cuentabancoTemp=cuentabancoAux;
					break;
				}
			}


			sDescripcion=CuentaBancoConstantesFunciones.getCuentaBancoDescripcion(cuentabancoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaBancoForeignKeyGenerico(Long idCuentaBancoSeleccionado,JComboBox jComboBoxid_cuenta_bancoAutoriPagoGenerico)throws Exception
	{
		try
		{
			CuentaBanco  cuentabancoTemp=null;

			for(CuentaBanco cuentabancoAux:cuentabancosForeignKey) {
				if(cuentabancoAux.getId()!=null && cuentabancoAux.getId().equals(idCuentaBancoSeleccionado)) {
					cuentabancoTemp=cuentabancoAux;
					break;
				}
			}

			if(cuentabancoTemp!=null) {
				jComboBoxid_cuenta_bancoAutoriPagoGenerico.setSelectedItem(cuentabancoTemp);
			} else {
				if(jComboBoxid_cuenta_bancoAutoriPagoGenerico!=null && jComboBoxid_cuenta_bancoAutoriPagoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_bancoAutoriPagoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualDetalleProveForeignKey(Long idDetalleProveSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			DetalleProve  detalleproveTemp=null;

			for(DetalleProve detalleproveAux:detalleprovesForeignKey) {
				if(detalleproveAux.getId()!=null && detalleproveAux.getId().equals(idDetalleProveSeleccionado)) {
					detalleproveTemp=detalleproveAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(detalleproveTemp!=null) {

					if(this.autoripago!=null) {
						this.autoripago.setDetalleProve(detalleproveTemp);
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.setSelectedItem(detalleproveTemp);
					}
				} else {
					//jComboBoxid_detalle_proveAutoriPago.setSelectedItem(detalleproveTemp);
					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.getItemCount()>0) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdDetalleProve") || sFormularioTipoBusqueda.equals("Todos")){
					if(detalleproveTemp!=null && jComboBoxid_detalle_proveFK_IdDetalleProveAutoriPago!=null) {
						jComboBoxid_detalle_proveFK_IdDetalleProveAutoriPago.setSelectedItem(detalleproveTemp);
					} else {
						if(jComboBoxid_detalle_proveFK_IdDetalleProveAutoriPago!=null) {
							//jComboBoxid_detalle_proveFK_IdDetalleProveAutoriPago.setSelectedItem(detalleproveTemp);
							if(jComboBoxid_detalle_proveFK_IdDetalleProveAutoriPago.getItemCount()>0) {
								jComboBoxid_detalle_proveFK_IdDetalleProveAutoriPago.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualDetalleProveForeignKeyDescripcion(Long idDetalleProveSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			DetalleProve  detalleproveTemp=null;

			for(DetalleProve detalleproveAux:detalleprovesForeignKey) {
				if(detalleproveAux.getId()!=null && detalleproveAux.getId().equals(idDetalleProveSeleccionado)) {
					detalleproveTemp=detalleproveAux;
					break;
				}
			}


			sDescripcion=DetalleProveConstantesFunciones.getDetalleProveDescripcion(detalleproveTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualDetalleProveForeignKeyGenerico(Long idDetalleProveSeleccionado,JComboBox jComboBoxid_detalle_proveAutoriPagoGenerico)throws Exception
	{
		try
		{
			DetalleProve  detalleproveTemp=null;

			for(DetalleProve detalleproveAux:detalleprovesForeignKey) {
				if(detalleproveAux.getId()!=null && detalleproveAux.getId().equals(idDetalleProveSeleccionado)) {
					detalleproveTemp=detalleproveAux;
					break;
				}
			}

			if(detalleproveTemp!=null) {
				jComboBoxid_detalle_proveAutoriPagoGenerico.setSelectedItem(detalleproveTemp);
			} else {
				if(jComboBoxid_detalle_proveAutoriPagoGenerico!=null && jComboBoxid_detalle_proveAutoriPagoGenerico.getItemCount()>0) {
					jComboBoxid_detalle_proveAutoriPagoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransaccionForeignKey(Long idTransaccionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transaccionTemp!=null) {

					if(this.autoripago!=null) {
						this.autoripago.setTransaccion(transaccionTemp);
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.setSelectedItem(transaccionTemp);
					}
				} else {
					//jComboBoxid_transaccionAutoriPago.setSelectedItem(transaccionTemp);
					if(this.jInternalFrameDetalleFormAutoriPago!=null) {
						if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.getItemCount()>0) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTransaccion") || sFormularioTipoBusqueda.equals("Todos")){
					if(transaccionTemp!=null && jComboBoxid_transaccionFK_IdTransaccionAutoriPago!=null) {
						jComboBoxid_transaccionFK_IdTransaccionAutoriPago.setSelectedItem(transaccionTemp);
					} else {
						if(jComboBoxid_transaccionFK_IdTransaccionAutoriPago!=null) {
							//jComboBoxid_transaccionFK_IdTransaccionAutoriPago.setSelectedItem(transaccionTemp);
							if(jComboBoxid_transaccionFK_IdTransaccionAutoriPago.getItemCount()>0) {
								jComboBoxid_transaccionFK_IdTransaccionAutoriPago.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransaccionForeignKeyDescripcion(Long idTransaccionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}


			sDescripcion=TransaccionConstantesFunciones.getTransaccionDescripcion(transaccionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransaccionForeignKeyGenerico(Long idTransaccionSeleccionado,JComboBox jComboBoxid_transaccionAutoriPagoGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}

			if(transaccionTemp!=null) {
				jComboBoxid_transaccionAutoriPagoGenerico.setSelectedItem(transaccionTemp);
			} else {
				if(jComboBoxid_transaccionAutoriPagoGenerico!=null && jComboBoxid_transaccionAutoriPagoGenerico.getItemCount()>0) {
					jComboBoxid_transaccionAutoriPagoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(AutoriPago autoripago,JComboBox jComboBoxid_empresaAutoriPagoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaAutoriPagoGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaAutoriPagoGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				autoripago.setid_empresa(empresaAux.getId());
				autoripago.setempresa_descripcion(AutoriPagoConstantesFunciones.getEmpresaDescripcion(empresaAux));
				autoripago.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(AutoriPago autoripago,JComboBox jComboBoxid_sucursalAutoriPagoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalAutoriPagoGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalAutoriPagoGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				autoripago.setid_sucursal(sucursalAux.getId());
				autoripago.setsucursal_descripcion(AutoriPagoConstantesFunciones.getSucursalDescripcion(sucursalAux));
				autoripago.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(AutoriPago autoripago,JComboBox jComboBoxid_ejercicioAutoriPagoGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioAutoriPagoGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioAutoriPagoGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				autoripago.setid_ejercicio(ejercicioAux.getId());
				autoripago.setejercicio_descripcion(AutoriPagoConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				autoripago.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(AutoriPago autoripago,JComboBox jComboBoxid_clienteAutoriPagoGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteAutoriPagoGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteAutoriPagoGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				autoripago.setid_cliente(clienteAux.getId());
				autoripago.setcliente_descripcion(AutoriPagoConstantesFunciones.getClienteDescripcion(clienteAux));
				autoripago.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFacturaForeignKey(AutoriPago autoripago,JComboBox jComboBoxid_facturaAutoriPagoGenerico)throws Exception
	{
		try
		{
			Factura  facturaAux=new Factura();

			if(jComboBoxid_facturaAutoriPagoGenerico==null) {
				facturaAux=(Factura)this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.getSelectedItem();
			} else {
				facturaAux=(Factura)jComboBoxid_facturaAutoriPagoGenerico.getSelectedItem();
			}

			if(facturaAux!=null && facturaAux.getId()!=null) {
				autoripago.setid_factura(facturaAux.getId());
				autoripago.setfactura_descripcion(AutoriPagoConstantesFunciones.getFacturaDescripcion(facturaAux));
				autoripago.setFactura(facturaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAsientoContableForeignKey(AutoriPago autoripago,JComboBox jComboBoxid_asiento_contableAutoriPagoGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableAux=new AsientoContable();

			if(jComboBoxid_asiento_contableAutoriPagoGenerico==null) {
				asientocontableAux=(AsientoContable)this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.getSelectedItem();
			} else {
				asientocontableAux=(AsientoContable)jComboBoxid_asiento_contableAutoriPagoGenerico.getSelectedItem();
			}

			if(asientocontableAux!=null && asientocontableAux.getId()!=null) {
				autoripago.setid_asiento_contable(asientocontableAux.getId());
				autoripago.setasientocontable_descripcion(AutoriPagoConstantesFunciones.getAsientoContableDescripcion(asientocontableAux));
				autoripago.setAsientoContable(asientocontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroCostoForeignKey(AutoriPago autoripago,JComboBox jComboBoxid_centro_costoAutoriPagoGenerico)throws Exception
	{
		try
		{
			CentroCosto  centrocostoAux=new CentroCosto();

			if(jComboBoxid_centro_costoAutoriPagoGenerico==null) {
				centrocostoAux=(CentroCosto)this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.getSelectedItem();
			} else {
				centrocostoAux=(CentroCosto)jComboBoxid_centro_costoAutoriPagoGenerico.getSelectedItem();
			}

			if(centrocostoAux!=null) {
				autoripago.setid_centro_costo(centrocostoAux.getId());
				autoripago.setcentrocosto_descripcion(AutoriPagoConstantesFunciones.getCentroCostoDescripcion(centrocostoAux));
				autoripago.setCentroCosto(centrocostoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCentroActividadForeignKey(AutoriPago autoripago,JComboBox jComboBoxid_centro_actividadAutoriPagoGenerico)throws Exception
	{
		try
		{
			CentroActividad  centroactividadAux=new CentroActividad();

			if(jComboBoxid_centro_actividadAutoriPagoGenerico==null) {
				centroactividadAux=(CentroActividad)this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.getSelectedItem();
			} else {
				centroactividadAux=(CentroActividad)jComboBoxid_centro_actividadAutoriPagoGenerico.getSelectedItem();
			}

			if(centroactividadAux!=null) {
				autoripago.setid_centro_actividad(centroactividadAux.getId());
				autoripago.setcentroactividad_descripcion(AutoriPagoConstantesFunciones.getCentroActividadDescripcion(centroactividadAux));
				autoripago.setCentroActividad(centroactividadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBancoForeignKey(AutoriPago autoripago,JComboBox jComboBoxid_bancoAutoriPagoGenerico)throws Exception
	{
		try
		{
			Banco  bancoAux=new Banco();

			if(jComboBoxid_bancoAutoriPagoGenerico==null) {
				bancoAux=(Banco)this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.getSelectedItem();
			} else {
				bancoAux=(Banco)jComboBoxid_bancoAutoriPagoGenerico.getSelectedItem();
			}

			if(bancoAux!=null && bancoAux.getId()!=null) {
				autoripago.setid_banco(bancoAux.getId());
				autoripago.setbanco_descripcion(AutoriPagoConstantesFunciones.getBancoDescripcion(bancoAux));
				autoripago.setBanco(bancoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaBancoForeignKey(AutoriPago autoripago,JComboBox jComboBoxid_cuenta_bancoAutoriPagoGenerico)throws Exception
	{
		try
		{
			CuentaBanco  cuentabancoAux=new CuentaBanco();

			if(jComboBoxid_cuenta_bancoAutoriPagoGenerico==null) {
				cuentabancoAux=(CuentaBanco)this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.getSelectedItem();
			} else {
				cuentabancoAux=(CuentaBanco)jComboBoxid_cuenta_bancoAutoriPagoGenerico.getSelectedItem();
			}

			if(cuentabancoAux!=null && cuentabancoAux.getId()!=null) {
				autoripago.setid_cuenta_banco(cuentabancoAux.getId());
				autoripago.setcuentabanco_descripcion(AutoriPagoConstantesFunciones.getCuentaBancoDescripcion(cuentabancoAux));
				autoripago.setCuentaBanco(cuentabancoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarDetalleProveForeignKey(AutoriPago autoripago,JComboBox jComboBoxid_detalle_proveAutoriPagoGenerico)throws Exception
	{
		try
		{
			DetalleProve  detalleproveAux=new DetalleProve();

			if(jComboBoxid_detalle_proveAutoriPagoGenerico==null) {
				detalleproveAux=(DetalleProve)this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.getSelectedItem();
			} else {
				detalleproveAux=(DetalleProve)jComboBoxid_detalle_proveAutoriPagoGenerico.getSelectedItem();
			}

			if(detalleproveAux!=null && detalleproveAux.getId()!=null) {
				autoripago.setid_detalle_prove(detalleproveAux.getId());
				autoripago.setdetalleprove_descripcion(AutoriPagoConstantesFunciones.getDetalleProveDescripcion(detalleproveAux));
				autoripago.setDetalleProve(detalleproveAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransaccionForeignKey(AutoriPago autoripago,JComboBox jComboBoxid_transaccionAutoriPagoGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionAux=new Transaccion();

			if(jComboBoxid_transaccionAutoriPagoGenerico==null) {
				transaccionAux=(Transaccion)this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.getSelectedItem();
			} else {
				transaccionAux=(Transaccion)jComboBoxid_transaccionAutoriPagoGenerico.getSelectedItem();
			}

			if(transaccionAux!=null && transaccionAux.getId()!=null) {
				autoripago.setid_transaccion(transaccionAux.getId());
				autoripago.settransaccion_descripcion(AutoriPagoConstantesFunciones.getTransaccionDescripcion(transaccionAux));
				autoripago.setTransaccion(transaccionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
					}

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
					}

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
					}

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
					}

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteAutoriPago.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteAutoriPago.addItem(cliente);
							}
						}

						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFacturasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFactura=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.addItem(factura);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
					}

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFactura") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_facturaFK_IdFacturaAutoriPago.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jComboBoxid_facturaFK_IdFacturaAutoriPago.addItem(factura);
							}
						}

						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAsientoContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAsientoContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.addItem(asientocontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
					}

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableAutoriPago.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jComboBoxid_asiento_contableFK_IdAsientoContableAutoriPago.addItem(asientocontable);
							}
						}

						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroCostosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroCosto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.addItem(centrocosto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
					}

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroCosto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoAutoriPago.removeAllItems();

							for(CentroCosto centrocosto:this.centrocostosForeignKey) {
								this.jComboBoxid_centro_costoFK_IdCentroCostoAutoriPago.addItem(centrocosto);
							}
						}

						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCentroActividadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCentroActividad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.removeAllItems();

							for(CentroActividad centroactividad:this.centroactividadsForeignKey) {
								this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.addItem(centroactividad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
					}

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCentroActividad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_centro_actividadFK_IdCentroActividadAutoriPago.removeAllItems();

							for(CentroActividad centroactividad:this.centroactividadsForeignKey) {
								this.jComboBoxid_centro_actividadFK_IdCentroActividadAutoriPago.addItem(centroactividad);
							}
						}

						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBancosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBanco=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.removeAllItems();

							for(Banco banco:this.bancosForeignKey) {
								this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.addItem(banco);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
					}

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBanco") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bancoFK_IdBancoAutoriPago.removeAllItems();

							for(Banco banco:this.bancosForeignKey) {
								this.jComboBoxid_bancoFK_IdBancoAutoriPago.addItem(banco);
							}
						}

						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaBancosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaBanco=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.removeAllItems();

							for(CuentaBanco cuentabanco:this.cuentabancosForeignKey) {
								this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.addItem(cuentabanco);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
					}

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaBanco") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_bancoFK_IdCuentaBancoAutoriPago.removeAllItems();

							for(CuentaBanco cuentabanco:this.cuentabancosForeignKey) {
								this.jComboBoxid_cuenta_bancoFK_IdCuentaBancoAutoriPago.addItem(cuentabanco);
							}
						}

						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameDetalleProvesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingDetalleProve=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.removeAllItems();

							for(DetalleProve detalleprove:this.detalleprovesForeignKey) {
								this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.addItem(detalleprove);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
					}

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdDetalleProve") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_detalle_proveFK_IdDetalleProveAutoriPago.removeAllItems();

							for(DetalleProve detalleprove:this.detalleprovesForeignKey) {
								this.jComboBoxid_detalle_proveFK_IdDetalleProveAutoriPago.addItem(detalleprove);
							}
						}

						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransaccionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransaccion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.removeAllItems();

							for(Transaccion transaccion:this.transaccionsForeignKey) {
								this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.addItem(transaccion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormAutoriPago!=null) { 
					}

					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransaccion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transaccionFK_IdTransaccionAutoriPago.removeAllItems();

							for(Transaccion transaccion:this.transaccionsForeignKey) {
								this.jComboBoxid_transaccionFK_IdTransaccionAutoriPago.addItem(transaccion);
							}
						}

						if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteAutoriPago.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteAutoriPago.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFacturaForeignKey(Factura factura,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.setSelectedItem(factura);
						}
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_facturaFK_IdFacturaAutoriPago.setSelectedItem(factura);
						} else {
							this.jComboBoxid_facturaFK_IdFacturaAutoriPago.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAsientoContableForeignKey(AsientoContable asientocontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.setSelectedItem(asientocontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableAutoriPago.setSelectedItem(asientocontable);
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableAutoriPago.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroCostoForeignKey(CentroCosto centrocosto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.setSelectedItem(centrocosto);
						}
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_costoFK_IdCentroCostoAutoriPago.setSelectedItem(centrocosto);
						} else {
							this.jComboBoxid_centro_costoFK_IdCentroCostoAutoriPago.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCentroActividadForeignKey(CentroActividad centroactividad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.setSelectedItem(centroactividad);
						}
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_centro_actividadFK_IdCentroActividadAutoriPago.setSelectedItem(centroactividad);
						} else {
							this.jComboBoxid_centro_actividadFK_IdCentroActividadAutoriPago.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBancoForeignKey(Banco banco,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.setSelectedItem(banco);
						}
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bancoFK_IdBancoAutoriPago.setSelectedItem(banco);
						} else {
							this.jComboBoxid_bancoFK_IdBancoAutoriPago.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaBancoForeignKey(CuentaBanco cuentabanco,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.setSelectedItem(cuentabanco);
						}
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_bancoFK_IdCuentaBancoAutoriPago.setSelectedItem(cuentabanco);
						} else {
							this.jComboBoxid_cuenta_bancoFK_IdCuentaBancoAutoriPago.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameDetalleProveForeignKey(DetalleProve detalleprove,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.setSelectedItem(detalleprove);
						}
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_detalle_proveFK_IdDetalleProveAutoriPago.setSelectedItem(detalleprove);
						} else {
							this.jComboBoxid_detalle_proveFK_IdDetalleProveAutoriPago.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransaccionForeignKey(Transaccion transaccion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.setSelectedItem(transaccion);
						}
					} else {
						if(this.jInternalFrameDetalleFormAutoriPago!=null) {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_transaccionFK_IdTransaccionAutoriPago.setSelectedItem(transaccion);
						} else {
							this.jComboBoxid_transaccionFK_IdTransaccionAutoriPago.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesAutoriPago() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			AutoriPagoConstantesFunciones.refrescarForeignKeysDescripcionesAutoriPago(this.autoripagoLogic.getAutoriPagos());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			AutoriPagoConstantesFunciones.refrescarForeignKeysDescripcionesAutoriPago(this.autoripagos);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(Factura.class));
		classes.add(new Classe(AsientoContable.class));
		classes.add(new Classe(CentroCosto.class));
		classes.add(new Classe(CentroActividad.class));
		classes.add(new Classe(Banco.class));
		classes.add(new Classe(CuentaBanco.class));
		classes.add(new Classe(DetalleProve.class));
		classes.add(new Classe(Transaccion.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//autoripagoLogic.setAutoriPagos(this.autoripagos);
			autoripagoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public AutoriPagoParameterReturnGeneral getAutoriPagoParameterGeneral() {
		return this.autoripagoParameterGeneral;
	}
	
	public void setAutoriPagoParameterGeneral(AutoriPagoParameterReturnGeneral autoripagoParameterGeneral) {
		this.autoripagoParameterGeneral = autoripagoParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoAutoriPago() {
		return isPermisoTodoAutoriPago;
	}

	public void setIsPermisoTodoAutoriPago(Boolean isPermisoTodoAutoriPago) {
		this.isPermisoTodoAutoriPago = isPermisoTodoAutoriPago;
	}

	public Boolean getIsPermisoNuevoAutoriPago() {
		return isPermisoNuevoAutoriPago;
	}

	public void setIsPermisoNuevoAutoriPago(Boolean isPermisoNuevoAutoriPago) {
		this.isPermisoNuevoAutoriPago = isPermisoNuevoAutoriPago;
	}

	public Boolean getIsPermisoActualizarAutoriPago() {
		return isPermisoActualizarAutoriPago;
	}

	public void setIsPermisoActualizarAutoriPago(Boolean isPermisoActualizarAutoriPago) {
		this.isPermisoActualizarAutoriPago = isPermisoActualizarAutoriPago;
	}

	public Boolean getIsPermisoEliminarAutoriPago() {
		return isPermisoEliminarAutoriPago;
	}

	public void setIsPermisoEliminarAutoriPago(Boolean isPermisoEliminarAutoriPago) {
		this.isPermisoEliminarAutoriPago = isPermisoEliminarAutoriPago;
	}

	public Boolean getIsPermisoGuardarCambiosAutoriPago() {
		return isPermisoGuardarCambiosAutoriPago;
	}

	public void setIsPermisoGuardarCambiosAutoriPago(Boolean isPermisoGuardarCambiosAutoriPago) {
		this.isPermisoGuardarCambiosAutoriPago = isPermisoGuardarCambiosAutoriPago;
	}
	
	public Boolean getIsPermisoConsultaAutoriPago() {
		return isPermisoConsultaAutoriPago;
	}

	public void setIsPermisoConsultaAutoriPago(Boolean isPermisoConsultaAutoriPago) {
		this.isPermisoConsultaAutoriPago = isPermisoConsultaAutoriPago;
	}

	public Boolean getIsPermisoBusquedaAutoriPago() {
		return isPermisoBusquedaAutoriPago;
	}

	public void setIsPermisoBusquedaAutoriPago(Boolean isPermisoBusquedaAutoriPago) {
		this.isPermisoBusquedaAutoriPago = isPermisoBusquedaAutoriPago;
	}

	public Boolean getIsPermisoReporteAutoriPago() {
		return isPermisoReporteAutoriPago;
	}

	public void setIsPermisoReporteAutoriPago(Boolean isPermisoReporteAutoriPago) {
		this.isPermisoReporteAutoriPago = isPermisoReporteAutoriPago;
	}
	
	public Boolean getIsPermisoPaginacionMedioAutoriPago() {
		return isPermisoPaginacionMedioAutoriPago;
	}

	public void setIsPermisoPaginacionMedioAutoriPago(Boolean isPermisoPaginacionMedioAutoriPago) {
		this.isPermisoPaginacionMedioAutoriPago = isPermisoPaginacionMedioAutoriPago;
	}
	
	public Boolean getIsPermisoPaginacionTodoAutoriPago() {
		return isPermisoPaginacionTodoAutoriPago;
	}

	public void setIsPermisoPaginacionTodoAutoriPago(Boolean isPermisoPaginacionTodoAutoriPago) {
		this.isPermisoPaginacionTodoAutoriPago = isPermisoPaginacionTodoAutoriPago;
	}
	
	public Boolean getIsPermisoPaginacionAltoAutoriPago() {
		return isPermisoPaginacionAltoAutoriPago;
	}

	public void setIsPermisoPaginacionAltoAutoriPago(Boolean isPermisoPaginacionAltoAutoriPago) {
		this.isPermisoPaginacionAltoAutoriPago = isPermisoPaginacionAltoAutoriPago;
	}
	
	public Boolean getIsPermisoCopiarAutoriPago() {
		return isPermisoCopiarAutoriPago;
	}

	public void setIsPermisoCopiarAutoriPago(Boolean isPermisoCopiarAutoriPago) {
		this.isPermisoCopiarAutoriPago = isPermisoCopiarAutoriPago;
	}
	
	public Boolean getIsPermisoVerFormAutoriPago() {
		return isPermisoVerFormAutoriPago;
	}

	public void setIsPermisoVerFormAutoriPago(Boolean isPermisoVerFormAutoriPago) {
		this.isPermisoVerFormAutoriPago = isPermisoVerFormAutoriPago;
	}
	
	public Boolean getIsPermisoDuplicarAutoriPago() {
		return isPermisoDuplicarAutoriPago;
	}

	public void setIsPermisoDuplicarAutoriPago(Boolean isPermisoDuplicarAutoriPago) {
		this.isPermisoDuplicarAutoriPago = isPermisoDuplicarAutoriPago;
	}
	
	public Boolean getIsPermisoOrdenAutoriPago() {
		return isPermisoOrdenAutoriPago;
	}

	public void setIsPermisoOrdenAutoriPago(Boolean isPermisoOrdenAutoriPago) {
		this.isPermisoOrdenAutoriPago = isPermisoOrdenAutoriPago;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoAutoriPago() {
		return isVisibilidadCeldaNuevoAutoriPago;
	}

	public void setIsVisibilidadCeldaNuevoAutoriPago(Boolean isVisibilidadCeldaNuevoAutoriPago) {
		this.isVisibilidadCeldaNuevoAutoriPago = isVisibilidadCeldaNuevoAutoriPago;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarAutoriPago() {
		return isVisibilidadCeldaDuplicarAutoriPago;
	}

	public void setIsVisibilidadCeldaDuplicarAutoriPago(Boolean isVisibilidadCeldaDuplicarAutoriPago) {
		this.isVisibilidadCeldaDuplicarAutoriPago = isVisibilidadCeldaDuplicarAutoriPago;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarAutoriPago() {
		return isVisibilidadCeldaCopiarAutoriPago;
	}

	public void setIsVisibilidadCeldaCopiarAutoriPago(Boolean isVisibilidadCeldaCopiarAutoriPago) {
		this.isVisibilidadCeldaCopiarAutoriPago = isVisibilidadCeldaCopiarAutoriPago;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormAutoriPago() {
		return isVisibilidadCeldaVerFormAutoriPago;
	}

	public void setIsVisibilidadCeldaVerFormAutoriPago(Boolean isVisibilidadCeldaVerFormAutoriPago) {
		this.isVisibilidadCeldaVerFormAutoriPago = isVisibilidadCeldaVerFormAutoriPago;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenAutoriPago() {
		return isVisibilidadCeldaOrdenAutoriPago;
	}

	public void setIsVisibilidadCeldaOrdenAutoriPago(Boolean isVisibilidadCeldaOrdenAutoriPago) {
		this.isVisibilidadCeldaOrdenAutoriPago = isVisibilidadCeldaOrdenAutoriPago;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesAutoriPago() {
		return isVisibilidadCeldaNuevoRelacionesAutoriPago;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesAutoriPago(Boolean isVisibilidadCeldaNuevoRelacionesAutoriPago) {
		this.isVisibilidadCeldaNuevoRelacionesAutoriPago = isVisibilidadCeldaNuevoRelacionesAutoriPago;
	}
	
	public Boolean getIsVisibilidadCeldaModificarAutoriPago() {
		return isVisibilidadCeldaModificarAutoriPago;
	}

	public void setIsVisibilidadCeldaModificarAutoriPago(Boolean isVisibilidadCeldaModificarAutoriPago) {
		this.isVisibilidadCeldaModificarAutoriPago = isVisibilidadCeldaModificarAutoriPago;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarAutoriPago() {
		return isVisibilidadCeldaActualizarAutoriPago;
	}

	public void setIsVisibilidadCeldaActualizarAutoriPago(Boolean isVisibilidadCeldaActualizarAutoriPago) {
		this.isVisibilidadCeldaActualizarAutoriPago = isVisibilidadCeldaActualizarAutoriPago;
	}

	public Boolean getIsVisibilidadCeldaEliminarAutoriPago() {
		return isVisibilidadCeldaEliminarAutoriPago;
	}

	public void setIsVisibilidadCeldaEliminarAutoriPago(Boolean isVisibilidadCeldaEliminarAutoriPago) {
		this.isVisibilidadCeldaEliminarAutoriPago = isVisibilidadCeldaEliminarAutoriPago;
	}

	public Boolean getIsVisibilidadCeldaCancelarAutoriPago() {
		return isVisibilidadCeldaCancelarAutoriPago;
	}

	public void setIsVisibilidadCeldaCancelarAutoriPago(Boolean isVisibilidadCeldaCancelarAutoriPago) {
		this.isVisibilidadCeldaCancelarAutoriPago = isVisibilidadCeldaCancelarAutoriPago;
	}

	public Boolean getIsVisibilidadCeldaGuardarAutoriPago() {
		return isVisibilidadCeldaGuardarAutoriPago;
	}

	public void setIsVisibilidadCeldaGuardarAutoriPago(Boolean isVisibilidadCeldaGuardarAutoriPago) {
		this.isVisibilidadCeldaGuardarAutoriPago = isVisibilidadCeldaGuardarAutoriPago;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosAutoriPago() {
		return isVisibilidadCeldaGuardarCambiosAutoriPago;
	}

	public void setIsVisibilidadCeldaGuardarCambiosAutoriPago(Boolean isVisibilidadCeldaGuardarCambiosAutoriPago) {
		this.isVisibilidadCeldaGuardarCambiosAutoriPago = isVisibilidadCeldaGuardarCambiosAutoriPago;
	}
		
	public AutoriPagoSessionBean getautoripagoSessionBean() {
		return this.autoripagoSessionBean;
	}
	
	public void setautoripagoSessionBean(AutoriPagoSessionBean autoripagoSessionBean) {
		this.autoripagoSessionBean=autoripagoSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAsientoContable() {
		return this.isVisibilidadFK_IdAsientoContable;
	}

	public void setisVisibilidadFK_IdAsientoContable(Boolean isVisibilidadFK_IdAsientoContable) {
		this.isVisibilidadFK_IdAsientoContable=isVisibilidadFK_IdAsientoContable;
	}

	public Boolean getisVisibilidadFK_IdBanco() {
		return this.isVisibilidadFK_IdBanco;
	}

	public void setisVisibilidadFK_IdBanco(Boolean isVisibilidadFK_IdBanco) {
		this.isVisibilidadFK_IdBanco=isVisibilidadFK_IdBanco;
	}

	public Boolean getisVisibilidadFK_IdCentroActividad() {
		return this.isVisibilidadFK_IdCentroActividad;
	}

	public void setisVisibilidadFK_IdCentroActividad(Boolean isVisibilidadFK_IdCentroActividad) {
		this.isVisibilidadFK_IdCentroActividad=isVisibilidadFK_IdCentroActividad;
	}

	public Boolean getisVisibilidadFK_IdCentroCosto() {
		return this.isVisibilidadFK_IdCentroCosto;
	}

	public void setisVisibilidadFK_IdCentroCosto(Boolean isVisibilidadFK_IdCentroCosto) {
		this.isVisibilidadFK_IdCentroCosto=isVisibilidadFK_IdCentroCosto;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdCuentaBanco() {
		return this.isVisibilidadFK_IdCuentaBanco;
	}

	public void setisVisibilidadFK_IdCuentaBanco(Boolean isVisibilidadFK_IdCuentaBanco) {
		this.isVisibilidadFK_IdCuentaBanco=isVisibilidadFK_IdCuentaBanco;
	}

	public Boolean getisVisibilidadFK_IdDetalleProve() {
		return this.isVisibilidadFK_IdDetalleProve;
	}

	public void setisVisibilidadFK_IdDetalleProve(Boolean isVisibilidadFK_IdDetalleProve) {
		this.isVisibilidadFK_IdDetalleProve=isVisibilidadFK_IdDetalleProve;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdFactura() {
		return this.isVisibilidadFK_IdFactura;
	}

	public void setisVisibilidadFK_IdFactura(Boolean isVisibilidadFK_IdFactura) {
		this.isVisibilidadFK_IdFactura=isVisibilidadFK_IdFactura;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTransaccion() {
		return this.isVisibilidadFK_IdTransaccion;
	}

	public void setisVisibilidadFK_IdTransaccion(Boolean isVisibilidadFK_IdTransaccion) {
		this.isVisibilidadFK_IdTransaccion=isVisibilidadFK_IdTransaccion;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysAutoriPago(AutoriPago autoripago)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(autoripago,null);
				this.setActualParaGuardarSucursalForeignKey(autoripago,null);
				this.setActualParaGuardarEjercicioForeignKey(autoripago,null);
				this.setActualParaGuardarClienteForeignKey(autoripago,null);
				this.setActualParaGuardarFacturaForeignKey(autoripago,null);
				this.setActualParaGuardarAsientoContableForeignKey(autoripago,null);
				this.setActualParaGuardarCentroCostoForeignKey(autoripago,null);
				this.setActualParaGuardarCentroActividadForeignKey(autoripago,null);
				this.setActualParaGuardarBancoForeignKey(autoripago,null);
				this.setActualParaGuardarCuentaBancoForeignKey(autoripago,null);
				this.setActualParaGuardarDetalleProveForeignKey(autoripago,null);
				this.setActualParaGuardarTransaccionForeignKey(autoripago,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(AutoriPago autoripago,AutoriPago autoripagoAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalAutoriPago(autoripago);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		autoripagoAux.setId(autoripago.getId());
		autoripagoAux.setVersionRow(autoripago.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessAutoriPago();
		
			int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(AutoriPagoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = autoripagoValidator.getInvalidValues(this.autoripago);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			autoripagoLogic.setDatosCliente(datosCliente);
			autoripagoLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				autoripagoAux=new  AutoriPago();
				
				autoripagoAux.setIsNew(true);
				autoripagoAux.setIsChanged(true);
				
				autoripagoAux.setAutoriPagoOriginal(this.autoripago);
				
				autoripagoAux.setId(this.autoripago.getId());	
				autoripagoAux.setVersionRow(this.autoripago.getVersionRow());	
				autoripagoAux.setid_empresa(this.autoripago.getid_empresa());	
				autoripagoAux.setid_sucursal(this.autoripago.getid_sucursal());	
				autoripagoAux.setid_ejercicio(this.autoripago.getid_ejercicio());	
				autoripagoAux.setid_cliente(this.autoripago.getid_cliente());	
				autoripagoAux.setid_factura(this.autoripago.getid_factura());	
				autoripagoAux.setid_asiento_contable(this.autoripago.getid_asiento_contable());	
				autoripagoAux.setid_centro_costo(this.autoripago.getid_centro_costo());	
				autoripagoAux.setid_centro_actividad(this.autoripago.getid_centro_actividad());	
				autoripagoAux.setid_banco(this.autoripago.getid_banco());	
				autoripagoAux.setid_cuenta_banco(this.autoripago.getid_cuenta_banco());	
				autoripagoAux.setid_detalle_prove(this.autoripago.getid_detalle_prove());	
				autoripagoAux.setid_transaccion(this.autoripago.getid_transaccion());	
				autoripagoAux.setfecha_emision(this.autoripago.getfecha_emision());	
				autoripagoAux.setfecha_vencimiento(this.autoripago.getfecha_vencimiento());	
				autoripagoAux.setvalor_pago(this.autoripago.getvalor_pago());	
				autoripagoAux.setvalor_cancelado(this.autoripago.getvalor_cancelado());	
				autoripagoAux.setnumero_factura(this.autoripago.getnumero_factura());	
				autoripagoAux.setdetalle_factura(this.autoripago.getdetalle_factura());	
				autoripagoAux.setfecha_corte(this.autoripago.getfecha_corte());	
				autoripagoAux.setdescripcion(this.autoripago.getdescripcion());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.autoripagoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.autoripagoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(autoripagoAux,autoripagoLogic.getAutoriPagos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(autoripagoAux,autoripagos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.autoripagoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.autoripagoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.saveAutoriPagos();//WithConnection
						//autoripagoLogic.getSetVersionRowAutoriPagos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.autoripago,autoripagoAux);
					
					this.refrescarForeignKeysDescripcionesAutoriPago();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.autoripagoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.autoripagoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								autoripagoLogic.saveAutoriPagoRelaciones(autoripagoAux);//WithConnection
								//autoripagoLogic.getSetVersionRowAutoriPagos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.autoripago,autoripagoAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.autoripagoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.autoripagoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(autoripagoAux,autoripagoLogic.getAutoriPagos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(autoripagoAux,autoripagos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.autoripago,autoripagoAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				autoripagoAux=new  AutoriPago();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.autoripagoSessionBean.getEsGuardarRelacionado() 
					|| (this.autoripagoSessionBean.getEsGuardarRelacionado() && this.autoripago.getId()>=0)) {
						
					autoripagoAux.setIsNew(false);
				}
				
				autoripagoAux.setIsDeleted(false);
			
				autoripagoAux.setId(this.autoripago.getId());	
				autoripagoAux.setVersionRow(this.autoripago.getVersionRow());	
				autoripagoAux.setid_empresa(this.autoripago.getid_empresa());	
				autoripagoAux.setid_sucursal(this.autoripago.getid_sucursal());	
				autoripagoAux.setid_ejercicio(this.autoripago.getid_ejercicio());	
				autoripagoAux.setid_cliente(this.autoripago.getid_cliente());	
				autoripagoAux.setid_factura(this.autoripago.getid_factura());	
				autoripagoAux.setid_asiento_contable(this.autoripago.getid_asiento_contable());	
				autoripagoAux.setid_centro_costo(this.autoripago.getid_centro_costo());	
				autoripagoAux.setid_centro_actividad(this.autoripago.getid_centro_actividad());	
				autoripagoAux.setid_banco(this.autoripago.getid_banco());	
				autoripagoAux.setid_cuenta_banco(this.autoripago.getid_cuenta_banco());	
				autoripagoAux.setid_detalle_prove(this.autoripago.getid_detalle_prove());	
				autoripagoAux.setid_transaccion(this.autoripago.getid_transaccion());	
				autoripagoAux.setfecha_emision(this.autoripago.getfecha_emision());	
				autoripagoAux.setfecha_vencimiento(this.autoripago.getfecha_vencimiento());	
				autoripagoAux.setvalor_pago(this.autoripago.getvalor_pago());	
				autoripagoAux.setvalor_cancelado(this.autoripago.getvalor_cancelado());	
				autoripagoAux.setnumero_factura(this.autoripago.getnumero_factura());	
				autoripagoAux.setdetalle_factura(this.autoripago.getdetalle_factura());	
				autoripagoAux.setfecha_corte(this.autoripago.getfecha_corte());	
				autoripagoAux.setdescripcion(this.autoripago.getdescripcion());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(autoripagoAux,autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(autoripagoAux,autoripagos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.autoripagoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.autoripagoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.saveAutoriPagos();//WithConnection
						//autoripagoLogic.getSetVersionRowAutoriPagos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.autoripago,autoripagoAux);
					
					this.refrescarForeignKeysDescripcionesAutoriPago();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.autoripagoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.autoripagoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								autoripagoLogic.saveAutoriPagoRelaciones(autoripagoAux);//WithConnection
								//autoripagoLogic.getSetVersionRowAutoriPagos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.autoripago,autoripagoAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.autoripagoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.autoripagoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(autoripagoAux,autoripagoLogic.getAutoriPagos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(autoripagoAux,autoripagos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.autoripago,autoripagoAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				autoripagoAux=new  AutoriPago();
				
				autoripagoAux.setIsNew(false);
				autoripagoAux.setIsChanged(false);
				
				autoripagoAux.setIsDeleted(true);
				
				autoripagoAux.setId(this.autoripago.getId());	
				autoripagoAux.setVersionRow(this.autoripago.getVersionRow());	
				autoripagoAux.setid_empresa(this.autoripago.getid_empresa());	
				autoripagoAux.setid_sucursal(this.autoripago.getid_sucursal());	
				autoripagoAux.setid_ejercicio(this.autoripago.getid_ejercicio());	
				autoripagoAux.setid_cliente(this.autoripago.getid_cliente());	
				autoripagoAux.setid_factura(this.autoripago.getid_factura());	
				autoripagoAux.setid_asiento_contable(this.autoripago.getid_asiento_contable());	
				autoripagoAux.setid_centro_costo(this.autoripago.getid_centro_costo());	
				autoripagoAux.setid_centro_actividad(this.autoripago.getid_centro_actividad());	
				autoripagoAux.setid_banco(this.autoripago.getid_banco());	
				autoripagoAux.setid_cuenta_banco(this.autoripago.getid_cuenta_banco());	
				autoripagoAux.setid_detalle_prove(this.autoripago.getid_detalle_prove());	
				autoripagoAux.setid_transaccion(this.autoripago.getid_transaccion());	
				autoripagoAux.setfecha_emision(this.autoripago.getfecha_emision());	
				autoripagoAux.setfecha_vencimiento(this.autoripago.getfecha_vencimiento());	
				autoripagoAux.setvalor_pago(this.autoripago.getvalor_pago());	
				autoripagoAux.setvalor_cancelado(this.autoripago.getvalor_cancelado());	
				autoripagoAux.setnumero_factura(this.autoripago.getnumero_factura());	
				autoripagoAux.setdetalle_factura(this.autoripago.getdetalle_factura());	
				autoripagoAux.setfecha_corte(this.autoripago.getfecha_corte());	
				autoripagoAux.setdescripcion(this.autoripago.getdescripcion());	
				
				if(this.autoripagoSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.autoripagoAux.getId()>=0) {	
						this.autoripagosEliminados.add(autoripagoAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(autoripagoAux,autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(autoripagoAux,autoripagos);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.autoripagoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.autoripagoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.saveAutoriPagos();//WithConnection
						//autoripagoLogic.getSetVersionRowAutoriPagos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.autoripagoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.autoripagoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								autoripagoLogic.saveAutoriPagoRelaciones(autoripagoAux);//WithConnection
								//autoripagoLogic.getSetVersionRowAutoriPagos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.autoripagoSessionBean.getEstaModoGuardarRelaciones() 
								|| this.autoripagoSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(autoripagoAux,autoripagoLogic.getAutoriPagos());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(autoripagoAux,autoripagos);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getAutoriPagos().addAll(this.autoripagosEliminados);
					
					autoripagoLogic.saveAutoriPagos();//WithConnection
					//autoripagoLogic.getSetVersionRowAutoriPagos();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesAutoriPago();
				
				this.autoripagosEliminados= new ArrayList<AutoriPago>();		
			}
			
			if(this.autoripagoSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.autoripagoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Autori Pago GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Autori Pago",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.autoripago=autoripagoAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessAutoriPago();
      	}
		
	}	
	
	public void actualizarRelaciones(AutoriPago autoripagoLocal) throws Exception {
		
		if(this.autoripagoSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(AutoriPago autoripagoLocal) throws Exception {	
		if(this.autoripagoSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				autoripagoLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				autoripagoLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				autoripagoLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				autoripagoLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FacturaDetalleFormJInternalFrame.class)) {
				FacturaBeanSwingJInternalFrame facturaBeanSwingJInternalFrameLocal=(FacturaBeanSwingJInternalFrame) ((FacturaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				facturaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFactura(facturaBeanSwingJInternalFrameLocal.getfactura(),true);
				facturaBeanSwingJInternalFrameLocal.actualizarLista(facturaBeanSwingJInternalFrameLocal.factura,this.facturasForeignKey);

				facturaBeanSwingJInternalFrameLocal.actualizarRelaciones(facturaBeanSwingJInternalFrameLocal.factura);

				autoripagoLocal.setFactura(facturaBeanSwingJInternalFrameLocal.factura);

				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey("Formulario");
				this.setActualFacturaForeignKey(facturaBeanSwingJInternalFrameLocal.factura.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AsientoContableDetalleFormJInternalFrame.class)) {
				AsientoContableBeanSwingJInternalFrame asientocontableBeanSwingJInternalFrameLocal=(AsientoContableBeanSwingJInternalFrame) ((AsientoContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				asientocontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAsientoContable(asientocontableBeanSwingJInternalFrameLocal.getasientocontable(),true);
				asientocontableBeanSwingJInternalFrameLocal.actualizarLista(asientocontableBeanSwingJInternalFrameLocal.asientocontable,this.asientocontablesForeignKey);

				asientocontableBeanSwingJInternalFrameLocal.actualizarRelaciones(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				autoripagoLocal.setAsientoContable(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey("Formulario");
				this.setActualAsientoContableForeignKey(asientocontableBeanSwingJInternalFrameLocal.asientocontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroCostoDetalleFormJInternalFrame.class)) {
				CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrameLocal=(CentroCostoBeanSwingJInternalFrame) ((CentroCostoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centrocostoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroCosto(centrocostoBeanSwingJInternalFrameLocal.getcentrocosto(),true);
				centrocostoBeanSwingJInternalFrameLocal.actualizarLista(centrocostoBeanSwingJInternalFrameLocal.centrocosto,this.centrocostosForeignKey);

				centrocostoBeanSwingJInternalFrameLocal.actualizarRelaciones(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				autoripagoLocal.setCentroCosto(centrocostoBeanSwingJInternalFrameLocal.centrocosto);

				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey("Formulario");
				this.setActualCentroCostoForeignKey(centrocostoBeanSwingJInternalFrameLocal.centrocosto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CentroActividadDetalleFormJInternalFrame.class)) {
				CentroActividadBeanSwingJInternalFrame centroactividadBeanSwingJInternalFrameLocal=(CentroActividadBeanSwingJInternalFrame) ((CentroActividadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				centroactividadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCentroActividad(centroactividadBeanSwingJInternalFrameLocal.getcentroactividad(),true);
				centroactividadBeanSwingJInternalFrameLocal.actualizarLista(centroactividadBeanSwingJInternalFrameLocal.centroactividad,this.centroactividadsForeignKey);

				centroactividadBeanSwingJInternalFrameLocal.actualizarRelaciones(centroactividadBeanSwingJInternalFrameLocal.centroactividad);

				autoripagoLocal.setCentroActividad(centroactividadBeanSwingJInternalFrameLocal.centroactividad);

				this.addItemDefectoCombosForeignKeyCentroActividad();
				this.cargarCombosFrameCentroActividadsForeignKey("Formulario");
				this.setActualCentroActividadForeignKey(centroactividadBeanSwingJInternalFrameLocal.centroactividad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BancoDetalleFormJInternalFrame.class)) {
				BancoBeanSwingJInternalFrame bancoBeanSwingJInternalFrameLocal=(BancoBeanSwingJInternalFrame) ((BancoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bancoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBanco(bancoBeanSwingJInternalFrameLocal.getbanco(),true);
				bancoBeanSwingJInternalFrameLocal.actualizarLista(bancoBeanSwingJInternalFrameLocal.banco,this.bancosForeignKey);

				bancoBeanSwingJInternalFrameLocal.actualizarRelaciones(bancoBeanSwingJInternalFrameLocal.banco);

				autoripagoLocal.setBanco(bancoBeanSwingJInternalFrameLocal.banco);

				this.addItemDefectoCombosForeignKeyBanco();
				this.cargarCombosFrameBancosForeignKey("Formulario");
				this.setActualBancoForeignKey(bancoBeanSwingJInternalFrameLocal.banco.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaBancoDetalleFormJInternalFrame.class)) {
				CuentaBancoBeanSwingJInternalFrame cuentabancoBeanSwingJInternalFrameLocal=(CuentaBancoBeanSwingJInternalFrame) ((CuentaBancoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentabancoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaBanco(cuentabancoBeanSwingJInternalFrameLocal.getcuentabanco(),true);
				cuentabancoBeanSwingJInternalFrameLocal.actualizarLista(cuentabancoBeanSwingJInternalFrameLocal.cuentabanco,this.cuentabancosForeignKey);

				cuentabancoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentabancoBeanSwingJInternalFrameLocal.cuentabanco);

				autoripagoLocal.setCuentaBanco(cuentabancoBeanSwingJInternalFrameLocal.cuentabanco);

				this.addItemDefectoCombosForeignKeyCuentaBanco();
				this.cargarCombosFrameCuentaBancosForeignKey("Formulario");
				this.setActualCuentaBancoForeignKey(cuentabancoBeanSwingJInternalFrameLocal.cuentabanco.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(DetalleProveDetalleFormJInternalFrame.class)) {
				DetalleProveBeanSwingJInternalFrame detalleproveBeanSwingJInternalFrameLocal=(DetalleProveBeanSwingJInternalFrame) ((DetalleProveDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				detalleproveBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoDetalleProve(detalleproveBeanSwingJInternalFrameLocal.getdetalleprove(),true);
				detalleproveBeanSwingJInternalFrameLocal.actualizarLista(detalleproveBeanSwingJInternalFrameLocal.detalleprove,this.detalleprovesForeignKey);

				detalleproveBeanSwingJInternalFrameLocal.actualizarRelaciones(detalleproveBeanSwingJInternalFrameLocal.detalleprove);

				autoripagoLocal.setDetalleProve(detalleproveBeanSwingJInternalFrameLocal.detalleprove);

				this.addItemDefectoCombosForeignKeyDetalleProve();
				this.cargarCombosFrameDetalleProvesForeignKey("Formulario");
				this.setActualDetalleProveForeignKey(detalleproveBeanSwingJInternalFrameLocal.detalleprove.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransaccionDetalleFormJInternalFrame.class)) {
				TransaccionBeanSwingJInternalFrame transaccionBeanSwingJInternalFrameLocal=(TransaccionBeanSwingJInternalFrame) ((TransaccionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transaccionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransaccion(transaccionBeanSwingJInternalFrameLocal.gettransaccion(),true);
				transaccionBeanSwingJInternalFrameLocal.actualizarLista(transaccionBeanSwingJInternalFrameLocal.transaccion,this.transaccionsForeignKey);

				transaccionBeanSwingJInternalFrameLocal.actualizarRelaciones(transaccionBeanSwingJInternalFrameLocal.transaccion);

				autoripagoLocal.setTransaccion(transaccionBeanSwingJInternalFrameLocal.transaccion);

				this.addItemDefectoCombosForeignKeyTransaccion();
				this.cargarCombosFrameTransaccionsForeignKey("Formulario");
				this.setActualTransaccionForeignKey(transaccionBeanSwingJInternalFrameLocal.transaccion.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarAutoriPagoActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = autoripagoValidator.getInvalidValues(this.autoripago);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(AutoriPago autoripago,List<AutoriPago> autoripagos) throws Exception {
		try	{		
			AutoriPagoConstantesFunciones.actualizarLista(autoripago,autoripagos,this.autoripagoSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(AutoriPago autoripago,List<AutoriPago> autoripagos) throws Exception {
		try	{			
			AutoriPagoConstantesFunciones.actualizarSelectedLista(autoripago,autoripagos);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<AutoriPago> autoripagosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				autoripagosLocal=this.autoripagoLogic.getAutoriPagos();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				autoripagosLocal=this.autoripagos;
			}
			//ARCHITECTURE
		
			for(AutoriPago autoripagoLocal:autoripagosLocal) {
				if(this.permiteMantenimiento(autoripagoLocal) && autoripagoLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+AutoriPagoConstantesFunciones.getAutoriPagoLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelid_empresaAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelid_sucursalAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelid_ejercicioAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelid_clienteAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.IDFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelid_facturaAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.IDASIENTOCONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelid_asiento_contableAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.IDCENTROCOSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelid_centro_costoAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.IDCENTROACTIVIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelid_centro_actividadAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.IDBANCO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelid_bancoAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.IDCUENTABANCO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelid_cuenta_bancoAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.IDDETALLEPROVE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelid_detalle_proveAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.IDTRANSACCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelid_transaccionAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.FECHAEMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelfecha_emisionAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.FECHAVENCIMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelfecha_vencimientoAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.VALORPAGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelvalor_pagoAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.VALORCANCELADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelvalor_canceladoAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.NUMEROFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelnumero_facturaAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.DETALLEFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabeldetalle_facturaAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.FECHACORTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelfecha_corteAutoriPago,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(AutoriPagoConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabeldescripcionAutoriPago,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelid_empresaAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelid_sucursalAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelid_ejercicioAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelid_clienteAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelid_facturaAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelid_asiento_contableAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelid_centro_costoAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelid_centro_actividadAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelid_bancoAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelid_cuenta_bancoAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelid_detalle_proveAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelid_transaccionAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelfecha_emisionAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelfecha_vencimientoAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelvalor_pagoAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelvalor_canceladoAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelnumero_facturaAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabeldetalle_facturaAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabelfecha_corteAutoriPago,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormAutoriPago.jLabeldescripcionAutoriPago,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoAutoriPago--;	
		
		
		this.autoripagoAux=new AutoriPago();
		
		this.autoripagoAux.setId(this.iIdNuevoAutoriPago);
		this.autoripagoAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.autoripagoLogic.getAutoriPagos().add(this.autoripagoAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.autoripagos.add(this.autoripagoAux);
		}
		//ARCHITECTURE
		
		this.autoripago=this.autoripagoAux;
		
		if(AutoriPagoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioAutoriPago(this.autoripago);
			this.setVariablesObjetoActualToFormularioForeignKeyAutoriPago(this.autoripago);
		}
				
		//this.setDefaultControlesAutoriPago();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyAutoriPago();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyAutoriPago();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyAutoriPago();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualAutoriPago(this.autoripagoBean,this.autoripago,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(AutoriPagoConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.autoripagoSessionBean.getConGuardarRelaciones()) {
			classes=AutoriPagoConstantesFunciones.getClassesRelationshipsOfAutoriPago(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.autoripagoReturnGeneral=autoripagoLogic.procesarEventosAutoriPagosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.autoripagoLogic.getAutoriPagos(),this.autoripago,this.autoripagoParameterGeneral,this.isEsNuevoAutoriPago,classes);//this.autoripagoLogic.getAutoriPago()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanAutoriPago(this.autoripagoReturnGeneral,this.autoripagoBean,false);
		
		if(this.autoripagoReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyAutoriPago(this.autoripagoReturnGeneral.getAutoriPago());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioAutoriPago(this.autoripagoReturnGeneral.getAutoriPago());
		}
		
		if(this.autoripagoReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioAutoriPago(this.autoripagoReturnGeneral.getAutoriPago(),classes);//this.autoripagoBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyAutoriPago();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyAutoriPago();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			AutoriPagoBeanSwingJInternalFrameAdditional.RecargarFormAutoriPago(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingAutoriPago(false);
						
			if(autoripagoSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualAutoriPago();
			}
			
			this.actualizarVisualTableDatosAutoriPago();
			
			this.jTableDatosAutoriPago.setRowSelectionInterval(this.getIndiceNuevoAutoriPago(), this.getIndiceNuevoAutoriPago());
			
			this.seleccionarFilaTablaAutoriPagoActual();
						
			this.actualizarEstadoCeldasBotonesAutoriPago("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesAutoriPago(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_emisionAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarfecha_emisionAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_vencimientoAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarfecha_vencimientoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_pagoAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarvalor_pagoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_canceladoAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarvalor_canceladoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jTextFieldnumero_facturaAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarnumero_facturaAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jTextAreadetalle_facturaAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activardetalle_facturaAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_corteAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarfecha_corteAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jTextAreadescripcionAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activardescripcionAutoriPago);	
		//
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarid_empresaAutoriPago);//
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarid_sucursalAutoriPago);//
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarid_ejercicioAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarid_clienteAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarid_facturaAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarid_asiento_contableAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarid_centro_costoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarid_centro_actividadAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarid_bancoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarid_cuenta_bancoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarid_detalle_proveAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.setEnabled(isHabilitar && this.autoripagoConstantesFunciones.activarid_transaccionAutoriPago);
	};
	
	public void setDefaultControlesAutoriPago() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoAutoriPago(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.autoripagoSessionBean.setConGuardarRelaciones(true);			
			this.autoripagoSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormAutoriPago.jTabbedPaneRelacionesAutoriPago.setVisible(true);
			
					
		} else {
			//this.autoripagoSessionBean.setConGuardarRelaciones(false);			
			this.autoripagoSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormAutoriPago.jTabbedPaneRelacionesAutoriPago.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoAutoriPago() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(AutoriPago autoripagoAux:this.autoripagoLogic.getAutoriPagos()) {
				if(autoripagoAux.getId().equals(this.iIdNuevoAutoriPago)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(AutoriPago autoripagoAux:this.autoripagos) {
				if(autoripagoAux.getId().equals(this.iIdNuevoAutoriPago)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualAutoriPago(AutoriPago autoripago,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(AutoriPago autoripagoAux:this.autoripagoLogic.getAutoriPagos()) {
				if(autoripagoAux.getId().equals(autoripago.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(AutoriPago autoripagoAux:this.autoripagos) {
				if(autoripagoAux.getId().equals(autoripago.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalAutoriPago(AutoriPago autoripagoOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(AutoriPago autoripagoAux:this.autoripagoLogic.getAutoriPagos()) {
				if(autoripagoAux.getAutoriPagoOriginal().getId().equals(autoripagoOriginal.getId())) {
					existe=true;
					autoripagoOriginal.setId(autoripagoAux.getId());
					autoripagoOriginal.setVersionRow(autoripagoAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(AutoriPago autoripagoAux:this.autoripagos) {
				if(autoripagoAux.getAutoriPagoOriginal().getId().equals(autoripagoOriginal.getId())) {
					existe=true;
					autoripagoOriginal.setId(autoripagoAux.getId());
					autoripagoOriginal.setVersionRow(autoripagoAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosAutoriPago(Boolean esParaCancelar) throws Exception {
		autoripagosAux=new ArrayList<AutoriPago>();
		autoripagoAux=new AutoriPago();
		
		if(!this.autoripagoSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(AutoriPago autoripagoAux:this.autoripagoLogic.getAutoriPagos()) {
					if(autoripagoAux.getId()<0) {
						autoripagosAux.add(autoripagoAux);
					}		
				}
				this.iIdNuevoAutoriPago=0L;
				this.autoripagoLogic.getAutoriPagos().removeAll(autoripagosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(AutoriPago autoripagoAux:this.autoripagos) {
					if(autoripagoAux.getId()<0) {
						autoripagosAux.add(autoripagoAux);
					}		
				}
				this.iIdNuevoAutoriPago=0L;
				this.autoripagos.removeAll(autoripagosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoAutoriPago 
					&& this.autoripagoLogic.getAutoriPagos().size()>0
					) {
					autoripagoAux=this.autoripagoLogic.getAutoriPagos().get(this.autoripagoLogic.getAutoriPagos().size() - 1);
				
					if(autoripagoAux.getId()<0) {
						this.autoripagoLogic.getAutoriPagos().remove(autoripagoAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoAutoriPago && this.autoripagos.size()>0) {
					autoripagoAux=this.autoripagos.get(this.autoripagos.size() - 1);
				
					if(autoripagoAux.getId()<0) {
						this.autoripagos.remove(autoripagoAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoAutoriPago(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(autoripago.getId()<0) {
				this.autoripagoLogic.getAutoriPagos().remove(this.autoripago);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(autoripago.getId()<0) {
				this.autoripagos.remove(this.autoripago);
			}
		}			
	}
	
	public void setEstadosInicialesAutoriPago(List<AutoriPago> autoripagosAux) throws Exception {
		AutoriPagoConstantesFunciones.setEstadosInicialesAutoriPago(autoripagosAux);
	}
	
	public void setEstadosInicialesAutoriPago(AutoriPago autoripagoAux) throws Exception {
		AutoriPagoConstantesFunciones.setEstadosInicialesAutoriPago(autoripagoAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarAutoriPagoActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesAutoriPago("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarAutoriPagoActual()) {
				if(!this.isEsNuevoAutoriPago) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesAutoriPago("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoAutoriPago=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarAutoriPagoActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Autori Pago ?", "MANTENIMIENTO DE Autori Pago", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesAutoriPago("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(AutoriPago autoripago) throws Exception {
		AutoriPagoConstantesFunciones.seleccionarAsignar(this.autoripago,autoripago);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarAutoriPago=this.isPermisoActualizarOriginalAutoriPago;
			
			
			this.seleccionarAsignar(autoripago);
			
			

			idClienteActual=autoripago.getid_cliente();
			this.seleccionarClienteActual();

			idFacturaActual=autoripago.getid_factura();
			this.seleccionarFacturaActual();

			idAsientoContableActual=autoripago.getid_asiento_contable();
			this.seleccionarAsientoContableActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			AutoriPagoConstantesFunciones.quitarEspaciosAutoriPago(this.autoripago,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesAutoriPago("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.autoripagoSessionBean.setsFuncionBusquedaRapida(this.autoripagoSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarFacturaActual() throws Exception {
		try	{
			Factura facturaAux=new Factura();

			if(this.idFacturaActual != null && this.idFacturaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(this.idFacturaActual);
					facturaAux= facturaLogic.getFactura();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				facturasForeignKey=new ArrayList<Factura>();
				facturasForeignKey.add(facturaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarAsientoContableActual() throws Exception {
		try	{
			AsientoContable asientocontableAux=new AsientoContable();

			if(this.idAsientoContableActual != null && this.idAsientoContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(this.idAsientoContableActual);
					asientocontableAux= asientocontableLogic.getAsientoContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				asientocontablesForeignKey=new ArrayList<AsientoContable>();
				asientocontablesForeignKey.add(asientocontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoAutoriPago) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosAutoriPago(esParaCancelar);				
				this.cancelarNuevoAutoriPago(esParaCancelar);								
			}
			
			this.autoripago=new AutoriPago();
			
			this.inicializarAutoriPago();
			
			this.actualizarEstadoCeldasBotonesAutoriPago("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarAutoriPago() throws Exception {
		try {
			AutoriPagoConstantesFunciones.inicializarAutoriPago(this.autoripago);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.autoripagoLogic.getAutoriPagos().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteAutoriPagos(String sAccionBusqueda,List<AutoriPago> autoripagosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="AutoriPago"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="AutoriPagoMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("AutoriPagoMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="AutoriPago"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Autori Pagos");		
		parameters.put("busquedapor", AutoriPagoConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceAutoriPago=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			AutoriPagoConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			AutoriPagoConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceAutoriPago=new JRBeanArrayDataSource(AutoriPagoJInternalFrame.TraerAutoriPagoBeans(autoripagosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceAutoriPago);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+AutoriPagoConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+AutoriPagoConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(AutoriPagoBean.TraerAutoriPagoBeans(autoripagosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteAutoriPagos(sAccionBusqueda,sTipoArchivoReporte,autoripagosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalAutoriPagos(sAccionBusqueda,sTipoArchivoReporte,autoripagosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoAutoriPagoActionPerformed(null);
					//this.generarExcelReporteAutoriPagos(sAccionBusqueda,sTipoArchivoReporte,autoripagosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalAutoriPagos(sAccionBusqueda,sTipoArchivoReporte,autoripagosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesAutoriPagos(sAccionBusqueda,sTipoArchivoReporte,autoripagosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesAutoriPagos(sAccionBusqueda,sTipoArchivoReporte,autoripagosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteAutoriPagos(String sAccionBusqueda,String sTipoArchivoReporte,List<AutoriPago> autoripagosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"autoripago";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("AutoriPagos");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderAutoriPago("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(AutoriPago autoripago : autoripagosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			AutoriPagoConstantesFunciones.generarExcelReporteDataAutoriPago("NORMAL",row,workbook,autoripago,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.autoripagoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Autori Pago",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderAutoriPago(String sTipo,Row row,Workbook workbook) {
		
		AutoriPagoConstantesFunciones.generarExcelReporteHeaderAutoriPago(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalAutoriPagos(String sAccionBusqueda,String sTipoArchivoReporte,List<AutoriPago> autoripagosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"autoripago_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("AutoriPagos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(AutoriPago autoripago : autoripagosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(AutoriPagoConstantesFunciones.getAutoriPagoDescripcion(autoripago));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_IDFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getfactura_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getasientocontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getcentrocosto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getcentroactividad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_IDBANCO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDBANCO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getbanco_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getcuentabanco_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getdetalleprove_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.gettransaccion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_FECHAEMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_FECHAEMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getfecha_emision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getfecha_vencimiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_VALORPAGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_VALORPAGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getvalor_pago());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getvalor_cancelado());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getnumero_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getdetalle_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_FECHACORTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_FECHACORTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getfecha_corte());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(AutoriPagoConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(autoripago.getdescripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.autoripagoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Autori Pago",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesAutoriPagos(String sAccionBusqueda,String sTipoArchivoReporte,List<AutoriPago> autoripagosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<AutoriPago> autoripagosRespaldo=null;
		
		classes=AutoriPagoConstantesFunciones.getClassesRelationshipsOfAutoriPago(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.autoripagoLogic.setDatosCliente(this.datosCliente);
		this.autoripagoLogic.setDatosDeep(this.datosDeep);
		this.autoripagoLogic.setIsConDeep(true);
		
		autoripagosRespaldo=this.autoripagoLogic.getAutoriPagos();
		
		this.autoripagoLogic.setAutoriPagos(autoripagosParaReportes);	
		this.autoripagoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		autoripagosParaReportes=this.autoripagoLogic.getAutoriPagos();
		this.autoripagoLogic.setAutoriPagos(autoripagosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"autoripago_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("AutoriPagos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderAutoriPago("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(AutoriPago autoripago : autoripagosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderAutoriPago("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			AutoriPagoConstantesFunciones.generarExcelReporteDataAutoriPago("NORMAL",row,workbook,autoripago,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(AutoriPagoConstantesFunciones.getAutoriPagoDescripcion(autoripago));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.autoripagoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Autori Pago",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoAutoriPago.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoAutoriPago.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessAutoriPago() throws Exception {		
		this.startProcessAutoriPago(true);
	}
	
	public void startProcessAutoriPago(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasAutoriPago ,this.jPanelParametrosReportesAutoriPago, this.jScrollPanelDatosAutoriPago,this.jPanelPaginacionAutoriPago, this.jScrollPanelDatosEdicionAutoriPago, this.jPanelAccionesAutoriPago,this.jPanelAccionesFormularioAutoriPago,this.jmenuBarAutoriPago,this.jmenuBarDetalleAutoriPago,this.jTtoolBarAutoriPago,this.jTtoolBarDetalleAutoriPago);		
		
		final JTabbedPane jTabbedPaneBusquedasAutoriPago=this.jTabbedPaneBusquedasAutoriPago; 
		
		final JPanel jPanelParametrosReportesAutoriPago=this.jPanelParametrosReportesAutoriPago;
		//final JScrollPane jScrollPanelDatosAutoriPago=this.jScrollPanelDatosAutoriPago;
		final JTable jTableDatosAutoriPago=this.jTableDatosAutoriPago;		
		final JPanel jPanelPaginacionAutoriPago=this.jPanelPaginacionAutoriPago;
		//final JScrollPane jScrollPanelDatosEdicionAutoriPago=this.jScrollPanelDatosEdicionAutoriPago;
		final JPanel jPanelAccionesAutoriPago=this.jPanelAccionesAutoriPago;
		
		JPanel jPanelCamposAuxiliarAutoriPago=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarAutoriPago=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) {
			jPanelCamposAuxiliarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jPanelCamposAutoriPago;
			jPanelAccionesFormularioAuxiliarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jPanelAccionesFormularioAutoriPago;
		}
		
		final JPanel jPanelCamposAutoriPago=jPanelCamposAuxiliarAutoriPago;
		final JPanel jPanelAccionesFormularioAutoriPago=jPanelAccionesFormularioAuxiliarAutoriPago;
		
		
		final JMenuBar jmenuBarAutoriPago=this.jmenuBarAutoriPago;
		final JToolBar jTtoolBarAutoriPago=this.jTtoolBarAutoriPago;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarAutoriPago=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarAutoriPago=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) {
			jmenuBarDetalleAuxiliarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jmenuBarDetalleAutoriPago;
			jTtoolBarDetalleAuxiliarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jTtoolBarDetalleAutoriPago;
		}
		
		final JMenuBar jmenuBarDetalleAutoriPago=jmenuBarDetalleAuxiliarAutoriPago;
		final JToolBar jTtoolBarDetalleAutoriPago=jTtoolBarDetalleAuxiliarAutoriPago;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasAutoriPago;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesAutoriPago;
			processRunnable.jTableDatos=jTableDatosAutoriPago;
			processRunnable.jPanelCampos=jPanelCamposAutoriPago;
			processRunnable.jPanelPaginacion=jPanelPaginacionAutoriPago;
			processRunnable.jPanelAcciones=jPanelAccionesAutoriPago;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioAutoriPago;
			
			
			processRunnable.jmenuBar=jmenuBarAutoriPago;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleAutoriPago;
			processRunnable.jTtoolBar=jTtoolBarAutoriPago;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleAutoriPago;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasAutoriPago ,jPanelParametrosReportesAutoriPago,jTableDatosAutoriPago, /*jScrollPanelDatosAutoriPago,*/jPanelCamposAutoriPago,jPanelPaginacionAutoriPago, /*jScrollPanelDatosEdicionAutoriPago,*/ jPanelAccionesAutoriPago,jPanelAccionesFormularioAutoriPago,jmenuBarAutoriPago,jmenuBarDetalleAutoriPago,jTtoolBarAutoriPago,jTtoolBarDetalleAutoriPago);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasAutoriPago ,jPanelParametrosReportesAutoriPago, jScrollPanelDatosAutoriPago,jPanelPaginacionAutoriPago, jScrollPanelDatosEdicionAutoriPago, jPanelAccionesAutoriPago,jPanelAccionesFormularioAutoriPago,jmenuBarAutoriPago,jmenuBarDetalleAutoriPago,jTtoolBarAutoriPago,jTtoolBarDetalleAutoriPago);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessAutoriPago() {// throws Exception 
		this.finishProcessAutoriPago(true);
	}
	
	public void finishProcessAutoriPago(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasAutoriPago ,this.jPanelParametrosReportesAutoriPago, this.jScrollPanelDatosAutoriPago,this.jPanelPaginacionAutoriPago, this.jScrollPanelDatosEdicionAutoriPago, this.jPanelAccionesAutoriPago,this.jPanelAccionesFormularioAutoriPago,this.jmenuBarAutoriPago,this.jmenuBarDetalleAutoriPago,this.jTtoolBarAutoriPago,this.jTtoolBarDetalleAutoriPago);		
		
		final JTabbedPane jTabbedPaneBusquedasAutoriPago=this.jTabbedPaneBusquedasAutoriPago; 
		
		final JPanel jPanelParametrosReportesAutoriPago=this.jPanelParametrosReportesAutoriPago;
		//final JScrollPane jScrollPanelDatosAutoriPago=this.jScrollPanelDatosAutoriPago;
		final JTable jTableDatosAutoriPago=this.jTableDatosAutoriPago;		
		final JPanel jPanelPaginacionAutoriPago=this.jPanelPaginacionAutoriPago;
		//final JScrollPane jScrollPanelDatosEdicionAutoriPago=this.jScrollPanelDatosEdicionAutoriPago;
		final JPanel jPanelAccionesAutoriPago=this.jPanelAccionesAutoriPago;
		
		JPanel jPanelCamposAuxiliarAutoriPago=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarAutoriPago=new JPanel();
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) {
			jPanelCamposAuxiliarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jPanelCamposAutoriPago;
			jPanelAccionesFormularioAuxiliarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jPanelAccionesFormularioAutoriPago;
		}
		
		final JPanel jPanelCamposAutoriPago=jPanelCamposAuxiliarAutoriPago;
		final JPanel jPanelAccionesFormularioAutoriPago=jPanelAccionesFormularioAuxiliarAutoriPago;
		
		
		final JMenuBar jmenuBarAutoriPago=this.jmenuBarAutoriPago;		
		final JToolBar jTtoolBarAutoriPago=this.jTtoolBarAutoriPago;
				
		JMenuBar jmenuBarDetalleAuxiliarAutoriPago=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarAutoriPago=new JToolBar();
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) {
			jmenuBarDetalleAuxiliarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jmenuBarDetalleAutoriPago;
			jTtoolBarDetalleAuxiliarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jTtoolBarDetalleAutoriPago;		
		}
		
		final JMenuBar jmenuBarDetalleAutoriPago=jmenuBarDetalleAuxiliarAutoriPago;
		final JToolBar jTtoolBarDetalleAutoriPago=jTtoolBarDetalleAuxiliarAutoriPago;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasAutoriPago;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesAutoriPago;
			processRunnable.jTableDatos=jTableDatosAutoriPago;
			processRunnable.jPanelCampos=jPanelCamposAutoriPago;
			processRunnable.jPanelPaginacion=jPanelPaginacionAutoriPago;
			processRunnable.jPanelAcciones=jPanelAccionesAutoriPago;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioAutoriPago;
			
			
			processRunnable.jmenuBar=jmenuBarAutoriPago;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleAutoriPago;
			processRunnable.jTtoolBar=jTtoolBarAutoriPago;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleAutoriPago;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasAutoriPago ,jPanelParametrosReportesAutoriPago, jTableDatosAutoriPago,/*jScrollPanelDatosAutoriPago,*/jPanelCamposAutoriPago,jPanelPaginacionAutoriPago, /*jScrollPanelDatosEdicionAutoriPago,*/ jPanelAccionesAutoriPago,jPanelAccionesFormularioAutoriPago,jmenuBarAutoriPago,jmenuBarDetalleAutoriPago,jTtoolBarAutoriPago,jTtoolBarDetalleAutoriPago));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesAutoriPago(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarAutoriPago(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuAutoriPago(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarAutoriPago(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarAutoriPago,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleAutoriPago,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuAutoriPago(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarAutoriPago,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleAutoriPago,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.autoripagoConstantesFunciones.getsFinalQueryAutoriPago();
		String  finalQueryPaginacionTodos=this.autoripagoConstantesFunciones.getsFinalQueryAutoriPago();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=AutoriPagoConstantesFunciones.getArrayColumnasGlobalesNoAutoriPago(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=AutoriPagoConstantesFunciones.getArrayColumnasGlobalesAutoriPago(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,AutoriPagoConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.autoripagosEliminados= new ArrayList<AutoriPago>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessAutoriPago();
		
				///*AutoriPagoSessionBean*/this.autoripagoSessionBean=new AutoriPagoSessionBean();
			
			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=AutoriPagoConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=AutoriPagoConstantesFunciones.getClassesForeignKeysOfAutoriPago(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/autoripago."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			autoripagosAux= new ArrayList<AutoriPago>();
			
				
			autoripagoLogic.setDatosCliente(this.datosCliente);
			autoripagoLogic.setDatosDeep(this.datosDeep);
			autoripagoLogic.setIsConDeep(true);
			
			
			autoripagoLogic.getAutoriPagoDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					autoripagoLogic.getTodosAutoriPagos(finalQueryGlobal,pagination);
					
					//autoripagoLogic.getTodosAutoriPagosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(autoripagoLogic.getAutoriPagos()==null|| autoripagoLogic.getAutoriPagos().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							autoripagosAux= new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagoLogic.getAutoriPagos());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagosAux= new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagos);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							autoripagoLogic.getTodosAutoriPagos(finalQueryGlobal+"",this.pagination);												
							
							//autoripagoLogic.getTodosAutoriPagosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteAutoriPagos("Todos",autoripagoLogic.getAutoriPagos() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());					
							autoripagoLogic.getAutoriPagos().addAll(autoripagosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagos=new ArrayList<AutoriPago>();
							autoripagos.addAll(autoripagosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idAutoriPago=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idAutoriPago=this.idActual;
				
				} else if(this.idAutoriPagoActual!=null && this.idAutoriPagoActual!=0L) {
					idAutoriPago=idAutoriPagoActual;
				}
				
					
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndicePorId(idAutoriPago);
				
				this.autoripagos=new ArrayList<AutoriPago>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					autoripagoLogic.getEntity(idAutoriPago);
					
					//autoripagoLogic.getEntityWithConnection(idAutoriPago);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
					autoripagoLogic.getAutoriPagos().add(autoripagoLogic.getAutoriPago());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripagos=new ArrayList<AutoriPago>();
					this.autoripagos.add(autoripago);
				}
				
				if(autoripagoLogic.getAutoriPago()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdAsientoContable")) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					autoripagoLogic.getAutoriPagosFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=autoripagoLogic.getAutoriPagos()==null||autoripagoLogic.getAutoriPagos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=autoripagos==null|| autoripagos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagosAux=new ArrayList<AutoriPago>();
						autoripagosAux.addAll(autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagosAux=new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							autoripagoLogic.getAutoriPagosFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAutoriPagos("FK_IdAsientoContable",autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAutoriPagos("FK_IdAsientoContable",autoripagos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
						autoripagoLogic.getAutoriPagos().addAll(autoripagosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagos=new ArrayList<AutoriPago>();
							autoripagos.addAll(autoripagosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdBanco")) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					autoripagoLogic.getAutoriPagosFK_IdBanco(finalQueryGlobal,pagination,id_bancoFK_IdBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=autoripagoLogic.getAutoriPagos()==null||autoripagoLogic.getAutoriPagos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=autoripagos==null|| autoripagos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagosAux=new ArrayList<AutoriPago>();
						autoripagosAux.addAll(autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagosAux=new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							autoripagoLogic.getAutoriPagosFK_IdBanco(finalQueryGlobal,pagination,id_bancoFK_IdBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAutoriPagos("FK_IdBanco",autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAutoriPagos("FK_IdBanco",autoripagos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
						autoripagoLogic.getAutoriPagos().addAll(autoripagosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagos=new ArrayList<AutoriPago>();
							autoripagos.addAll(autoripagosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroActividad")) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCentroActividad(id_centro_actividadFK_IdCentroActividad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					autoripagoLogic.getAutoriPagosFK_IdCentroActividad(finalQueryGlobal,pagination,id_centro_actividadFK_IdCentroActividad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCentroActividad(id_centro_actividadFK_IdCentroActividad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCentroActividad(id_centro_actividadFK_IdCentroActividad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=autoripagoLogic.getAutoriPagos()==null||autoripagoLogic.getAutoriPagos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=autoripagos==null|| autoripagos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagosAux=new ArrayList<AutoriPago>();
						autoripagosAux.addAll(autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagosAux=new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							autoripagoLogic.getAutoriPagosFK_IdCentroActividad(finalQueryGlobal,pagination,id_centro_actividadFK_IdCentroActividad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCentroActividad(id_centro_actividadFK_IdCentroActividad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCentroActividad(id_centro_actividadFK_IdCentroActividad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAutoriPagos("FK_IdCentroActividad",autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAutoriPagos("FK_IdCentroActividad",autoripagos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
						autoripagoLogic.getAutoriPagos().addAll(autoripagosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagos=new ArrayList<AutoriPago>();
							autoripagos.addAll(autoripagosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCentroCosto")) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					autoripagoLogic.getAutoriPagosFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=autoripagoLogic.getAutoriPagos()==null||autoripagoLogic.getAutoriPagos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=autoripagos==null|| autoripagos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagosAux=new ArrayList<AutoriPago>();
						autoripagosAux.addAll(autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagosAux=new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							autoripagoLogic.getAutoriPagosFK_IdCentroCosto(finalQueryGlobal,pagination,id_centro_costoFK_IdCentroCosto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCentroCosto(id_centro_costoFK_IdCentroCosto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAutoriPagos("FK_IdCentroCosto",autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAutoriPagos("FK_IdCentroCosto",autoripagos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
						autoripagoLogic.getAutoriPagos().addAll(autoripagosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagos=new ArrayList<AutoriPago>();
							autoripagos.addAll(autoripagosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					autoripagoLogic.getAutoriPagosFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=autoripagoLogic.getAutoriPagos()==null||autoripagoLogic.getAutoriPagos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=autoripagos==null|| autoripagos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagosAux=new ArrayList<AutoriPago>();
						autoripagosAux.addAll(autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagosAux=new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							autoripagoLogic.getAutoriPagosFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAutoriPagos("FK_IdCliente",autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAutoriPagos("FK_IdCliente",autoripagos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
						autoripagoLogic.getAutoriPagos().addAll(autoripagosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagos=new ArrayList<AutoriPago>();
							autoripagos.addAll(autoripagosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaBanco")) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCuentaBanco(id_cuenta_bancoFK_IdCuentaBanco);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					autoripagoLogic.getAutoriPagosFK_IdCuentaBanco(finalQueryGlobal,pagination,id_cuenta_bancoFK_IdCuentaBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCuentaBanco(id_cuenta_bancoFK_IdCuentaBanco);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCuentaBanco(id_cuenta_bancoFK_IdCuentaBanco);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=autoripagoLogic.getAutoriPagos()==null||autoripagoLogic.getAutoriPagos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=autoripagos==null|| autoripagos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagosAux=new ArrayList<AutoriPago>();
						autoripagosAux.addAll(autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagosAux=new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							autoripagoLogic.getAutoriPagosFK_IdCuentaBanco(finalQueryGlobal,pagination,id_cuenta_bancoFK_IdCuentaBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCuentaBanco(id_cuenta_bancoFK_IdCuentaBanco);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdCuentaBanco(id_cuenta_bancoFK_IdCuentaBanco);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAutoriPagos("FK_IdCuentaBanco",autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAutoriPagos("FK_IdCuentaBanco",autoripagos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
						autoripagoLogic.getAutoriPagos().addAll(autoripagosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagos=new ArrayList<AutoriPago>();
							autoripagos.addAll(autoripagosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdDetalleProve")) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdDetalleProve(id_detalle_proveFK_IdDetalleProve);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					autoripagoLogic.getAutoriPagosFK_IdDetalleProve(finalQueryGlobal,pagination,id_detalle_proveFK_IdDetalleProve);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdDetalleProve(id_detalle_proveFK_IdDetalleProve);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdDetalleProve(id_detalle_proveFK_IdDetalleProve);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=autoripagoLogic.getAutoriPagos()==null||autoripagoLogic.getAutoriPagos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=autoripagos==null|| autoripagos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagosAux=new ArrayList<AutoriPago>();
						autoripagosAux.addAll(autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagosAux=new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							autoripagoLogic.getAutoriPagosFK_IdDetalleProve(finalQueryGlobal,pagination,id_detalle_proveFK_IdDetalleProve);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdDetalleProve(id_detalle_proveFK_IdDetalleProve);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdDetalleProve(id_detalle_proveFK_IdDetalleProve);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAutoriPagos("FK_IdDetalleProve",autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAutoriPagos("FK_IdDetalleProve",autoripagos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
						autoripagoLogic.getAutoriPagos().addAll(autoripagosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagos=new ArrayList<AutoriPago>();
							autoripagos.addAll(autoripagosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					autoripagoLogic.getAutoriPagosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=autoripagoLogic.getAutoriPagos()==null||autoripagoLogic.getAutoriPagos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=autoripagos==null|| autoripagos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagosAux=new ArrayList<AutoriPago>();
						autoripagosAux.addAll(autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagosAux=new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							autoripagoLogic.getAutoriPagosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAutoriPagos("FK_IdEjercicio",autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAutoriPagos("FK_IdEjercicio",autoripagos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
						autoripagoLogic.getAutoriPagos().addAll(autoripagosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagos=new ArrayList<AutoriPago>();
							autoripagos.addAll(autoripagosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					autoripagoLogic.getAutoriPagosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=autoripagoLogic.getAutoriPagos()==null||autoripagoLogic.getAutoriPagos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=autoripagos==null|| autoripagos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagosAux=new ArrayList<AutoriPago>();
						autoripagosAux.addAll(autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagosAux=new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							autoripagoLogic.getAutoriPagosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAutoriPagos("FK_IdEmpresa",autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAutoriPagos("FK_IdEmpresa",autoripagos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
						autoripagoLogic.getAutoriPagos().addAll(autoripagosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagos=new ArrayList<AutoriPago>();
							autoripagos.addAll(autoripagosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFactura")) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					autoripagoLogic.getAutoriPagosFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=autoripagoLogic.getAutoriPagos()==null||autoripagoLogic.getAutoriPagos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=autoripagos==null|| autoripagos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagosAux=new ArrayList<AutoriPago>();
						autoripagosAux.addAll(autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagosAux=new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							autoripagoLogic.getAutoriPagosFK_IdFactura(finalQueryGlobal,pagination,id_facturaFK_IdFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdFactura(id_facturaFK_IdFactura);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAutoriPagos("FK_IdFactura",autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAutoriPagos("FK_IdFactura",autoripagos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
						autoripagoLogic.getAutoriPagos().addAll(autoripagosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagos=new ArrayList<AutoriPago>();
							autoripagos.addAll(autoripagosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					autoripagoLogic.getAutoriPagosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=autoripagoLogic.getAutoriPagos()==null||autoripagoLogic.getAutoriPagos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=autoripagos==null|| autoripagos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagosAux=new ArrayList<AutoriPago>();
						autoripagosAux.addAll(autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagosAux=new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							autoripagoLogic.getAutoriPagosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAutoriPagos("FK_IdSucursal",autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAutoriPagos("FK_IdSucursal",autoripagos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
						autoripagoLogic.getAutoriPagos().addAll(autoripagosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagos=new ArrayList<AutoriPago>();
							autoripagos.addAll(autoripagosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransaccion")) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					autoripagoLogic.getAutoriPagosFK_IdTransaccion(finalQueryGlobal,pagination,id_transaccionFK_IdTransaccion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=autoripagoLogic.getAutoriPagos()==null||autoripagoLogic.getAutoriPagos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=autoripagos==null|| autoripagos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagosAux=new ArrayList<AutoriPago>();
						autoripagosAux.addAll(autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagosAux=new ArrayList<AutoriPago>();
							autoripagosAux.addAll(autoripagos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							autoripagoLogic.getAutoriPagosFK_IdTransaccion(finalQueryGlobal,pagination,id_transaccionFK_IdTransaccion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=AutoriPagoConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteAutoriPagos("FK_IdTransaccion",autoripagoLogic.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteAutoriPagos("FK_IdTransaccion",autoripagos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoLogic.setAutoriPagos(new ArrayList<AutoriPago>());
						autoripagoLogic.getAutoriPagos().addAll(autoripagosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagos=new ArrayList<AutoriPago>();
							autoripagos.addAll(autoripagosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesAutoriPago();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessAutoriPago();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=autoripagoLogic.getAutoriPagos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=autoripagos.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=autoripagoLogic.getAutoriPagos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=autoripagos.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(AutoriPago autoripago) {
		Boolean permite=true;
		
		if(this.autoripago.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=AutoriPagoConstantesFunciones.getOrderByListaAutoriPago();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=AutoriPagoConstantesFunciones.getOrderByListaAutoriPago();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(AutoriPago autoripago:autoripagoLogic.getAutoriPagos()) {
				if(autoripago.getsType().equals(Constantes2.S_TOTALES)) {
					autoripagoTotales=autoripago;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(AutoriPago autoripago:this.autoripagos) {
				if(autoripago.getsType().equals(Constantes2.S_TOTALES)) {
					autoripagoTotales=autoripago;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.autoripagoAux=new AutoriPago();
			this.autoripagoAux.setsType(Constantes2.S_TOTALES);
			this.autoripagoAux.setIsNew(false);
			this.autoripagoAux.setIsChanged(false);
			this.autoripagoAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				AutoriPagoConstantesFunciones.TotalizarValoresFilaAutoriPago(this.autoripagoLogic.getAutoriPagos(),this.autoripagoAux);
				
				this.autoripagoLogic.getAutoriPagos().add(this.autoripagoAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				AutoriPagoConstantesFunciones.TotalizarValoresFilaAutoriPago(this.autoripagos,this.autoripagoAux);
				
				this.autoripagos.add(this.autoripagoAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		autoripagoTotales=new AutoriPago();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.autoripagoLogic.getAutoriPagos().remove(autoripagoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.autoripagos.remove(autoripagoTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		autoripagoTotales=new AutoriPago();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(AutoriPago autoripago:autoripagoLogic.getAutoriPagos()) {
				if(autoripago.getsType().equals(Constantes2.S_TOTALES)) {
					autoripagoTotales=autoripago;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				AutoriPagoConstantesFunciones.TotalizarValoresFilaAutoriPago(this.autoripagoLogic.getAutoriPagos(),autoripagoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(AutoriPago autoripago:this.autoripagos) {
				if(autoripago.getsType().equals(Constantes2.S_TOTALES)) {
					autoripagoTotales=autoripago;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				AutoriPagoConstantesFunciones.TotalizarValoresFilaAutoriPago(this.autoripagos,autoripagoTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getAutoriPagosFK_IdAsientoContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdAsientoContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAutoriPagosFK_IdBanco()throws Exception {
		try {
			sAccionBusqueda="FK_IdBanco";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAutoriPagosFK_IdCentroActividad()throws Exception {
		try {
			sAccionBusqueda="FK_IdCentroActividad";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAutoriPagosFK_IdCentroCosto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCentroCosto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAutoriPagosFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAutoriPagosFK_IdCuentaBanco()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaBanco";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAutoriPagosFK_IdDetalleProve()throws Exception {
		try {
			sAccionBusqueda="FK_IdDetalleProve";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAutoriPagosFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAutoriPagosFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAutoriPagosFK_IdFactura()throws Exception {
		try {
			sAccionBusqueda="FK_IdFactura";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAutoriPagosFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getAutoriPagosFK_IdTransaccion()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransaccion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getAutoriPagosFK_IdAsientoContable(String sFinalQuery,Long id_asiento_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLogic.getAutoriPagosFK_IdAsientoContable(sFinalQuery,this.pagination,id_asiento_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAutoriPagosFK_IdBanco(String sFinalQuery,Long id_banco)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLogic.getAutoriPagosFK_IdBanco(sFinalQuery,this.pagination,id_banco);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAutoriPagosFK_IdCentroActividad(String sFinalQuery,Long id_centro_actividad)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLogic.getAutoriPagosFK_IdCentroActividad(sFinalQuery,this.pagination,id_centro_actividad);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAutoriPagosFK_IdCentroCosto(String sFinalQuery,Long id_centro_costo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLogic.getAutoriPagosFK_IdCentroCosto(sFinalQuery,this.pagination,id_centro_costo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAutoriPagosFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLogic.getAutoriPagosFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAutoriPagosFK_IdCuentaBanco(String sFinalQuery,Long id_cuenta_banco)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLogic.getAutoriPagosFK_IdCuentaBanco(sFinalQuery,this.pagination,id_cuenta_banco);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAutoriPagosFK_IdDetalleProve(String sFinalQuery,Long id_detalle_prove)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLogic.getAutoriPagosFK_IdDetalleProve(sFinalQuery,this.pagination,id_detalle_prove);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAutoriPagosFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLogic.getAutoriPagosFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAutoriPagosFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLogic.getAutoriPagosFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAutoriPagosFK_IdFactura(String sFinalQuery,Long id_factura)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLogic.getAutoriPagosFK_IdFactura(sFinalQuery,this.pagination,id_factura);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAutoriPagosFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLogic.getAutoriPagosFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getAutoriPagosFK_IdTransaccion(String sFinalQuery,Long id_transaccion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLogic.getAutoriPagosFK_IdTransaccion(sFinalQuery,this.pagination,id_transaccion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosAutoriPago() {
		this.isPermisoTodoAutoriPago=false;
		this.isPermisoNuevoAutoriPago=false;
		this.isPermisoActualizarAutoriPago=false;
		this.isPermisoActualizarOriginalAutoriPago=false;
		this.isPermisoEliminarAutoriPago=false;
		this.isPermisoGuardarCambiosAutoriPago=false;
		this.isPermisoConsultaAutoriPago=false;
		this.isPermisoBusquedaAutoriPago=false;
		this.isPermisoReporteAutoriPago=false;		
		this.isPermisoOrdenAutoriPago=false;		
		this.isPermisoPaginacionMedioAutoriPago=false;		
		this.isPermisoPaginacionAltoAutoriPago=false;
		this.isPermisoPaginacionTodoAutoriPago=false;
		this.isPermisoCopiarAutoriPago=false;		
		this.isPermisoVerFormAutoriPago=false;		
		this.isPermisoDuplicarAutoriPago=false;		
		this.isPermisoOrdenAutoriPago=false;		
	}
	
	public void setPermisosUsuarioAutoriPago(Boolean isPermiso) {
		this.isPermisoTodoAutoriPago=isPermiso;
		this.isPermisoNuevoAutoriPago=isPermiso;
		this.isPermisoActualizarAutoriPago=isPermiso;
		this.isPermisoActualizarOriginalAutoriPago=isPermiso;
		this.isPermisoEliminarAutoriPago=isPermiso;
		this.isPermisoGuardarCambiosAutoriPago=isPermiso;
		this.isPermisoConsultaAutoriPago=isPermiso;
		this.isPermisoBusquedaAutoriPago=isPermiso;
		this.isPermisoReporteAutoriPago=isPermiso;
		this.isPermisoOrdenAutoriPago=isPermiso;		
		this.isPermisoPaginacionMedioAutoriPago=isPermiso;		
		this.isPermisoPaginacionAltoAutoriPago=isPermiso;		
		this.isPermisoPaginacionTodoAutoriPago=isPermiso;		
		this.isPermisoCopiarAutoriPago=isPermiso;		
		this.isPermisoVerFormAutoriPago=isPermiso;		
		this.isPermisoDuplicarAutoriPago=isPermiso;
		this.isPermisoOrdenAutoriPago=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioAutoriPago(Boolean isPermiso) {
		//this.isPermisoTodoAutoriPago=isPermiso;
		this.isPermisoNuevoAutoriPago=isPermiso;
		this.isPermisoActualizarAutoriPago=isPermiso;
		this.isPermisoActualizarOriginalAutoriPago=isPermiso;
		this.isPermisoEliminarAutoriPago=isPermiso;
		this.isPermisoGuardarCambiosAutoriPago=isPermiso;
		//this.isPermisoConsultaAutoriPago=isPermiso;
		//this.isPermisoBusquedaAutoriPago=isPermiso;
		//this.isPermisoReporteAutoriPago=isPermiso;
		//this.isPermisoOrdenAutoriPago=isPermiso;		
		//this.isPermisoPaginacionMedioAutoriPago=isPermiso;		
		//this.isPermisoPaginacionAltoAutoriPago=isPermiso;		
		//this.isPermisoPaginacionTodoAutoriPago=isPermiso;		
		//this.isPermisoCopiarAutoriPago=isPermiso;		
		//this.isPermisoDuplicarAutoriPago=isPermiso;
		//this.isPermisoOrdenAutoriPago=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioAutoriPagoClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(AutoriPagoJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebAutoriPago(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioAutoriPagoClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioAutoriPagoClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionAutoriPagoClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioAutoriPagoClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioAutoriPago() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(AutoriPagoJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.autoripagoSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, AutoriPagoConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoAutoriPago=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarAutoriPago=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalAutoriPago=this.isPermisoActualizarAutoriPago;
			this.isPermisoEliminarAutoriPago=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosAutoriPago=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaAutoriPago=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaAutoriPago=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoAutoriPago=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteAutoriPago=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenAutoriPago=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioAutoriPago=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoAutoriPago=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoAutoriPago=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarAutoriPago=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormAutoriPago=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarAutoriPago=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenAutoriPago=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.autoripagoSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosAutoriPago.setToolTipText(this.jTableDatosAutoriPago.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioAutoriPago(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioAutoriPago(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(AutoriPagoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(AutoriPagoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioAutoriPago() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyAutoriPagoListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.facturasForeignKey=new ArrayList();
				this.asientocontablesForeignKey=new ArrayList();
				this.centrocostosForeignKey=new ArrayList();
				this.centroactividadsForeignKey=new ArrayList();
				this.bancosForeignKey=new ArrayList();
				this.cuentabancosForeignKey=new ArrayList();
				this.detalleprovesForeignKey=new ArrayList();
				this.transaccionsForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyAutoriPagoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(AutoriPagoJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyAutoriPagoListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCentroActividadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyDetalleProveListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransaccionListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFacturaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FacturaConstantesFunciones.SFINALQUERY;

				this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AsientoContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCostoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroCostoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroActividadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.centroactividadsForeignKey==null||this.centroactividadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CentroActividadConstantesFunciones.getArrayColumnasGlobalesCentroActividad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroActividadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CentroActividadConstantesFunciones.SFINALQUERY;

				this.cargarCombosCentroActividadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBancoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bancosForeignKey==null||this.bancosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BancoConstantesFunciones.getArrayColumnasGlobalesBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BancoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BancoConstantesFunciones.SFINALQUERY;

				this.cargarCombosBancosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaBancoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentabancosForeignKey==null||this.cuentabancosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaBancoConstantesFunciones.getArrayColumnasGlobalesCuentaBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaBancoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaBancoConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaBancosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyDetalleProveListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.detalleprovesForeignKey==null||this.detalleprovesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=DetalleProveConstantesFunciones.getArrayColumnasGlobalesDetalleProve(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,DetalleProveConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=DetalleProveConstantesFunciones.SFINALQUERY;

				this.cargarCombosDetalleProvesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transaccionsForeignKey==null||this.transaccionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransaccionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransaccionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyAutoriPagoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			AutoriPagoParameterReturnGeneral autoripagoReturnGeneral=new AutoriPagoParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.autoripagoConstantesFunciones.cargarid_empresaAutoriPago)
					 || (this.esRecargarFks && this.autoripagoConstantesFunciones.cargarid_empresaAutoriPago)) {

					if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+autoripagoSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.autoripagoConstantesFunciones.cargarid_sucursalAutoriPago)
					 || (this.esRecargarFks && this.autoripagoConstantesFunciones.cargarid_sucursalAutoriPago)) {

					if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+autoripagoSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.autoripagoConstantesFunciones.cargarid_ejercicioAutoriPago)
					 || (this.esRecargarFks && this.autoripagoConstantesFunciones.cargarid_ejercicioAutoriPago)) {

					if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+autoripagoSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.autoripagoConstantesFunciones.cargarid_clienteAutoriPago)
					 || (this.esRecargarFks && this.autoripagoConstantesFunciones.cargarid_clienteAutoriPago)) {

					if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+autoripagoSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalFactura="";

				if(((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0) && this.autoripagoConstantesFunciones.cargarid_facturaAutoriPago)
					 || (this.esRecargarFks && this.autoripagoConstantesFunciones.cargarid_facturaAutoriPago)) {

					if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFactura=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

						finalQueryGlobalFactura=Funciones.GetFinalQueryAppend(finalQueryGlobalFactura, "");
						finalQueryGlobalFactura+=FacturaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFactura=" WHERE " + ConstantesSql.ID + "="+autoripagoSessionBean.getlidFacturaActual();
					}
				} else {
					finalQueryGlobalFactura="NONE";
				}


				String finalQueryGlobalAsientoContable="";

				if(((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0) && this.autoripagoConstantesFunciones.cargarid_asiento_contableAutoriPago)
					 || (this.esRecargarFks && this.autoripagoConstantesFunciones.cargarid_asiento_contableAutoriPago)) {

					if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAsientoContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

						finalQueryGlobalAsientoContable=Funciones.GetFinalQueryAppend(finalQueryGlobalAsientoContable, "");
						finalQueryGlobalAsientoContable+=AsientoContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAsientoContable=" WHERE " + ConstantesSql.ID + "="+autoripagoSessionBean.getlidAsientoContableActual();
					}
				} else {
					finalQueryGlobalAsientoContable="NONE";
				}


				String finalQueryGlobalCentroCosto="";

				if(((this.centrocostosForeignKey==null||this.centrocostosForeignKey.size()<=0) && this.autoripagoConstantesFunciones.cargarid_centro_costoAutoriPago)
					 || (this.esRecargarFks && this.autoripagoConstantesFunciones.cargarid_centro_costoAutoriPago)) {

					if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroCostoConstantesFunciones.getArrayColumnasGlobalesCentroCosto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroCosto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroCostoConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroCosto=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroCosto, "");
						finalQueryGlobalCentroCosto+=CentroCostoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroCostosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroCosto=" WHERE " + ConstantesSql.ID + "="+autoripagoSessionBean.getlidCentroCostoActual();
					}
				} else {
					finalQueryGlobalCentroCosto="NONE";
				}


				String finalQueryGlobalCentroActividad="";

				if(((this.centroactividadsForeignKey==null||this.centroactividadsForeignKey.size()<=0) && this.autoripagoConstantesFunciones.cargarid_centro_actividadAutoriPago)
					 || (this.esRecargarFks && this.autoripagoConstantesFunciones.cargarid_centro_actividadAutoriPago)) {

					if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionCentroActividad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CentroActividadConstantesFunciones.getArrayColumnasGlobalesCentroActividad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCentroActividad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CentroActividadConstantesFunciones.TABLENAME);

						finalQueryGlobalCentroActividad=Funciones.GetFinalQueryAppend(finalQueryGlobalCentroActividad, "");
						finalQueryGlobalCentroActividad+=CentroActividadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCentroActividadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCentroActividad=" WHERE " + ConstantesSql.ID + "="+autoripagoSessionBean.getlidCentroActividadActual();
					}
				} else {
					finalQueryGlobalCentroActividad="NONE";
				}


				String finalQueryGlobalBanco="";

				if(((this.bancosForeignKey==null||this.bancosForeignKey.size()<=0) && this.autoripagoConstantesFunciones.cargarid_bancoAutoriPago)
					 || (this.esRecargarFks && this.autoripagoConstantesFunciones.cargarid_bancoAutoriPago)) {

					if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BancoConstantesFunciones.getArrayColumnasGlobalesBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBanco=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BancoConstantesFunciones.TABLENAME);

						finalQueryGlobalBanco=Funciones.GetFinalQueryAppend(finalQueryGlobalBanco, "");
						finalQueryGlobalBanco+=BancoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBancosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBanco=" WHERE " + ConstantesSql.ID + "="+autoripagoSessionBean.getlidBancoActual();
					}
				} else {
					finalQueryGlobalBanco="NONE";
				}


				String finalQueryGlobalCuentaBanco="";

				if(((this.cuentabancosForeignKey==null||this.cuentabancosForeignKey.size()<=0) && this.autoripagoConstantesFunciones.cargarid_cuenta_bancoAutoriPago)
					 || (this.esRecargarFks && this.autoripagoConstantesFunciones.cargarid_cuenta_bancoAutoriPago)) {

					if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaBanco()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CuentaBancoConstantesFunciones.getArrayColumnasGlobalesCuentaBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaBanco=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaBancoConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaBanco=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaBanco, "");
						finalQueryGlobalCuentaBanco+=CuentaBancoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaBancosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaBanco=" WHERE " + ConstantesSql.ID + "="+autoripagoSessionBean.getlidCuentaBancoActual();
					}
				} else {
					finalQueryGlobalCuentaBanco="NONE";
				}


				String finalQueryGlobalDetalleProve="";

				if(((this.detalleprovesForeignKey==null||this.detalleprovesForeignKey.size()<=0) && this.autoripagoConstantesFunciones.cargarid_detalle_proveAutoriPago)
					 || (this.esRecargarFks && this.autoripagoConstantesFunciones.cargarid_detalle_proveAutoriPago)) {

					if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionDetalleProve()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=DetalleProveConstantesFunciones.getArrayColumnasGlobalesDetalleProve(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalDetalleProve=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,DetalleProveConstantesFunciones.TABLENAME);

						finalQueryGlobalDetalleProve=Funciones.GetFinalQueryAppend(finalQueryGlobalDetalleProve, "");
						finalQueryGlobalDetalleProve+=DetalleProveConstantesFunciones.SFINALQUERY;

						//this.cargarCombosDetalleProvesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalDetalleProve=" WHERE " + ConstantesSql.ID + "="+autoripagoSessionBean.getlidDetalleProveActual();
					}
				} else {
					finalQueryGlobalDetalleProve="NONE";
				}


				String finalQueryGlobalTransaccion="";

				if(((this.transaccionsForeignKey==null||this.transaccionsForeignKey.size()<=0) && this.autoripagoConstantesFunciones.cargarid_transaccionAutoriPago)
					 || (this.esRecargarFks && this.autoripagoConstantesFunciones.cargarid_transaccionAutoriPago)) {

					if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransaccion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

						finalQueryGlobalTransaccion=Funciones.GetFinalQueryAppend(finalQueryGlobalTransaccion, "");
						finalQueryGlobalTransaccion+=TransaccionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransaccionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransaccion=" WHERE " + ConstantesSql.ID + "="+autoripagoSessionBean.getlidTransaccionActual();
					}
				} else {
					finalQueryGlobalTransaccion="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				autoripagoReturnGeneral=autoripagoLogic.cargarCombosLoteForeignKeyAutoriPago(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalCliente,finalQueryGlobalFactura,finalQueryGlobalAsientoContable,finalQueryGlobalCentroCosto,finalQueryGlobalCentroActividad,finalQueryGlobalBanco,finalQueryGlobalCuentaBanco,finalQueryGlobalDetalleProve,finalQueryGlobalTransaccion);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=autoripagoReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=autoripagoReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=autoripagoReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=autoripagoReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalFactura.equals("NONE")) {
				this.facturasForeignKey=autoripagoReturnGeneral.getfacturasForeignKey();
			}

			if(!finalQueryGlobalAsientoContable.equals("NONE")) {
				this.asientocontablesForeignKey=autoripagoReturnGeneral.getasientocontablesForeignKey();
			}

			if(!finalQueryGlobalCentroCosto.equals("NONE")) {
				this.centrocostosForeignKey=autoripagoReturnGeneral.getcentrocostosForeignKey();
			}

			if(!finalQueryGlobalCentroActividad.equals("NONE")) {
				this.centroactividadsForeignKey=autoripagoReturnGeneral.getcentroactividadsForeignKey();
			}

			if(!finalQueryGlobalBanco.equals("NONE")) {
				this.bancosForeignKey=autoripagoReturnGeneral.getbancosForeignKey();
			}

			if(!finalQueryGlobalCuentaBanco.equals("NONE")) {
				this.cuentabancosForeignKey=autoripagoReturnGeneral.getcuentabancosForeignKey();
			}

			if(!finalQueryGlobalDetalleProve.equals("NONE")) {
				this.detalleprovesForeignKey=autoripagoReturnGeneral.getdetalleprovesForeignKey();
			}

			if(!finalQueryGlobalTransaccion.equals("NONE")) {
				this.transaccionsForeignKey=autoripagoReturnGeneral.gettransaccionsForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyAutoriPago()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyFactura();
			this.addItemDefectoCombosForeignKeyAsientoContable();
			this.addItemDefectoCombosForeignKeyCentroCosto();
			this.addItemDefectoCombosForeignKeyCentroActividad();
			this.addItemDefectoCombosForeignKeyBanco();
			this.addItemDefectoCombosForeignKeyCuentaBanco();
			this.addItemDefectoCombosForeignKeyDetalleProve();
			this.addItemDefectoCombosForeignKeyTransaccion();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.autoripagoSessionBean==null) {
				this.autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFactura()throws Exception {
		try {

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				Factura factura=new Factura();
				FacturaConstantesFunciones.setFacturaDescripcion(factura,Constantes.SMENSAJE_ESCOJA_OPCION);
				factura.setId(null);

				if(!FacturaConstantesFunciones.ExisteEnLista(this.facturasForeignKey,factura,true)) {

					this.facturasForeignKey.add(0,factura);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAsientoContable()throws Exception {
		try {

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				AsientoContable asientocontable=new AsientoContable();
				AsientoContableConstantesFunciones.setAsientoContableDescripcion(asientocontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				asientocontable.setId(null);

				if(!AsientoContableConstantesFunciones.ExisteEnLista(this.asientocontablesForeignKey,asientocontable,true)) {

					this.asientocontablesForeignKey.add(0,asientocontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroCosto()throws Exception {
		try {

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionCentroCosto()) {
				CentroCosto centrocosto=new CentroCosto();
				CentroCostoConstantesFunciones.setCentroCostoDescripcion(centrocosto,Constantes.SMENSAJE_ESCOJA_OPCION);
				centrocosto.setId(null);

				if(!CentroCostoConstantesFunciones.ExisteEnLista(this.centrocostosForeignKey,centrocosto,true)) {

					this.centrocostosForeignKey.add(0,centrocosto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCentroActividad()throws Exception {
		try {

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionCentroActividad()) {
				CentroActividad centroactividad=new CentroActividad();
				CentroActividadConstantesFunciones.setCentroActividadDescripcion(centroactividad,Constantes.SMENSAJE_ESCOJA_OPCION);
				centroactividad.setId(null);

				if(!CentroActividadConstantesFunciones.ExisteEnLista(this.centroactividadsForeignKey,centroactividad,true)) {

					this.centroactividadsForeignKey.add(0,centroactividad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBanco()throws Exception {
		try {

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {
				Banco banco=new Banco();
				BancoConstantesFunciones.setBancoDescripcion(banco,Constantes.SMENSAJE_ESCOJA_OPCION);
				banco.setId(null);

				if(!BancoConstantesFunciones.ExisteEnLista(this.bancosForeignKey,banco,true)) {

					this.bancosForeignKey.add(0,banco);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaBanco()throws Exception {
		try {

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaBanco()) {
				CuentaBanco cuentabanco=new CuentaBanco();
				CuentaBancoConstantesFunciones.setCuentaBancoDescripcion(cuentabanco,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentabanco.setId(null);

				if(!CuentaBancoConstantesFunciones.ExisteEnLista(this.cuentabancosForeignKey,cuentabanco,true)) {

					this.cuentabancosForeignKey.add(0,cuentabanco);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyDetalleProve()throws Exception {
		try {

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionDetalleProve()) {
				DetalleProve detalleprove=new DetalleProve();
				DetalleProveConstantesFunciones.setDetalleProveDescripcion(detalleprove,Constantes.SMENSAJE_ESCOJA_OPCION);
				detalleprove.setId(null);

				if(!DetalleProveConstantesFunciones.ExisteEnLista(this.detalleprovesForeignKey,detalleprove,true)) {

					this.detalleprovesForeignKey.add(0,detalleprove);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransaccion()throws Exception {
		try {

			if(!this.autoripagoSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {
				Transaccion transaccion=new Transaccion();
				TransaccionConstantesFunciones.setTransaccionDescripcion(transaccion,Constantes.SMENSAJE_ESCOJA_OPCION);
				transaccion.setId(null);

				if(!TransaccionConstantesFunciones.ExisteEnLista(this.transaccionsForeignKey,transaccion,true)) {

					this.transaccionsForeignKey.add(0,transaccion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyAutoriPago()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyAutoriPago(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyAutoriPago()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
			
			
				this.autoripago.setfecha_emision(this.parametroGeneralUsuario.getfecha_sistema());
				this.autoripago.setfecha_vencimiento(this.parametroGeneralUsuario.getfecha_sistema());
				this.autoripago.setfecha_corte(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyAutoriPago();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyAutoriPago(AutoriPago autoripago)throws Exception {	
		try {
			
			this.setActualClienteForeignKey(autoripago.getid_cliente(),false,"Formulario");
			this.setActualFacturaForeignKey(autoripago.getid_factura(),false,"Formulario");
			this.setActualAsientoContableForeignKey(autoripago.getid_asiento_contable(),false,"Formulario");
			this.setActualCentroCostoForeignKey(autoripago.getid_centro_costo(),false,"Formulario");
			this.setActualCentroActividadForeignKey(autoripago.getid_centro_actividad(),false,"Formulario");
			this.setActualBancoForeignKey(autoripago.getid_banco(),false,"Formulario");
			this.setActualCuentaBancoForeignKey(autoripago.getid_cuenta_banco(),false,"Formulario");
			this.setActualDetalleProveForeignKey(autoripago.getid_detalle_prove(),false,"Formulario");
			this.setActualTransaccionForeignKey(autoripago.getid_transaccion(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyAutoriPago(AutoriPago autoripago,String sTipoEvento)throws Exception {	
		try {
			
			

				if(autoripago.getCliente()!=null && !sTipoEvento.equals("id_clienteAutoriPago")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(autoripago.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				if(autoripago.getFactura()!=null && !sTipoEvento.equals("id_facturaAutoriPago")) { //sTipoEvento Evita Bucle Infinito

					this.facturasForeignKey=new ArrayList<Factura>();
					this.facturasForeignKey.add(autoripago.getFactura());

					this.addItemDefectoCombosForeignKeyFactura();
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				if(autoripago.getAsientoContable()!=null && !sTipoEvento.equals("id_asiento_contableAutoriPago")) { //sTipoEvento Evita Bucle Infinito

					this.asientocontablesForeignKey=new ArrayList<AsientoContable>();
					this.asientocontablesForeignKey.add(autoripago.getAsientoContable());

					this.addItemDefectoCombosForeignKeyAsientoContable();
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyAutoriPago()throws Exception {	
		try {
			
			this.setActualClienteForeignKey(this.autoripagoConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualFacturaForeignKey(this.autoripagoConstantesFunciones.getid_factura(),false,"Formulario");
			this.setActualAsientoContableForeignKey(this.autoripagoConstantesFunciones.getid_asiento_contable(),false,"Formulario");
			this.setActualCentroCostoForeignKey(this.autoripagoConstantesFunciones.getid_centro_costo(),false,"Formulario");
			this.setActualCentroActividadForeignKey(this.autoripagoConstantesFunciones.getid_centro_actividad(),false,"Formulario");
			this.setActualBancoForeignKey(this.autoripagoConstantesFunciones.getid_banco(),false,"Formulario");
			this.setActualCuentaBancoForeignKey(this.autoripagoConstantesFunciones.getid_cuenta_banco(),false,"Formulario");
			this.setActualDetalleProveForeignKey(this.autoripagoConstantesFunciones.getid_detalle_prove(),false,"Formulario");
			this.setActualTransaccionForeignKey(this.autoripagoConstantesFunciones.getid_transaccion(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyAutoriPago()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormAutoriPago!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.getSelectedItem();
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyAutoriPago()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyAutoriPago()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroAutoriPago()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyAutoriPago()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameFacturasForeignKey("Todos");
			this.cargarCombosFrameAsientoContablesForeignKey("Todos");
			this.cargarCombosFrameCentroCostosForeignKey("Todos");
			this.cargarCombosFrameCentroActividadsForeignKey("Todos");
			this.cargarCombosFrameBancosForeignKey("Todos");
			this.cargarCombosFrameCuentaBancosForeignKey("Todos");
			this.cargarCombosFrameDetalleProvesForeignKey("Todos");
			this.cargarCombosFrameTransaccionsForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyAutoriPago(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCentroActividadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBancosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaBancosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameDetalleProvesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransaccionsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyAutoriPago()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.getItemCount()>0) {
				this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.getItemCount()>0) {
				this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.getItemCount()>0) {
				this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.getItemCount()>0) {
				this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.getItemCount()>0) {
				this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.getItemCount()>0) {
				this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.getItemCount()>0) {
				this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.getItemCount()>0) {
				this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.getItemCount()>0) {
				this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.getItemCount()>0) {
				this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.getItemCount()>0) {
				this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.getItemCount()>0) {
				this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	
























	
	

	public AutoriPagoBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public AutoriPagoBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public AutoriPagoBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.autoripagoSessionBean=new AutoriPagoSessionBean(); 
		this.autoripagoConstantesFunciones=new AutoriPagoConstantesFunciones(); 
		this.autoripagoBean=new AutoriPago();//(this.autoripagoConstantesFunciones); 		
		this.autoripagoReturnGeneral=new AutoriPagoParameterReturnGeneral(); 
		
		this.autoripagoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.autoripagoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public AutoriPagoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public AutoriPagoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public AutoriPagoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessAutoriPago(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.autoripagoConstantesFunciones=new AutoriPagoConstantesFunciones(); 
			this.autoripagoBean=new AutoriPago();//this.autoripagoConstantesFunciones); 			
			this.autoripagoReturnGeneral=new AutoriPagoParameterReturnGeneral(); 
		
			AutoriPagoBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Autori Pago Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.autoripago=new AutoriPago();
			this.autoripagos = new ArrayList<AutoriPago>();
			this.autoripagosAux = new ArrayList<AutoriPago>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic=new AutoriPagoLogic();
				this.autoripagoLogic.getNewConnexionToDeep("");
			}
			
			//this.autoripagoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.autoripagoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormAutoriPago);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoAutoriPago!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoAutoriPago);	
					}
					
					if(this.jInternalFrameImportacionAutoriPago!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionAutoriPago);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByAutoriPago!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByAutoriPago);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormAutoriPago!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormAutoriPago);
				this.jInternalFrameDetalleFormAutoriPago.setVisible(false);
				this.jInternalFrameDetalleFormAutoriPago.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoAutoriPago!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoAutoriPago);
					this.jInternalFrameReporteDinamicoAutoriPago.setVisible(false);
					this.jInternalFrameReporteDinamicoAutoriPago.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionAutoriPago!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionAutoriPago);
					this.jInternalFrameImportacionAutoriPago.setVisible(false);
					this.jInternalFrameImportacionAutoriPago.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByAutoriPago!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByAutoriPago);
					this.jInternalFrameOrderByAutoriPago.setVisible(false);
					this.jInternalFrameOrderByAutoriPago.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idAutoriPagoActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=AutoriPagoConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.autoripagoReturnGeneral=new AutoriPagoParameterReturnGeneral();
			
			this.autoripagoParameterGeneral=new AutoriPagoParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.autoripagoLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.autoripagoSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(AutoriPagoJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.autoripagoSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,AutoriPagoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.autoripagoSessionBean.getEsGuardarRelacionado(),this.autoripagoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,AutoriPagoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.autoripagoSessionBean.getEsGuardarRelacionado(),this.autoripagoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoAutoriPago=false;
			this.isVisibilidadCeldaDuplicarAutoriPago=true;
			this.isVisibilidadCeldaCopiarAutoriPago=true;
			this.isVisibilidadCeldaVerFormAutoriPago=true;
			this.isVisibilidadCeldaOrdenAutoriPago=true;
			this.isVisibilidadCeldaNuevoRelacionesAutoriPago=false;
			this.isVisibilidadCeldaModificarAutoriPago=false;
			this.isVisibilidadCeldaActualizarAutoriPago=false;
			this.isVisibilidadCeldaEliminarAutoriPago=false;
			this.isVisibilidadCeldaCancelarAutoriPago=false;
			this.isVisibilidadCeldaGuardarAutoriPago=false;
			this.isVisibilidadCeldaGuardarCambiosAutoriPago=false;
			
			
			this.isVisibilidadFK_IdAsientoContable=true;
			this.isVisibilidadFK_IdBanco=true;
			this.isVisibilidadFK_IdCentroActividad=true;
			this.isVisibilidadFK_IdCentroCosto=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdCuentaBanco=true;
			this.isVisibilidadFK_IdDetalleProve=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdFactura=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTransaccion=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesAutoriPago("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosAutoriPago();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioAutoriPago(false);
			
			this.setPermisosUsuarioAutoriPago();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.autoripagoSessionBean.getEsGuardarRelacionado() 
				|| (this.autoripagoSessionBean.getEsGuardarRelacionado() && this.autoripagoSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioAutoriPagoClasesRelacionadas();
			}
			
			if(this.autoripagoSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioAutoriPagoClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosAutoriPago();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualAutoriPago();
			}
			
			if(!this.isPermisoBusquedaAutoriPago) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasAutoriPago.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.autoripagoSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioAutoriPago,this.isPermisoPaginacionMedioAutoriPago,this.isPermisoPaginacionTodoAutoriPago);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(AutoriPagoConstantesFunciones.getTiposSeleccionarAutoriPago());
				
				this.tiposColumnasSelect=AutoriPagoConstantesFunciones.getTiposSeleccionarAutoriPago(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.autoripagoSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioAutoriPago();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioAutoriPago(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioAutoriPago(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesAutoriPago() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.clienteLogic=new ClienteLogic();
			this.facturaLogic=new FacturaLogic();
			this.asientocontableLogic=new AsientoContableLogic();
			this.centrocostoLogic=new CentroCostoLogic();
			this.centroactividadLogic=new CentroActividadLogic();
			this.bancoLogic=new BancoLogic();
			this.cuentabancoLogic=new CuentaBancoLogic();
			this.detalleproveLogic=new DetalleProveLogic();
			this.transaccionLogic=new TransaccionLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				autoripagoImplementable= (AutoriPagoImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+AutoriPagoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				autoripagoImplementableHome= (AutoriPagoImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+AutoriPagoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.autoripagos= new ArrayList<AutoriPago>();
			this.autoripagosEliminados= new ArrayList<AutoriPago>();
						
			this.isEsNuevoAutoriPago=false;
			this.esParaAccionDesdeFormularioAutoriPago=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idClienteActual=0L;
			this.idFacturaActual=0L;
			this.idAsientoContableActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.facturasForeignKey=new ArrayList<Factura>() ;
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>() ;
			this.centrocostosForeignKey=new ArrayList<CentroCosto>() ;
			this.centroactividadsForeignKey=new ArrayList<CentroActividad>() ;
			this.bancosForeignKey=new ArrayList<Banco>() ;
			this.cuentabancosForeignKey=new ArrayList<CuentaBanco>() ;
			this.detalleprovesForeignKey=new ArrayList<DetalleProve>() ;
			this.transaccionsForeignKey=new ArrayList<Transaccion>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyAutoriPago(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroAutoriPago();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.autoripagoSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			AutoriPagoBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=AutoriPagoConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesAutoriPago("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingAutoriPago(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormAutoriPago!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioAutoriPago();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioAutoriPago();
			}
			
			AutoriPagoBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasAutoriPago.getTabCount(); i++) {
					this.jTabbedPaneBusquedasAutoriPago.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasAutoriPago.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessAutoriPago(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga AutoriPago: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectAutoriPago() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesAutoriPago")) {
				iIndex=this.jInternalFrameDetalleFormAutoriPago.jTabbedPaneRelacionesAutoriPago.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormAutoriPago.jTabbedPaneRelacionesAutoriPago.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessAutoriPago();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyAutoriPago(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyAutoriPago(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyAutoriPago(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyAutoriPagoListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyAutoriPago();
		
		this.cargarCombosFrameForeignKeyAutoriPago();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyAutoriPago();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyAutoriPago();
		}
	}
	
	

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFactura(this.facturasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroCosto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroCostoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroCosto();
				this.cargarCombosFrameCentroCostosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCentroCosto(this.centrocostosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCentroActividad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCentroActividadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCentroActividad();
				this.cargarCombosFrameCentroActividadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCentroActividad(this.centroactividadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBanco(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBanco();
				this.cargarCombosFrameBancosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaBanco(this.bancosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaBanco(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaBanco();
				this.cargarCombosFrameCuentaBancosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaBanco(this.cuentabancosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyDetalleProve(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyDetalleProveListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyDetalleProve();
				this.cargarCombosFrameDetalleProvesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaDetalleProve(this.detalleprovesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransaccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransaccion();
				this.cargarCombosFrameTransaccionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransaccion(this.transaccionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoAutoriPagoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.autoripagoSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormAutoriPago==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			
			
			if(jTableDatosAutoriPago.getRowCount()>=1) {
				jTableDatosAutoriPago.removeRowSelectionInterval(0, jTableDatosAutoriPago.getRowCount()-1);						
			}
			
			this.isEsNuevoAutoriPago=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoAutoriPago(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesAutoriPago(true);			
			//this.autoripago=new AutoriPago();
			//this.autoripago.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesAutoriPago(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualAutoriPago() ;
			
			if(AutoriPagoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleAutoriPago(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.autoripago);	
			this.actualizarInformacion("INFO_PADRE",false,this.autoripago);				
			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			
			if(this.autoripagoSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar AutoriPago: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarAutoriPagoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosAutoriPago.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosAutoriPago.getSelectedRows().length;			
			}
			
			autoripagosSeleccionados=this.getAutoriPagosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoAutoriPago--;			
				//AutoriPago autoripagoAux= new AutoriPago();			
				//autoripagoAux.setId(this.iIdNuevoAutoriPago);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//AutoriPago autoripagoOrigen=new AutoriPago();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(AutoriPago autoripagoOrigen : autoripagosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							autoripagoOrigen =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							autoripagoOrigen =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaAutoriPago();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.autoripago.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosAutoriPago(autoripagoOrigen,this.autoripago,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.autoripagoLogic.getAutoriPagos().add(this.autoripagoAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.autoripagos.add(this.autoripagoAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaAutoriPago(false);
				
				this.jTableDatosAutoriPago.setRowSelectionInterval(this.getIndiceNuevoAutoriPago(), this.getIndiceNuevoAutoriPago());
				
				int iLastRow =  this.jTableDatosAutoriPago.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosAutoriPago.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosAutoriPago.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaAutoriPago(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarAutoriPagoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();									
		
			AutoriPago autoripagoOrigen=new AutoriPago();
			AutoriPago autoripagoDestino=new AutoriPago();
				
			autoripagosSeleccionados=this.getAutoriPagosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosAutoriPago.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || autoripagosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosAutoriPago.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoOrigen =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						autoripagoOrigen =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						autoripagoDestino =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						autoripagoDestino =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				autoripagoOrigen =autoripagosSeleccionados.get(0);
				autoripagoDestino =autoripagosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosAutoriPago(autoripagoOrigen,autoripagoDestino,true,false);
				
				autoripagoDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(autoripagoDestino,autoripagoLogic.getAutoriPagos());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(autoripagoDestino,autoripagos);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaAutoriPago(false);
				
				//this.jTableDatosAutoriPago.setRowSelectionInterval(this.getIndiceNuevoAutoriPago(), this.getIndiceNuevoAutoriPago());
				
				int iLastRow =  this.jTableDatosAutoriPago.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosAutoriPago.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosAutoriPago.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaAutoriPago(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormAutoriPagoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormAutoriPago==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormAutoriPago.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarAutoriPagoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesAutoriPago.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasAutoriPago.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesAutoriPago.setVisible(!isVisible);
			this.jPanelPaginacionAutoriPago.setVisible(!isVisible);
			this.jPanelAccionesAutoriPago.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarAutoriPagoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameAutoriPago();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoAutoriPagoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoAutoriPago();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionAutoriPagoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionAutoriPago();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByAutoriPagoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByAutoriPago();
			
			this.abrirFrameOrderByAutoriPago();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByAutoriPagoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByAutoriPago();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleAutoriPago(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormAutoriPago);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormAutoriPago.isMaximum()) {
					this.jInternalFrameDetalleFormAutoriPago.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormAutoriPago.setSize(this.jInternalFrameDetalleFormAutoriPago.iWidthFormulario,this.jInternalFrameDetalleFormAutoriPago.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormAutoriPago.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormAutoriPago.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormAutoriPago.isMaximum()) {
						this.jInternalFrameDetalleFormAutoriPago.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormAutoriPago.jContentPaneDetalleAutoriPago.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormAutoriPago.jTabbedPaneRelacionesAutoriPago.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormAutoriPago.jContentPaneDetalleAutoriPago.getWidth(),AutoriPagoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormAutoriPago.jTabbedPaneRelacionesAutoriPago.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormAutoriPago.jContentPaneDetalleAutoriPago.getWidth(),AutoriPagoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormAutoriPago.jTabbedPaneRelacionesAutoriPago.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormAutoriPago.jContentPaneDetalleAutoriPago.getWidth(),AutoriPagoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormAutoriPago.setVisible(true);
	        this.jInternalFrameDetalleFormAutoriPago.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByAutoriPago() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByAutoriPago==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByAutoriPago=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByAutoriPago,false,this);
				} else {
					this.jInternalFrameOrderByAutoriPago=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByAutoriPago,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByAutoriPago);
				this.jInternalFrameOrderByAutoriPago.setVisible(false);
				this.jInternalFrameOrderByAutoriPago.setSelected(false);
				
				this.jInternalFrameOrderByAutoriPago.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByAutoriPago"));
				
				this.inicializarActualizarBindingTablaOrderByAutoriPago();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionAutoriPago() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionAutoriPago==null) {
				
				this.jInternalFrameImportacionAutoriPago=new ImportacionJInternalFrame(AutoriPagoConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionAutoriPago);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionAutoriPago);
				this.jInternalFrameImportacionAutoriPago.setVisible(false);
				this.jInternalFrameImportacionAutoriPago.setSelected(false);


				this.jInternalFrameImportacionAutoriPago.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionAutoriPago"));
				this.jInternalFrameImportacionAutoriPago.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionAutoriPago"));
				this.jInternalFrameImportacionAutoriPago.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionAutoriPago"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoAutoriPago() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoAutoriPago==null) {
				this.jInternalFrameReporteDinamicoAutoriPago=new ReporteDinamicoJInternalFrame(AutoriPagoConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoAutoriPago);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoAutoriPago);
				this.jInternalFrameReporteDinamicoAutoriPago.setVisible(false);
				this.jInternalFrameReporteDinamicoAutoriPago.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoAutoriPago.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoAutoriPago"));
				this.jInternalFrameReporteDinamicoAutoriPago.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoAutoriPago"));
				this.jInternalFrameReporteDinamicoAutoriPago.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoAutoriPago"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualAutoriPago();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleAutoriPago() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormAutoriPago);
			
	       	this.jInternalFrameDetalleFormAutoriPago.setVisible(false);
	        this.jInternalFrameDetalleFormAutoriPago.setSelected(false);
			
			//this.jInternalFrameDetalleFormAutoriPago.dispose();
			//this.jInternalFrameDetalleFormAutoriPago=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoAutoriPago() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoAutoriPago.setVisible(true);
	        this.jInternalFrameReporteDinamicoAutoriPago.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionAutoriPago() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionAutoriPago.setVisible(true);
	        this.jInternalFrameImportacionAutoriPago.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByAutoriPago() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByAutoriPago.setVisible(true);
	        this.jInternalFrameOrderByAutoriPago.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByAutoriPago() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByAutoriPago.setVisible(false);
	        this.jInternalFrameOrderByAutoriPago.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoAutoriPago() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoAutoriPago.setVisible(false);
	        this.jInternalFrameReporteDinamicoAutoriPago.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionAutoriPago() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionAutoriPago.setVisible(false);
	        this.jInternalFrameImportacionAutoriPago.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCentroCosto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCentroCosto);
						CentroCostoBeanSwingJInternalFrame centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.sTipoBusqueda="CentroCosto";
						}

						centrocostoBeanSwingJInternalFrame.getTodosCentroCostoArbol();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setCentroCostos(centrocostoBeanSwingJInternalFrame.centrocostosArbol);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.CargarTreeCentroCosto();
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setVisible(true);
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						centrocostoBeanSwingJInternalFrame.jInternalFrameTreeCentroCosto.jInternalFrameParent=this;
						TitledBorder titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
						TitledBorder titledBorderCentroCosto=(TitledBorder)centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

						titledBorderCentroCosto.setTitle(titledBorderAutoriPago.getTitle() + " -> Centro Costo");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,centrocostoBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(centrocostoBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCentroCosto(CentroCostoBeanSwingJInternalFrame jInternalFrameTreeCentroCosto) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCentroCosto);
						jInternalFrameTreeCentroCosto.setVisible(false);
						jInternalFrameTreeCentroCosto.setSelected(false);
						//jInternalFrameTreeCentroCosto.dispose();
						//jInternalFrameTreeCentroCosto=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarAutoriPagoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarAutoriPago(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarAutoriPago(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesAutoriPago(true);
			//this.isEsNuevoAutoriPago=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesAutoriPago("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesAutoriPago(false) ;
			
			if(autoripagoSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(AutoriPagoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleAutoriPago(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualAutoriPago(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaAutoriPagoActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarAutoriPago(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormAutoriPago==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesAutoriPago(true);
			//this.isEsNuevoAutoriPago=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.autoripago.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesAutoriPago("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesAutoriPago(false) ;
			
			if(AutoriPagoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleAutoriPago(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualAutoriPago(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Cliente")) {
				if(!this.autoripagoConstantesFunciones.cargarid_clienteAutoriPago) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingAutoriPago(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
			
			if(sType.equals("Factura")) {
				if(!this.autoripagoConstantesFunciones.cargarid_facturaAutoriPago) {
					this.cargarCombosFacturasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingAutoriPago(false,false);
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_factura (id);

				this.recargarComboTablaFactura(this.facturasForeignKey);

			}
			
			if(sType.equals("AsientoContable")) {
				if(!this.autoripagoConstantesFunciones.cargarid_asiento_contableAutoriPago) {
					this.cargarCombosAsientoContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingAutoriPago(false,false);
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_asiento_contable (id);

				this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
				
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAutoriPago.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFactura(List<Factura> facturasForeignKey)throws Exception{
		TableColumn tableColumnFactura=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDFACTURA));
		TableCellEditor tableCellEditorFactura =tableColumnFactura.getCellEditor();

		FacturaTableCell facturaTableCellFk=(FacturaTableCell)tableCellEditorFactura;

		if(facturaTableCellFk!=null) {
			facturaTableCellFk.setfacturasForeignKey(facturasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAutoriPago.getSelectedRow();

		//if(intSelectedRow<=0) {
			//facturaTableCellFk.setRowActual(intSelectedRow);
			//facturaTableCellFk.setfacturasForeignKeyActual(facturasForeignKey);
		//}


		if(facturaTableCellFk!=null) {
			facturaTableCellFk.RecargarFacturasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaAsientoContable(List<AsientoContable> asientocontablesForeignKey)throws Exception{
		TableColumn tableColumnAsientoContable=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE));
		TableCellEditor tableCellEditorAsientoContable =tableColumnAsientoContable.getCellEditor();

		AsientoContableTableCell asientocontableTableCellFk=(AsientoContableTableCell)tableCellEditorAsientoContable;

		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.setasientocontablesForeignKey(asientocontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAutoriPago.getSelectedRow();

		//if(intSelectedRow<=0) {
			//asientocontableTableCellFk.setRowActual(intSelectedRow);
			//asientocontableTableCellFk.setasientocontablesForeignKeyActual(asientocontablesForeignKey);
		//}


		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.RecargarAsientoContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroCosto(List<CentroCosto> centrocostosForeignKey)throws Exception{
		TableColumn tableColumnCentroCosto=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO));
		TableCellEditor tableCellEditorCentroCosto =tableColumnCentroCosto.getCellEditor();

		CentroCostoTableCell centrocostoTableCellFk=(CentroCostoTableCell)tableCellEditorCentroCosto;

		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.setcentrocostosForeignKey(centrocostosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAutoriPago.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centrocostoTableCellFk.setRowActual(intSelectedRow);
			//centrocostoTableCellFk.setcentrocostosForeignKeyActual(centrocostosForeignKey);
		//}


		if(centrocostoTableCellFk!=null) {
			centrocostoTableCellFk.RecargarCentroCostosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCentroActividad(List<CentroActividad> centroactividadsForeignKey)throws Exception{
		TableColumn tableColumnCentroActividad=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD));
		TableCellEditor tableCellEditorCentroActividad =tableColumnCentroActividad.getCellEditor();

		CentroActividadTableCell centroactividadTableCellFk=(CentroActividadTableCell)tableCellEditorCentroActividad;

		if(centroactividadTableCellFk!=null) {
			centroactividadTableCellFk.setcentroactividadsForeignKey(centroactividadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAutoriPago.getSelectedRow();

		//if(intSelectedRow<=0) {
			//centroactividadTableCellFk.setRowActual(intSelectedRow);
			//centroactividadTableCellFk.setcentroactividadsForeignKeyActual(centroactividadsForeignKey);
		//}


		if(centroactividadTableCellFk!=null) {
			centroactividadTableCellFk.RecargarCentroActividadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaBanco(List<Banco> bancosForeignKey)throws Exception{
		TableColumn tableColumnBanco=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDBANCO));
		TableCellEditor tableCellEditorBanco =tableColumnBanco.getCellEditor();

		BancoTableCell bancoTableCellFk=(BancoTableCell)tableCellEditorBanco;

		if(bancoTableCellFk!=null) {
			bancoTableCellFk.setbancosForeignKey(bancosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAutoriPago.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bancoTableCellFk.setRowActual(intSelectedRow);
			//bancoTableCellFk.setbancosForeignKeyActual(bancosForeignKey);
		//}


		if(bancoTableCellFk!=null) {
			bancoTableCellFk.RecargarBancosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaBanco(List<CuentaBanco> cuentabancosForeignKey)throws Exception{
		TableColumn tableColumnCuentaBanco=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO));
		TableCellEditor tableCellEditorCuentaBanco =tableColumnCuentaBanco.getCellEditor();

		CuentaBancoTableCell cuentabancoTableCellFk=(CuentaBancoTableCell)tableCellEditorCuentaBanco;

		if(cuentabancoTableCellFk!=null) {
			cuentabancoTableCellFk.setcuentabancosForeignKey(cuentabancosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAutoriPago.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentabancoTableCellFk.setRowActual(intSelectedRow);
			//cuentabancoTableCellFk.setcuentabancosForeignKeyActual(cuentabancosForeignKey);
		//}


		if(cuentabancoTableCellFk!=null) {
			cuentabancoTableCellFk.RecargarCuentaBancosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaDetalleProve(List<DetalleProve> detalleprovesForeignKey)throws Exception{
		TableColumn tableColumnDetalleProve=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE));
		TableCellEditor tableCellEditorDetalleProve =tableColumnDetalleProve.getCellEditor();

		DetalleProveTableCell detalleproveTableCellFk=(DetalleProveTableCell)tableCellEditorDetalleProve;

		if(detalleproveTableCellFk!=null) {
			detalleproveTableCellFk.setdetalleprovesForeignKey(detalleprovesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAutoriPago.getSelectedRow();

		//if(intSelectedRow<=0) {
			//detalleproveTableCellFk.setRowActual(intSelectedRow);
			//detalleproveTableCellFk.setdetalleprovesForeignKeyActual(detalleprovesForeignKey);
		//}


		if(detalleproveTableCellFk!=null) {
			detalleproveTableCellFk.RecargarDetalleProvesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransaccion(List<Transaccion> transaccionsForeignKey)throws Exception{
		TableColumn tableColumnTransaccion=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION));
		TableCellEditor tableCellEditorTransaccion =tableColumnTransaccion.getCellEditor();

		TransaccionTableCell transaccionTableCellFk=(TransaccionTableCell)tableCellEditorTransaccion;

		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.settransaccionsForeignKey(transaccionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosAutoriPago.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transaccionTableCellFk.setRowActual(intSelectedRow);
			//transaccionTableCellFk.settransaccionsForeignKeyActual(transaccionsForeignKey);
		//}


		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.RecargarTransaccionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_factura (Long id) throws Exception {
		this.setActualFacturaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_asiento_contable (Long id) throws Exception {
		this.setActualAsientoContableForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarAutoriPagoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesAutoriPago(false);
			
			//if(!this.isEsNuevoAutoriPago) {								
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(AutoriPagoJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				
			}
			
			if(this.permiteMantenimiento(this.autoripago)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.autoripagoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoAutoriPago=true;
					this.inicializarActualizarBindingTablaAutoriPago(false);
					this.isEsNuevoAutoriPago=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoAutoriPago=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoAutoriPago=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesAutoriPago(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualAutoriPago(false);
				
				this.habilitarDeshabilitarControlesAutoriPago(false);
			
												
				
				if(AutoriPagoJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleAutoriPago();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoAutoriPagoActionPerformed(evt,autoripagoSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualAutoriPago(this.autoripago,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosAutoriPago.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,autoripagoSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.autoripago.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(AutoriPago.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AutoriPago.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarAutoriPagoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				this.autoripago.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				this.autoripago.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.autoripago)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.autoripagoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((AutoriPagoModel) this.jTableDatosAutoriPago.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoAutoriPago=true;
				this.inicializarActualizarBindingTablaAutoriPago(false);
				this.isEsNuevoAutoriPago=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesAutoriPago(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualAutoriPago(false);
				
				this.habilitarDeshabilitarControlesAutoriPago(false);
				
				
				
				if(AutoriPagoJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleAutoriPago();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarAutoriPagoActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosAutoriPago.getRowCount()>=1) {
				jTableDatosAutoriPago.removeRowSelectionInterval(0, jTableDatosAutoriPago.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesAutoriPago(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaAutoriPago(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesAutoriPago(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualAutoriPago(false) ;
			
			this.isEsNuevoAutoriPago=false;
			
			if(AutoriPagoJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleAutoriPago();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosAutoriPagoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingAutoriPago(false);
				
				//SI ES MANUAL
				if(AutoriPagoJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualAutoriPago();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosAutoriPagoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoAutoriPago--;			
			//AutoriPago autoripagoAux= new AutoriPago();			
			//autoripagoAux.setId(this.iIdNuevoAutoriPago);
			
			if(this.jInternalFrameDetalleFormAutoriPago==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaAutoriPago();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
			
			this.autoripago.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.autoripagoLogic.getAutoriPagos().add(this.autoripagoAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.autoripagos.add(this.autoripagoAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaAutoriPago(false);
			
			this.jTableDatosAutoriPago.setRowSelectionInterval(this.getIndiceNuevoAutoriPago(), this.getIndiceNuevoAutoriPago());
			
			int iLastRow =  this.jTableDatosAutoriPago.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosAutoriPago.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosAutoriPago.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaAutoriPago(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionAutoriPagoActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingAutoriPago(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingAutoriPago(false);
			
			//SI ES MANUAL
			if(AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualAutoriPago();
			}
			
			//this.abrirFrameTreeAutoriPago();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionAutoriPagoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Autori PagoS ?", "MANTENIMIENTO DE Autori Pago", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionAutoriPago.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralAutoriPago();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.autoripagoReturnGeneral=autoripagoLogic.procesarImportacionAutoriPagosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.autoripagoParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarAutoriPagoReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionAutoriPagoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionAutoriPago.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionAutoriPago.setFileImportacion(this.jInternalFrameImportacionAutoriPago.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionAutoriPago.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionAutoriPago.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionAutoriPago.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionAutoriPago.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoAutoriPagoActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();		

		autoripagosSeleccionados=this.getAutoriPagosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("AutoriPagoBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"AutoriPagoBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteAutoriPagos("Todos",autoripagosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.autoripagoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Autori Pago",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case AutoriPagoConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_IDFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Factura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Factura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Factura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Factura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_AsientoContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_AsientoContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_AsientoContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_AsientoContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroCosto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroCosto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroCosto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroCosto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CentroActividad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CentroActividad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CentroActividad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CentroActividad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_IDBANCO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Banco_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Banco_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Banco_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Banco_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaBanco_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaBanco_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaBanco_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaBanco_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_DetalleProve_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_DetalleProve_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_DetalleProve_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_DetalleProve_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transaccion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transaccion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transaccion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transaccion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHAEMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEmision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEmision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEmision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEmision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaVencimiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaVencimiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaVencimiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaVencimiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_VALORPAGO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorPago_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorPago_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorPago_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorPago_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorCancelado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorCancelado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorCancelado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorCancelado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talleFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talleFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talleFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talleFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHACORTE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaCorte_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaCorte_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaCorte_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaCorte_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case AutoriPagoConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoAutoriPago.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case AutoriPagoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoria="id_factura";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoria="id_asiento_contable";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoria="id_centro_costo";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD:
					sNombreCampoCategoria="id_centro_actividad";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDBANCO:
					sNombreCampoCategoria="id_banco";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO:
					sNombreCampoCategoria="id_cuenta_banco";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE:
					sNombreCampoCategoria="id_detalle_prove";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION:
					sNombreCampoCategoria="id_transaccion";
					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoria="fecha_emision";
					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					sNombreCampoCategoria="fecha_vencimiento";
					break;

				case AutoriPagoConstantesFunciones.LABEL_VALORPAGO:
					sNombreCampoCategoria="valor_pago";
					break;

				case AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO:
					sNombreCampoCategoria="valor_cancelado";
					break;

				case AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA:
					sNombreCampoCategoria="numero_factura";
					break;

				case AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA:
					sNombreCampoCategoria="detalle_factura";
					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHACORTE:
					sNombreCampoCategoria="fecha_corte";
					break;

				case AutoriPagoConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case AutoriPagoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoriaValor="id_factura";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoriaValor="id_asiento_contable";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO:
					sNombreCampoCategoriaValor="id_centro_costo";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD:
					sNombreCampoCategoriaValor="id_centro_actividad";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDBANCO:
					sNombreCampoCategoriaValor="id_banco";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO:
					sNombreCampoCategoriaValor="id_cuenta_banco";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE:
					sNombreCampoCategoriaValor="id_detalle_prove";
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION:
					sNombreCampoCategoriaValor="id_transaccion";
					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoriaValor="fecha_emision";
					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					sNombreCampoCategoriaValor="fecha_vencimiento";
					break;

				case AutoriPagoConstantesFunciones.LABEL_VALORPAGO:
					sNombreCampoCategoriaValor="valor_pago";
					break;

				case AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO:
					sNombreCampoCategoriaValor="valor_cancelado";
					break;

				case AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA:
					sNombreCampoCategoriaValor="numero_factura";
					break;

				case AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA:
					sNombreCampoCategoriaValor="detalle_factura";
					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHACORTE:
					sNombreCampoCategoriaValor="fecha_corte";
					break;

				case AutoriPagoConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case AutoriPagoConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_factura");
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Asiento Contable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_asiento_contable");
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_costo");
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Centro Activad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_centro_actividad");
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDBANCO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Banco",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_banco");
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Banco",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_banco");
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Detalle Prove",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_detalle_prove");
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Transaccion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transaccion");
					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHAEMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Emision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_emision");
					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Vencimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_vencimiento");
					break;

				case AutoriPagoConstantesFunciones.LABEL_VALORPAGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor Pago",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_pago");
					break;

				case AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor Cancelado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_cancelado");
					break;

				case AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_factura");
					break;

				case AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Detalle Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"detalle_factura");
					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHACORTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Corte",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_corte");
					break;

				case AutoriPagoConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoAutoriPagoActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();		
		
		autoripagosSeleccionados=this.getAutoriPagosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"autoripago";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("AutoriPagos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case AutoriPagoConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDFACTURA);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getfactura_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getasientocontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getcentrocosto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getcentroactividad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDBANCO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDBANCO);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getbanco_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getcuentabanco_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getdetalleprove_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.gettransaccion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHAEMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_FECHAEMISION);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getfecha_emision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getfecha_vencimiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_VALORPAGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_VALORPAGO);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getvalor_pago());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getvalor_cancelado());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getnumero_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getdetalle_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_FECHACORTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_FECHACORTE);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getfecha_corte());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case AutoriPagoConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(AutoriPago autoripago:autoripagosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(autoripago.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelAutoriPago(row);				
			//	iRow++;
			//}				
			
			//for(AutoriPago autoripagoAux:autoripagosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelAutoriPago(autoripagoAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.autoripagoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Autori Pago",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingAutoriPago(false);
			
			//SI ES MANUAL
			if(AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualAutoriPago();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresAutoriPagoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingAutoriPago(false);
			
			//SI ES MANUAL
			if(AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualAutoriPago();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesAutoriPagoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingAutoriPago(false);
			
			//SI ES MANUAL
			if(AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualAutoriPago();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaAutoriPago() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosAutoriPago.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosAutoriPago.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosAutoriPago.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosAutoriPago.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosAutoriPago.setMinimumSize(dimensionMinimum);
		this.jTableDatosAutoriPago.setMaximumSize(dimensionMaximum);
		this.jTableDatosAutoriPago.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingAutoriPago(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingAutoriPago(esInicializar,true);
	}
	
	public void inicializarActualizarBindingAutoriPago(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaAutoriPago(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesAutoriPago(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.autoripagoSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasAutoriPago(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesAutoriPago(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesAutoriPago(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !AutoriPagoJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualAutoriPago() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaAutoriPago();
		
		this.inicializarActualizarBindingBotonesManualAutoriPago(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.autoripagoSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualAutoriPago();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesAutoriPago() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualAutoriPago(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualAutoriPago(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosAutoriPago.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosAutoriPago.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteAutoriPago.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormAutoriPago!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormAutoriPago.jCheckBoxPostAccionNuevoAutoriPago.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormAutoriPago.jCheckBoxPostAccionSinCerrarAutoriPago.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormAutoriPago.jCheckBoxPostAccionSinMensajeAutoriPago.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosAutoriPago.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosAutoriPago.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteAutoriPago.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormAutoriPago!=null) {
				this.jInternalFrameDetalleFormAutoriPago.jCheckBoxPostAccionNuevoAutoriPago.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormAutoriPago.jCheckBoxPostAccionSinCerrarAutoriPago.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormAutoriPago.jCheckBoxPostAccionSinMensajeAutoriPago.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionAutoriPago.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionAutoriPago.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormAutoriPago!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesAutoriPago.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoAutoriPago!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesAutoriPago.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesAutoriPago.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarAutoriPago.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesAutoriPago.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoAutoriPago!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesAutoriPago.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralAutoriPago.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesAutoriPago(Boolean esInicializar) throws Exception {
		try	{	
			if(AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualAutoriPago(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesAutoriPago() throws Exception {
		try	{
			if(AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualAutoriPago();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleAutoriPago() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualAutoriPago() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesAutoriPago.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesAutoriPago.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesAutoriPago.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesAutoriPago.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesAutoriPago.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesAutoriPago.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionAutoriPago.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionAutoriPago.addItem(reporte);
			}
			
			
			if(!this.autoripagoSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionAutoriPago.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionAutoriPago.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesAutoriPago.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesAutoriPago.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesAutoriPago.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesAutoriPago.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarAutoriPago.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarAutoriPago.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarAutoriPago.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualAutoriPago();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualAutoriPago() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoAutoriPago!=null) {
				this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoAutoriPago!=null) {
				this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoAutoriPago!=null) {
				
				if(this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoAutoriPago.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoAutoriPago.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoAutoriPago.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=AutoriPagoConstantesFunciones.getTiposSeleccionarAutoriPago(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=AutoriPagoConstantesFunciones.getTiposSeleccionarAutoriPago(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=AutoriPagoConstantesFunciones.getTiposSeleccionarAutoriPago(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoAutoriPago.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoAutoriPago.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualAutoriPago()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_asiento_contableFK_IdAsientoContableAutoriPago.getSelectedItem()!=null){this.id_asiento_contableFK_IdAsientoContable=((AsientoContable)this.jComboBoxid_asiento_contableFK_IdAsientoContableAutoriPago.getSelectedItem()).getId();}
		if(this.jComboBoxid_bancoFK_IdBancoAutoriPago.getSelectedItem()!=null){this.id_bancoFK_IdBanco=((Banco)this.jComboBoxid_bancoFK_IdBancoAutoriPago.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_actividadFK_IdCentroActividadAutoriPago.getSelectedItem()!=null){this.id_centro_actividadFK_IdCentroActividad=((CentroActividad)this.jComboBoxid_centro_actividadFK_IdCentroActividadAutoriPago.getSelectedItem()).getId();}
		if(this.jComboBoxid_centro_costoFK_IdCentroCostoAutoriPago.getSelectedItem()!=null){this.id_centro_costoFK_IdCentroCosto=((CentroCosto)this.jComboBoxid_centro_costoFK_IdCentroCostoAutoriPago.getSelectedItem()).getId();}
		if(this.jComboBoxid_clienteFK_IdClienteAutoriPago.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteAutoriPago.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_bancoFK_IdCuentaBancoAutoriPago.getSelectedItem()!=null){this.id_cuenta_bancoFK_IdCuentaBanco=((CuentaBanco)this.jComboBoxid_cuenta_bancoFK_IdCuentaBancoAutoriPago.getSelectedItem()).getId();}
		if(this.jComboBoxid_detalle_proveFK_IdDetalleProveAutoriPago.getSelectedItem()!=null){this.id_detalle_proveFK_IdDetalleProve=((DetalleProve)this.jComboBoxid_detalle_proveFK_IdDetalleProveAutoriPago.getSelectedItem()).getId();}
		if(this.jComboBoxid_facturaFK_IdFacturaAutoriPago.getSelectedItem()!=null){this.id_facturaFK_IdFactura=((Factura)this.jComboBoxid_facturaFK_IdFacturaAutoriPago.getSelectedItem()).getId();}
		if(this.jComboBoxid_transaccionFK_IdTransaccionAutoriPago.getSelectedItem()!=null){this.id_transaccionFK_IdTransaccion=((Transaccion)this.jComboBoxid_transaccionFK_IdTransaccionAutoriPago.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasAutoriPago(Boolean esInicializar) throws Exception {				
		if(AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualAutoriPago();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaAutoriPago() throws Exception {
		this.inicializarActualizarBindingTablaAutoriPago(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByAutoriPago() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByAutoriPago.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByAutoriPago.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByAutoriPago.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByAutoriPago.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByAutoriPago.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosAutoriPagoOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPagoOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByAutoriPago.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByAutoriPago.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByAutoriPago.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaAutoriPago(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=autoripagoLogic.getAutoriPagos().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=autoripagos.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(AutoriPagoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosAutoriPago.setModel(new AutoriPagoModel(this.autoripagoLogic.getAutoriPagos(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosAutoriPago.setModel(new AutoriPagoModel(this.autoripagos,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByAutoriPago!=null && this.jInternalFrameOrderByAutoriPago.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByAutoriPago();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+AutoriPagoConstantesFunciones.SCLASSWEBTITULO,autoripagoConstantesFunciones.resaltarSeleccionarAutoriPago,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+AutoriPagoConstantesFunciones.SCLASSWEBTITULO,autoripagoConstantesFunciones.resaltarSeleccionarAutoriPago,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_ID));

		if(this.autoripagoConstantesFunciones.mostraridAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.autoripagoConstantesFunciones.resaltaridAutoriPago,this.autoripagoConstantesFunciones.activaridAutoriPago,iSizeTabla,this,true,"idAutoriPago","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.autoripagoConstantesFunciones.resaltaridAutoriPago,this.autoripagoConstantesFunciones.activaridAutoriPago,this,true,"idAutoriPago","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDEMPRESA));

		if(this.autoripagoConstantesFunciones.mostrarid_empresaAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.autoripagoConstantesFunciones.resaltarid_empresaAutoriPago,this,this.autoripagoConstantesFunciones.activarid_empresaAutoriPago,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.autoripagoConstantesFunciones.resaltarid_empresaAutoriPago,this,this.autoripagoConstantesFunciones.activarid_empresaAutoriPago,false,"id_empresaAutoriPago","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.autoripagoConstantesFunciones.mostrarid_sucursalAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.autoripagoConstantesFunciones.resaltarid_sucursalAutoriPago,this,this.autoripagoConstantesFunciones.activarid_sucursalAutoriPago,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.autoripagoConstantesFunciones.resaltarid_sucursalAutoriPago,this,this.autoripagoConstantesFunciones.activarid_sucursalAutoriPago,false,"id_sucursalAutoriPago","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.autoripagoConstantesFunciones.mostrarid_ejercicioAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.autoripagoConstantesFunciones.resaltarid_ejercicioAutoriPago,this,this.autoripagoConstantesFunciones.activarid_ejercicioAutoriPago,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.autoripagoConstantesFunciones.resaltarid_ejercicioAutoriPago,this,this.autoripagoConstantesFunciones.activarid_ejercicioAutoriPago,false,"id_ejercicioAutoriPago","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDCLIENTE));

		if(this.autoripagoConstantesFunciones.mostrarid_clienteAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.autoripagoConstantesFunciones.resaltarid_clienteAutoriPago,this,this.autoripagoConstantesFunciones.activarid_clienteAutoriPago,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.autoripagoConstantesFunciones.resaltarid_clienteAutoriPago,this,this.autoripagoConstantesFunciones.activarid_clienteAutoriPago,true,"id_clienteAutoriPago","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDFACTURA));

		if(this.autoripagoConstantesFunciones.mostrarid_facturaAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_IDFACTURA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FacturaTableCell(this.facturasForeignKey,this.autoripagoConstantesFunciones.resaltarid_facturaAutoriPago,this,this.autoripagoConstantesFunciones.activarid_facturaAutoriPago,iSizeTabla));
			tableColumn.setCellEditor(new FacturaTableCell(this.facturasForeignKey,this.autoripagoConstantesFunciones.resaltarid_facturaAutoriPago,this,this.autoripagoConstantesFunciones.activarid_facturaAutoriPago,true,"id_facturaAutoriPago","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE));

		if(this.autoripagoConstantesFunciones.mostrarid_asiento_contableAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AsientoContableTableCell(this.asientocontablesForeignKey,this.autoripagoConstantesFunciones.resaltarid_asiento_contableAutoriPago,this,this.autoripagoConstantesFunciones.activarid_asiento_contableAutoriPago,iSizeTabla));
			tableColumn.setCellEditor(new AsientoContableTableCell(this.asientocontablesForeignKey,this.autoripagoConstantesFunciones.resaltarid_asiento_contableAutoriPago,this,this.autoripagoConstantesFunciones.activarid_asiento_contableAutoriPago,true,"id_asiento_contableAutoriPago","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO));

		if(this.autoripagoConstantesFunciones.mostrarid_centro_costoAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CentroCostoTableCell(this.centrocostosForeignKey,this.autoripagoConstantesFunciones.resaltarid_centro_costoAutoriPago,this,this.autoripagoConstantesFunciones.activarid_centro_costoAutoriPago,iSizeTabla));
			tableColumn.setCellEditor(new CentroCostoTableCell(this.centrocostosForeignKey,this.autoripagoConstantesFunciones.resaltarid_centro_costoAutoriPago,this,this.autoripagoConstantesFunciones.activarid_centro_costoAutoriPago,true,"id_centro_costoAutoriPago","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD));

		if(this.autoripagoConstantesFunciones.mostrarid_centro_actividadAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CentroActividadTableCell(this.centroactividadsForeignKey,this.autoripagoConstantesFunciones.resaltarid_centro_actividadAutoriPago,this,this.autoripagoConstantesFunciones.activarid_centro_actividadAutoriPago,iSizeTabla));
			tableColumn.setCellEditor(new CentroActividadTableCell(this.centroactividadsForeignKey,this.autoripagoConstantesFunciones.resaltarid_centro_actividadAutoriPago,this,this.autoripagoConstantesFunciones.activarid_centro_actividadAutoriPago,true,"id_centro_actividadAutoriPago","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDBANCO));

		if(this.autoripagoConstantesFunciones.mostrarid_bancoAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_IDBANCO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BancoTableCell(this.bancosForeignKey,this.autoripagoConstantesFunciones.resaltarid_bancoAutoriPago,this,this.autoripagoConstantesFunciones.activarid_bancoAutoriPago,iSizeTabla));
			tableColumn.setCellEditor(new BancoTableCell(this.bancosForeignKey,this.autoripagoConstantesFunciones.resaltarid_bancoAutoriPago,this,this.autoripagoConstantesFunciones.activarid_bancoAutoriPago,true,"id_bancoAutoriPago","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO));

		if(this.autoripagoConstantesFunciones.mostrarid_cuenta_bancoAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaBancoTableCell(this.cuentabancosForeignKey,this.autoripagoConstantesFunciones.resaltarid_cuenta_bancoAutoriPago,this,this.autoripagoConstantesFunciones.activarid_cuenta_bancoAutoriPago,iSizeTabla));
			tableColumn.setCellEditor(new CuentaBancoTableCell(this.cuentabancosForeignKey,this.autoripagoConstantesFunciones.resaltarid_cuenta_bancoAutoriPago,this,this.autoripagoConstantesFunciones.activarid_cuenta_bancoAutoriPago,true,"id_cuenta_bancoAutoriPago","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE));

		if(this.autoripagoConstantesFunciones.mostrarid_detalle_proveAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new DetalleProveTableCell(this.detalleprovesForeignKey,this.autoripagoConstantesFunciones.resaltarid_detalle_proveAutoriPago,this,this.autoripagoConstantesFunciones.activarid_detalle_proveAutoriPago,iSizeTabla));
			tableColumn.setCellEditor(new DetalleProveTableCell(this.detalleprovesForeignKey,this.autoripagoConstantesFunciones.resaltarid_detalle_proveAutoriPago,this,this.autoripagoConstantesFunciones.activarid_detalle_proveAutoriPago,true,"id_detalle_proveAutoriPago","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION));

		if(this.autoripagoConstantesFunciones.mostrarid_transaccionAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransaccionTableCell(this.transaccionsForeignKey,this.autoripagoConstantesFunciones.resaltarid_transaccionAutoriPago,this,this.autoripagoConstantesFunciones.activarid_transaccionAutoriPago,iSizeTabla));
			tableColumn.setCellEditor(new TransaccionTableCell(this.transaccionsForeignKey,this.autoripagoConstantesFunciones.resaltarid_transaccionAutoriPago,this,this.autoripagoConstantesFunciones.activarid_transaccionAutoriPago,true,"id_transaccionAutoriPago","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_FECHAEMISION));

		if(this.autoripagoConstantesFunciones.mostrarfecha_emisionAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_FECHAEMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.autoripagoConstantesFunciones.resaltarfecha_emisionAutoriPago,this.autoripagoConstantesFunciones.activarfecha_emisionAutoriPago,iSizeTabla,this,true,"fecha_emisionAutoriPago","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.autoripagoConstantesFunciones.resaltarfecha_emisionAutoriPago,this.autoripagoConstantesFunciones.activarfecha_emisionAutoriPago,this,true,"fecha_emisionAutoriPago","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO));

		if(this.autoripagoConstantesFunciones.mostrarfecha_vencimientoAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.autoripagoConstantesFunciones.resaltarfecha_vencimientoAutoriPago,this.autoripagoConstantesFunciones.activarfecha_vencimientoAutoriPago,iSizeTabla,this,true,"fecha_vencimientoAutoriPago","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.autoripagoConstantesFunciones.resaltarfecha_vencimientoAutoriPago,this.autoripagoConstantesFunciones.activarfecha_vencimientoAutoriPago,this,true,"fecha_vencimientoAutoriPago","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_VALORPAGO));

		if(this.autoripagoConstantesFunciones.mostrarvalor_pagoAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_VALORPAGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.autoripagoConstantesFunciones.resaltarvalor_pagoAutoriPago,this.autoripagoConstantesFunciones.activarvalor_pagoAutoriPago,iSizeTabla,this,true,"valor_pagoAutoriPago","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.autoripagoConstantesFunciones.resaltarvalor_pagoAutoriPago,this.autoripagoConstantesFunciones.activarvalor_pagoAutoriPago,this,true,"valor_pagoAutoriPago","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO));

		if(this.autoripagoConstantesFunciones.mostrarvalor_canceladoAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.autoripagoConstantesFunciones.resaltarvalor_canceladoAutoriPago,this.autoripagoConstantesFunciones.activarvalor_canceladoAutoriPago,iSizeTabla,this,true,"valor_canceladoAutoriPago","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.autoripagoConstantesFunciones.resaltarvalor_canceladoAutoriPago,this.autoripagoConstantesFunciones.activarvalor_canceladoAutoriPago,this,true,"valor_canceladoAutoriPago","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA));

		if(this.autoripagoConstantesFunciones.mostrarnumero_facturaAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.autoripagoConstantesFunciones.resaltarnumero_facturaAutoriPago,this.autoripagoConstantesFunciones.activarnumero_facturaAutoriPago,iSizeTabla,this,true,"numero_facturaAutoriPago","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.autoripagoConstantesFunciones.resaltarnumero_facturaAutoriPago,this.autoripagoConstantesFunciones.activarnumero_facturaAutoriPago,this,true,"numero_facturaAutoriPago","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA));

		if(this.autoripagoConstantesFunciones.mostrardetalle_facturaAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.autoripagoConstantesFunciones.resaltardetalle_facturaAutoriPago,this.autoripagoConstantesFunciones.activardetalle_facturaAutoriPago,iSizeTabla,this,true,"detalle_facturaAutoriPago","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.autoripagoConstantesFunciones.resaltardetalle_facturaAutoriPago,this.autoripagoConstantesFunciones.activardetalle_facturaAutoriPago,this,true,"detalle_facturaAutoriPago","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_FECHACORTE));

		if(this.autoripagoConstantesFunciones.mostrarfecha_corteAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_FECHACORTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.autoripagoConstantesFunciones.resaltarfecha_corteAutoriPago,this.autoripagoConstantesFunciones.activarfecha_corteAutoriPago,iSizeTabla,this,true,"fecha_corteAutoriPago","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.autoripagoConstantesFunciones.resaltarfecha_corteAutoriPago,this.autoripagoConstantesFunciones.activarfecha_corteAutoriPago,this,true,"fecha_corteAutoriPago","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,AutoriPagoConstantesFunciones.LABEL_DESCRIPCION));

		if(this.autoripagoConstantesFunciones.mostrardescripcionAutoriPago && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,AutoriPagoConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.autoripagoConstantesFunciones.resaltardescripcionAutoriPago,this.autoripagoConstantesFunciones.activardescripcionAutoriPago,iSizeTabla,this,true,"descripcionAutoriPago","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.autoripagoConstantesFunciones.resaltardescripcionAutoriPago,this.autoripagoConstantesFunciones.activardescripcionAutoriPago,this,true,"descripcionAutoriPago","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new AutoriPagoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.autoripagoSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.autoripagoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.autoripagoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosAutoriPago.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.autoripagoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.autoripagoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosAutoriPago.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarAutoriPago && this.isPermisoGuardarCambiosAutoriPago) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.autoripagoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.autoripagoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosAutoriPago.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosAutoriPago.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarAutoriPago && this.isPermisoGuardarCambiosAutoriPago) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarAutoriPago && this.isPermisoGuardarCambiosAutoriPago) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosAutoriPago.moveColumn(this.jTableDatosAutoriPago.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosAutoriPago.moveColumn(this.jTableDatosAutoriPago.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosAutoriPago.moveColumn(this.jTableDatosAutoriPago.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosAutoriPago.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosAutoriPago.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosAutoriPago,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosAutoriPago.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosAutoriPago.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!AutoriPagoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosAutoriPago.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosAutoriPago.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosAutoriPago.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=autoripagoLogic.getAutoriPagos().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=autoripagos.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosAutoriPago.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosAutoriPago.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosAutoriPago();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoAutoriPago=false;
					
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			
				if(this.autoripagoSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormAutoriPago==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosAutoriPago.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosAutoriPago.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.autoripago.getsType().equals("DUPLICADO")
				   || this.autoripago.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoAutoriPago=true;
				
				} else {
					this.isEsNuevoAutoriPago=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.autoripagoSessionBean.getEsGuardarRelacionado()) {
					if(this.autoripago.getId()>=0 && !this.autoripago.getIsNew()) {						
						this.isEsNuevoAutoriPago=false;
						
					} else {
						this.isEsNuevoAutoriPago=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoAutoriPago(esRelaciones);						
				
				this.seleccionarAutoriPago(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.autoripago.getId()<0) {
					this.isEsNuevoAutoriPago=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarAutoriPago(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarAutoriPago(evt,rowIndex);
				}	
				
				if(this.autoripagoSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion AutoriPago: " + this.dDif); 
					}
				}								
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarAutoriPago(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.autoripago)) {
					if(this.autoripago.getId()>0) {
						this.autoripago.setIsDeleted(true);
						
						this.autoripagosEliminados.add(this.autoripago);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.autoripagoLogic.getAutoriPagos().remove(this.autoripago);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.autoripagos.remove(this.autoripago);				
					}
					
					
					((AutoriPagoModel) this.jTableDatosAutoriPago.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaAutoriPago(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarAutoriPago(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoAutoriPago) {
			
			if(this.jInternalFrameDetalleFormAutoriPago==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosAutoriPago.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosAutoriPago.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(AutoriPagoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioAutoriPago(this.autoripago);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.autoripagoConstantesFunciones.cargarid_empresaAutoriPago || this.autoripagoConstantesFunciones.event_dependid_empresaAutoriPago) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.autoripago.getid_empresa());
									//this.inicializarActualizarBindingAutoriPago(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(autoripago.getEmpresa()!=null) {
							this.empresasForeignKey.add(autoripago.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.autoripago.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.autoripagoConstantesFunciones.cargarid_sucursalAutoriPago || this.autoripagoConstantesFunciones.event_dependid_sucursalAutoriPago) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.autoripago.getid_sucursal());
									//this.inicializarActualizarBindingAutoriPago(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(autoripago.getSucursal()!=null) {
							this.sucursalsForeignKey.add(autoripago.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.autoripago.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.autoripagoConstantesFunciones.cargarid_ejercicioAutoriPago || this.autoripagoConstantesFunciones.event_dependid_ejercicioAutoriPago) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.autoripago.getid_ejercicio());
									//this.inicializarActualizarBindingAutoriPago(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(autoripago.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(autoripago.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.autoripago.getid_ejercicio(),false,"Formulario");

					//Cliente
					if(!this.autoripagoConstantesFunciones.cargarid_clienteAutoriPago || this.autoripagoConstantesFunciones.event_dependid_clienteAutoriPago) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.autoripago.getid_cliente());
									//this.inicializarActualizarBindingAutoriPago(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(autoripago.getCliente()!=null) {
							this.clientesForeignKey.add(autoripago.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.autoripago.getid_cliente(),false,"Formulario");

					//Factura
					if(!this.autoripagoConstantesFunciones.cargarid_facturaAutoriPago || this.autoripagoConstantesFunciones.event_dependid_facturaAutoriPago) {
						//this.cargarCombosFacturasForeignKeyLista(" where id="+this.autoripago.getid_factura());
									//this.inicializarActualizarBindingAutoriPago(false,false);
						this.facturasForeignKey=new ArrayList<Factura>();

						if(autoripago.getFactura()!=null) {
							this.facturasForeignKey.add(autoripago.getFactura());
						}

						this.addItemDefectoCombosForeignKeyFactura();
						this.cargarCombosFrameFacturasForeignKey("Todos");
					}
					this.setActualFacturaForeignKey(this.autoripago.getid_factura(),false,"Formulario");

					//AsientoContable
					if(!this.autoripagoConstantesFunciones.cargarid_asiento_contableAutoriPago || this.autoripagoConstantesFunciones.event_dependid_asiento_contableAutoriPago) {
						//this.cargarCombosAsientoContablesForeignKeyLista(" where id="+this.autoripago.getid_asiento_contable());
									//this.inicializarActualizarBindingAutoriPago(false,false);
						this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

						if(autoripago.getAsientoContable()!=null) {
							this.asientocontablesForeignKey.add(autoripago.getAsientoContable());
						}

						this.addItemDefectoCombosForeignKeyAsientoContable();
						this.cargarCombosFrameAsientoContablesForeignKey("Todos");
					}
					this.setActualAsientoContableForeignKey(this.autoripago.getid_asiento_contable(),false,"Formulario");

					//CentroCosto
					if(!this.autoripagoConstantesFunciones.cargarid_centro_costoAutoriPago || this.autoripagoConstantesFunciones.event_dependid_centro_costoAutoriPago) {
						//this.cargarCombosCentroCostosForeignKeyLista(" where id="+this.autoripago.getid_centro_costo());
									//this.inicializarActualizarBindingAutoriPago(false,false);
						this.centrocostosForeignKey=new ArrayList<CentroCosto>();

						if(autoripago.getCentroCosto()!=null) {
							this.centrocostosForeignKey.add(autoripago.getCentroCosto());
						}

						this.addItemDefectoCombosForeignKeyCentroCosto();
						this.cargarCombosFrameCentroCostosForeignKey("Todos");
					}
					this.setActualCentroCostoForeignKey(this.autoripago.getid_centro_costo(),false,"Formulario");

					//CentroActividad
					if(!this.autoripagoConstantesFunciones.cargarid_centro_actividadAutoriPago || this.autoripagoConstantesFunciones.event_dependid_centro_actividadAutoriPago) {
						//this.cargarCombosCentroActividadsForeignKeyLista(" where id="+this.autoripago.getid_centro_actividad());
									//this.inicializarActualizarBindingAutoriPago(false,false);
						this.centroactividadsForeignKey=new ArrayList<CentroActividad>();

						if(autoripago.getCentroActividad()!=null) {
							this.centroactividadsForeignKey.add(autoripago.getCentroActividad());
						}

						this.addItemDefectoCombosForeignKeyCentroActividad();
						this.cargarCombosFrameCentroActividadsForeignKey("Todos");
					}
					this.setActualCentroActividadForeignKey(this.autoripago.getid_centro_actividad(),false,"Formulario");

					//Banco
					if(!this.autoripagoConstantesFunciones.cargarid_bancoAutoriPago || this.autoripagoConstantesFunciones.event_dependid_bancoAutoriPago) {
						//this.cargarCombosBancosForeignKeyLista(" where id="+this.autoripago.getid_banco());
									//this.inicializarActualizarBindingAutoriPago(false,false);
						this.bancosForeignKey=new ArrayList<Banco>();

						if(autoripago.getBanco()!=null) {
							this.bancosForeignKey.add(autoripago.getBanco());
						}

						this.addItemDefectoCombosForeignKeyBanco();
						this.cargarCombosFrameBancosForeignKey("Todos");
					}
					this.setActualBancoForeignKey(this.autoripago.getid_banco(),false,"Formulario");

					//CuentaBanco
					if(!this.autoripagoConstantesFunciones.cargarid_cuenta_bancoAutoriPago || this.autoripagoConstantesFunciones.event_dependid_cuenta_bancoAutoriPago) {
						//this.cargarCombosCuentaBancosForeignKeyLista(" where id="+this.autoripago.getid_cuenta_banco());
									//this.inicializarActualizarBindingAutoriPago(false,false);
						this.cuentabancosForeignKey=new ArrayList<CuentaBanco>();

						if(autoripago.getCuentaBanco()!=null) {
							this.cuentabancosForeignKey.add(autoripago.getCuentaBanco());
						}

						this.addItemDefectoCombosForeignKeyCuentaBanco();
						this.cargarCombosFrameCuentaBancosForeignKey("Todos");
					}
					this.setActualCuentaBancoForeignKey(this.autoripago.getid_cuenta_banco(),false,"Formulario");

					//DetalleProve
					if(!this.autoripagoConstantesFunciones.cargarid_detalle_proveAutoriPago || this.autoripagoConstantesFunciones.event_dependid_detalle_proveAutoriPago) {
						//this.cargarCombosDetalleProvesForeignKeyLista(" where id="+this.autoripago.getid_detalle_prove());
									//this.inicializarActualizarBindingAutoriPago(false,false);
						this.detalleprovesForeignKey=new ArrayList<DetalleProve>();

						if(autoripago.getDetalleProve()!=null) {
							this.detalleprovesForeignKey.add(autoripago.getDetalleProve());
						}

						this.addItemDefectoCombosForeignKeyDetalleProve();
						this.cargarCombosFrameDetalleProvesForeignKey("Todos");
					}
					this.setActualDetalleProveForeignKey(this.autoripago.getid_detalle_prove(),false,"Formulario");

					//Transaccion
					if(!this.autoripagoConstantesFunciones.cargarid_transaccionAutoriPago || this.autoripagoConstantesFunciones.event_dependid_transaccionAutoriPago) {
						//this.cargarCombosTransaccionsForeignKeyLista(" where id="+this.autoripago.getid_transaccion());
									//this.inicializarActualizarBindingAutoriPago(false,false);
						this.transaccionsForeignKey=new ArrayList<Transaccion>();

						if(autoripago.getTransaccion()!=null) {
							this.transaccionsForeignKey.add(autoripago.getTransaccion());
						}

						this.addItemDefectoCombosForeignKeyTransaccion();
						this.cargarCombosFrameTransaccionsForeignKey("Todos");
					}
					this.setActualTransaccionForeignKey(this.autoripago.getid_transaccion(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesAutoriPago("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesAutoriPago(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualAutoriPago() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoAutoriPago(AutoriPago autoripago) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoAutoriPago(autoripago,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoAutoriPago(AutoriPago autoripago,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioAutoriPago(autoripago);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyAutoriPago(autoripago,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyAutoriPago(autoripago);
	}
	
	public void setVariablesObjetoActualToFormularioAutoriPago(AutoriPago autoripago) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormAutoriPago==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormAutoriPago.jLabelidAutoriPago.setText(autoripago.getId().toString());
			this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_emisionAutoriPago.setDate(autoripago.getfecha_emision());
			this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_vencimientoAutoriPago.setDate(autoripago.getfecha_vencimiento());
			this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_pagoAutoriPago.setText(autoripago.getvalor_pago().toString());
			this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_canceladoAutoriPago.setText(autoripago.getvalor_cancelado().toString());
			this.jInternalFrameDetalleFormAutoriPago.jTextFieldnumero_facturaAutoriPago.setText(autoripago.getnumero_factura());
			this.jInternalFrameDetalleFormAutoriPago.jTextAreadetalle_facturaAutoriPago.setText(autoripago.getdetalle_factura());
			this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_corteAutoriPago.setDate(autoripago.getfecha_corte());
			this.jInternalFrameDetalleFormAutoriPago.jTextAreadescripcionAutoriPago.setText(autoripago.getdescripcion());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,AutoriPago autoripagoLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,autoripagoLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,AutoriPago autoripagoLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				autoripagoLocal=this.autoripago;
			} else {
				autoripagoLocal=this.autoripagoAnterior;
			}
		}
		
		if(this.permiteMantenimiento(autoripagoLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoAutoriPago(autoripagoLocal,true);
					
					if(autoripagoSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(autoripagoLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.autoripagoSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(autoripagoLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoAutoriPago(AutoriPago autoripago,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualAutoriPago(autoripago,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(autoripago);
	}
	
	public void setVariablesFormularioToObjetoActualAutoriPago(AutoriPago autoripago,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualAutoriPago(autoripago,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualAutoriPago(AutoriPago autoripago,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormAutoriPago==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormAutoriPago.jLabelidAutoriPago.getText()==null || this.jInternalFrameDetalleFormAutoriPago.jLabelidAutoriPago.getText()=="" || this.jInternalFrameDetalleFormAutoriPago.jLabelidAutoriPago.getText()=="Id") {
				this.jInternalFrameDetalleFormAutoriPago.jLabelidAutoriPago.setText("0");
			}

			if(conColumnasBase) {autoripago.setId(Long.parseLong(this.jInternalFrameDetalleFormAutoriPago.jLabelidAutoriPago.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AutoriPagoConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelIdAutoriPago,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			autoripago.setfecha_emision(this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_emisionAutoriPago.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AutoriPagoConstantesFunciones.LABEL_FECHAEMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelfecha_emisionAutoriPago,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			autoripago.setfecha_vencimiento(this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_vencimientoAutoriPago.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelfecha_vencimientoAutoriPago,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			autoripago.setvalor_pago(Double.parseDouble(this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_pagoAutoriPago.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AutoriPagoConstantesFunciones.LABEL_VALORPAGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelvalor_pagoAutoriPago,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			autoripago.setvalor_cancelado(Double.parseDouble(this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_canceladoAutoriPago.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelvalor_canceladoAutoriPago,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			autoripago.setnumero_factura(this.jInternalFrameDetalleFormAutoriPago.jTextFieldnumero_facturaAutoriPago.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelnumero_facturaAutoriPago,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			autoripago.setdetalle_factura(this.jInternalFrameDetalleFormAutoriPago.jTextAreadetalle_facturaAutoriPago.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabeldetalle_facturaAutoriPago,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			autoripago.setfecha_corte(this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_corteAutoriPago.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AutoriPagoConstantesFunciones.LABEL_FECHACORTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabelfecha_corteAutoriPago,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			autoripago.setdescripcion(this.jInternalFrameDetalleFormAutoriPago.jTextAreadescripcionAutoriPago.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+AutoriPagoConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormAutoriPago.jLabeldescripcionAutoriPago,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualAutoriPago(AutoriPago autoripagoBean,AutoriPago autoripago,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && autoripagoBean.getid_cliente()!=null && !autoripagoBean.getid_cliente().equals(-1L))) {autoripago.setid_cliente(autoripagoBean.getid_cliente());}
			if(conDefault || (!conDefault && autoripagoBean.getid_factura()!=null && !autoripagoBean.getid_factura().equals(-1L))) {autoripago.setid_factura(autoripagoBean.getid_factura());}
			if(conDefault || (!conDefault && autoripagoBean.getid_asiento_contable()!=null && !autoripagoBean.getid_asiento_contable().equals(-1L))) {autoripago.setid_asiento_contable(autoripagoBean.getid_asiento_contable());}
			if(conDefault || (!conDefault && autoripagoBean.getid_centro_costo()!=null && !autoripagoBean.getid_centro_costo().equals(null))) {autoripago.setid_centro_costo(autoripagoBean.getid_centro_costo());}
			if(conDefault || (!conDefault && autoripagoBean.getid_centro_actividad()!=null && !autoripagoBean.getid_centro_actividad().equals(null))) {autoripago.setid_centro_actividad(autoripagoBean.getid_centro_actividad());}
			if(conDefault || (!conDefault && autoripagoBean.getid_banco()!=null && !autoripagoBean.getid_banco().equals(-1L))) {autoripago.setid_banco(autoripagoBean.getid_banco());}
			if(conDefault || (!conDefault && autoripagoBean.getid_cuenta_banco()!=null && !autoripagoBean.getid_cuenta_banco().equals(-1L))) {autoripago.setid_cuenta_banco(autoripagoBean.getid_cuenta_banco());}
			if(conDefault || (!conDefault && autoripagoBean.getid_detalle_prove()!=null && !autoripagoBean.getid_detalle_prove().equals(-1L))) {autoripago.setid_detalle_prove(autoripagoBean.getid_detalle_prove());}
			if(conDefault || (!conDefault && autoripagoBean.getid_transaccion()!=null && !autoripagoBean.getid_transaccion().equals(-1L))) {autoripago.setid_transaccion(autoripagoBean.getid_transaccion());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosAutoriPago(AutoriPago autoripagoOrigen,AutoriPago autoripago,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && autoripagoOrigen.getId()!=null && !autoripagoOrigen.getId().equals(0L))) {autoripago.setId(autoripagoOrigen.getId());}}
			if(conDefault || (!conDefault && autoripagoOrigen.getid_cliente()!=null && !autoripagoOrigen.getid_cliente().equals(-1L))) {autoripago.setid_cliente(autoripagoOrigen.getid_cliente());}
			if(conDefault || (!conDefault && autoripagoOrigen.getid_factura()!=null && !autoripagoOrigen.getid_factura().equals(-1L))) {autoripago.setid_factura(autoripagoOrigen.getid_factura());}
			if(conDefault || (!conDefault && autoripagoOrigen.getid_asiento_contable()!=null && !autoripagoOrigen.getid_asiento_contable().equals(-1L))) {autoripago.setid_asiento_contable(autoripagoOrigen.getid_asiento_contable());}
			if(conDefault || (!conDefault && autoripagoOrigen.getid_centro_costo()!=null && !autoripagoOrigen.getid_centro_costo().equals(null))) {autoripago.setid_centro_costo(autoripagoOrigen.getid_centro_costo());}
			if(conDefault || (!conDefault && autoripagoOrigen.getid_centro_actividad()!=null && !autoripagoOrigen.getid_centro_actividad().equals(null))) {autoripago.setid_centro_actividad(autoripagoOrigen.getid_centro_actividad());}
			if(conDefault || (!conDefault && autoripagoOrigen.getid_banco()!=null && !autoripagoOrigen.getid_banco().equals(-1L))) {autoripago.setid_banco(autoripagoOrigen.getid_banco());}
			if(conDefault || (!conDefault && autoripagoOrigen.getid_cuenta_banco()!=null && !autoripagoOrigen.getid_cuenta_banco().equals(-1L))) {autoripago.setid_cuenta_banco(autoripagoOrigen.getid_cuenta_banco());}
			if(conDefault || (!conDefault && autoripagoOrigen.getid_detalle_prove()!=null && !autoripagoOrigen.getid_detalle_prove().equals(-1L))) {autoripago.setid_detalle_prove(autoripagoOrigen.getid_detalle_prove());}
			if(conDefault || (!conDefault && autoripagoOrigen.getid_transaccion()!=null && !autoripagoOrigen.getid_transaccion().equals(-1L))) {autoripago.setid_transaccion(autoripagoOrigen.getid_transaccion());}
			if(conDefault || (!conDefault && autoripagoOrigen.getfecha_emision()!=null && !autoripagoOrigen.getfecha_emision().equals(new Date()))) {autoripago.setfecha_emision(autoripagoOrigen.getfecha_emision());}
			if(conDefault || (!conDefault && autoripagoOrigen.getfecha_vencimiento()!=null && !autoripagoOrigen.getfecha_vencimiento().equals(new Date()))) {autoripago.setfecha_vencimiento(autoripagoOrigen.getfecha_vencimiento());}
			if(conDefault || (!conDefault && autoripagoOrigen.getvalor_pago()!=null && !autoripagoOrigen.getvalor_pago().equals(0.0))) {autoripago.setvalor_pago(autoripagoOrigen.getvalor_pago());}
			if(conDefault || (!conDefault && autoripagoOrigen.getvalor_cancelado()!=null && !autoripagoOrigen.getvalor_cancelado().equals(0.0))) {autoripago.setvalor_cancelado(autoripagoOrigen.getvalor_cancelado());}
			if(conDefault || (!conDefault && autoripagoOrigen.getnumero_factura()!=null && !autoripagoOrigen.getnumero_factura().equals(""))) {autoripago.setnumero_factura(autoripagoOrigen.getnumero_factura());}
			if(conDefault || (!conDefault && autoripagoOrigen.getdetalle_factura()!=null && !autoripagoOrigen.getdetalle_factura().equals(""))) {autoripago.setdetalle_factura(autoripagoOrigen.getdetalle_factura());}
			if(conDefault || (!conDefault && autoripagoOrigen.getfecha_corte()!=null && !autoripagoOrigen.getfecha_corte().equals(new Date()))) {autoripago.setfecha_corte(autoripagoOrigen.getfecha_corte());}
			if(conDefault || (!conDefault && autoripagoOrigen.getdescripcion()!=null && !autoripagoOrigen.getdescripcion().equals(""))) {autoripago.setdescripcion(autoripagoOrigen.getdescripcion());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioAutoriPago(AutoriPago autoripago) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormAutoriPago.jLabelidAutoriPago.setText(autoripago.getId().toString());
			this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_emisionAutoriPago.setDate(autoripago.getfecha_emision());
			this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_vencimientoAutoriPago.setDate(autoripago.getfecha_vencimiento());
			this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_pagoAutoriPago.setText(autoripago.getvalor_pago().toString());
			this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_canceladoAutoriPago.setText(autoripago.getvalor_cancelado().toString());
			this.jInternalFrameDetalleFormAutoriPago.jTextFieldnumero_facturaAutoriPago.setText(autoripago.getnumero_factura());
			this.jInternalFrameDetalleFormAutoriPago.jTextAreadetalle_facturaAutoriPago.setText(autoripago.getdetalle_factura());
			this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_corteAutoriPago.setDate(autoripago.getfecha_corte());
			this.jInternalFrameDetalleFormAutoriPago.jTextAreadescripcionAutoriPago.setText(autoripago.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioAutoriPago(AutoriPagoBean autoripagoBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormAutoriPago.jLabelidAutoriPago.setText(autoripagoBean.getId().toString());
			this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_emisionAutoriPago.setDate(autoripagoBean.getfecha_emision());
			this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_vencimientoAutoriPago.setDate(autoripagoBean.getfecha_vencimiento());
			this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_pagoAutoriPago.setText(autoripagoBean.getvalor_pago().toString());
			this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_canceladoAutoriPago.setText(autoripagoBean.getvalor_cancelado().toString());
			this.jInternalFrameDetalleFormAutoriPago.jTextFieldnumero_facturaAutoriPago.setText(autoripagoBean.getnumero_factura());
			this.jInternalFrameDetalleFormAutoriPago.jTextAreadetalle_facturaAutoriPago.setText(autoripagoBean.getdetalle_factura());
			this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_corteAutoriPago.setDate(autoripagoBean.getfecha_corte());
			this.jInternalFrameDetalleFormAutoriPago.jTextAreadescripcionAutoriPago.setText(autoripagoBean.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanAutoriPago(AutoriPagoParameterReturnGeneral autoripagoReturnGeneral,AutoriPagoBean autoripagoBean,Boolean conDefault) throws Exception { 
		try {
			AutoriPago autoripagoLocal=new AutoriPago();
			
			autoripagoLocal=autoripagoReturnGeneral.getAutoriPago();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && autoripagoLocal.getId()!=null && !autoripagoLocal.getId().equals(0L))) {autoripagoBean.setId(autoripagoLocal.getId());}}
			if(conDefault || (!conDefault && autoripagoLocal.getid_cliente()!=null && !autoripagoLocal.getid_cliente().equals(-1L))) {autoripagoBean.setid_cliente(autoripagoLocal.getid_cliente());}
			if(conDefault || (!conDefault && autoripagoLocal.getid_factura()!=null && !autoripagoLocal.getid_factura().equals(-1L))) {autoripagoBean.setid_factura(autoripagoLocal.getid_factura());}
			if(conDefault || (!conDefault && autoripagoLocal.getid_asiento_contable()!=null && !autoripagoLocal.getid_asiento_contable().equals(-1L))) {autoripagoBean.setid_asiento_contable(autoripagoLocal.getid_asiento_contable());}
			if(conDefault || (!conDefault && autoripagoLocal.getid_centro_costo()!=null && !autoripagoLocal.getid_centro_costo().equals(null))) {autoripagoBean.setid_centro_costo(autoripagoLocal.getid_centro_costo());}
			if(conDefault || (!conDefault && autoripagoLocal.getid_centro_actividad()!=null && !autoripagoLocal.getid_centro_actividad().equals(null))) {autoripagoBean.setid_centro_actividad(autoripagoLocal.getid_centro_actividad());}
			if(conDefault || (!conDefault && autoripagoLocal.getid_banco()!=null && !autoripagoLocal.getid_banco().equals(-1L))) {autoripagoBean.setid_banco(autoripagoLocal.getid_banco());}
			if(conDefault || (!conDefault && autoripagoLocal.getid_cuenta_banco()!=null && !autoripagoLocal.getid_cuenta_banco().equals(-1L))) {autoripagoBean.setid_cuenta_banco(autoripagoLocal.getid_cuenta_banco());}
			if(conDefault || (!conDefault && autoripagoLocal.getid_detalle_prove()!=null && !autoripagoLocal.getid_detalle_prove().equals(-1L))) {autoripagoBean.setid_detalle_prove(autoripagoLocal.getid_detalle_prove());}
			if(conDefault || (!conDefault && autoripagoLocal.getid_transaccion()!=null && !autoripagoLocal.getid_transaccion().equals(-1L))) {autoripagoBean.setid_transaccion(autoripagoLocal.getid_transaccion());}
			if(conDefault || (!conDefault && autoripagoLocal.getfecha_emision()!=null && !autoripagoLocal.getfecha_emision().equals(new Date()))) {autoripagoBean.setfecha_emision(autoripagoLocal.getfecha_emision());}
			if(conDefault || (!conDefault && autoripagoLocal.getfecha_vencimiento()!=null && !autoripagoLocal.getfecha_vencimiento().equals(new Date()))) {autoripagoBean.setfecha_vencimiento(autoripagoLocal.getfecha_vencimiento());}
			if(conDefault || (!conDefault && autoripagoLocal.getvalor_pago()!=null && !autoripagoLocal.getvalor_pago().equals(0.0))) {autoripagoBean.setvalor_pago(autoripagoLocal.getvalor_pago());}
			if(conDefault || (!conDefault && autoripagoLocal.getvalor_cancelado()!=null && !autoripagoLocal.getvalor_cancelado().equals(0.0))) {autoripagoBean.setvalor_cancelado(autoripagoLocal.getvalor_cancelado());}
			if(conDefault || (!conDefault && autoripagoLocal.getnumero_factura()!=null && !autoripagoLocal.getnumero_factura().equals(""))) {autoripagoBean.setnumero_factura(autoripagoLocal.getnumero_factura());}
			if(conDefault || (!conDefault && autoripagoLocal.getdetalle_factura()!=null && !autoripagoLocal.getdetalle_factura().equals(""))) {autoripagoBean.setdetalle_factura(autoripagoLocal.getdetalle_factura());}
			if(conDefault || (!conDefault && autoripagoLocal.getfecha_corte()!=null && !autoripagoLocal.getfecha_corte().equals(new Date()))) {autoripagoBean.setfecha_corte(autoripagoLocal.getfecha_corte());}
			if(conDefault || (!conDefault && autoripagoLocal.getdescripcion()!=null && !autoripagoLocal.getdescripcion().equals(""))) {autoripagoBean.setdescripcion(autoripagoLocal.getdescripcion());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxAutoriPagoGenerico(Long idAutoriPagoSeleccionado,JComboBox jComboBoxAutoriPago,List<AutoriPago> autoripagosLocal)throws Exception {
		try {
			AutoriPago  autoripagoTemp=null;

			for(AutoriPago autoripagoAux:autoripagosLocal) {
				if(autoripagoAux.getId()!=null && autoripagoAux.getId().equals(idAutoriPagoSeleccionado)) {
					autoripagoTemp=autoripagoAux;
					break;
				}
			}

			jComboBoxAutoriPago.setSelectedItem(autoripagoTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxAutoriPagoGenerico(JComboBox jComboBoxAutoriPago,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxAutoriPago.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxAutoriPago.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxAutoriPago.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxAutoriPago.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxAutoriPago.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxAutoriPago.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxAutoriPago.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxAutoriPago.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxAutoriPago.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxAutoriPago.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			autoripago=(AutoriPago) autoripagoLogic.getAutoriPagos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			autoripago =(AutoriPago) autoripagos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!autoripago.getIsNew() && !autoripago.getIsChanged() && !autoripago.getIsDeleted()) {
				sDescripcion=autoripago.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=autoripago.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!autoripago.getIsNew() && !autoripago.getIsChanged() && !autoripago.getIsDeleted()) {
				sDescripcion=autoripago.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=autoripago.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!autoripago.getIsNew() && !autoripago.getIsChanged() && !autoripago.getIsDeleted()) {
				sDescripcion=autoripago.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=autoripago.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!autoripago.getIsNew() && !autoripago.getIsChanged() && !autoripago.getIsDeleted()) {
				sDescripcion=autoripago.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=autoripago.getcliente_descripcion();
			}
		}

		if(sTipo.equals("Factura")) {
			//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
			if(!autoripago.getIsNew() && !autoripago.getIsChanged() && !autoripago.getIsDeleted()) {
				sDescripcion=autoripago.getfactura_descripcion();
			} else {
				//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
				sDescripcion=autoripago.getfactura_descripcion();
			}
		}

		if(sTipo.equals("AsientoContable")) {
			//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
			if(!autoripago.getIsNew() && !autoripago.getIsChanged() && !autoripago.getIsDeleted()) {
				sDescripcion=autoripago.getasientocontable_descripcion();
			} else {
				//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
				sDescripcion=autoripago.getasientocontable_descripcion();
			}
		}

		if(sTipo.equals("CentroCosto")) {
			//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
			if(!autoripago.getIsNew() && !autoripago.getIsChanged() && !autoripago.getIsDeleted()) {
				sDescripcion=autoripago.getcentrocosto_descripcion();
			} else {
				//sDescripcion=this.getActualCentroCostoForeignKeyDescripcion((Long)value);
				sDescripcion=autoripago.getcentrocosto_descripcion();
			}
		}

		if(sTipo.equals("CentroActividad")) {
			//sDescripcion=this.getActualCentroActividadForeignKeyDescripcion((Long)value);
			if(!autoripago.getIsNew() && !autoripago.getIsChanged() && !autoripago.getIsDeleted()) {
				sDescripcion=autoripago.getcentroactividad_descripcion();
			} else {
				//sDescripcion=this.getActualCentroActividadForeignKeyDescripcion((Long)value);
				sDescripcion=autoripago.getcentroactividad_descripcion();
			}
		}

		if(sTipo.equals("Banco")) {
			//sDescripcion=this.getActualBancoForeignKeyDescripcion((Long)value);
			if(!autoripago.getIsNew() && !autoripago.getIsChanged() && !autoripago.getIsDeleted()) {
				sDescripcion=autoripago.getbanco_descripcion();
			} else {
				//sDescripcion=this.getActualBancoForeignKeyDescripcion((Long)value);
				sDescripcion=autoripago.getbanco_descripcion();
			}
		}

		if(sTipo.equals("CuentaBanco")) {
			//sDescripcion=this.getActualCuentaBancoForeignKeyDescripcion((Long)value);
			if(!autoripago.getIsNew() && !autoripago.getIsChanged() && !autoripago.getIsDeleted()) {
				sDescripcion=autoripago.getcuentabanco_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaBancoForeignKeyDescripcion((Long)value);
				sDescripcion=autoripago.getcuentabanco_descripcion();
			}
		}

		if(sTipo.equals("DetalleProve")) {
			//sDescripcion=this.getActualDetalleProveForeignKeyDescripcion((Long)value);
			if(!autoripago.getIsNew() && !autoripago.getIsChanged() && !autoripago.getIsDeleted()) {
				sDescripcion=autoripago.getdetalleprove_descripcion();
			} else {
				//sDescripcion=this.getActualDetalleProveForeignKeyDescripcion((Long)value);
				sDescripcion=autoripago.getdetalleprove_descripcion();
			}
		}

		if(sTipo.equals("Transaccion")) {
			//sDescripcion=this.getActualTransaccionForeignKeyDescripcion((Long)value);
			if(!autoripago.getIsNew() && !autoripago.getIsChanged() && !autoripago.getIsDeleted()) {
				sDescripcion=autoripago.gettransaccion_descripcion();
			} else {
				//sDescripcion=this.getActualTransaccionForeignKeyDescripcion((Long)value);
				sDescripcion=autoripago.gettransaccion_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		AutoriPago autoripagoRow=new AutoriPago();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			autoripagoRow=(AutoriPago) autoripagoLogic.getAutoriPagos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			autoripagoRow=(AutoriPago) autoripagos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualAutoriPago(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoAutoriPago.setVisible((this.isVisibilidadCeldaNuevoAutoriPago && this.isPermisoNuevoAutoriPago));			
			this.jButtonDuplicarAutoriPago.setVisible((this.isVisibilidadCeldaDuplicarAutoriPago && this.isPermisoDuplicarAutoriPago));			
			this.jButtonCopiarAutoriPago.setVisible((this.isVisibilidadCeldaCopiarAutoriPago && this.isPermisoCopiarAutoriPago));
			this.jButtonVerFormAutoriPago.setVisible((this.isVisibilidadCeldaVerFormAutoriPago && this.isPermisoVerFormAutoriPago));
			
			this.jButtonAbrirOrderByAutoriPago.setVisible((this.isVisibilidadCeldaOrdenAutoriPago && this.isPermisoOrdenAutoriPago));			
			
			this.jButtonNuevoRelacionesAutoriPago.setVisible((this.isVisibilidadCeldaNuevoRelacionesAutoriPago && this.isPermisoNuevoAutoriPago));			
			this.jButtonNuevoGuardarCambiosAutoriPago.setVisible((this.isVisibilidadCeldaNuevoAutoriPago && this.isPermisoNuevoAutoriPago && this.isPermisoGuardarCambiosAutoriPago));
			
			if(this.jInternalFrameDetalleFormAutoriPago!=null) {
			this.jInternalFrameDetalleFormAutoriPago.jButtonModificarAutoriPago.setVisible((this.isVisibilidadCeldaModificarAutoriPago && this.isPermisoActualizarAutoriPago));	
			this.jInternalFrameDetalleFormAutoriPago.jButtonActualizarAutoriPago.setVisible((this.isVisibilidadCeldaActualizarAutoriPago && this.isPermisoActualizarAutoriPago));	
			this.jInternalFrameDetalleFormAutoriPago.jButtonEliminarAutoriPago.setVisible((this.isVisibilidadCeldaEliminarAutoriPago && this.isPermisoEliminarAutoriPago));
			this.jInternalFrameDetalleFormAutoriPago.jButtonCancelarAutoriPago.setVisible(this.isVisibilidadCeldaCancelarAutoriPago);							
			this.jInternalFrameDetalleFormAutoriPago.jButtonGuardarCambiosAutoriPago.setVisible((this.isVisibilidadCeldaGuardarAutoriPago && this.isPermisoGuardarCambiosAutoriPago));			
			
			}
						
			this.jButtonGuardarCambiosTablaAutoriPago.setVisible((this.isVisibilidadCeldaGuardarCambiosAutoriPago && this.isPermisoGuardarCambiosAutoriPago));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarAutoriPago.setVisible((this.isVisibilidadCeldaNuevoAutoriPago && this.isPermisoNuevoAutoriPago));						
			this.jButtonDuplicarToolBarAutoriPago.setVisible((this.isVisibilidadCeldaDuplicarAutoriPago && this.isPermisoDuplicarAutoriPago));						
			this.jButtonCopiarToolBarAutoriPago.setVisible((this.isVisibilidadCeldaCopiarAutoriPago && this.isPermisoCopiarAutoriPago));			
			this.jButtonVerFormToolBarAutoriPago.setVisible((this.isVisibilidadCeldaVerFormAutoriPago && this.isPermisoVerFormAutoriPago));			
			this.jButtonAbrirOrderByToolBarAutoriPago.setVisible((this.isVisibilidadCeldaOrdenAutoriPago && this.isPermisoOrdenAutoriPago));
			this.jButtonNuevoRelacionesToolBarAutoriPago.setVisible((this.isVisibilidadCeldaNuevoRelacionesAutoriPago && this.isPermisoNuevoAutoriPago));			
			this.jButtonNuevoGuardarCambiosToolBarAutoriPago.setVisible((this.isVisibilidadCeldaNuevoAutoriPago && this.isPermisoNuevoAutoriPago && this.isPermisoGuardarCambiosAutoriPago));			
			
			if(this.jInternalFrameDetalleFormAutoriPago!=null) {
			this.jInternalFrameDetalleFormAutoriPago.jButtonModificarToolBarAutoriPago.setVisible((this.isVisibilidadCeldaModificarAutoriPago && this.isPermisoActualizarAutoriPago));	
			this.jInternalFrameDetalleFormAutoriPago.jButtonActualizarToolBarAutoriPago.setVisible((this.isVisibilidadCeldaActualizarAutoriPago  && this.isPermisoActualizarAutoriPago));	
			this.jInternalFrameDetalleFormAutoriPago.jButtonEliminarToolBarAutoriPago.setVisible((this.isVisibilidadCeldaEliminarAutoriPago && this.isPermisoEliminarAutoriPago));
			this.jInternalFrameDetalleFormAutoriPago.jButtonCancelarToolBarAutoriPago.setVisible(this.isVisibilidadCeldaCancelarAutoriPago);				
			this.jInternalFrameDetalleFormAutoriPago.jButtonGuardarCambiosToolBarAutoriPago.setVisible((this.isVisibilidadCeldaGuardarAutoriPago && this.isPermisoGuardarCambiosAutoriPago));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarAutoriPago.setVisible((this.isVisibilidadCeldaGuardarCambiosAutoriPago && this.isPermisoGuardarCambiosAutoriPago));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoAutoriPago.setVisible((this.isVisibilidadCeldaNuevoAutoriPago && this.isPermisoNuevoAutoriPago));			
			this.jMenuItemDuplicarAutoriPago.setVisible((this.isVisibilidadCeldaDuplicarAutoriPago && this.isPermisoDuplicarAutoriPago));			
			this.jMenuItemCopiarAutoriPago.setVisible((this.isVisibilidadCeldaCopiarAutoriPago && this.isPermisoCopiarAutoriPago));			
			this.jMenuItemVerFormAutoriPago.setVisible((this.isVisibilidadCeldaVerFormAutoriPago && this.isPermisoVerFormAutoriPago));			
			this.jMenuItemAbrirOrderByAutoriPago.setVisible((this.isVisibilidadCeldaOrdenAutoriPago && this.isPermisoOrdenAutoriPago));			
			//this.jMenuItemMostrarOcultarAutoriPago.setVisible((this.isVisibilidadCeldaOrdenAutoriPago && this.isPermisoOrdenAutoriPago));
			this.jMenuItemDetalleAbrirOrderByAutoriPago.setVisible((this.isVisibilidadCeldaOrdenAutoriPago && this.isPermisoOrdenAutoriPago));			
			//this.jMenuItemDetalleMostrarOcultarAutoriPago.setVisible((this.isVisibilidadCeldaOrdenAutoriPago && this.isPermisoOrdenAutoriPago));			
			this.jMenuItemNuevoRelacionesAutoriPago.setVisible((this.isVisibilidadCeldaNuevoRelacionesAutoriPago && this.isPermisoNuevoAutoriPago));			
			this.jMenuItemNuevoGuardarCambiosAutoriPago.setVisible((this.isVisibilidadCeldaNuevoAutoriPago && this.isPermisoNuevoAutoriPago && this.isPermisoGuardarCambiosAutoriPago));									
			
			if(this.jInternalFrameDetalleFormAutoriPago!=null) {
			this.jInternalFrameDetalleFormAutoriPago.jMenuItemModificarAutoriPago.setVisible((this.isVisibilidadCeldaModificarAutoriPago && this.isPermisoActualizarAutoriPago));	
			this.jInternalFrameDetalleFormAutoriPago.jMenuItemActualizarAutoriPago.setVisible((this.isVisibilidadCeldaActualizarAutoriPago && this.isPermisoActualizarAutoriPago));	
			this.jInternalFrameDetalleFormAutoriPago.jMenuItemEliminarAutoriPago.setVisible((this.isVisibilidadCeldaEliminarAutoriPago && this.isPermisoEliminarAutoriPago));
			this.jInternalFrameDetalleFormAutoriPago.jMenuItemCancelarAutoriPago.setVisible(this.isVisibilidadCeldaCancelarAutoriPago);				
			}
			
			this.jMenuItemGuardarCambiosAutoriPago.setVisible((this.isVisibilidadCeldaGuardarAutoriPago && this.isPermisoGuardarCambiosAutoriPago));						
			this.jMenuItemGuardarCambiosTablaAutoriPago.setVisible((this.isVisibilidadCeldaGuardarCambiosAutoriPago && this.isPermisoGuardarCambiosAutoriPago));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoAutoriPago=this.jButtonNuevoAutoriPago.isVisible();
			this.isVisibilidadCeldaDuplicarAutoriPago=this.jButtonDuplicarAutoriPago.isVisible();
			this.isVisibilidadCeldaCopiarAutoriPago=this.jButtonCopiarAutoriPago.isVisible();
			this.isVisibilidadCeldaVerFormAutoriPago=this.jButtonVerFormAutoriPago.isVisible();
			
			this.isVisibilidadCeldaOrdenAutoriPago=this.jButtonAbrirOrderByAutoriPago.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesAutoriPago=this.jButtonNuevoRelacionesAutoriPago.isVisible();
			this.isVisibilidadCeldaModificarAutoriPago=this.jButtonModificarAutoriPago.isVisible();
			
			if(this.jInternalFrameDetalleFormAutoriPago!=null) {
			this.isVisibilidadCeldaActualizarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jButtonActualizarAutoriPago.isVisible();
			this.isVisibilidadCeldaEliminarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jButtonEliminarAutoriPago.isVisible();
			this.isVisibilidadCeldaCancelarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jButtonCancelarAutoriPago.isVisible();
			this.isVisibilidadCeldaGuardarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jButtonGuardarCambiosAutoriPago.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosAutoriPago=this.jButtonGuardarCambiosTablaAutoriPago.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoAutoriPago=this.jButtonNuevoToolBarAutoriPago.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesAutoriPago=this.jButtonNuevoRelacionesToolBarAutoriPago.isVisible();
			
			if(this.jInternalFrameDetalleFormAutoriPago!=null) {
			this.isVisibilidadCeldaModificarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jButtonModificarToolBarAutoriPago.isVisible();
			this.isVisibilidadCeldaActualizarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jButtonActualizarToolBarAutoriPago.isVisible();
			this.isVisibilidadCeldaEliminarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jButtonEliminarToolBarAutoriPago.isVisible();
			this.isVisibilidadCeldaCancelarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jButtonCancelarToolBarAutoriPago.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarAutoriPago=this.jButtonGuardarCambiosToolBarAutoriPago.isVisible();
			this.isVisibilidadCeldaGuardarCambiosAutoriPago=this.jButtonGuardarCambiosTablaToolBarAutoriPago.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoAutoriPago=this.jMenuItemNuevoAutoriPago.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesAutoriPago=this.jMenuItemNuevoRelacionesAutoriPago.isVisible();
			
			if(this.jInternalFrameDetalleFormAutoriPago!=null) {
			this.isVisibilidadCeldaModificarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jMenuItemModificarAutoriPago.isVisible();
			this.isVisibilidadCeldaActualizarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jMenuItemActualizarAutoriPago.isVisible();
			this.isVisibilidadCeldaEliminarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jMenuItemEliminarAutoriPago.isVisible();
			this.isVisibilidadCeldaCancelarAutoriPago=this.jInternalFrameDetalleFormAutoriPago.jMenuItemCancelarAutoriPago.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarAutoriPago=this.jMenuItemGuardarCambiosAutoriPago.isVisible();
			this.isVisibilidadCeldaGuardarCambiosAutoriPago=this.jMenuItemGuardarCambiosTablaAutoriPago.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesAutoriPago(Boolean esInicializar) {
		if(AutoriPagoJInternalFrame.ISBINDING_MANUAL) {			
			if(this.autoripagoSessionBean.getConGuardarRelaciones()) {
				//if(this.autoripagoSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesAutoriPago();
			}
			
			this.inicializarActualizarBindingBotonesManualAutoriPago(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualAutoriPago() {
		this.jButtonNuevoAutoriPago.setVisible(this.isPermisoNuevoAutoriPago);			
		this.jButtonDuplicarAutoriPago.setVisible(this.isPermisoDuplicarAutoriPago);			
		this.jButtonCopiarAutoriPago.setVisible(this.isPermisoCopiarAutoriPago);			
		this.jButtonVerFormAutoriPago.setVisible(this.isPermisoVerFormAutoriPago);			
		
		this.jButtonAbrirOrderByAutoriPago.setVisible(this.isPermisoOrdenAutoriPago);					
		
		this.jButtonNuevoRelacionesAutoriPago.setVisible(this.isPermisoNuevoAutoriPago);			
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.jButtonModificarAutoriPago.setVisible(this.isPermisoActualizarAutoriPago);	
			this.jInternalFrameDetalleFormAutoriPago.jButtonActualizarAutoriPago.setVisible(this.isPermisoActualizarAutoriPago);	
			this.jInternalFrameDetalleFormAutoriPago.jButtonEliminarAutoriPago.setVisible(this.isPermisoEliminarAutoriPago);
			this.jInternalFrameDetalleFormAutoriPago.jButtonCancelarAutoriPago.setVisible(this.isVisibilidadCeldaCancelarAutoriPago);						
			this.jInternalFrameDetalleFormAutoriPago.jButtonGuardarCambiosAutoriPago.setVisible(this.isPermisoGuardarCambiosAutoriPago);							
		}
		
		this.jButtonGuardarCambiosTablaAutoriPago.setVisible(this.isPermisoActualizarAutoriPago);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleAutoriPago() {
		this.jInternalFrameDetalleFormAutoriPago.jButtonModificarAutoriPago.setVisible(this.isPermisoActualizarAutoriPago);	
		this.jInternalFrameDetalleFormAutoriPago.jButtonActualizarAutoriPago.setVisible(this.isPermisoActualizarAutoriPago);	
		this.jInternalFrameDetalleFormAutoriPago.jButtonEliminarAutoriPago.setVisible(this.isPermisoEliminarAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jButtonCancelarAutoriPago.setVisible(this.isVisibilidadCeldaCancelarAutoriPago);							
		this.jInternalFrameDetalleFormAutoriPago.jButtonGuardarCambiosAutoriPago.setVisible((this.isVisibilidadCeldaGuardarAutoriPago && this.isPermisoGuardarCambiosAutoriPago));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosAutoriPago() {
		if(AutoriPagoJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualAutoriPago();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesAutoriPago() {
	}
	
	public void jTableDatosAutoriPagoListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarAutoriPago(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.autoripago.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaAutoriPagoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebAutoriPago(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAutoriPago.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAutoriPago.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.autoripagoLogic.getConnexion());

				if(this.autoripago.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.autoripago.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderAutoriPago.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.autoripago.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalAutoriPagoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebAutoriPago(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAutoriPago.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAutoriPago.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.autoripagoLogic.getConnexion());

				if(this.autoripago.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.autoripago.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderAutoriPago.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.autoripago.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioAutoriPagoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebAutoriPago(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAutoriPago.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAutoriPago.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.autoripagoLogic.getConnexion());

				if(this.autoripago.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.autoripago.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderAutoriPago.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.autoripago.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteAutoriPagoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderAutoriPago=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosAutoriPago.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderAutoriPago.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteAutoriPagoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebAutoriPago(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAutoriPago.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAutoriPago.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.autoripagoLogic.getConnexion());

				if(this.autoripago.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.autoripago.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderAutoriPago.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.autoripago.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_facturaAutoriPagoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.facturaBeanSwingJInternalFrame.sTipoBusqueda="Factura";

			if(!this.sFinalQueryGeneral_factura.equals("")) {
				this.facturaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_factura);
				this.facturaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.facturaBeanSwingJInternalFrame.procesarBusqueda(this.facturaBeanSwingJInternalFrame.sAccionBusqueda);
				this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingFactura(false);
			}

			if(!this.sFinalQueryComboFactura.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderAutoriPago=null;
			TitledBorder titledBorderfactura=null;

			if(!this.jScrollPanelDatosAutoriPago.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderAutoriPago.getTitle() + " -> Factura");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_facturaAutoriPagoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisofactura=true;

			idTienePermisofactura=this.tienePermisosUsuarioEnPaginaWebAutoriPago(FacturaConstantesFunciones.CLASSNAME);

			if(idTienePermisofactura) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAutoriPago.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAutoriPago.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);

				this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.facturaBeanSwingJInternalFrame.getFacturaLogic().setConnexion(this.autoripagoLogic.getConnexion());

				if(this.autoripago.getid_factura()!=null) {
					this.facturaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.facturaBeanSwingJInternalFrame.setIdActual(this.autoripago.getid_factura());
					this.facturaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFactura();
				}

				JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				TitledBorder titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderAutoriPago.getTitle() + " -> Factura");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_facturaAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getid_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_factura = "+this.autoripago.getid_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_asiento_contableAutoriPagoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="AsientoContable";

			if(!this.sFinalQueryGeneral_asientocontable.equals("")) {
				this.asientocontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_asientocontable);
				this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.asientocontableBeanSwingJInternalFrame.procesarBusqueda(this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingAsientoContable(false);
			}

			if(!this.sFinalQueryComboAsientoContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderAutoriPago=null;
			TitledBorder titledBorderasientocontable=null;

			if(!this.jScrollPanelDatosAutoriPago.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderAutoriPago.getTitle() + " -> Asiento Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_asiento_contableAutoriPagoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoasientocontable=true;

			idTienePermisoasientocontable=this.tienePermisosUsuarioEnPaginaWebAutoriPago(AsientoContableConstantesFunciones.CLASSNAME);

			if(idTienePermisoasientocontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAutoriPago.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAutoriPago.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);

				this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.asientocontableBeanSwingJInternalFrame.getAsientoContableLogic().setConnexion(this.autoripagoLogic.getConnexion());

				if(this.autoripago.getid_asiento_contable()!=null) {
					this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.asientocontableBeanSwingJInternalFrame.setIdActual(this.autoripago.getid_asiento_contable());
					this.asientocontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaAsientoContable();
				}

				JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				TitledBorder titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderAutoriPago.getTitle() + " -> Asiento Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_asiento_contableAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getid_asiento_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_asiento_contable = "+this.autoripago.getid_asiento_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_costoAutoriPagoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentrocosto=true;

			idTienePermisocentrocosto=this.tienePermisosUsuarioEnPaginaWebAutoriPago(CentroCostoConstantesFunciones.CLASSNAME);

			if(idTienePermisocentrocosto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAutoriPago.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAutoriPago.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);

				this.centrocostoBeanSwingJInternalFrame=new CentroCostoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centrocostoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centrocostoBeanSwingJInternalFrame.getCentroCostoLogic().setConnexion(this.autoripagoLogic.getConnexion());

				if(this.autoripago.getid_centro_costo()!=null) {
					this.centrocostoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centrocostoBeanSwingJInternalFrame.setIdActual(this.autoripago.getid_centro_costo());
					this.centrocostoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centrocostoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroCosto();
				}

				JInternalFrameBase jinternalFrame =this.centrocostoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				TitledBorder titledBordercentrocosto=(TitledBorder)this.centrocostoBeanSwingJInternalFrame.jScrollPanelDatosCentroCosto.getBorder();

				titledBordercentrocosto.setTitle(titledBorderAutoriPago.getTitle() + " -> Centro Costo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_costoAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getid_centro_costo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_costo = "+this.autoripago.getid_centro_costo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_centro_actividadAutoriPagoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocentroactividad=true;

			idTienePermisocentroactividad=this.tienePermisosUsuarioEnPaginaWebAutoriPago(CentroActividadConstantesFunciones.CLASSNAME);

			if(idTienePermisocentroactividad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAutoriPago.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAutoriPago.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);

				this.centroactividadBeanSwingJInternalFrame=new CentroActividadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.centroactividadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.centroactividadBeanSwingJInternalFrame.getCentroActividadLogic().setConnexion(this.autoripagoLogic.getConnexion());

				if(this.autoripago.getid_centro_actividad()!=null) {
					this.centroactividadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.centroactividadBeanSwingJInternalFrame.setIdActual(this.autoripago.getid_centro_actividad());
					this.centroactividadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.centroactividadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.centroactividadBeanSwingJInternalFrame.inicializarActualizarBindingTablaCentroActividad();
				}

				JInternalFrameBase jinternalFrame =this.centroactividadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				TitledBorder titledBordercentroactividad=(TitledBorder)this.centroactividadBeanSwingJInternalFrame.jScrollPanelDatosCentroActividad.getBorder();

				titledBordercentroactividad.setTitle(titledBorderAutoriPago.getTitle() + " -> Centro Actividad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_centro_actividadAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getid_centro_actividad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_centro_actividad = "+this.autoripago.getid_centro_actividad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bancoAutoriPagoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobanco=true;

			idTienePermisobanco=this.tienePermisosUsuarioEnPaginaWebAutoriPago(BancoConstantesFunciones.CLASSNAME);

			if(idTienePermisobanco) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAutoriPago.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAutoriPago.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);

				this.bancoBeanSwingJInternalFrame=new BancoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bancoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bancoBeanSwingJInternalFrame.getBancoLogic().setConnexion(this.autoripagoLogic.getConnexion());

				if(this.autoripago.getid_banco()!=null) {
					this.bancoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bancoBeanSwingJInternalFrame.setIdActual(this.autoripago.getid_banco());
					this.bancoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bancoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bancoBeanSwingJInternalFrame.inicializarActualizarBindingTablaBanco();
				}

				JInternalFrameBase jinternalFrame =this.bancoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				TitledBorder titledBorderbanco=(TitledBorder)this.bancoBeanSwingJInternalFrame.jScrollPanelDatosBanco.getBorder();

				titledBorderbanco.setTitle(titledBorderAutoriPago.getTitle() + " -> Banco");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bancoAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getid_banco()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_banco = "+this.autoripago.getid_banco().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_bancoAutoriPagoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentabanco=true;

			idTienePermisocuentabanco=this.tienePermisosUsuarioEnPaginaWebAutoriPago(CuentaBancoConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentabanco) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAutoriPago.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAutoriPago.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);

				this.cuentabancoBeanSwingJInternalFrame=new CuentaBancoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentabancoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentabancoBeanSwingJInternalFrame.getCuentaBancoLogic().setConnexion(this.autoripagoLogic.getConnexion());

				if(this.autoripago.getid_cuenta_banco()!=null) {
					this.cuentabancoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentabancoBeanSwingJInternalFrame.setIdActual(this.autoripago.getid_cuenta_banco());
					this.cuentabancoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentabancoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentabancoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaBanco();
				}

				JInternalFrameBase jinternalFrame =this.cuentabancoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				TitledBorder titledBordercuentabanco=(TitledBorder)this.cuentabancoBeanSwingJInternalFrame.jScrollPanelDatosCuentaBanco.getBorder();

				titledBordercuentabanco.setTitle(titledBorderAutoriPago.getTitle() + " -> Cuenta Banco");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_bancoAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getid_cuenta_banco()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_banco = "+this.autoripago.getid_cuenta_banco().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_detalle_proveAutoriPagoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisodetalleprove=true;

			idTienePermisodetalleprove=this.tienePermisosUsuarioEnPaginaWebAutoriPago(DetalleProveConstantesFunciones.CLASSNAME);

			if(idTienePermisodetalleprove) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAutoriPago.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAutoriPago.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);

				this.detalleproveBeanSwingJInternalFrame=new DetalleProveBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.detalleproveBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.detalleproveBeanSwingJInternalFrame.getDetalleProveLogic().setConnexion(this.autoripagoLogic.getConnexion());

				if(this.autoripago.getid_detalle_prove()!=null) {
					this.detalleproveBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.detalleproveBeanSwingJInternalFrame.setIdActual(this.autoripago.getid_detalle_prove());
					this.detalleproveBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.detalleproveBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.detalleproveBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleProve();
				}

				JInternalFrameBase jinternalFrame =this.detalleproveBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				TitledBorder titledBorderdetalleprove=(TitledBorder)this.detalleproveBeanSwingJInternalFrame.jScrollPanelDatosDetalleProve.getBorder();

				titledBorderdetalleprove.setTitle(titledBorderAutoriPago.getTitle() + " -> Detalle Prove");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_detalle_proveAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getid_detalle_prove()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_detalle_prove = "+this.autoripago.getid_detalle_prove().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transaccionAutoriPagoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransaccion=true;

			idTienePermisotransaccion=this.tienePermisosUsuarioEnPaginaWebAutoriPago(TransaccionConstantesFunciones.CLASSNAME);

			if(idTienePermisotransaccion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosAutoriPago.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosAutoriPago.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);

				this.transaccionBeanSwingJInternalFrame=new TransaccionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transaccionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transaccionBeanSwingJInternalFrame.getTransaccionLogic().setConnexion(this.autoripagoLogic.getConnexion());

				if(this.autoripago.getid_transaccion()!=null) {
					this.transaccionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transaccionBeanSwingJInternalFrame.setIdActual(this.autoripago.getid_transaccion());
					this.transaccionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transaccionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transaccionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransaccion();
				}

				JInternalFrameBase jinternalFrame =this.transaccionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderAutoriPago=(TitledBorder)this.jScrollPanelDatosAutoriPago.getBorder();
				TitledBorder titledBordertransaccion=(TitledBorder)this.transaccionBeanSwingJInternalFrame.jScrollPanelDatosTransaccion.getBorder();

				titledBordertransaccion.setTitle(titledBorderAutoriPago.getTitle() + " -> Transaccion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transaccionAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getid_transaccion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transaccion = "+this.autoripago.getid_transaccion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_emisionAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getfecha_emision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_emision = '"+Funciones2.getStringPostgresDate(this.autoripago.getfecha_emision())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_vencimientoAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getfecha_vencimiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_vencimiento = '"+Funciones2.getStringPostgresDate(this.autoripago.getfecha_vencimiento())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_pagoAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getvalor_pago()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_pago = "+this.autoripago.getvalor_pago().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_canceladoAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getvalor_cancelado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_cancelado = "+this.autoripago.getvalor_cancelado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_facturaAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getnumero_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_factura like '%"+this.autoripago.getnumero_factura()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondetalle_facturaAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getdetalle_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where detalle_factura like '%"+this.autoripago.getdetalle_factura()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_corteAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getfecha_corte()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_corte = '"+Funciones2.getStringPostgresDate(this.autoripago.getfecha_corte())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionAutoriPagoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.getautoripago(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.autoripago==null) {
						this.autoripago = new AutoriPago();
					}

					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);
				}

				if(this.autoripago.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.autoripago.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingAutoriPago(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAsientoContableAutoriPagoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAutoriPago(false,false);

			this.getAutoriPagosFK_IdAsientoContable();

			this.inicializarActualizarBindingAutoriPago(false);

			//if(AutoriPagoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAutoriPago(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdBancoAutoriPagoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAutoriPago(false,false);

			this.getAutoriPagosFK_IdBanco();

			this.inicializarActualizarBindingAutoriPago(false);

			//if(AutoriPagoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAutoriPago(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCentroActividadAutoriPagoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAutoriPago(false,false);

			this.getAutoriPagosFK_IdCentroActividad();

			this.inicializarActualizarBindingAutoriPago(false);

			//if(AutoriPagoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAutoriPago(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCentroCostoAutoriPagoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAutoriPago(false,false);

			this.getAutoriPagosFK_IdCentroCosto();

			this.inicializarActualizarBindingAutoriPago(false);

			//if(AutoriPagoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAutoriPago(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClienteAutoriPagoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAutoriPago(false,false);

			this.getAutoriPagosFK_IdCliente();

			this.inicializarActualizarBindingAutoriPago(false);

			//if(AutoriPagoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAutoriPago(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaBancoAutoriPagoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAutoriPago(false,false);

			this.getAutoriPagosFK_IdCuentaBanco();

			this.inicializarActualizarBindingAutoriPago(false);

			//if(AutoriPagoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAutoriPago(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdDetalleProveAutoriPagoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAutoriPago(false,false);

			this.getAutoriPagosFK_IdDetalleProve();

			this.inicializarActualizarBindingAutoriPago(false);

			//if(AutoriPagoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAutoriPago(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioAutoriPagoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAutoriPago(false,false);

			this.getAutoriPagosFK_IdEjercicio();

			this.inicializarActualizarBindingAutoriPago(false);

			//if(AutoriPagoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAutoriPago(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaAutoriPagoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAutoriPago(false,false);

			this.getAutoriPagosFK_IdEmpresa();

			this.inicializarActualizarBindingAutoriPago(false);

			//if(AutoriPagoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAutoriPago(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFacturaAutoriPagoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAutoriPago(false,false);

			this.getAutoriPagosFK_IdFactura();

			this.inicializarActualizarBindingAutoriPago(false);

			//if(AutoriPagoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAutoriPago(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalAutoriPagoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAutoriPago(false,false);

			this.getAutoriPagosFK_IdSucursal();

			this.inicializarActualizarBindingAutoriPago(false);

			//if(AutoriPagoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAutoriPago(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransaccionAutoriPagoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingAutoriPago(false,false);

			this.getAutoriPagosFK_IdTransaccion();

			this.inicializarActualizarBindingAutoriPago(false);

			//if(AutoriPagoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingAutoriPago(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.autoripagoLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameAutoriPago() {
		if(this.jInternalFrameDetalleFormAutoriPago!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) {
			this.jInternalFrameDetalleFormAutoriPago.setVisible(false);	    			
			this.jInternalFrameDetalleFormAutoriPago.dispose();
			this.jInternalFrameDetalleFormAutoriPago=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoAutoriPago!=null) {
			this.jInternalFrameReporteDinamicoAutoriPago.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoAutoriPago.dispose();
			this.jInternalFrameReporteDinamicoAutoriPago=null;
		}
		
		if(this.jInternalFrameImportacionAutoriPago!=null) {
			this.jInternalFrameImportacionAutoriPago.setVisible(false);	    			
			this.jInternalFrameImportacionAutoriPago.dispose();
			this.jInternalFrameImportacionAutoriPago=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessAutoriPago();
			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			
			
			if(sTipo.equals("NuevoAutoriPago")) {
				jButtonNuevoAutoriPagoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarAutoriPago")) {
				jButtonDuplicarAutoriPagoActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarAutoriPago")) {
				jButtonCopiarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("VerFormAutoriPago")) {
				jButtonVerFormAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarAutoriPago")) {
				jButtonNuevoAutoriPagoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarAutoriPago")) {
				jButtonDuplicarAutoriPagoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoAutoriPago")) {
				jButtonNuevoAutoriPagoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarAutoriPago")) {
				jButtonDuplicarAutoriPagoActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesAutoriPago")) {
				jButtonNuevoAutoriPagoActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarAutoriPago")) {
				jButtonNuevoAutoriPagoActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesAutoriPago")) {
				jButtonNuevoAutoriPagoActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarAutoriPago")) {
				jButtonModificarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarAutoriPago")) {
				jButtonModificarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarAutoriPago")) {
				jButtonModificarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarAutoriPago")) {
				jButtonActualizarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarAutoriPago")) {
				jButtonActualizarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarAutoriPago")) {
				jButtonActualizarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("EliminarAutoriPago")) {
				jButtonEliminarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarAutoriPago")) {
				jButtonEliminarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarAutoriPago")) {
				jButtonEliminarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("CancelarAutoriPago")) {
				jButtonCancelarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarAutoriPago")) {
				jButtonCancelarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarAutoriPago")) {
				jButtonCancelarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("CerrarAutoriPago")) {
				jButtonCerrarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarAutoriPago")) {
				jButtonCerrarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarAutoriPago")) {
				jButtonCerrarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarAutoriPago")) {
				jButtonMostrarOcultarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarAutoriPago")) {
				jButtonCancelarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosAutoriPago")) {
				jButtonGuardarCambiosAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarAutoriPago")) {
				jButtonGuardarCambiosAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarAutoriPago")) {
				jButtonCopiarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarAutoriPago")) {
				jButtonVerFormAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosAutoriPago")) {
				jButtonGuardarCambiosAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarAutoriPago")) {
				jButtonCopiarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormAutoriPago")) {
				jButtonVerFormAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaAutoriPago")) {
				jButtonGuardarCambiosAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarAutoriPago")) {
				jButtonGuardarCambiosAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaAutoriPago")) {
				jButtonGuardarCambiosAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionAutoriPago")) {
				jButtonRecargarInformacionAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarAutoriPago")) {
				jButtonRecargarInformacionAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionAutoriPago")) {
				jButtonRecargarInformacionAutoriPagoActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresAutoriPago")) {
				jButtonAnterioresAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarAutoriPago")) {
				jButtonAnterioresAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreAutoriPago")) {
				jButtonAnterioresAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesAutoriPago")) {
				jButtonSiguientesAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarAutoriPago")) {
				jButtonSiguientesAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesAutoriPago")) {
				jButtonSiguientesAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByAutoriPago") || sTipo.equals("MenuItemDetalleAbrirOrderByAutoriPago")) {
				jButtonAbrirOrderByAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarAutoriPago") || sTipo.equals("MenuItemDetalleMostrarOcultarAutoriPago")) {
				jButtonMostrarOcultarAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosAutoriPago")) {
				jButtonNuevoGuardarCambiosAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarAutoriPago")) {
				jButtonNuevoGuardarCambiosAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosAutoriPago")) {
				jButtonNuevoGuardarCambiosAutoriPagoActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoAutoriPago")) {
				jButtonCerrarReporteDinamicoAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoAutoriPago")) {
				jButtonGenerarReporteDinamicoAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoAutoriPago")) {
				
				jButtonGenerarExcelReporteDinamicoAutoriPagoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionAutoriPago")) {
				jButtonCerrarImportacionAutoriPagoActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionAutoriPago")) {
				
				jButtonGenerarImportacionAutoriPagoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionAutoriPago")) {
				
				jButtonAbrirImportacionAutoriPagoActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesAutoriPago")) {
				jComboBoxTiposAccionesAutoriPagoActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesAutoriPago")) {
				jComboBoxTiposRelacionesAutoriPagoActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioAutoriPago")) {
				jComboBoxTiposAccionesAutoriPagoActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarAutoriPago")) {
				
				jComboBoxTiposSeleccionarAutoriPagoActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralAutoriPago")) {
				jTextFieldValorCampoGeneralAutoriPagoActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByAutoriPago")) {
				jButtonAbrirOrderByAutoriPagoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarAutoriPago")) {
				jButtonAbrirOrderByAutoriPagoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByAutoriPago")) {
				jButtonCerrarOrderByAutoriPagoActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idAutoriPagoBusqueda")) {
				this.jButtonidAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaAutoriPagoUpdate")) {
				this.jButtonid_empresaAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaAutoriPagoBusqueda")) {
				this.jButtonid_empresaAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalAutoriPagoUpdate")) {
				this.jButtonid_sucursalAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalAutoriPagoBusqueda")) {
				this.jButtonid_sucursalAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioAutoriPagoUpdate")) {
				this.jButtonid_ejercicioAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioAutoriPagoBusqueda")) {
				this.jButtonid_ejercicioAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteAutoriPago")) {
				this.jButtonid_clienteAutoriPagoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteAutoriPagoUpdate")) {
				this.jButtonid_clienteAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteAutoriPagoBusqueda")) {
				this.jButtonid_clienteAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaAutoriPago")) {
				this.jButtonid_facturaAutoriPagoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaAutoriPagoUpdate")) {
				this.jButtonid_facturaAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaAutoriPagoBusqueda")) {
				this.jButtonid_facturaAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableAutoriPago")) {
				this.jButtonid_asiento_contableAutoriPagoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableAutoriPagoUpdate")) {
				this.jButtonid_asiento_contableAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableAutoriPagoBusqueda")) {
				this.jButtonid_asiento_contableAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoAutoriPagoUpdate")) {
				this.jButtonid_centro_costoAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoAutoriPagoBusqueda")) {
				this.jButtonid_centro_costoAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_actividadAutoriPagoUpdate")) {
				this.jButtonid_centro_actividadAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_actividadAutoriPagoBusqueda")) {
				this.jButtonid_centro_actividadAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bancoAutoriPagoUpdate")) {
				this.jButtonid_bancoAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bancoAutoriPagoBusqueda")) {
				this.jButtonid_bancoAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_bancoAutoriPagoUpdate")) {
				this.jButtonid_cuenta_bancoAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_bancoAutoriPagoBusqueda")) {
				this.jButtonid_cuenta_bancoAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_detalle_proveAutoriPagoUpdate")) {
				this.jButtonid_detalle_proveAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_detalle_proveAutoriPagoBusqueda")) {
				this.jButtonid_detalle_proveAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccionAutoriPagoUpdate")) {
				this.jButtonid_transaccionAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccionAutoriPagoBusqueda")) {
				this.jButtonid_transaccionAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionAutoriPagoBusqueda")) {
				this.jButtonfecha_emisionAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimientoAutoriPagoBusqueda")) {
				this.jButtonfecha_vencimientoAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_pagoAutoriPagoBusqueda")) {
				this.jButtonvalor_pagoAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_canceladoAutoriPagoBusqueda")) {
				this.jButtonvalor_canceladoAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_facturaAutoriPagoBusqueda")) {
				this.jButtonnumero_facturaAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("detalle_facturaAutoriPagoBusqueda")) {
				this.jButtondetalle_facturaAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_corteAutoriPagoBusqueda")) {
				this.jButtonfecha_corteAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionAutoriPagoBusqueda")) {
				this.jButtondescripcionAutoriPagoBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_asiento_contableAutoriPago")) {
				this.jButtonid_asiento_contableAutoriPagoActionPerformed(evt);
			}
			else if(sTipo.equals("id_clienteAutoriPago")) {
				this.jButtonid_clienteAutoriPagoActionPerformed(evt);
			}
			else if(sTipo.equals("id_facturaAutoriPago")) {
				this.jButtonid_facturaAutoriPagoActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdAsientoContableAutoriPago")) {
				this.jButtonFK_IdAsientoContableAutoriPagoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdBancoAutoriPago")) {
				this.jButtonFK_IdBancoAutoriPagoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCentroActividadAutoriPago")) {
				this.jButtonFK_IdCentroActividadAutoriPagoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCentroCostoAutoriPago")) {
				this.jButtonFK_IdCentroCostoAutoriPagoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdClienteAutoriPago")) {
				this.jButtonFK_IdClienteAutoriPagoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaBancoAutoriPago")) {
				this.jButtonFK_IdCuentaBancoAutoriPagoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdDetalleProveAutoriPago")) {
				this.jButtonFK_IdDetalleProveAutoriPagoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFacturaAutoriPago")) {
				this.jButtonFK_IdFacturaAutoriPagoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTransaccionAutoriPago")) {
				this.jButtonFK_IdTransaccionAutoriPagoActionPerformed(evt);
			}
			
			;
			
			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessAutoriPago();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAutoriPagoActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
				
				this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				


				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AutoriPago.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AutoriPago.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			AutoriPago autoripagoLocal=null;
			
			if(!this.getEsControlTabla()) {
				autoripagoLocal=this.autoripago;
			} else {
				autoripagoLocal=this.autoripagoAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
				
				this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
							
				
				


				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AutoriPago.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AutoriPago.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAutoriPagoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoAnterior =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.autoripagoAnterior =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAutoriPagoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
				
				this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
								
						
				


				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AutoriPago.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AutoriPago.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
				
				this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
								
				
				


				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AutoriPago.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AutoriPago.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAutoriPagoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoAnterior =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.autoripagoAnterior =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
				
				this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAutoriPagoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoAnterior =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.autoripagoAnterior =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAutoriPagoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
			
			this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
				
				this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
							
				
				


				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AutoriPago.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AutoriPago.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAutoriPagoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripagoAnterior =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.autoripagoAnterior =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAutoriPagoActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
			
			this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
				
				this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
								
				
				


				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AutoriPago.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AutoriPago.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAutoriPagoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoAnterior =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.autoripagoAnterior =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAutoriPagoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
			
			this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAutoriPagoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
				
				this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosAutoriPago")) {
					jCheckBoxSeleccionarTodosAutoriPagoItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosAutoriPago")) {
					jCheckBoxSeleccionadosAutoriPagoItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarAutoriPago")) {
					
				}
				
				


				
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AutoriPago.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AutoriPago.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
												
				
				


				
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AutoriPago.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AutoriPago.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAutoriPagoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.autoripagoAnterior =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.autoripagoAnterior =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAutoriPagoActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
				
				this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaAutoriPagoActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
				
				this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AutoriPago.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AutoriPago.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.autoripago);
				
				this.actualizarInformacion("INFO_PADRE",false,this.autoripago);
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(AutoriPago.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",AutoriPago.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaAutoriPagoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.autoripagoAnterior =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.autoripagoAnterior =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarAutoriPago")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosAutoriPagoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosAutoriPago.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.autoripago =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.autoripago =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.autoripago);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarAutoriPago")) {
				
				}
				
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarAutoriPago")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosAutoriPago.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarAutoriPago")) {
			
			}
			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessAutoriPago();
			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			
			if(sTipo.equals("NuevoAutoriPago")) {
				jButtonNuevoAutoriPagoActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarAutoriPago")) {
				jButtonDuplicarAutoriPagoActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarAutoriPago")) {
				jButtonCopiarAutoriPagoActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormAutoriPago")) {
				jButtonVerFormAutoriPagoActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesAutoriPago")) {
				jButtonNuevoAutoriPagoActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarAutoriPago")) {
				jButtonModificarAutoriPagoActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarAutoriPago")) {
				jButtonActualizarAutoriPagoActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarAutoriPago")) {
				jButtonEliminarAutoriPagoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaAutoriPago")) {
				jButtonGuardarCambiosAutoriPagoActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarAutoriPago")) {
				jButtonCancelarAutoriPagoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarAutoriPago")) {
				jButtonCerrarAutoriPagoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosAutoriPago")) {
				jButtonGuardarCambiosAutoriPagoActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosAutoriPago")) {
				jButtonNuevoGuardarCambiosAutoriPagoActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByAutoriPago")) {
				jButtonAbrirOrderByAutoriPagoActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionAutoriPago")) {
				jButtonRecargarInformacionAutoriPagoActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresAutoriPago")) {
				jButtonAnterioresAutoriPagoActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesAutoriPago")) {
				jButtonSiguientesAutoriPagoActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idAutoriPagoBusqueda")) {
				this.jButtonidAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaAutoriPagoUpdate")) {
				this.jButtonid_empresaAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaAutoriPagoBusqueda")) {
				this.jButtonid_empresaAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalAutoriPagoUpdate")) {
				this.jButtonid_sucursalAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalAutoriPagoBusqueda")) {
				this.jButtonid_sucursalAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioAutoriPagoUpdate")) {
				this.jButtonid_ejercicioAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioAutoriPagoBusqueda")) {
				this.jButtonid_ejercicioAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteAutoriPago")) {
				this.jButtonid_clienteAutoriPagoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteAutoriPagoUpdate")) {
				this.jButtonid_clienteAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteAutoriPagoBusqueda")) {
				this.jButtonid_clienteAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaAutoriPago")) {
				this.jButtonid_facturaAutoriPagoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaAutoriPagoUpdate")) {
				this.jButtonid_facturaAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaAutoriPagoBusqueda")) {
				this.jButtonid_facturaAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableAutoriPago")) {
				this.jButtonid_asiento_contableAutoriPagoActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableAutoriPagoUpdate")) {
				this.jButtonid_asiento_contableAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableAutoriPagoBusqueda")) {
				this.jButtonid_asiento_contableAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_costoAutoriPagoUpdate")) {
				this.jButtonid_centro_costoAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_costoAutoriPagoBusqueda")) {
				this.jButtonid_centro_costoAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_centro_actividadAutoriPagoUpdate")) {
				this.jButtonid_centro_actividadAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_centro_actividadAutoriPagoBusqueda")) {
				this.jButtonid_centro_actividadAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bancoAutoriPagoUpdate")) {
				this.jButtonid_bancoAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bancoAutoriPagoBusqueda")) {
				this.jButtonid_bancoAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_bancoAutoriPagoUpdate")) {
				this.jButtonid_cuenta_bancoAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_bancoAutoriPagoBusqueda")) {
				this.jButtonid_cuenta_bancoAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_detalle_proveAutoriPagoUpdate")) {
				this.jButtonid_detalle_proveAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_detalle_proveAutoriPagoBusqueda")) {
				this.jButtonid_detalle_proveAutoriPagoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccionAutoriPagoUpdate")) {
				this.jButtonid_transaccionAutoriPagoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccionAutoriPagoBusqueda")) {
				this.jButtonid_transaccionAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionAutoriPagoBusqueda")) {
				this.jButtonfecha_emisionAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_vencimientoAutoriPagoBusqueda")) {
				this.jButtonfecha_vencimientoAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_pagoAutoriPagoBusqueda")) {
				this.jButtonvalor_pagoAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_canceladoAutoriPagoBusqueda")) {
				this.jButtonvalor_canceladoAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_facturaAutoriPagoBusqueda")) {
				this.jButtonnumero_facturaAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("detalle_facturaAutoriPagoBusqueda")) {
				this.jButtondetalle_facturaAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_corteAutoriPagoBusqueda")) {
				this.jButtonfecha_corteAutoriPagoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionAutoriPagoBusqueda")) {
				this.jButtondescripcionAutoriPagoBusquedaActionPerformed(evt);
			}
			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessAutoriPago();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameAutoriPago")) {
				closingInternalFrameAutoriPago();
				
			} else if(sTipo.equals("jButtonCancelarAutoriPago")) {
				JInternalFrameBase jInternalFrameDetalleFormAutoriPago = (JInternalFrameBase)evt.getSource();
	            	
	            AutoriPagoBeanSwingJInternalFrame jInternalFrameParent=(AutoriPagoBeanSwingJInternalFrame)jInternalFrameDetalleFormAutoriPago.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarAutoriPagoActionPerformed(null);
			}
			
			AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.autoripago,new Object(),this.autoripagoParameterGeneral,this.autoripagoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormAutoriPago(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormAutoriPago(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormAutoriPago(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.autoripago)) {
			if(!esControlTabla) {
				if(AutoriPagoJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);			
				}
				
				if(this.autoripagoSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualAutoriPago(this.autoripago,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.autoripagoReturnGeneral=autoripagoLogic.procesarEventosAutoriPagosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.autoripagoLogic.getAutoriPagos(),this.autoripago,this.autoripagoParameterGeneral,this.isEsNuevoAutoriPago,classes);//this.autoripagoLogic.getAutoriPago()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanAutoriPago(this.autoripagoReturnGeneral,this.autoripagoBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.autoripagoSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanAutoriPago(classes,this.autoripagoReturnGeneral,this.autoripagoBean,false);
					}
						
					if(this.autoripagoReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyAutoriPago(this.autoripagoReturnGeneral.getAutoriPago());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioAutoriPago(this.autoripagoReturnGeneral.getAutoriPago());	
					}
						
					if(this.autoripagoReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioAutoriPago(this.autoripagoReturnGeneral.getAutoriPago(),classes);//this.autoripagoBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioAutoriPago(this.autoripago,classes);//this.autoripagoBean);									
				}
			
				if(AutoriPagoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualAutoriPago(this.autoripago,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysAutoriPago(this.autoripago);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.autoripagoAnterior!=null) {
						this.autoripago=this.autoripagoAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.autoripagoReturnGeneral=autoripagoLogic.procesarEventosAutoriPagosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.autoripagoLogic.getAutoriPagos(),this.autoripago,this.autoripagoParameterGeneral,this.isEsNuevoAutoriPago,classes);//this.autoripagoLogic.getAutoriPago()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.autoripagoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.autoripagoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.autoripagoReturnGeneral.getAutoriPago(),autoripagoLogic.getAutoriPagos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.autoripagoReturnGeneral.getAutoriPago(),this.autoripagos);
				}
				//ARCHITECTURE
				
				//this.jTableDatosAutoriPago.repaint();
				
				//((AbstractTableModel) this.jTableDatosAutoriPago.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosAutoriPago();
			}
		}
	}
	
	public void actualizarVisualTableDatosAutoriPago() throws Exception {
		
		AutoriPagoModel autoripagoModel=(AutoriPagoModel)this.jTableDatosAutoriPago.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			autoripagoModel.autoripagos=this.autoripagoLogic.getAutoriPagos();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			autoripagoModel.autoripagos=this.autoripagos;
		}
		
		
		((AutoriPagoModel) this.jTableDatosAutoriPago.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaAutoriPago() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getautoripagoAnterior(),this.autoripagoLogic.getAutoriPagos());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getautoripagoAnterior(),this.autoripagos);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosAutoriPago();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioAutoriPago(AutoriPago autoripago,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.autoripago,new Object(),generalEntityParameterGeneral,this.autoripagoReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.autoripagoSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=AutoriPagoConstantesFunciones.getClassesRelationshipsOfAutoriPago(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=AutoriPagoConstantesFunciones.getClassesRelationshipsFromStringsOfAutoriPago(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormAutoriPago(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				AutoriPagoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.autoripago,new Object(),generalEntityParameterGeneral,this.autoripagoReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioAutoriPago(AutoriPagoBean autoripagoBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanAutoriPago(ArrayList<Classe> classes,AutoriPagoReturnGeneral autoripagoReturnGeneral,AutoriPagoBean autoripagoBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualAutoriPago(AutoriPago autoripago,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.autoripago)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormAutoriPago = new AutoriPagoDetalleFormJInternalFrame(jDesktopPane,this.autoripagoSessionBean.getConGuardarRelaciones(),this.autoripagoSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.setVisible(false);
		this.jInternalFrameDetalleFormAutoriPago.setSelected(false);						
		
		this.jInternalFrameDetalleFormAutoriPago.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormAutoriPago.autoripagoLogic=this.autoripagoLogic;
		
		this.cargarCombosFrameForeignKeyAutoriPago("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleAutoriPago();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleAutoriPago();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyAutoriPago("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyAutoriPago();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormAutoriPago.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarAutoriPago"));
		
		this.jInternalFrameDetalleFormAutoriPago.jButtonModificarAutoriPago.addActionListener(new ButtonActionListener(this,"ModificarAutoriPago"));

		
		this.jInternalFrameDetalleFormAutoriPago.jButtonModificarToolBarAutoriPago.addActionListener(new ButtonActionListener(this,"ModificarToolBarAutoriPago"));
					
		this.jInternalFrameDetalleFormAutoriPago.jMenuItemModificarAutoriPago.addActionListener(new ButtonActionListener(this,"MenuItemModificarAutoriPago"));		
		
		
		
		this.jInternalFrameDetalleFormAutoriPago.jButtonActualizarAutoriPago.addActionListener (new ButtonActionListener(this,"ActualizarAutoriPago"));
		
		
		this.jInternalFrameDetalleFormAutoriPago.jButtonActualizarToolBarAutoriPago.addActionListener(new ButtonActionListener(this,"ActualizarToolBarAutoriPago"));
						
		this.jInternalFrameDetalleFormAutoriPago.jMenuItemActualizarAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemActualizarAutoriPago"));		
		
		
		
		this.jInternalFrameDetalleFormAutoriPago.jButtonEliminarAutoriPago.addActionListener (new ButtonActionListener(this,"EliminarAutoriPago"));
		
		
		this.jInternalFrameDetalleFormAutoriPago.jButtonEliminarToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"EliminarToolBarAutoriPago"));
								
		this.jInternalFrameDetalleFormAutoriPago.jMenuItemEliminarAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemEliminarAutoriPago"));		
		
		
		
		this.jInternalFrameDetalleFormAutoriPago.jButtonCancelarAutoriPago.addActionListener (new ButtonActionListener(this,"CancelarAutoriPago"));
		
		
		this.jInternalFrameDetalleFormAutoriPago.jButtonCancelarToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"CancelarToolBarAutoriPago"));
					
		this.jInternalFrameDetalleFormAutoriPago.jMenuItemCancelarAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemCancelarAutoriPago"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormAutoriPago.jMenuItemDetalleCerrarAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarAutoriPago"));		
		
		
		
		this.jInternalFrameDetalleFormAutoriPago.jButtonGuardarCambiosToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarAutoriPago"));
		
		
		
		this.jInternalFrameDetalleFormAutoriPago.jButtonGuardarCambiosToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarAutoriPago"));
		
		
		
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioAutoriPago"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonidAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"idAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_empresaAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_empresaAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_sucursalAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_sucursalAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_ejercicioAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_ejercicioAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioAutoriPagoBusqueda"));
		//jButtonid_clienteAutoriPago.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteAutoriPagoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_clienteAutoriPago.addActionListener(new ButtonActionListener(this,"id_clienteAutoriPago"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_clienteAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_clienteAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_clienteAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteAutoriPagoBusqueda"));
		//jButtonid_facturaAutoriPago.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaAutoriPagoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_facturaAutoriPago.addActionListener(new ButtonActionListener(this,"id_facturaAutoriPago"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_facturaAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_facturaAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_facturaAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaAutoriPagoBusqueda"));
		//jButtonid_asiento_contableAutoriPago.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableAutoriPagoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_asiento_contableAutoriPago.addActionListener(new ButtonActionListener(this,"id_asiento_contableAutoriPago"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_asiento_contableAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_asiento_contableAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_centro_costoAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_centro_costoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_centro_actividadAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_centro_actividadAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_centro_actividadAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_actividadAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_bancoAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_bancoAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_bancoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_cuenta_bancoAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_bancoAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_cuenta_bancoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_bancoAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_detalle_proveAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_detalle_proveAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_detalle_proveAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_detalle_proveAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_transaccionAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_transaccionAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonfecha_emisionAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonfecha_vencimientoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonvalor_pagoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"valor_pagoAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonvalor_canceladoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"valor_canceladoAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonnumero_facturaAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtondetalle_facturaAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"detalle_facturaAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonfecha_corteAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_corteAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtondescripcionAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"descripcionAutoriPagoBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormAutoriPago.jTabbedPaneRelacionesAutoriPago.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesAutoriPago"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameAutoriPago"));
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarAutoriPago"));
		}
		
		this.jTableDatosAutoriPago.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarAutoriPago"));
		
		this.jTableDatosAutoriPago.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarAutoriPago"));
		
		this.jButtonNuevoAutoriPago.addActionListener(new ButtonActionListener(this,"NuevoAutoriPago"));
		
		this.jButtonDuplicarAutoriPago.addActionListener(new ButtonActionListener(this,"DuplicarAutoriPago"));
		
		this.jButtonCopiarAutoriPago.addActionListener(new ButtonActionListener(this,"CopiarAutoriPago"));
		
		this.jButtonVerFormAutoriPago.addActionListener(new ButtonActionListener(this,"VerFormAutoriPago"));
		
		
		this.jButtonNuevoToolBarAutoriPago.addActionListener(new ButtonActionListener(this,"NuevoToolBarAutoriPago"));
			
		this.jButtonDuplicarToolBarAutoriPago.addActionListener(new ButtonActionListener(this,"DuplicarToolBarAutoriPago"));
			
		this.jMenuItemNuevoAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemNuevoAutoriPago"));
			
		this.jMenuItemDuplicarAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarAutoriPago"));		
		
		
		this.jButtonNuevoRelacionesAutoriPago.addActionListener (new ButtonActionListener(this,"NuevoRelacionesAutoriPago"));
		
		
		this.jButtonNuevoRelacionesToolBarAutoriPago.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarAutoriPago"));
			
		this.jMenuItemNuevoRelacionesAutoriPago.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesAutoriPago"));		
		
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.jButtonModificarAutoriPago.addActionListener(new ButtonActionListener(this,"ModificarAutoriPago"));
		}
		
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.jButtonModificarToolBarAutoriPago.addActionListener(new ButtonActionListener(this,"ModificarToolBarAutoriPago"));
			
			this.jInternalFrameDetalleFormAutoriPago.jMenuItemModificarAutoriPago.addActionListener(new ButtonActionListener(this,"MenuItemModificarAutoriPago"));		
		}
		
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormAutoriPago.jButtonActualizarAutoriPago.addActionListener (new ButtonActionListener(this,"ActualizarAutoriPago"));
		}
		
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.jButtonActualizarToolBarAutoriPago.addActionListener(new ButtonActionListener(this,"ActualizarToolBarAutoriPago"));
				
			this.jInternalFrameDetalleFormAutoriPago.jMenuItemActualizarAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemActualizarAutoriPago"));		
		}
		
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.jButtonEliminarAutoriPago.addActionListener (new ButtonActionListener(this,"EliminarAutoriPago"));
		}
		
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.jButtonEliminarToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"EliminarToolBarAutoriPago"));
						
			this.jInternalFrameDetalleFormAutoriPago.jMenuItemEliminarAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemEliminarAutoriPago"));		
		}
		
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.jButtonCancelarAutoriPago.addActionListener (new ButtonActionListener(this,"CancelarAutoriPago"));
		}
		
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.jButtonCancelarToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"CancelarToolBarAutoriPago"));
			
			this.jInternalFrameDetalleFormAutoriPago.jMenuItemCancelarAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemCancelarAutoriPago"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarAutoriPago"));		
		
		
		this.jButtonCerrarAutoriPago.addActionListener (new ButtonActionListener(this,"CerrarAutoriPago"));
		
		
		this.jButtonCerrarToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"CerrarToolBarAutoriPago"));
			
		this.jMenuItemCerrarAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemCerrarAutoriPago"));
			
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.jMenuItemDetalleCerrarAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarAutoriPago"));		
		}
		
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.jButtonGuardarCambiosAutoriPago.addActionListener (new ButtonActionListener(this,"GuardarCambiosAutoriPago"));
		}
		
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.jButtonGuardarCambiosToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarAutoriPago"));
		}
		
		this.jButtonCopiarToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"CopiarToolBarAutoriPago"));
			
		this.jButtonVerFormToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"VerFormToolBarAutoriPago"));
		
		this.jMenuItemGuardarCambiosAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosAutoriPago"));
			
		this.jMenuItemCopiarAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemCopiarAutoriPago"));		
		
		this.jMenuItemVerFormAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemVerFormAutoriPago"));		
		
		
		this.jButtonGuardarCambiosTablaAutoriPago.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaAutoriPago"));
		
		
		this.jButtonGuardarCambiosTablaToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarAutoriPago"));
			
		this.jMenuItemGuardarCambiosTablaAutoriPago.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaAutoriPago"));		
		
		
		
		this.jButtonRecargarInformacionAutoriPago.addActionListener (new ButtonActionListener(this,"RecargarInformacionAutoriPago"));
					
		this.jButtonRecargarInformacionToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarAutoriPago"));
		
		this.jMenuItemRecargarInformacionAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionAutoriPago"));		
		
		
		
		this.jButtonAnterioresAutoriPago.addActionListener (new ButtonActionListener(this,"AnterioresAutoriPago"));
		
		
		this.jButtonAnterioresToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"AnterioresToolBarAutoriPago"));
		
		this.jMenuItemAnterioresAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresAutoriPago"));		
		
		
		this.jButtonSiguientesAutoriPago.addActionListener (new ButtonActionListener(this,"SiguientesAutoriPago"));
		
		
		this.jButtonSiguientesToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"SiguientesToolBarAutoriPago"));
			
		this.jMenuItemSiguientesAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesAutoriPago"));
			
		this.jMenuItemAbrirOrderByAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByAutoriPago"));
			
		this.jMenuItemMostrarOcultarAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarAutoriPago"));
			
		this.jMenuItemDetalleAbrirOrderByAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByAutoriPago"));
			
		this.jMenuItemDetalleMostarOcultarAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarAutoriPago"));		
		
		
		this.jButtonNuevoGuardarCambiosAutoriPago.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosAutoriPago"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarAutoriPago"));
			
		this.jMenuItemNuevoGuardarCambiosAutoriPago.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosAutoriPago"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosAutoriPago.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosAutoriPago"));

		this.jCheckBoxSeleccionadosAutoriPago.addItemListener(new CheckBoxItemListener(this,"SeleccionadosAutoriPago"));
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioAutoriPago"));
		}
		
		
		this.jComboBoxTiposRelacionesAutoriPago.addActionListener (new ButtonActionListener(this,"TiposRelacionesAutoriPago"));
			
		this.jComboBoxTiposAccionesAutoriPago.addActionListener (new ButtonActionListener(this,"TiposAccionesAutoriPago"));
					
		this.jComboBoxTiposSeleccionarAutoriPago.addActionListener (new ButtonActionListener(this,"TiposSeleccionarAutoriPago"));
			
		this.jTextFieldValorCampoGeneralAutoriPago.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralAutoriPago"));		
		
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonidAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"idAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_empresaAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_empresaAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_sucursalAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_sucursalAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_ejercicioAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_ejercicioAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioAutoriPagoBusqueda"));
		//jButtonid_clienteAutoriPago.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteAutoriPagoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_clienteAutoriPago.addActionListener(new ButtonActionListener(this,"id_clienteAutoriPago"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_clienteAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_clienteAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_clienteAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteAutoriPagoBusqueda"));
		//jButtonid_facturaAutoriPago.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaAutoriPagoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_facturaAutoriPago.addActionListener(new ButtonActionListener(this,"id_facturaAutoriPago"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_facturaAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_facturaAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_facturaAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaAutoriPagoBusqueda"));
		//jButtonid_asiento_contableAutoriPago.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableAutoriPagoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_asiento_contableAutoriPago.addActionListener(new ButtonActionListener(this,"id_asiento_contableAutoriPago"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_asiento_contableAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_asiento_contableAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_centro_costoAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_centro_costoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_centro_actividadAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_centro_actividadAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_centro_actividadAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_actividadAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_bancoAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_bancoAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_bancoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_cuenta_bancoAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_bancoAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_cuenta_bancoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_bancoAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_detalle_proveAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_detalle_proveAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_detalle_proveAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_detalle_proveAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_transaccionAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_transaccionAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonfecha_emisionAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonfecha_vencimientoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonvalor_pagoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"valor_pagoAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonvalor_canceladoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"valor_canceladoAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonnumero_facturaAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtondetalle_facturaAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"detalle_facturaAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonfecha_corteAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_corteAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtondescripcionAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"descripcionAutoriPagoBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdAsientoContableAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableAutoriPago"));

			this.jButtonBuscarFK_IdAsientoContableid_asiento_contableAutoriPago.addActionListener(new ButtonActionListener(this,"id_asiento_contableAutoriPago"));

			this.jButtonFK_IdBancoAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdBancoAutoriPago"));

			this.jButtonFK_IdCentroActividadAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdCentroActividadAutoriPago"));

			this.jButtonFK_IdCentroCostoAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoAutoriPago"));

			this.jButtonFK_IdClienteAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdClienteAutoriPago"));

			this.jButtonBuscarFK_IdClienteid_clienteAutoriPago.addActionListener(new ButtonActionListener(this,"id_clienteAutoriPago"));

			this.jButtonFK_IdCuentaBancoAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdCuentaBancoAutoriPago"));

			this.jButtonFK_IdDetalleProveAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdDetalleProveAutoriPago"));

			this.jButtonFK_IdFacturaAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdFacturaAutoriPago"));

			this.jButtonBuscarFK_IdFacturaid_facturaAutoriPago.addActionListener(new ButtonActionListener(this,"id_facturaAutoriPago"));

			this.jButtonFK_IdTransaccionAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionAutoriPago"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoAutoriPago!=null) {
				this.jInternalFrameReporteDinamicoAutoriPago.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoAutoriPago"));
				this.jInternalFrameReporteDinamicoAutoriPago.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoAutoriPago"));
				this.jInternalFrameReporteDinamicoAutoriPago.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoAutoriPago"));
			}
			
			//this.jButtonCerrarReporteDinamicoAutoriPago.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoAutoriPago"));				
			//this.jButtonGenerarReporteDinamicoAutoriPago.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoAutoriPago"));
			//this.jButtonGenerarExcelReporteDinamicoAutoriPago.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoAutoriPago"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionAutoriPago!=null) {
				this.jInternalFrameImportacionAutoriPago.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionAutoriPago"));
				this.jInternalFrameImportacionAutoriPago.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionAutoriPago"));
				this.jInternalFrameImportacionAutoriPago.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionAutoriPago"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByAutoriPago.addActionListener (new ButtonActionListener(this,"AbrirOrderByAutoriPago"));
			
			this.jButtonAbrirOrderByToolBarAutoriPago.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarAutoriPago"));			
			
			if(this.jInternalFrameOrderByAutoriPago!=null) {
				this.jInternalFrameOrderByAutoriPago.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByAutoriPago"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormAutoriPago!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormAutoriPago.jTabbedPaneRelacionesAutoriPago.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesAutoriPago"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameAutoriPago();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormAutoriPago.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormAutoriPago = (JInternalFrameBase)event.getSource();
	            	
	            AutoriPagoBeanSwingJInternalFrame jInternalFrameParent=(AutoriPagoBeanSwingJInternalFrame)jInternalFrameDetalleFormAutoriPago.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarAutoriPagoActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosAutoriPago.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosAutoriPagoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosAutoriPago.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosAutoriPago.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoAutoriPagoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoAutoriPagoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoAutoriPagoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoAutoriPago";
		inputMap = this.jButtonNuevoAutoriPago.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoAutoriPago.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoAutoriPagoActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoAutoriPagoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoAutoriPagoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoAutoriPagoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesAutoriPago";
		inputMap = this.jButtonNuevoRelacionesAutoriPago.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesAutoriPago.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoAutoriPagoActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarAutoriPago";
		inputMap = this.jButtonModificarAutoriPago.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarAutoriPago.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarAutoriPagoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarAutoriPago";
		inputMap = this.jButtonActualizarAutoriPago.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarAutoriPago.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarAutoriPagoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarAutoriPago";
		inputMap = this.jButtonEliminarAutoriPago.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarAutoriPago.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarAutoriPagoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarAutoriPago";
		inputMap = this.jButtonCancelarAutoriPago.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarAutoriPago.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarAutoriPagoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarAutoriPago";
		inputMap = this.jButtonCerrarAutoriPago.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarAutoriPago.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarAutoriPagoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormAutoriPago.jButtonGuardarCambiosAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosAutoriPago";
		inputMap = this.jInternalFrameDetalleFormAutoriPago.jButtonGuardarCambiosAutoriPago.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormAutoriPago.jButtonGuardarCambiosAutoriPago.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosAutoriPagoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosAutoriPago.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosAutoriPagoItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesAutoriPago.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesAutoriPagoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarAutoriPago.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarAutoriPagoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralAutoriPago.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralAutoriPagoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonidAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"idAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_empresaAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_empresaAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_sucursalAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_sucursalAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_ejercicioAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_ejercicioAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioAutoriPagoBusqueda"));
		//jButtonid_clienteAutoriPago.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteAutoriPagoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_clienteAutoriPago.addActionListener(new ButtonActionListener(this,"id_clienteAutoriPago"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_clienteAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_clienteAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_clienteAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteAutoriPagoBusqueda"));
		//jButtonid_facturaAutoriPago.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaAutoriPagoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_facturaAutoriPago.addActionListener(new ButtonActionListener(this,"id_facturaAutoriPago"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_facturaAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_facturaAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_facturaAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaAutoriPagoBusqueda"));
		//jButtonid_asiento_contableAutoriPago.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableAutoriPagoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_asiento_contableAutoriPago.addActionListener(new ButtonActionListener(this,"id_asiento_contableAutoriPago"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_asiento_contableAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_asiento_contableAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_centro_costoAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_centro_costoAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_centro_costoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_costoAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_centro_actividadAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_centro_actividadAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_centro_actividadAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_centro_actividadAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_bancoAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_bancoAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_bancoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_cuenta_bancoAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_bancoAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_cuenta_bancoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_bancoAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_detalle_proveAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_detalle_proveAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_detalle_proveAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_detalle_proveAutoriPagoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_transaccionAutoriPagoUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionAutoriPagoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonid_transaccionAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonfecha_emisionAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonfecha_vencimientoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_vencimientoAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonvalor_pagoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"valor_pagoAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonvalor_canceladoAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"valor_canceladoAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonnumero_facturaAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtondetalle_facturaAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"detalle_facturaAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtonfecha_corteAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"fecha_corteAutoriPagoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormAutoriPago.jButtondescripcionAutoriPagoBusqueda.addActionListener(new ButtonActionListener(this,"descripcionAutoriPagoBusqueda"));
		
		
		this.jButtonFK_IdAsientoContableAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableAutoriPago"));

		this.jButtonBuscarFK_IdAsientoContableid_asiento_contableAutoriPago.addActionListener(new ButtonActionListener(this,"id_asiento_contableAutoriPago"));

		this.jButtonFK_IdBancoAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdBancoAutoriPago"));

		this.jButtonFK_IdCentroActividadAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdCentroActividadAutoriPago"));

		this.jButtonFK_IdCentroCostoAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdCentroCostoAutoriPago"));

		this.jButtonFK_IdClienteAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdClienteAutoriPago"));

		this.jButtonBuscarFK_IdClienteid_clienteAutoriPago.addActionListener(new ButtonActionListener(this,"id_clienteAutoriPago"));

		this.jButtonFK_IdCuentaBancoAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdCuentaBancoAutoriPago"));

		this.jButtonFK_IdDetalleProveAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdDetalleProveAutoriPago"));

		this.jButtonFK_IdFacturaAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdFacturaAutoriPago"));

		this.jButtonBuscarFK_IdFacturaid_facturaAutoriPago.addActionListener(new ButtonActionListener(this,"id_facturaAutoriPago"));

		this.jButtonFK_IdTransaccionAutoriPago.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionAutoriPago"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionAutoriPago.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionAutoriPagoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarAutoriPagoActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarAutoriPago.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosAutoriPago(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(AutoriPago autoripagoAux:this.autoripagoLogic.getAutoriPagos()) {
					autoripagoAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(AutoriPago autoripagoAux:autoripagos) {
					autoripagoAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosAutoriPagoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingAutoriPago(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(AutoriPago autoripagoAux:this.autoripagoLogic.getAutoriPagos()) {
						autoripagoAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(AutoriPago autoripagoAux:autoripagos) {
						autoripagoAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(AutoriPago autoripagoAux:this.autoripagoLogic.getAutoriPagos()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(AutoriPago autoripagoAux:autoripagos) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaAutoriPago(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosAutoriPago.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosAutoriPago.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosAutoriPagoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingAutoriPago(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosAutoriPago.getSelectedRows();
			
			AutoriPago autoripagoLocal=new AutoriPago();
			
			//this.seleccionarTodosAutoriPago(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					autoripagoLocal =(AutoriPago) this.autoripagoLogic.getAutoriPagos().toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					autoripagoLocal =(AutoriPago) this.autoripagos.toArray()[this.jTableDatosAutoriPago.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				autoripagoLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(AutoriPago autoripagoAux:this.autoripagoLogic.getAutoriPagos()) {
						autoripagoAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(AutoriPago autoripagoAux:autoripagos) {
						autoripagoAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaAutoriPago(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosAutoriPago.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosAutoriPago.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosAutoriPago,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualAutoriPagoItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarAutoriPagoParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralAutoriPagoActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingAutoriPago(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralAutoriPago.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(AutoriPago autoripagoAux:this.autoripagoLogic.getAutoriPagos()) {
				
						if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							autoripagoAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
							existe=true;
							autoripagoAux.setfecha_vencimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_VALORPAGO)) {
							existe=true;
							autoripagoAux.setvalor_pago(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO)) {
							existe=true;
							autoripagoAux.setvalor_cancelado(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA)) {
							existe=true;
							autoripagoAux.setnumero_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA)) {
							existe=true;
							autoripagoAux.setdetalle_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_FECHACORTE)) {
							existe=true;
							autoripagoAux.setfecha_corte(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							autoripagoAux.setdescripcion(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(AutoriPago autoripagoAux:autoripagos) {
					
						if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							autoripagoAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
							existe=true;
							autoripagoAux.setfecha_vencimiento(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_VALORPAGO)) {
							existe=true;
							autoripagoAux.setvalor_pago(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO)) {
							existe=true;
							autoripagoAux.setvalor_cancelado(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA)) {
							existe=true;
							autoripagoAux.setnumero_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA)) {
							existe=true;
							autoripagoAux.setdetalle_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_FECHACORTE)) {
							existe=true;
							autoripagoAux.setfecha_corte(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							autoripagoAux.setdescripcion(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaAutoriPago(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesAutoriPagoActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingAutoriPago(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioAutoriPago=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesAutoriPago.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteAutoriPago) {				
					conSplash=true;//false;										
					
					//this.startProcessAutoriPago(conSplash);
				
					this.generarReporteAutoriPagosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesAutoriPago.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoAutoriPagosSeleccionados();
				//this.jComboBoxTiposAccionesAutoriPago.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoAutoriPagosSeleccionados(false);
				//this.jComboBoxTiposAccionesAutoriPago.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoAutoriPagosSeleccionados(true);
				//this.jComboBoxTiposAccionesAutoriPago.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessAutoriPago();
				
				this.exportarAutoriPagosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesAutoriPago.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionAutoriPagos();
				//this.importarAutoriPagos();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesAutoriPago.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessAutoriPago();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelAutoriPagosSeleccionados();
				//this.jComboBoxTiposAccionesAutoriPago.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Autori Pago", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessAutoriPago();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoAutoriPago)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyAutoriPago(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Autori Pago",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesAutoriPago.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.setSelectedIndex(0);					
				}	
			} 			
			else if(AutoriPagoBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteAutoriPago) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessAutoriPago(conSplash);
					
						//this.actualizarParametrosGeneralAutoriPago();
						
						this.generarReporteProcesoAccionAutoriPagosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesAutoriPago.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(AutoriPagoBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Autori PagoS SELECCIONADOS?", "MANTENIMIENTO DE Autori Pago", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessAutoriPago();
				
						this.actualizarParametrosGeneralAutoriPago();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.autoripagoReturnGeneral=autoripagoLogic.procesarAccionAutoriPagosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.autoripagoLogic.getAutoriPagos(),this.autoripagoParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarAutoriPagoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesAutoriPago.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralAutoriPago();
					
					AutoriPagoBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarAutoriPagoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesAutoriPago.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormAutoriPago.jComboBoxTiposAccionesFormularioAutoriPago.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessAutoriPago(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesAutoriPagoActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessAutoriPago();
			
			if(this.jInternalFrameDetalleFormAutoriPago==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();		
			AutoriPago autoripago=new AutoriPago();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingAutoriPago(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesAutoriPago.getSelectedItem();
			
			
			
			
			autoripagosSeleccionados=this.getAutoriPagosSeleccionados(true);
			//this.sTipoAccion;
			
			if(autoripagosSeleccionados.size()==1) {
				for(AutoriPago autoripagoAux:autoripagosSeleccionados) {
					autoripago=autoripagoAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessAutoriPago();
			
      		//this.finishProcessAutoriPago(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarAutoriPagoReturnGeneral() throws Exception {
		if(this.autoripagoReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.autoripagoReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.autoripagoReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.autoripagoReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.autoripagoReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.autoripagoReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingAutoriPago(false);
		}
		
		if(this.autoripagoReturnGeneral.getConRetornoLista() || this.autoripagoReturnGeneral.getConRetornoObjeto()) {
			if(this.autoripagoReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.autoripagoLogic.setAutoriPagos(this.autoripagoReturnGeneral.getAutoriPagos());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.autoripagoReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.autoripagoLogic.setAutoriPago(this.autoripagoReturnGeneral.getAutoriPago());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingAutoriPago(false);
		}
	}
	
	public void actualizarParametrosGeneralAutoriPago() throws Exception {
		
		
	}
	
	public ArrayList<AutoriPago> getAutoriPagosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioAutoriPago) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(AutoriPago autoripagoAux:autoripagoLogic.getAutoriPagos()) {
					if(autoripagoAux.getIsSelected()) {
						autoripagosSeleccionados.add(autoripagoAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(AutoriPago autoripagoAux:this.autoripagos) {
					if(autoripagoAux.getIsSelected()) {
						autoripagosSeleccionados.add(autoripagoAux);				
					}
				}
			}
			
			if(autoripagosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						autoripagosSeleccionados.addAll(this.autoripagoLogic.getAutoriPagos());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						autoripagosSeleccionados.addAll(this.autoripagos);				
					}
				}
			}
		} else {
			autoripagosSeleccionados.add(this.autoripago);
		}
		
		return autoripagosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteAutoriPagosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalAutoriPagosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoAutoriPagosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoAutoriPagosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoAutoriPagosSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Autori Pago",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesAutoriPagosSeleccionados() throws Exception {
		ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();		
		
		autoripagosSeleccionados=this.getAutoriPagosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteAutoriPagos("Todos",autoripagosSeleccionados);
		
	}	
	
	public void generarReporteNormalAutoriPagosSeleccionados() throws Exception {
		ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();		
		
		autoripagosSeleccionados=this.getAutoriPagosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteAutoriPagos("Todos",autoripagosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionAutoriPagosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();
		
		autoripagosSeleccionados=this.getAutoriPagosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteAutoriPagos("Todos",autoripagosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoAutoriPagosSeleccionados() throws Exception {
		ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();		
		
		
		this.abrirInicializarFrameReporteDinamicoAutoriPago();
		
		
		autoripagosSeleccionados=this.getAutoriPagosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoAutoriPago();
		
		
		//this.generarReporteAutoriPagos("Todos",autoripagosSeleccionados ,autoripagoImplementable,autoripagoImplementableHome);
	}
	
	public void mostrarImportacionAutoriPagos() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionAutoriPago();
		
		this.abrirFrameImportacionAutoriPago();		
		
			
		//this.generarReporteAutoriPagos("Todos",autoripagosSeleccionados ,autoripagoImplementable,autoripagoImplementableHome);
	}
	
	public void importarAutoriPagos() throws Exception {		
	
	}
	
	public void exportarAutoriPagosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelAutoriPagosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoAutoriPagosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlAutoriPagosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Autori Pago",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoAutoriPagosSeleccionados() throws Exception {
		ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();		
		
		autoripagosSeleccionados=this.getAutoriPagosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"autoripago."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarAutoriPago(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(AutoriPago autoripagoAux:autoripagosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarAutoriPago(autoripagoAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//autoripagoAux.setsDetalleGeneralEntityReporte(autoripagoAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.autoripagoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Autori Pago",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarAutoriPago(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_IDFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_IDBANCO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_FECHAEMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_VALORPAGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_FECHACORTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=AutoriPagoConstantesFunciones.LABEL_DESCRIPCION;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarAutoriPago(AutoriPago autoripago,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=autoripago.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getfactura_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getasientocontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getcentrocosto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getcentroactividad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getbanco_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getcuentabanco_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getdetalleprove_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.gettransaccion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getfecha_emision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getfecha_vencimiento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getvalor_pago().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getvalor_cancelado().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getnumero_factura();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getdetalle_factura();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getfecha_corte().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=autoripago.getdescripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelAutoriPagosSeleccionados() throws Exception {
		ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();		
		
		autoripagosSeleccionados=this.getAutoriPagosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"autoripago.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("AutoriPagos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelAutoriPago(row);				
				iRow++;
			}				
			
			for(AutoriPago autoripagoAux:autoripagosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelAutoriPago(autoripagoAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.autoripagoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Autori Pago",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlAutoriPagosSeleccionados() throws Exception {
		ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();		
		
		autoripagosSeleccionados=this.getAutoriPagosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"autoripago.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("autoripagos");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("autoripago");
			//elementRoot.appendChild(element);
		
			for(AutoriPago autoripagoAux:autoripagosSeleccionados) {
				element = document.createElement("autoripago");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlAutoriPago(autoripagoAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.autoripagoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Autori Pago",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelAutoriPago(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDBANCO);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_FECHAEMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_VALORPAGO);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_VALORCANCELADO);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_FECHACORTE);
		cell = row.createCell(iColumn++);cell.setCellValue(AutoriPagoConstantesFunciones.LABEL_DESCRIPCION);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelAutoriPago(AutoriPago autoripago,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getfactura_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getasientocontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getcentrocosto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getcentroactividad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getbanco_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getcuentabanco_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getdetalleprove_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.gettransaccion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getfecha_emision());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getfecha_vencimiento());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getvalor_pago());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getvalor_cancelado());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getnumero_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getdetalle_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getfecha_corte());
		cell = row.createCell(iColumn++);cell.setCellValue(autoripago.getdescripcion());				
	}
	
	public void setFilaDatosExportarXmlAutoriPago(AutoriPago autoripago,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(AutoriPagoConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(autoripago.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(AutoriPagoConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(autoripago.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(AutoriPagoConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(autoripago.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(AutoriPagoConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(autoripago.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(AutoriPagoConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(autoripago.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementcliente_descripcion = document.createElement(AutoriPagoConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(autoripago.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementfactura_descripcion = document.createElement(AutoriPagoConstantesFunciones.IDFACTURA);
		elementfactura_descripcion.appendChild(document.createTextNode(autoripago.getfactura_descripcion()));
		element.appendChild(elementfactura_descripcion);

		Element elementasientocontable_descripcion = document.createElement(AutoriPagoConstantesFunciones.IDASIENTOCONTABLE);
		elementasientocontable_descripcion.appendChild(document.createTextNode(autoripago.getasientocontable_descripcion()));
		element.appendChild(elementasientocontable_descripcion);

		Element elementcentrocosto_descripcion = document.createElement(AutoriPagoConstantesFunciones.IDCENTROCOSTO);
		elementcentrocosto_descripcion.appendChild(document.createTextNode(autoripago.getcentrocosto_descripcion()));
		element.appendChild(elementcentrocosto_descripcion);

		Element elementcentroactividad_descripcion = document.createElement(AutoriPagoConstantesFunciones.IDCENTROACTIVIDAD);
		elementcentroactividad_descripcion.appendChild(document.createTextNode(autoripago.getcentroactividad_descripcion()));
		element.appendChild(elementcentroactividad_descripcion);

		Element elementbanco_descripcion = document.createElement(AutoriPagoConstantesFunciones.IDBANCO);
		elementbanco_descripcion.appendChild(document.createTextNode(autoripago.getbanco_descripcion()));
		element.appendChild(elementbanco_descripcion);

		Element elementcuentabanco_descripcion = document.createElement(AutoriPagoConstantesFunciones.IDCUENTABANCO);
		elementcuentabanco_descripcion.appendChild(document.createTextNode(autoripago.getcuentabanco_descripcion()));
		element.appendChild(elementcuentabanco_descripcion);

		Element elementdetalleprove_descripcion = document.createElement(AutoriPagoConstantesFunciones.IDDETALLEPROVE);
		elementdetalleprove_descripcion.appendChild(document.createTextNode(autoripago.getdetalleprove_descripcion()));
		element.appendChild(elementdetalleprove_descripcion);

		Element elementtransaccion_descripcion = document.createElement(AutoriPagoConstantesFunciones.IDTRANSACCION);
		elementtransaccion_descripcion.appendChild(document.createTextNode(autoripago.gettransaccion_descripcion()));
		element.appendChild(elementtransaccion_descripcion);

		Element elementfecha_emision = document.createElement(AutoriPagoConstantesFunciones.FECHAEMISION);
		elementfecha_emision.appendChild(document.createTextNode(autoripago.getfecha_emision().toString().trim()));
		element.appendChild(elementfecha_emision);

		Element elementfecha_vencimiento = document.createElement(AutoriPagoConstantesFunciones.FECHAVENCIMIENTO);
		elementfecha_vencimiento.appendChild(document.createTextNode(autoripago.getfecha_vencimiento().toString().trim()));
		element.appendChild(elementfecha_vencimiento);

		Element elementvalor_pago = document.createElement(AutoriPagoConstantesFunciones.VALORPAGO);
		elementvalor_pago.appendChild(document.createTextNode(autoripago.getvalor_pago().toString().trim()));
		element.appendChild(elementvalor_pago);

		Element elementvalor_cancelado = document.createElement(AutoriPagoConstantesFunciones.VALORCANCELADO);
		elementvalor_cancelado.appendChild(document.createTextNode(autoripago.getvalor_cancelado().toString().trim()));
		element.appendChild(elementvalor_cancelado);

		Element elementnumero_factura = document.createElement(AutoriPagoConstantesFunciones.NUMEROFACTURA);
		elementnumero_factura.appendChild(document.createTextNode(autoripago.getnumero_factura().trim()));
		element.appendChild(elementnumero_factura);

		Element elementdetalle_factura = document.createElement(AutoriPagoConstantesFunciones.DETALLEFACTURA);
		elementdetalle_factura.appendChild(document.createTextNode(autoripago.getdetalle_factura().trim()));
		element.appendChild(elementdetalle_factura);

		Element elementfecha_corte = document.createElement(AutoriPagoConstantesFunciones.FECHACORTE);
		elementfecha_corte.appendChild(document.createTextNode(autoripago.getfecha_corte().toString().trim()));
		element.appendChild(elementfecha_corte);

		Element elementdescripcion = document.createElement(AutoriPagoConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(autoripago.getdescripcion().trim()));
		element.appendChild(elementdescripcion);
	}
	
	public void generarReporteGroupGenericoAutoriPagosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<AutoriPago> autoripagosSeleccionados=new ArrayList<AutoriPago>();
		
		autoripagosSeleccionados=this.getAutoriPagosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoAutoriPago(autoripagosSeleccionados);
		
		this.generarReporteAutoriPagos("Todos",autoripagosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoAutoriPago(ArrayList<AutoriPago> autoripagosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(AutoriPago autoripagoAux:autoripagosSeleccionados) {
				autoripagoAux.setsDetalleGeneralEntityReporte(autoripagoAux.toString());
			
				if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_IDFACTURA)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getfactura_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_IDASIENTOCONTABLE)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getasientocontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_IDCENTROCOSTO)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getcentrocosto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_IDCENTROACTIVIDAD)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getcentroactividad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_IDBANCO)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getbanco_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_IDCUENTABANCO)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getcuentabanco_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_IDDETALLEPROVE)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getdetalleprove_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_IDTRANSACCION)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.gettransaccion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_FECHAEMISION)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(autoripagoAux.getfecha_emision()));
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_FECHAVENCIMIENTO)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(autoripagoAux.getfecha_vencimiento()));
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_NUMEROFACTURA)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getnumero_factura());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_DETALLEFACTURA)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getdetalle_factura());
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_FECHACORTE)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(autoripagoAux.getfecha_corte()));
				}
				 else if(sTipoSeleccionar.equals(AutoriPagoConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					autoripagoAux.setsDescripcionGeneralEntityReporte1(autoripagoAux.getdescripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,AutoriPagoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesAutoriPago(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoAutoriPago=true;
				this.isVisibilidadCeldaNuevoRelacionesAutoriPago=true;
				this.isVisibilidadCeldaGuardarCambiosAutoriPago=true;
			}
			
			this.isVisibilidadCeldaModificarAutoriPago=false;
			this.isVisibilidadCeldaActualizarAutoriPago=false;
			this.isVisibilidadCeldaEliminarAutoriPago=false;
			this.isVisibilidadCeldaCancelarAutoriPago=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAutoriPago=true;
				} else {
					this.isVisibilidadCeldaGuardarAutoriPago=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoAutoriPago=false;
			this.isVisibilidadCeldaNuevoRelacionesAutoriPago=false;
			this.isVisibilidadCeldaGuardarCambiosAutoriPago=false;
			this.isVisibilidadCeldaModificarAutoriPago=false;
			this.isVisibilidadCeldaActualizarAutoriPago=true;
			this.isVisibilidadCeldaEliminarAutoriPago=false;
			this.isVisibilidadCeldaCancelarAutoriPago=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAutoriPago=true;
				} else {
					this.isVisibilidadCeldaGuardarAutoriPago=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoAutoriPago=false;
			this.isVisibilidadCeldaNuevoRelacionesAutoriPago=false;
			this.isVisibilidadCeldaGuardarCambiosAutoriPago=false;
			this.isVisibilidadCeldaModificarAutoriPago=false;
			this.isVisibilidadCeldaActualizarAutoriPago=true;
			this.isVisibilidadCeldaEliminarAutoriPago=true;
			this.isVisibilidadCeldaCancelarAutoriPago=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAutoriPago=true;
				} else {
					this.isVisibilidadCeldaGuardarAutoriPago=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoAutoriPago=false;
			this.isVisibilidadCeldaNuevoRelacionesAutoriPago=false;
			this.isVisibilidadCeldaGuardarCambiosAutoriPago=false;
			this.isVisibilidadCeldaModificarAutoriPago=false;
			this.isVisibilidadCeldaActualizarAutoriPago=true;
			this.isVisibilidadCeldaEliminarAutoriPago=false;
			this.isVisibilidadCeldaCancelarAutoriPago=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAutoriPago=false;
				} else {
					this.isVisibilidadCeldaGuardarAutoriPago=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoAutoriPago=true;
			this.isVisibilidadCeldaNuevoRelacionesAutoriPago=true;
			this.isVisibilidadCeldaGuardarCambiosAutoriPago=true;
			this.isVisibilidadCeldaModificarAutoriPago=false;
			this.isVisibilidadCeldaActualizarAutoriPago=false;
			this.isVisibilidadCeldaEliminarAutoriPago=false;
			this.isVisibilidadCeldaCancelarAutoriPago=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAutoriPago=true;
				} else {
					this.isVisibilidadCeldaGuardarAutoriPago=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoAutoriPago=false;
			this.isVisibilidadCeldaNuevoRelacionesAutoriPago=false;
			this.isVisibilidadCeldaGuardarCambiosAutoriPago=false;
			this.isVisibilidadCeldaActualizarAutoriPago=false;
			this.isVisibilidadCeldaEliminarAutoriPago=false;
			this.isVisibilidadCeldaCancelarAutoriPago=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAutoriPago=false;
				} else {
					this.isVisibilidadCeldaGuardarAutoriPago=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoAutoriPago=false;
			this.isVisibilidadCeldaNuevoRelacionesAutoriPago=false;
			this.isVisibilidadCeldaGuardarCambiosAutoriPago=false;
			this.isVisibilidadCeldaModificarAutoriPago=true;
			this.isVisibilidadCeldaActualizarAutoriPago=false;
			this.isVisibilidadCeldaEliminarAutoriPago=false;
			this.isVisibilidadCeldaCancelarAutoriPago=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarAutoriPago=false;
				} else {
					this.isVisibilidadCeldaGuardarAutoriPago=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(AutoriPagoJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoAutoriPago=true;
			this.isVisibilidadCeldaNuevoRelacionesAutoriPago=true;
			this.isVisibilidadCeldaGuardarCambiosAutoriPago=true;
		} else {
			this.actualizarEstadoPanelsAutoriPago(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarAutoriPago=false;
			//this.isVisibilidadCeldaVerFormAutoriPago=false;
			this.isVisibilidadCeldaDuplicarAutoriPago=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!autoripagoSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesAutoriPago=false;
		} else {
			this.isVisibilidadCeldaNuevoAutoriPago=false;
			this.isVisibilidadCeldaGuardarCambiosAutoriPago=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(autoripagoSessionBean.getEsGuardarRelacionado()) {
			if(!autoripagoSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesAutoriPago=false;												
			}
			
			this.jButtonCerrarAutoriPago.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesAutoriPago=false;
		}
		
		if(!this.permiteMantenimiento(this.autoripago)) {
			this.isVisibilidadCeldaActualizarAutoriPago=false;
			this.isVisibilidadCeldaEliminarAutoriPago=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesAutoriPago() {
	}
	
	public void actualizarEstadoPanelsAutoriPago(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionAutoriPago!=null) {
				this.jScrollPanelDatosEdicionAutoriPago.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAutoriPago!=null) {
				this.jTabbedPaneBusquedasAutoriPago.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosAutoriPago!=null) {
				this.jScrollPanelDatosAutoriPago.setVisible(true);
			}
			
			if(this.jPanelPaginacionAutoriPago!=null) {
				this.jPanelPaginacionAutoriPago.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesAutoriPago!=null) {
				this.jPanelParametrosReportesAutoriPago.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionAutoriPago!=null) {
				this.jScrollPanelDatosEdicionAutoriPago.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAutoriPago!=null) {
				this.jTabbedPaneBusquedasAutoriPago.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosAutoriPago!=null) {
				this.jScrollPanelDatosAutoriPago.setVisible(false);
			}
			
			if(this.jPanelPaginacionAutoriPago!=null) {
				this.jPanelPaginacionAutoriPago.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesAutoriPago!=null) {
				this.jPanelParametrosReportesAutoriPago.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionAutoriPago!=null) {
				this.jScrollPanelDatosEdicionAutoriPago.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAutoriPago!=null) {
				this.jTabbedPaneBusquedasAutoriPago.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosAutoriPago!=null) {
				this.jScrollPanelDatosAutoriPago.setVisible(false);
			}
			
			if(this.jPanelPaginacionAutoriPago!=null) {
				this.jPanelPaginacionAutoriPago.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesAutoriPago!=null) {
				this.jPanelParametrosReportesAutoriPago.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionAutoriPago!=null) {
				this.jScrollPanelDatosEdicionAutoriPago.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAutoriPago!=null) {
				this.jTabbedPaneBusquedasAutoriPago.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosAutoriPago!=null) {
				this.jScrollPanelDatosAutoriPago.setVisible(false);
			}
			
			if(this.jPanelPaginacionAutoriPago!=null) {
				this.jPanelPaginacionAutoriPago.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesAutoriPago!=null) {
				this.jPanelParametrosReportesAutoriPago.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionAutoriPago!=null) {
				this.jScrollPanelDatosEdicionAutoriPago.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAutoriPago!=null) {
				this.jTabbedPaneBusquedasAutoriPago.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosAutoriPago!=null) {
				this.jScrollPanelDatosAutoriPago.setVisible(true);
			}
			
			if(this.jPanelPaginacionAutoriPago!=null) {
				this.jPanelPaginacionAutoriPago.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesAutoriPago!=null) {
				this.jPanelParametrosReportesAutoriPago.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionAutoriPago!=null) {
				this.jScrollPanelDatosEdicionAutoriPago.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAutoriPago!=null) {
				this.jTabbedPaneBusquedasAutoriPago.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosAutoriPago!=null) {
				this.jScrollPanelDatosAutoriPago.setVisible(true);
			}
			
			if(this.jPanelPaginacionAutoriPago!=null) {
				this.jPanelPaginacionAutoriPago.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesAutoriPago!=null) {
				this.jPanelParametrosReportesAutoriPago.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionAutoriPago!=null) {
				this.jScrollPanelDatosEdicionAutoriPago.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAutoriPago!=null) {
				this.jTabbedPaneBusquedasAutoriPago.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosAutoriPago!=null) {
				this.jScrollPanelDatosAutoriPago.setVisible(true);
			}
			
			if(this.jPanelPaginacionAutoriPago!=null) {
				this.jPanelPaginacionAutoriPago.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesAutoriPago!=null) {
				this.jPanelParametrosReportesAutoriPago.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.autoripagoSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasAutoriPago!=null) {
					this.jTabbedPaneBusquedasAutoriPago.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesAutoriPago!=null) {
				this.jPanelParametrosReportesAutoriPago.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.autoripagoSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasAutoriPago!=null) {
				this.jTabbedPaneBusquedasAutoriPago.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesAutoriPago!=null) {
				this.jPanelParametrosReportesAutoriPago.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdAsientoContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdAsientoContableAutoriPago);}

			this.isVisibilidadFK_IdBanco=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdBancoAutoriPago);}

			this.isVisibilidadFK_IdCentroActividad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroActividadAutoriPago);}

			this.isVisibilidadFK_IdCentroCosto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroCostoAutoriPago);}

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdClienteAutoriPago);}

			this.isVisibilidadFK_IdCuentaBanco=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCuentaBancoAutoriPago);}

			this.isVisibilidadFK_IdDetalleProve=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdDetalleProveAutoriPago);}

			this.isVisibilidadFK_IdFactura=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdFacturaAutoriPago);}

			this.isVisibilidadFK_IdTransaccion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdTransaccionAutoriPago);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdAsientoContable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdAsientoContableAutoriPago);}

			this.isVisibilidadFK_IdBanco=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdBancoAutoriPago);}

			this.isVisibilidadFK_IdCentroActividad=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroActividadAutoriPago);}

			this.isVisibilidadFK_IdCentroCosto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroCostoAutoriPago);}

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdClienteAutoriPago);}

			this.isVisibilidadFK_IdCuentaBanco=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCuentaBancoAutoriPago);}

			this.isVisibilidadFK_IdDetalleProve=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdDetalleProveAutoriPago);}

			this.isVisibilidadFK_IdFactura=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdFacturaAutoriPago);}

			this.isVisibilidadFK_IdTransaccion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdTransaccionAutoriPago);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdAsientoContable=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdAsientoContableAutoriPago);}

			this.isVisibilidadFK_IdBanco=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdBancoAutoriPago);}

			this.isVisibilidadFK_IdCentroActividad=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroActividadAutoriPago);}

			this.isVisibilidadFK_IdCentroCosto=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroCostoAutoriPago);}

			this.isVisibilidadFK_IdCliente=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdClienteAutoriPago);}

			this.isVisibilidadFK_IdCuentaBanco=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCuentaBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCuentaBancoAutoriPago);}

			this.isVisibilidadFK_IdDetalleProve=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdDetalleProveAutoriPago);}

			this.isVisibilidadFK_IdFactura=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdFacturaAutoriPago);}

			this.isVisibilidadFK_IdTransaccion=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdTransaccionAutoriPago);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadFK_IdAsientoContable=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdAsientoContableAutoriPago);}

			this.isVisibilidadFK_IdBanco=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdBancoAutoriPago);}

			this.isVisibilidadFK_IdCentroActividad=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroActividadAutoriPago);}

			this.isVisibilidadFK_IdCentroCosto=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroCostoAutoriPago);}

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdClienteAutoriPago);}

			this.isVisibilidadFK_IdCuentaBanco=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdCuentaBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCuentaBancoAutoriPago);}

			this.isVisibilidadFK_IdDetalleProve=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdDetalleProveAutoriPago);}

			this.isVisibilidadFK_IdFactura=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdFacturaAutoriPago);}

			this.isVisibilidadFK_IdTransaccion=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdTransaccionAutoriPago);}
		}
		
	}

	public void setVisibilidadBusquedasParaFactura(Boolean isParaFactura){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFacturaNegation=!isParaFactura;

			this.isVisibilidadFK_IdAsientoContable=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdAsientoContableAutoriPago);}

			this.isVisibilidadFK_IdBanco=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdBancoAutoriPago);}

			this.isVisibilidadFK_IdCentroActividad=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroActividadAutoriPago);}

			this.isVisibilidadFK_IdCentroCosto=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroCostoAutoriPago);}

			this.isVisibilidadFK_IdCliente=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdClienteAutoriPago);}

			this.isVisibilidadFK_IdCuentaBanco=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCuentaBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCuentaBancoAutoriPago);}

			this.isVisibilidadFK_IdDetalleProve=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdDetalleProveAutoriPago);}

			this.isVisibilidadFK_IdFactura=isParaFactura;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdFacturaAutoriPago);}

			this.isVisibilidadFK_IdTransaccion=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdTransaccionAutoriPago);}
		}
		
	}

	public void setVisibilidadBusquedasParaAsientoContable(Boolean isParaAsientoContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAsientoContableNegation=!isParaAsientoContable;

			this.isVisibilidadFK_IdAsientoContable=isParaAsientoContable;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdAsientoContableAutoriPago);}

			this.isVisibilidadFK_IdBanco=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdBancoAutoriPago);}

			this.isVisibilidadFK_IdCentroActividad=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroActividadAutoriPago);}

			this.isVisibilidadFK_IdCentroCosto=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroCostoAutoriPago);}

			this.isVisibilidadFK_IdCliente=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdClienteAutoriPago);}

			this.isVisibilidadFK_IdCuentaBanco=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCuentaBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCuentaBancoAutoriPago);}

			this.isVisibilidadFK_IdDetalleProve=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdDetalleProveAutoriPago);}

			this.isVisibilidadFK_IdFactura=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdFacturaAutoriPago);}

			this.isVisibilidadFK_IdTransaccion=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdTransaccionAutoriPago);}
		}
		
	}

	public void setVisibilidadBusquedasParaCentroCosto(Boolean isParaCentroCosto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCentroCostoNegation=!isParaCentroCosto;

			this.isVisibilidadFK_IdAsientoContable=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdAsientoContableAutoriPago);}

			this.isVisibilidadFK_IdBanco=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdBancoAutoriPago);}

			this.isVisibilidadFK_IdCentroActividad=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroActividadAutoriPago);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroCosto;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroCostoAutoriPago);}

			this.isVisibilidadFK_IdCliente=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdClienteAutoriPago);}

			this.isVisibilidadFK_IdCuentaBanco=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdCuentaBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCuentaBancoAutoriPago);}

			this.isVisibilidadFK_IdDetalleProve=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdDetalleProveAutoriPago);}

			this.isVisibilidadFK_IdFactura=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdFacturaAutoriPago);}

			this.isVisibilidadFK_IdTransaccion=isParaCentroCostoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdTransaccionAutoriPago);}
		}
		
	}

	public void setVisibilidadBusquedasParaCentroActividad(Boolean isParaCentroActividad){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCentroActividadNegation=!isParaCentroActividad;

			this.isVisibilidadFK_IdAsientoContable=isParaCentroActividadNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdAsientoContableAutoriPago);}

			this.isVisibilidadFK_IdBanco=isParaCentroActividadNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdBancoAutoriPago);}

			this.isVisibilidadFK_IdCentroActividad=isParaCentroActividad;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroActividadAutoriPago);}

			this.isVisibilidadFK_IdCentroCosto=isParaCentroActividadNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroCostoAutoriPago);}

			this.isVisibilidadFK_IdCliente=isParaCentroActividadNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdClienteAutoriPago);}

			this.isVisibilidadFK_IdCuentaBanco=isParaCentroActividadNegation;
			if(!this.isVisibilidadFK_IdCuentaBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCuentaBancoAutoriPago);}

			this.isVisibilidadFK_IdDetalleProve=isParaCentroActividadNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdDetalleProveAutoriPago);}

			this.isVisibilidadFK_IdFactura=isParaCentroActividadNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdFacturaAutoriPago);}

			this.isVisibilidadFK_IdTransaccion=isParaCentroActividadNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdTransaccionAutoriPago);}
		}
		
	}

	public void setVisibilidadBusquedasParaBanco(Boolean isParaBanco){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBancoNegation=!isParaBanco;

			this.isVisibilidadFK_IdAsientoContable=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdAsientoContableAutoriPago);}

			this.isVisibilidadFK_IdBanco=isParaBanco;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdBancoAutoriPago);}

			this.isVisibilidadFK_IdCentroActividad=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroActividadAutoriPago);}

			this.isVisibilidadFK_IdCentroCosto=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroCostoAutoriPago);}

			this.isVisibilidadFK_IdCliente=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdClienteAutoriPago);}

			this.isVisibilidadFK_IdCuentaBanco=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdCuentaBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCuentaBancoAutoriPago);}

			this.isVisibilidadFK_IdDetalleProve=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdDetalleProveAutoriPago);}

			this.isVisibilidadFK_IdFactura=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdFacturaAutoriPago);}

			this.isVisibilidadFK_IdTransaccion=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdTransaccionAutoriPago);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaBanco(Boolean isParaCuentaBanco){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaBancoNegation=!isParaCuentaBanco;

			this.isVisibilidadFK_IdAsientoContable=isParaCuentaBancoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdAsientoContableAutoriPago);}

			this.isVisibilidadFK_IdBanco=isParaCuentaBancoNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdBancoAutoriPago);}

			this.isVisibilidadFK_IdCentroActividad=isParaCuentaBancoNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroActividadAutoriPago);}

			this.isVisibilidadFK_IdCentroCosto=isParaCuentaBancoNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroCostoAutoriPago);}

			this.isVisibilidadFK_IdCliente=isParaCuentaBancoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdClienteAutoriPago);}

			this.isVisibilidadFK_IdCuentaBanco=isParaCuentaBanco;
			if(!this.isVisibilidadFK_IdCuentaBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCuentaBancoAutoriPago);}

			this.isVisibilidadFK_IdDetalleProve=isParaCuentaBancoNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdDetalleProveAutoriPago);}

			this.isVisibilidadFK_IdFactura=isParaCuentaBancoNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdFacturaAutoriPago);}

			this.isVisibilidadFK_IdTransaccion=isParaCuentaBancoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdTransaccionAutoriPago);}
		}
		
	}

	public void setVisibilidadBusquedasParaDetalleProve(Boolean isParaDetalleProve){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaDetalleProveNegation=!isParaDetalleProve;

			this.isVisibilidadFK_IdAsientoContable=isParaDetalleProveNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdAsientoContableAutoriPago);}

			this.isVisibilidadFK_IdBanco=isParaDetalleProveNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdBancoAutoriPago);}

			this.isVisibilidadFK_IdCentroActividad=isParaDetalleProveNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroActividadAutoriPago);}

			this.isVisibilidadFK_IdCentroCosto=isParaDetalleProveNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroCostoAutoriPago);}

			this.isVisibilidadFK_IdCliente=isParaDetalleProveNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdClienteAutoriPago);}

			this.isVisibilidadFK_IdCuentaBanco=isParaDetalleProveNegation;
			if(!this.isVisibilidadFK_IdCuentaBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCuentaBancoAutoriPago);}

			this.isVisibilidadFK_IdDetalleProve=isParaDetalleProve;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdDetalleProveAutoriPago);}

			this.isVisibilidadFK_IdFactura=isParaDetalleProveNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdFacturaAutoriPago);}

			this.isVisibilidadFK_IdTransaccion=isParaDetalleProveNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdTransaccionAutoriPago);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransaccion(Boolean isParaTransaccion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransaccionNegation=!isParaTransaccion;

			this.isVisibilidadFK_IdAsientoContable=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdAsientoContableAutoriPago);}

			this.isVisibilidadFK_IdBanco=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdBancoAutoriPago);}

			this.isVisibilidadFK_IdCentroActividad=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdCentroActividad) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroActividadAutoriPago);}

			this.isVisibilidadFK_IdCentroCosto=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdCentroCosto) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCentroCostoAutoriPago);}

			this.isVisibilidadFK_IdCliente=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdClienteAutoriPago);}

			this.isVisibilidadFK_IdCuentaBanco=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdCuentaBanco) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdCuentaBancoAutoriPago);}

			this.isVisibilidadFK_IdDetalleProve=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdDetalleProve) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdDetalleProveAutoriPago);}

			this.isVisibilidadFK_IdFactura=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdFactura) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdFacturaAutoriPago);}

			this.isVisibilidadFK_IdTransaccion=isParaTransaccion;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasAutoriPago.remove(jPanelFK_IdTransaccionAutoriPago);}
		}
		
	}
	
	
	
	

	public String registrarSesionAutoriPagoParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(autoripagoSessionBean==null) {
				autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(autoripagoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.autoripagoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(AutoriPagoConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionAutoriPago(true);
			//clienteSessionBean.setlidAutoriPagoActual(this.idAutoriPagoActual);

			autoripagoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyAutoriPago(true);
			autoripagoSessionBean.setlIdAutoriPagoActualForeignKey(this.idAutoriPagoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionAutoriPagoParaBusquedaFacturas() throws Exception {
		Boolean isPaginaPopupFactura=false;

		try {

			if(autoripagoSessionBean==null) {
				autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			facturaSessionBean.setsPathNavegacionActual(autoripagoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+FacturaConstantesFunciones.SCLASSWEBTITULO);
			facturaSessionBean.setisPermiteRecargarInformacion(false);
			facturaSessionBean.setisPaginaPopup(true);
			isPaginaPopupFactura=facturaSessionBean.getisPaginaPopup();
			facturaSessionBean.setisPaginaPopup(false);
			facturaSessionBean.setEstaModoBusqueda(true);
			facturaSessionBean.setsFuncionBusquedaRapida("window.opener.autoripagoFuncionGeneral.setCombosCodigoDesdeBusquedaid_factura(TO_REPLACE);");
			facturaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeFactura(true);
			facturaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeFactura(AutoriPagoConstantesFunciones.SNOMBREOPCION);
			//facturaSessionBean.setisBusquedaDesdeForeignKeySesionAutoriPago(true);
			//facturaSessionBean.setlidAutoriPagoActual(this.idAutoriPagoActual);

			autoripagoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyAutoriPago(true);
			autoripagoSessionBean.setlIdAutoriPagoActualForeignKey(this.idAutoriPagoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionAutoriPagoParaBusquedaAsientoContables() throws Exception {
		Boolean isPaginaPopupAsientoContable=false;

		try {

			if(autoripagoSessionBean==null) {
				autoripagoSessionBean=new AutoriPagoSessionBean();
			}

			if(asientocontableSessionBean==null) {
				asientocontableSessionBean=new AsientoContableSessionBean();
			}

			asientocontableSessionBean.setsPathNavegacionActual(autoripagoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AsientoContableConstantesFunciones.SCLASSWEBTITULO);
			asientocontableSessionBean.setisPermiteRecargarInformacion(false);
			asientocontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupAsientoContable=asientocontableSessionBean.getisPaginaPopup();
			asientocontableSessionBean.setisPaginaPopup(false);
			asientocontableSessionBean.setEstaModoBusqueda(true);
			asientocontableSessionBean.setsFuncionBusquedaRapida("window.opener.autoripagoFuncionGeneral.setCombosCodigoDesdeBusquedaid_asiento_contable(TO_REPLACE);");
			asientocontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAsientoContable(true);
			asientocontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAsientoContable(AutoriPagoConstantesFunciones.SNOMBREOPCION);
			//asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionAutoriPago(true);
			//asientocontableSessionBean.setlidAutoriPagoActual(this.idAutoriPagoActual);

			autoripagoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyAutoriPago(true);
			autoripagoSessionBean.setlIdAutoriPagoActualForeignKey(this.idAutoriPagoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//AutoriPagoSessionBean autoripagoSessionBean=new AutoriPagoSessionBean();
		
		if(this.autoripagoSessionBean==null) {
			this.autoripagoSessionBean=new AutoriPagoSessionBean();
		}
		
		this.autoripagoSessionBean.setsUltimaBusquedaAutoriPago(this.getsAccionBusqueda());
		this.autoripagoSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.autoripagoSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
			autoripagoSessionBean.setid_asiento_contable(this.getid_asiento_contableFK_IdAsientoContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdBanco")) {
			autoripagoSessionBean.setid_banco(this.getid_bancoFK_IdBanco());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroActividad")) {
			autoripagoSessionBean.setid_centro_actividad(this.getid_centro_actividadFK_IdCentroActividad());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
			autoripagoSessionBean.setid_centro_costo(this.getid_centro_costoFK_IdCentroCosto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			autoripagoSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaBanco")) {
			autoripagoSessionBean.setid_cuenta_banco(this.getid_cuenta_bancoFK_IdCuentaBanco());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdDetalleProve")) {
			autoripagoSessionBean.setid_detalle_prove(this.getid_detalle_proveFK_IdDetalleProve());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			autoripagoSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			autoripagoSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
			autoripagoSessionBean.setid_factura(this.getid_facturaFK_IdFactura());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			autoripagoSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransaccion")) {
			autoripagoSessionBean.setid_transaccion(this.getid_transaccionFK_IdTransaccion());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//AutoriPagoSessionBean autoripagoSessionBean=new AutoriPagoSessionBean();
		
		if(this.autoripagoSessionBean==null) {
			this.autoripagoSessionBean=new AutoriPagoSessionBean();
		}
		
		if(this.autoripagoSessionBean.getsUltimaBusquedaAutoriPago()!=null&&!this.autoripagoSessionBean.getsUltimaBusquedaAutoriPago().equals("")) {
			this.setsAccionBusqueda(autoripagoSessionBean.getsUltimaBusquedaAutoriPago());
			this.setiNumeroPaginacion(autoripagoSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(autoripagoSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
				this.setid_asiento_contableFK_IdAsientoContable(autoripagoSessionBean.getid_asiento_contable());
				autoripagoSessionBean.setid_asiento_contable(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdBanco")) {
				this.setid_bancoFK_IdBanco(autoripagoSessionBean.getid_banco());
				autoripagoSessionBean.setid_banco(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroActividad")) {
				this.setid_centro_actividadFK_IdCentroActividad(autoripagoSessionBean.getid_centro_actividad());
				autoripagoSessionBean.setid_centro_actividad(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCentroCosto")) {
				this.setid_centro_costoFK_IdCentroCosto(autoripagoSessionBean.getid_centro_costo());
				autoripagoSessionBean.setid_centro_costo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(autoripagoSessionBean.getid_cliente());
				autoripagoSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaBanco")) {
				this.setid_cuenta_bancoFK_IdCuentaBanco(autoripagoSessionBean.getid_cuenta_banco());
				autoripagoSessionBean.setid_cuenta_banco(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdDetalleProve")) {
				this.setid_detalle_proveFK_IdDetalleProve(autoripagoSessionBean.getid_detalle_prove());
				autoripagoSessionBean.setid_detalle_prove(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(autoripagoSessionBean.getid_ejercicio());
				autoripagoSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(autoripagoSessionBean.getid_empresa());
				autoripagoSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFactura")) {
				this.setid_facturaFK_IdFactura(autoripagoSessionBean.getid_factura());
				autoripagoSessionBean.setid_factura(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(autoripagoSessionBean.getid_sucursal());
				autoripagoSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransaccion")) {
				this.setid_transaccionFK_IdTransaccion(autoripagoSessionBean.getid_transaccion());
				autoripagoSessionBean.setid_transaccion(-1L);
			}
		}
		
		this.autoripagoSessionBean.setsUltimaBusquedaAutoriPago("");
		this.autoripagoSessionBean.setiNumeroPaginacion(AutoriPagoConstantesFunciones.INUMEROPAGINACION);
		this.autoripagoSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaAutoriPago(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioAutoriPago() {
		this.updateBorderResaltarBusquedasFormularioAutoriPago();
		this.updateVisibilidadBusquedasFormularioAutoriPago();
		this.updateHabilitarBusquedasFormularioAutoriPago();
	}
	
	public void updateBorderResaltarBusquedasFormularioAutoriPago() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasAutoriPago.getComponents().length>0) {
	

		if(this.autoripagoConstantesFunciones.resaltarFK_IdAsientoContableAutoriPago!=null) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdAsientoContableAutoriPago);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdAsientoContableAutoriPago);
			}
		}

		if(this.autoripagoConstantesFunciones.resaltarFK_IdBancoAutoriPago!=null) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdBancoAutoriPago);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdBancoAutoriPago);
			}
		}

		if(this.autoripagoConstantesFunciones.resaltarFK_IdCentroActividadAutoriPago!=null) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdCentroActividadAutoriPago);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdCentroActividadAutoriPago);
			}
		}

		if(this.autoripagoConstantesFunciones.resaltarFK_IdCentroCostoAutoriPago!=null) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdCentroCostoAutoriPago);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdCentroCostoAutoriPago);
			}
		}

		if(this.autoripagoConstantesFunciones.resaltarFK_IdClienteAutoriPago!=null) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdClienteAutoriPago);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdClienteAutoriPago);
			}
		}

		if(this.autoripagoConstantesFunciones.resaltarFK_IdCuentaBancoAutoriPago!=null) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdCuentaBancoAutoriPago);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdCuentaBancoAutoriPago);
			}
		}

		if(this.autoripagoConstantesFunciones.resaltarFK_IdDetalleProveAutoriPago!=null) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdDetalleProveAutoriPago);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdDetalleProveAutoriPago);
			}
		}

		if(this.autoripagoConstantesFunciones.resaltarFK_IdFacturaAutoriPago!=null) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdFacturaAutoriPago);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdFacturaAutoriPago);
			}
		}

		if(this.autoripagoConstantesFunciones.resaltarFK_IdTransaccionAutoriPago!=null) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdTransaccionAutoriPago);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdTransaccionAutoriPago);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioAutoriPago() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasAutoriPago.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdAsientoContableAutoriPago);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.autoripagoConstantesFunciones.mostrarFK_IdAsientoContableAutoriPago);
			if(!this.autoripagoConstantesFunciones.mostrarFK_IdAsientoContableAutoriPago && index>-1) {
				this.jTabbedPaneBusquedasAutoriPago.remove(index);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdBancoAutoriPago);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.autoripagoConstantesFunciones.mostrarFK_IdBancoAutoriPago);
			if(!this.autoripagoConstantesFunciones.mostrarFK_IdBancoAutoriPago && index>-1) {
				this.jTabbedPaneBusquedasAutoriPago.remove(index);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdCentroActividadAutoriPago);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.autoripagoConstantesFunciones.mostrarFK_IdCentroActividadAutoriPago);
			if(!this.autoripagoConstantesFunciones.mostrarFK_IdCentroActividadAutoriPago && index>-1) {
				this.jTabbedPaneBusquedasAutoriPago.remove(index);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdCentroCostoAutoriPago);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.autoripagoConstantesFunciones.mostrarFK_IdCentroCostoAutoriPago);
			if(!this.autoripagoConstantesFunciones.mostrarFK_IdCentroCostoAutoriPago && index>-1) {
				this.jTabbedPaneBusquedasAutoriPago.remove(index);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdClienteAutoriPago);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.autoripagoConstantesFunciones.mostrarFK_IdClienteAutoriPago);
			if(!this.autoripagoConstantesFunciones.mostrarFK_IdClienteAutoriPago && index>-1) {
				this.jTabbedPaneBusquedasAutoriPago.remove(index);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdCuentaBancoAutoriPago);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.autoripagoConstantesFunciones.mostrarFK_IdCuentaBancoAutoriPago);
			if(!this.autoripagoConstantesFunciones.mostrarFK_IdCuentaBancoAutoriPago && index>-1) {
				this.jTabbedPaneBusquedasAutoriPago.remove(index);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdDetalleProveAutoriPago);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.autoripagoConstantesFunciones.mostrarFK_IdDetalleProveAutoriPago);
			if(!this.autoripagoConstantesFunciones.mostrarFK_IdDetalleProveAutoriPago && index>-1) {
				this.jTabbedPaneBusquedasAutoriPago.remove(index);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdFacturaAutoriPago);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.autoripagoConstantesFunciones.mostrarFK_IdFacturaAutoriPago);
			if(!this.autoripagoConstantesFunciones.mostrarFK_IdFacturaAutoriPago && index>-1) {
				this.jTabbedPaneBusquedasAutoriPago.remove(index);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdTransaccionAutoriPago);
			jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.autoripagoConstantesFunciones.mostrarFK_IdTransaccionAutoriPago);
			if(!this.autoripagoConstantesFunciones.mostrarFK_IdTransaccionAutoriPago && index>-1) {
				this.jTabbedPaneBusquedasAutoriPago.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioAutoriPago() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasAutoriPago.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdAsientoContableAutoriPago);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.autoripagoConstantesFunciones.activarFK_IdAsientoContableAutoriPago);
				this.jTabbedPaneBusquedasAutoriPago.setEnabledAt(index,this.autoripagoConstantesFunciones.activarFK_IdAsientoContableAutoriPago);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdBancoAutoriPago);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.autoripagoConstantesFunciones.activarFK_IdBancoAutoriPago);
				this.jTabbedPaneBusquedasAutoriPago.setEnabledAt(index,this.autoripagoConstantesFunciones.activarFK_IdBancoAutoriPago);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdCentroActividadAutoriPago);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.autoripagoConstantesFunciones.activarFK_IdCentroActividadAutoriPago);
				this.jTabbedPaneBusquedasAutoriPago.setEnabledAt(index,this.autoripagoConstantesFunciones.activarFK_IdCentroActividadAutoriPago);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdCentroCostoAutoriPago);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.autoripagoConstantesFunciones.activarFK_IdCentroCostoAutoriPago);
				this.jTabbedPaneBusquedasAutoriPago.setEnabledAt(index,this.autoripagoConstantesFunciones.activarFK_IdCentroCostoAutoriPago);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdClienteAutoriPago);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.autoripagoConstantesFunciones.activarFK_IdClienteAutoriPago);
				this.jTabbedPaneBusquedasAutoriPago.setEnabledAt(index,this.autoripagoConstantesFunciones.activarFK_IdClienteAutoriPago);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdCuentaBancoAutoriPago);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.autoripagoConstantesFunciones.activarFK_IdCuentaBancoAutoriPago);
				this.jTabbedPaneBusquedasAutoriPago.setEnabledAt(index,this.autoripagoConstantesFunciones.activarFK_IdCuentaBancoAutoriPago);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdDetalleProveAutoriPago);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.autoripagoConstantesFunciones.activarFK_IdDetalleProveAutoriPago);
				this.jTabbedPaneBusquedasAutoriPago.setEnabledAt(index,this.autoripagoConstantesFunciones.activarFK_IdDetalleProveAutoriPago);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdFacturaAutoriPago);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.autoripagoConstantesFunciones.activarFK_IdFacturaAutoriPago);
				this.jTabbedPaneBusquedasAutoriPago.setEnabledAt(index,this.autoripagoConstantesFunciones.activarFK_IdFacturaAutoriPago);
			}

			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdTransaccionAutoriPago);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.autoripagoConstantesFunciones.activarFK_IdTransaccionAutoriPago);
				this.jTabbedPaneBusquedasAutoriPago.setEnabledAt(index,this.autoripagoConstantesFunciones.activarFK_IdTransaccionAutoriPago);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaAutoriPago(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdAsientoContable")) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdAsientoContableAutoriPago);

			this.jTabbedPaneBusquedasAutoriPago.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);

			this.autoripagoConstantesFunciones.setResaltarFK_IdAsientoContableAutoriPago(resaltar);

			jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdAsientoContableAutoriPago);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdBanco")) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdBancoAutoriPago);

			this.jTabbedPaneBusquedasAutoriPago.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);

			this.autoripagoConstantesFunciones.setResaltarFK_IdBancoAutoriPago(resaltar);

			jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdBancoAutoriPago);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroActividad")) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdCentroActividadAutoriPago);

			this.jTabbedPaneBusquedasAutoriPago.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);

			this.autoripagoConstantesFunciones.setResaltarFK_IdCentroActividadAutoriPago(resaltar);

			jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdCentroActividadAutoriPago);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCentroCosto")) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdCentroCostoAutoriPago);

			this.jTabbedPaneBusquedasAutoriPago.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);

			this.autoripagoConstantesFunciones.setResaltarFK_IdCentroCostoAutoriPago(resaltar);

			jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdCentroCostoAutoriPago);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdClienteAutoriPago);

			this.jTabbedPaneBusquedasAutoriPago.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);

			this.autoripagoConstantesFunciones.setResaltarFK_IdClienteAutoriPago(resaltar);

			jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdClienteAutoriPago);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaBanco")) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdCuentaBancoAutoriPago);

			this.jTabbedPaneBusquedasAutoriPago.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);

			this.autoripagoConstantesFunciones.setResaltarFK_IdCuentaBancoAutoriPago(resaltar);

			jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdCuentaBancoAutoriPago);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdDetalleProve")) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdDetalleProveAutoriPago);

			this.jTabbedPaneBusquedasAutoriPago.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);

			this.autoripagoConstantesFunciones.setResaltarFK_IdDetalleProveAutoriPago(resaltar);

			jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdDetalleProveAutoriPago);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFactura")) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdFacturaAutoriPago);

			this.jTabbedPaneBusquedasAutoriPago.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);

			this.autoripagoConstantesFunciones.setResaltarFK_IdFacturaAutoriPago(resaltar);

			jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdFacturaAutoriPago);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransaccion")) {
			index= this.jTabbedPaneBusquedasAutoriPago.indexOfComponent(this.jPanelFK_IdTransaccionAutoriPago);

			this.jTabbedPaneBusquedasAutoriPago.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasAutoriPago.getComponent(index);

			this.autoripagoConstantesFunciones.setResaltarFK_IdTransaccionAutoriPago(resaltar);

			jPanel.setBorder(this.autoripagoConstantesFunciones.resaltarFK_IdTransaccionAutoriPago);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarAutoriPago.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioAutoriPago() throws Exception {

		if(this.jInternalFrameDetalleFormAutoriPago==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioAutoriPago();
		this.updateVisibilidadResaltarControlesFormularioAutoriPago();
		this.updateHabilitarResaltarControlesFormularioAutoriPago();
		
	}
	
	public void updateBorderResaltarControlesFormularioAutoriPago() throws Exception {
		if(this.jInternalFrameDetalleFormAutoriPago==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.autoripagoConstantesFunciones.resaltaridAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jLabelidAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltaridAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarid_empresaAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarid_empresaAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarid_sucursalAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarid_sucursalAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarid_ejercicioAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarid_ejercicioAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarid_clienteAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarid_clienteAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarid_facturaAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarid_facturaAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarid_asiento_contableAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarid_asiento_contableAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarid_centro_costoAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarid_centro_costoAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarid_centro_actividadAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarid_centro_actividadAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarid_bancoAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarid_bancoAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarid_cuenta_bancoAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarid_cuenta_bancoAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarid_detalle_proveAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarid_detalle_proveAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarid_transaccionAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarid_transaccionAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarfecha_emisionAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_emisionAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarfecha_emisionAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarfecha_vencimientoAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_vencimientoAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarfecha_vencimientoAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarvalor_pagoAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_pagoAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarvalor_pagoAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarvalor_canceladoAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_canceladoAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarvalor_canceladoAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarnumero_facturaAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jTextFieldnumero_facturaAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarnumero_facturaAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltardetalle_facturaAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jTextAreadetalle_facturaAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltardetalle_facturaAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltarfecha_corteAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_corteAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltarfecha_corteAutoriPago);}
		if(this.autoripagoConstantesFunciones.resaltardescripcionAutoriPago!=null && this.jInternalFrameDetalleFormAutoriPago!=null) {this.jInternalFrameDetalleFormAutoriPago.jTextAreadescripcionAutoriPago.setBorder(this.autoripagoConstantesFunciones.resaltardescripcionAutoriPago);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioAutoriPago() throws Exception {		
		if(this.jInternalFrameDetalleFormAutoriPago==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) {
	
		//this.jInternalFrameDetalleFormAutoriPago.jLabelidAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostraridAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelidAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostraridAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_empresaAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelid_empresaAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_empresaAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_sucursalAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelid_sucursalAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_sucursalAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_ejercicioAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelid_ejercicioAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_ejercicioAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_clienteAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelid_clienteAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_clienteAutoriPago);
			this.jInternalFrameDetalleFormAutoriPago.jButtonid_clienteAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_clienteAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_facturaAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelid_facturaAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_facturaAutoriPago);
			this.jInternalFrameDetalleFormAutoriPago.jButtonid_facturaAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_facturaAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_asiento_contableAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelid_asiento_contableAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_asiento_contableAutoriPago);
			this.jInternalFrameDetalleFormAutoriPago.jButtonid_asiento_contableAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_asiento_contableAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_centro_costoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelid_centro_costoAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_centro_costoAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_centro_actividadAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelid_centro_actividadAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_centro_actividadAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_bancoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelid_bancoAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_bancoAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_cuenta_bancoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelid_cuenta_bancoAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_cuenta_bancoAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_detalle_proveAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelid_detalle_proveAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_detalle_proveAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_transaccionAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelid_transaccionAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarid_transaccionAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_emisionAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarfecha_emisionAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelfecha_emisionAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarfecha_emisionAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_vencimientoAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarfecha_vencimientoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelfecha_vencimientoAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarfecha_vencimientoAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_pagoAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarvalor_pagoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelvalor_pagoAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarvalor_pagoAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_canceladoAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarvalor_canceladoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelvalor_canceladoAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarvalor_canceladoAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jTextFieldnumero_facturaAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarnumero_facturaAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelnumero_facturaAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarnumero_facturaAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jTextAreadetalle_facturaAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrardetalle_facturaAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPaneldetalle_facturaAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrardetalle_facturaAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_corteAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarfecha_corteAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPanelfecha_corteAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrarfecha_corteAutoriPago);
		//this.jInternalFrameDetalleFormAutoriPago.jTextAreadescripcionAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrardescripcionAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jPaneldescripcionAutoriPago.setVisible(this.autoripagoConstantesFunciones.mostrardescripcionAutoriPago);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioAutoriPago() throws Exception {
		if(this.jInternalFrameDetalleFormAutoriPago==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormAutoriPago!=null) {
	
		this.jInternalFrameDetalleFormAutoriPago.jLabelidAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activaridAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_empresaAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_empresaAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_sucursalAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_sucursalAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_ejercicioAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_ejercicioAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_clienteAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_clienteAutoriPago);
			this.jInternalFrameDetalleFormAutoriPago.jButtonid_clienteAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_clienteAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_facturaAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_facturaAutoriPago);
			this.jInternalFrameDetalleFormAutoriPago.jButtonid_facturaAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_facturaAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_asiento_contableAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_asiento_contableAutoriPago);
			this.jInternalFrameDetalleFormAutoriPago.jButtonid_asiento_contableAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_asiento_contableAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_costoAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_centro_costoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_centro_actividadAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_centro_actividadAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_bancoAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_bancoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_cuenta_bancoAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_cuenta_bancoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_detalle_proveAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_detalle_proveAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jComboBoxid_transaccionAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarid_transaccionAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_emisionAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarfecha_emisionAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_vencimientoAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarfecha_vencimientoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_pagoAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarvalor_pagoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jTextFieldvalor_canceladoAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarvalor_canceladoAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jTextFieldnumero_facturaAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarnumero_facturaAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jTextAreadetalle_facturaAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activardetalle_facturaAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jDateChooserfecha_corteAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activarfecha_corteAutoriPago);
		this.jInternalFrameDetalleFormAutoriPago.jTextAreadescripcionAutoriPago.setEnabled(this.autoripagoConstantesFunciones.activardescripcionAutoriPago);
		}
	}
	
		
}