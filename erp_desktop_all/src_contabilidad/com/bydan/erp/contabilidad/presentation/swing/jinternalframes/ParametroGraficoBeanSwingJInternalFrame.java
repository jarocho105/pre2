/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.contabilidad.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.contabilidad.util.ParametroGraficoConstantesFunciones;
import com.bydan.erp.contabilidad.util.ParametroGraficoParameterReturnGeneral;
//import com.bydan.erp.contabilidad.util.ParametroGraficoParameterGeneral;
//import com.bydan.erp.contabilidad.presentation.report.source.ParametroGraficoBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.contabilidad.resources.reportes.AuxiliarReportes;


import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.contabilidad.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.contabilidad.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class ParametroGraficoBeanSwingJInternalFrame extends ParametroGraficoJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(ParametroGraficoBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<ParametroGrafico> parametrograficoValidator = new ClassValidator<ParametroGrafico>(ParametroGrafico.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public ParametroGrafico parametrografico;	
	public ParametroGrafico parametrograficoAux;
	public ParametroGrafico parametrograficoAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public ParametroGrafico parametrograficoTotales;
	public Long idParametroGraficoActual;
	public Long iIdNuevoParametroGrafico=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboCuentaContableActivo="";

	public List<CuentaContable> cuentacontableactivosForeignKey;

	public List<CuentaContable> getcuentacontableactivosForeignKey() {
		return cuentacontableactivosForeignKey;
	}

	public void setcuentacontableactivosForeignKey(List<CuentaContable> cuentacontableactivosForeignKey) {
		this.cuentacontableactivosForeignKey = cuentacontableactivosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableactivoForeignKey;

	public CuentaContable getcuentacontableactivoForeignKey() {
		return cuentacontableactivoForeignKey;
	}

	public void setcuentacontableactivoForeignKey(CuentaContable cuentacontableactivoForeignKey) {
		this.cuentacontableactivoForeignKey = cuentacontableactivoForeignKey;
	}

	public String sFinalQueryComboCuentaContablePasivo="";

	public List<CuentaContable> cuentacontablepasivosForeignKey;

	public List<CuentaContable> getcuentacontablepasivosForeignKey() {
		return cuentacontablepasivosForeignKey;
	}

	public void setcuentacontablepasivosForeignKey(List<CuentaContable> cuentacontablepasivosForeignKey) {
		this.cuentacontablepasivosForeignKey = cuentacontablepasivosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablepasivoForeignKey;

	public CuentaContable getcuentacontablepasivoForeignKey() {
		return cuentacontablepasivoForeignKey;
	}

	public void setcuentacontablepasivoForeignKey(CuentaContable cuentacontablepasivoForeignKey) {
		this.cuentacontablepasivoForeignKey = cuentacontablepasivoForeignKey;
	}

	public String sFinalQueryComboCuentaContableInventario="";

	public List<CuentaContable> cuentacontableinventariosForeignKey;

	public List<CuentaContable> getcuentacontableinventariosForeignKey() {
		return cuentacontableinventariosForeignKey;
	}

	public void setcuentacontableinventariosForeignKey(List<CuentaContable> cuentacontableinventariosForeignKey) {
		this.cuentacontableinventariosForeignKey = cuentacontableinventariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableinventarioForeignKey;

	public CuentaContable getcuentacontableinventarioForeignKey() {
		return cuentacontableinventarioForeignKey;
	}

	public void setcuentacontableinventarioForeignKey(CuentaContable cuentacontableinventarioForeignKey) {
		this.cuentacontableinventarioForeignKey = cuentacontableinventarioForeignKey;
	}

	public String sFinalQueryComboCuentaContableDisponibilidad="";

	public List<CuentaContable> cuentacontabledisponibilidadsForeignKey;

	public List<CuentaContable> getcuentacontabledisponibilidadsForeignKey() {
		return cuentacontabledisponibilidadsForeignKey;
	}

	public void setcuentacontabledisponibilidadsForeignKey(List<CuentaContable> cuentacontabledisponibilidadsForeignKey) {
		this.cuentacontabledisponibilidadsForeignKey = cuentacontabledisponibilidadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontabledisponibilidadForeignKey;

	public CuentaContable getcuentacontabledisponibilidadForeignKey() {
		return cuentacontabledisponibilidadForeignKey;
	}

	public void setcuentacontabledisponibilidadForeignKey(CuentaContable cuentacontabledisponibilidadForeignKey) {
		this.cuentacontabledisponibilidadForeignKey = cuentacontabledisponibilidadForeignKey;
	}

	public String sFinalQueryComboCuentaContableCostoVenta="";

	public List<CuentaContable> cuentacontablecostoventasForeignKey;

	public List<CuentaContable> getcuentacontablecostoventasForeignKey() {
		return cuentacontablecostoventasForeignKey;
	}

	public void setcuentacontablecostoventasForeignKey(List<CuentaContable> cuentacontablecostoventasForeignKey) {
		this.cuentacontablecostoventasForeignKey = cuentacontablecostoventasForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecostoventaForeignKey;

	public CuentaContable getcuentacontablecostoventaForeignKey() {
		return cuentacontablecostoventaForeignKey;
	}

	public void setcuentacontablecostoventaForeignKey(CuentaContable cuentacontablecostoventaForeignKey) {
		this.cuentacontablecostoventaForeignKey = cuentacontablecostoventaForeignKey;
	}

	public String sFinalQueryComboCuentaContableInventarioIni="";

	public List<CuentaContable> cuentacontableinventarioinisForeignKey;

	public List<CuentaContable> getcuentacontableinventarioinisForeignKey() {
		return cuentacontableinventarioinisForeignKey;
	}

	public void setcuentacontableinventarioinisForeignKey(List<CuentaContable> cuentacontableinventarioinisForeignKey) {
		this.cuentacontableinventarioinisForeignKey = cuentacontableinventarioinisForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableinventarioiniForeignKey;

	public CuentaContable getcuentacontableinventarioiniForeignKey() {
		return cuentacontableinventarioiniForeignKey;
	}

	public void setcuentacontableinventarioiniForeignKey(CuentaContable cuentacontableinventarioiniForeignKey) {
		this.cuentacontableinventarioiniForeignKey = cuentacontableinventarioiniForeignKey;
	}

	public String sFinalQueryComboCuentaContableInventarioFin="";

	public List<CuentaContable> cuentacontableinventariofinsForeignKey;

	public List<CuentaContable> getcuentacontableinventariofinsForeignKey() {
		return cuentacontableinventariofinsForeignKey;
	}

	public void setcuentacontableinventariofinsForeignKey(List<CuentaContable> cuentacontableinventariofinsForeignKey) {
		this.cuentacontableinventariofinsForeignKey = cuentacontableinventariofinsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableinventariofinForeignKey;

	public CuentaContable getcuentacontableinventariofinForeignKey() {
		return cuentacontableinventariofinForeignKey;
	}

	public void setcuentacontableinventariofinForeignKey(CuentaContable cuentacontableinventariofinForeignKey) {
		this.cuentacontableinventariofinForeignKey = cuentacontableinventariofinForeignKey;
	}

	public String sFinalQueryComboCuentaContableCuentasCobrar="";

	public List<CuentaContable> cuentacontablecuentascobrarsForeignKey;

	public List<CuentaContable> getcuentacontablecuentascobrarsForeignKey() {
		return cuentacontablecuentascobrarsForeignKey;
	}

	public void setcuentacontablecuentascobrarsForeignKey(List<CuentaContable> cuentacontablecuentascobrarsForeignKey) {
		this.cuentacontablecuentascobrarsForeignKey = cuentacontablecuentascobrarsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecuentascobrarForeignKey;

	public CuentaContable getcuentacontablecuentascobrarForeignKey() {
		return cuentacontablecuentascobrarForeignKey;
	}

	public void setcuentacontablecuentascobrarForeignKey(CuentaContable cuentacontablecuentascobrarForeignKey) {
		this.cuentacontablecuentascobrarForeignKey = cuentacontablecuentascobrarForeignKey;
	}

	public String sFinalQueryComboCuentaContableVentaCredito="";

	public List<CuentaContable> cuentacontableventacreditosForeignKey;

	public List<CuentaContable> getcuentacontableventacreditosForeignKey() {
		return cuentacontableventacreditosForeignKey;
	}

	public void setcuentacontableventacreditosForeignKey(List<CuentaContable> cuentacontableventacreditosForeignKey) {
		this.cuentacontableventacreditosForeignKey = cuentacontableventacreditosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableventacreditoForeignKey;

	public CuentaContable getcuentacontableventacreditoForeignKey() {
		return cuentacontableventacreditoForeignKey;
	}

	public void setcuentacontableventacreditoForeignKey(CuentaContable cuentacontableventacreditoForeignKey) {
		this.cuentacontableventacreditoForeignKey = cuentacontableventacreditoForeignKey;
	}

	public String sFinalQueryComboCuentaContableActivoTotal="";

	public List<CuentaContable> cuentacontableactivototalsForeignKey;

	public List<CuentaContable> getcuentacontableactivototalsForeignKey() {
		return cuentacontableactivototalsForeignKey;
	}

	public void setcuentacontableactivototalsForeignKey(List<CuentaContable> cuentacontableactivototalsForeignKey) {
		this.cuentacontableactivototalsForeignKey = cuentacontableactivototalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableactivototalForeignKey;

	public CuentaContable getcuentacontableactivototalForeignKey() {
		return cuentacontableactivototalForeignKey;
	}

	public void setcuentacontableactivototalForeignKey(CuentaContable cuentacontableactivototalForeignKey) {
		this.cuentacontableactivototalForeignKey = cuentacontableactivototalForeignKey;
	}

	public String sFinalQueryComboCuentaContablePasivoTotal="";

	public List<CuentaContable> cuentacontablepasivototalsForeignKey;

	public List<CuentaContable> getcuentacontablepasivototalsForeignKey() {
		return cuentacontablepasivototalsForeignKey;
	}

	public void setcuentacontablepasivototalsForeignKey(List<CuentaContable> cuentacontablepasivototalsForeignKey) {
		this.cuentacontablepasivototalsForeignKey = cuentacontablepasivototalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablepasivototalForeignKey;

	public CuentaContable getcuentacontablepasivototalForeignKey() {
		return cuentacontablepasivototalForeignKey;
	}

	public void setcuentacontablepasivototalForeignKey(CuentaContable cuentacontablepasivototalForeignKey) {
		this.cuentacontablepasivototalForeignKey = cuentacontablepasivototalForeignKey;
	}

	public String sFinalQueryComboCuentaContablePatrimonio="";

	public List<CuentaContable> cuentacontablepatrimoniosForeignKey;

	public List<CuentaContable> getcuentacontablepatrimoniosForeignKey() {
		return cuentacontablepatrimoniosForeignKey;
	}

	public void setcuentacontablepatrimoniosForeignKey(List<CuentaContable> cuentacontablepatrimoniosForeignKey) {
		this.cuentacontablepatrimoniosForeignKey = cuentacontablepatrimoniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablepatrimonioForeignKey;

	public CuentaContable getcuentacontablepatrimonioForeignKey() {
		return cuentacontablepatrimonioForeignKey;
	}

	public void setcuentacontablepatrimonioForeignKey(CuentaContable cuentacontablepatrimonioForeignKey) {
		this.cuentacontablepatrimonioForeignKey = cuentacontablepatrimonioForeignKey;
	}

	public String sFinalQueryComboCuentaContablePatrimonioTotal="";

	public List<CuentaContable> cuentacontablepatrimoniototalsForeignKey;

	public List<CuentaContable> getcuentacontablepatrimoniototalsForeignKey() {
		return cuentacontablepatrimoniototalsForeignKey;
	}

	public void setcuentacontablepatrimoniototalsForeignKey(List<CuentaContable> cuentacontablepatrimoniototalsForeignKey) {
		this.cuentacontablepatrimoniototalsForeignKey = cuentacontablepatrimoniototalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablepatrimoniototalForeignKey;

	public CuentaContable getcuentacontablepatrimoniototalForeignKey() {
		return cuentacontablepatrimoniototalForeignKey;
	}

	public void setcuentacontablepatrimoniototalForeignKey(CuentaContable cuentacontablepatrimoniototalForeignKey) {
		this.cuentacontablepatrimoniototalForeignKey = cuentacontablepatrimoniototalForeignKey;
	}

	public String sFinalQueryComboCuentaContableVenta="";

	public List<CuentaContable> cuentacontableventasForeignKey;

	public List<CuentaContable> getcuentacontableventasForeignKey() {
		return cuentacontableventasForeignKey;
	}

	public void setcuentacontableventasForeignKey(List<CuentaContable> cuentacontableventasForeignKey) {
		this.cuentacontableventasForeignKey = cuentacontableventasForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableventaForeignKey;

	public CuentaContable getcuentacontableventaForeignKey() {
		return cuentacontableventaForeignKey;
	}

	public void setcuentacontableventaForeignKey(CuentaContable cuentacontableventaForeignKey) {
		this.cuentacontableventaForeignKey = cuentacontableventaForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idCuentaContableActivoActual=0L;

	public Long getidCuentaContableActivoActual() {
		return idCuentaContableActivoActual;
	}

	public void setidCuentaContableActivoActual(Long idCuentaContableActivoActual) {
		this.idCuentaContableActivoActual= idCuentaContableActivoActual;
	}
	public Long idCuentaContablePasivoActual=0L;

	public Long getidCuentaContablePasivoActual() {
		return idCuentaContablePasivoActual;
	}

	public void setidCuentaContablePasivoActual(Long idCuentaContablePasivoActual) {
		this.idCuentaContablePasivoActual= idCuentaContablePasivoActual;
	}
	public Long idCuentaContableInventarioActual=0L;

	public Long getidCuentaContableInventarioActual() {
		return idCuentaContableInventarioActual;
	}

	public void setidCuentaContableInventarioActual(Long idCuentaContableInventarioActual) {
		this.idCuentaContableInventarioActual= idCuentaContableInventarioActual;
	}
	public Long idCuentaContableDisponibilidadActual=0L;

	public Long getidCuentaContableDisponibilidadActual() {
		return idCuentaContableDisponibilidadActual;
	}

	public void setidCuentaContableDisponibilidadActual(Long idCuentaContableDisponibilidadActual) {
		this.idCuentaContableDisponibilidadActual= idCuentaContableDisponibilidadActual;
	}
	public Long idCuentaContableCostoVentaActual=0L;

	public Long getidCuentaContableCostoVentaActual() {
		return idCuentaContableCostoVentaActual;
	}

	public void setidCuentaContableCostoVentaActual(Long idCuentaContableCostoVentaActual) {
		this.idCuentaContableCostoVentaActual= idCuentaContableCostoVentaActual;
	}
	public Long idCuentaContableInventarioIniActual=0L;

	public Long getidCuentaContableInventarioIniActual() {
		return idCuentaContableInventarioIniActual;
	}

	public void setidCuentaContableInventarioIniActual(Long idCuentaContableInventarioIniActual) {
		this.idCuentaContableInventarioIniActual= idCuentaContableInventarioIniActual;
	}
	public Long idCuentaContableInventarioFinActual=0L;

	public Long getidCuentaContableInventarioFinActual() {
		return idCuentaContableInventarioFinActual;
	}

	public void setidCuentaContableInventarioFinActual(Long idCuentaContableInventarioFinActual) {
		this.idCuentaContableInventarioFinActual= idCuentaContableInventarioFinActual;
	}
	public Long idCuentaContableCuentasCobrarActual=0L;

	public Long getidCuentaContableCuentasCobrarActual() {
		return idCuentaContableCuentasCobrarActual;
	}

	public void setidCuentaContableCuentasCobrarActual(Long idCuentaContableCuentasCobrarActual) {
		this.idCuentaContableCuentasCobrarActual= idCuentaContableCuentasCobrarActual;
	}
	public Long idCuentaContableVentaCreditoActual=0L;

	public Long getidCuentaContableVentaCreditoActual() {
		return idCuentaContableVentaCreditoActual;
	}

	public void setidCuentaContableVentaCreditoActual(Long idCuentaContableVentaCreditoActual) {
		this.idCuentaContableVentaCreditoActual= idCuentaContableVentaCreditoActual;
	}
	public Long idCuentaContableActivoTotalActual=0L;

	public Long getidCuentaContableActivoTotalActual() {
		return idCuentaContableActivoTotalActual;
	}

	public void setidCuentaContableActivoTotalActual(Long idCuentaContableActivoTotalActual) {
		this.idCuentaContableActivoTotalActual= idCuentaContableActivoTotalActual;
	}
	public Long idCuentaContablePasivoTotalActual=0L;

	public Long getidCuentaContablePasivoTotalActual() {
		return idCuentaContablePasivoTotalActual;
	}

	public void setidCuentaContablePasivoTotalActual(Long idCuentaContablePasivoTotalActual) {
		this.idCuentaContablePasivoTotalActual= idCuentaContablePasivoTotalActual;
	}
	public Long idCuentaContablePatrimonioActual=0L;

	public Long getidCuentaContablePatrimonioActual() {
		return idCuentaContablePatrimonioActual;
	}

	public void setidCuentaContablePatrimonioActual(Long idCuentaContablePatrimonioActual) {
		this.idCuentaContablePatrimonioActual= idCuentaContablePatrimonioActual;
	}
	public Long idCuentaContablePatrimonioTotalActual=0L;

	public Long getidCuentaContablePatrimonioTotalActual() {
		return idCuentaContablePatrimonioTotalActual;
	}

	public void setidCuentaContablePatrimonioTotalActual(Long idCuentaContablePatrimonioTotalActual) {
		this.idCuentaContablePatrimonioTotalActual= idCuentaContablePatrimonioTotalActual;
	}
	public Long idCuentaContableVentaActual=0L;

	public Long getidCuentaContableVentaActual() {
		return idCuentaContableVentaActual;
	}

	public void setidCuentaContableVentaActual(Long idCuentaContableVentaActual) {
		this.idCuentaContableVentaActual= idCuentaContableVentaActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoParametroGrafico;
	public Boolean isPermisoNuevoParametroGrafico;
	public Boolean isPermisoActualizarParametroGrafico;
	public Boolean isPermisoActualizarOriginalParametroGrafico;
	public Boolean isPermisoEliminarParametroGrafico;
	public Boolean isPermisoGuardarCambiosParametroGrafico;
	public Boolean isPermisoConsultaParametroGrafico;
	public Boolean isPermisoBusquedaParametroGrafico;
	public Boolean isPermisoReporteParametroGrafico;
	public Boolean isPermisoPaginacionMedioParametroGrafico;
	public Boolean isPermisoPaginacionAltoParametroGrafico;
	public Boolean isPermisoPaginacionTodoParametroGrafico;
	public Boolean isPermisoCopiarParametroGrafico;
	public Boolean isPermisoVerFormParametroGrafico;
	public Boolean isPermisoDuplicarParametroGrafico;
	public Boolean isPermisoOrdenParametroGrafico;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public ParametroGraficoParameterReturnGeneral parametrograficoReturnGeneral;
	public ParametroGraficoParameterReturnGeneral parametrograficoParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoParametroGrafico=false;
	public Boolean esParaAccionDesdeFormularioParametroGrafico=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected ParametroGraficoSessionBeanAdditional parametrograficoSessionBeanAdditional=null;
	
	public ParametroGraficoSessionBeanAdditional getParametroGraficoSessionBeanAdditional() {
		return this.parametrograficoSessionBeanAdditional;
	}
	
	public void setParametroGraficoSessionBeanAdditional(ParametroGraficoSessionBeanAdditional parametrograficoSessionBeanAdditional) {
		try {
			this.parametrograficoSessionBeanAdditional=parametrograficoSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected ParametroGraficoBeanSwingJInternalFrameAdditional parametrograficoBeanSwingJInternalFrameAdditional=null;
	//public class ParametroGraficoBeanSwingJInternalFrame
	
	public ParametroGraficoBeanSwingJInternalFrameAdditional getParametroGraficoBeanSwingJInternalFrameAdditional() {
		return this.parametrograficoBeanSwingJInternalFrameAdditional;
	}
	
	public void setParametroGraficoBeanSwingJInternalFrameAdditional(ParametroGraficoBeanSwingJInternalFrameAdditional parametrograficoBeanSwingJInternalFrameAdditional) {
		try {
			this.parametrograficoBeanSwingJInternalFrameAdditional=parametrograficoBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public ParametroGraficoLogic parametrograficoLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public ParametroGrafico parametrograficoBean;
	public ParametroGraficoConstantesFunciones parametrograficoConstantesFunciones;
	//public ParametroGraficoParameterReturnGeneral parametrograficoReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public CuentaContableLogic cuentacontableactivoLogic;
	public CuentaContableLogic cuentacontablepasivoLogic;
	public CuentaContableLogic cuentacontableinventarioLogic;
	public CuentaContableLogic cuentacontabledisponibilidadLogic;
	public CuentaContableLogic cuentacontablecostoventaLogic;
	public CuentaContableLogic cuentacontableinventarioiniLogic;
	public CuentaContableLogic cuentacontableinventariofinLogic;
	public CuentaContableLogic cuentacontablecuentascobrarLogic;
	public CuentaContableLogic cuentacontableventacreditoLogic;
	public CuentaContableLogic cuentacontableactivototalLogic;
	public CuentaContableLogic cuentacontablepasivototalLogic;
	public CuentaContableLogic cuentacontablepatrimonioLogic;
	public CuentaContableLogic cuentacontablepatrimoniototalLogic;
	public CuentaContableLogic cuentacontableventaLogic;
	
	//PARAMETROS
	
	
	//public List<ParametroGrafico> parametrograficos;	
	//public List<ParametroGrafico> parametrograficosEliminados;
	//public List<ParametroGrafico> parametrograficosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoParametroGrafico=false;
	public Boolean isVisibilidadCeldaDuplicarParametroGrafico=true;
	public Boolean isVisibilidadCeldaCopiarParametroGrafico=true;
	public Boolean isVisibilidadCeldaVerFormParametroGrafico=true;
	public Boolean isVisibilidadCeldaOrdenParametroGrafico=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesParametroGrafico=false;
	public Boolean isVisibilidadCeldaModificarParametroGrafico=false;
	public Boolean isVisibilidadCeldaActualizarParametroGrafico=false;
	public Boolean isVisibilidadCeldaEliminarParametroGrafico=false;
	public Boolean isVisibilidadCeldaCancelarParametroGrafico=false;
	public Boolean isVisibilidadCeldaGuardarParametroGrafico=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosParametroGrafico=false;	
	
	
	public Boolean isVisibilidadFK_IdCuentaContableActivo=false;
	public Boolean isVisibilidadFK_IdCuentaContableActivoTotal=false;
	public Boolean isVisibilidadFK_IdCuentaContableCostoVenta=false;
	public Boolean isVisibilidadFK_IdCuentaContableCuentasCobrar=false;
	public Boolean isVisibilidadFK_IdCuentaContableDisponibilad=false;
	public Boolean isVisibilidadFK_IdCuentaContableInventario=false;
	public Boolean isVisibilidadFK_IdCuentaContableInventarioFin=false;
	public Boolean isVisibilidadFK_IdCuentaContableInventarioIni=false;
	public Boolean isVisibilidadFK_IdCuentaContablePasivo=false;
	public Boolean isVisibilidadFK_IdCuentaContablePasivoTotal=false;
	public Boolean isVisibilidadFK_IdCuentaContablePatrimonio=false;
	public Boolean isVisibilidadFK_IdCuentaContablePatrimonioTotal=false;
	public Boolean isVisibilidadFK_IdCuentaContableVenta=false;
	public Boolean isVisibilidadFK_IdCuentaContableVentaCredito=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	
	public Long getiIdNuevoParametroGrafico() {
		return this.iIdNuevoParametroGrafico;
	}

	public void setiIdNuevoParametroGrafico(Long iIdNuevoParametroGrafico) {
		this.iIdNuevoParametroGrafico = iIdNuevoParametroGrafico;
	}
	
	public Long getidParametroGraficoActual() {
		return this.idParametroGraficoActual;
	}

	public void setidParametroGraficoActual(Long idParametroGraficoActual) {
		this.idParametroGraficoActual = idParametroGraficoActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public ParametroGrafico getparametrografico() {
		return this.parametrografico;
	}

	public void setparametrografico(ParametroGrafico parametrografico) {
		this.parametrografico = parametrografico;
	}
	
	public ParametroGrafico getparametrograficoAux() {
		return this.parametrograficoAux;
	}

	public void setparametrograficoAux(ParametroGrafico parametrograficoAux) {
		this.parametrograficoAux = parametrograficoAux;
	}				
	
	public ParametroGrafico getparametrograficoAnterior() {
		return this.parametrograficoAnterior;
	}

	public void setparametrograficoAnterior(ParametroGrafico parametrograficoAnterior) {
		this.parametrograficoAnterior = parametrograficoAnterior;
	}	
	
	public ParametroGrafico getparametrograficoTotales() {
		return this.parametrograficoTotales;
	}

	public void setparametrograficoTotales(ParametroGrafico parametrograficoTotales) {
		this.parametrograficoTotales = parametrograficoTotales;
	}	
	
	public ParametroGrafico getparametrograficoBean() {
		return this.parametrograficoBean;
	}

	public void setparametrograficoBean(ParametroGrafico parametrograficoBean) {
		this.parametrograficoBean = parametrograficoBean;
	}	
	
	public ParametroGraficoParameterReturnGeneral getparametrograficoReturnGeneral() {
		return this.parametrograficoReturnGeneral;
	}

	public void setparametrograficoReturnGeneral(ParametroGraficoParameterReturnGeneral parametrograficoReturnGeneral) {
		this.parametrograficoReturnGeneral = parametrograficoReturnGeneral;
	}	
	
	
	public Long id_cuenta_contable_activoFK_IdCuentaContableActivo=-1L;

	public Long getid_cuenta_contable_activoFK_IdCuentaContableActivo() {
		return this.id_cuenta_contable_activoFK_IdCuentaContableActivo;
	}

	public void setid_cuenta_contable_activoFK_IdCuentaContableActivo(Long id_cuenta_contable_activoFK_IdCuentaContableActivo) {
		this.id_cuenta_contable_activoFK_IdCuentaContableActivo = id_cuenta_contable_activoFK_IdCuentaContableActivo;
	}

	public Long id_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal=-1L;

	public Long getid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal() {
		return this.id_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal;
	}

	public void setid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal(Long id_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal) {
		this.id_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal = id_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal;
	}

	public Long id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta=-1L;

	public Long getid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta() {
		return this.id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta;
	}

	public void setid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta(Long id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta) {
		this.id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta = id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta;
	}

	public Long id_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar=-1L;

	public Long getid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar() {
		return this.id_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar;
	}

	public void setid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar(Long id_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar) {
		this.id_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar = id_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar;
	}

	public Long id_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad=-1L;

	public Long getid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad() {
		return this.id_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad;
	}

	public void setid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad(Long id_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad) {
		this.id_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad = id_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad;
	}

	public Long id_cuenta_contable_inventarioFK_IdCuentaContableInventario=-1L;

	public Long getid_cuenta_contable_inventarioFK_IdCuentaContableInventario() {
		return this.id_cuenta_contable_inventarioFK_IdCuentaContableInventario;
	}

	public void setid_cuenta_contable_inventarioFK_IdCuentaContableInventario(Long id_cuenta_contable_inventarioFK_IdCuentaContableInventario) {
		this.id_cuenta_contable_inventarioFK_IdCuentaContableInventario = id_cuenta_contable_inventarioFK_IdCuentaContableInventario;
	}

	public Long id_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin=-1L;

	public Long getid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin() {
		return this.id_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin;
	}

	public void setid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin(Long id_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin) {
		this.id_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin = id_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin;
	}

	public Long id_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni=-1L;

	public Long getid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni() {
		return this.id_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni;
	}

	public void setid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni(Long id_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni) {
		this.id_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni = id_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni;
	}

	public Long id_cuenta_contable_pasivoFK_IdCuentaContablePasivo=-1L;

	public Long getid_cuenta_contable_pasivoFK_IdCuentaContablePasivo() {
		return this.id_cuenta_contable_pasivoFK_IdCuentaContablePasivo;
	}

	public void setid_cuenta_contable_pasivoFK_IdCuentaContablePasivo(Long id_cuenta_contable_pasivoFK_IdCuentaContablePasivo) {
		this.id_cuenta_contable_pasivoFK_IdCuentaContablePasivo = id_cuenta_contable_pasivoFK_IdCuentaContablePasivo;
	}

	public Long id_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal=-1L;

	public Long getid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal() {
		return this.id_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal;
	}

	public void setid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal(Long id_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal) {
		this.id_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal = id_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal;
	}

	public Long id_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio=-1L;

	public Long getid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio() {
		return this.id_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio;
	}

	public void setid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio(Long id_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio) {
		this.id_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio = id_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio;
	}

	public Long id_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal=-1L;

	public Long getid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal() {
		return this.id_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal;
	}

	public void setid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal(Long id_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal) {
		this.id_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal = id_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal;
	}

	public Long id_cuenta_contable_ventaFK_IdCuentaContableVenta=-1L;

	public Long getid_cuenta_contable_ventaFK_IdCuentaContableVenta() {
		return this.id_cuenta_contable_ventaFK_IdCuentaContableVenta;
	}

	public void setid_cuenta_contable_ventaFK_IdCuentaContableVenta(Long id_cuenta_contable_ventaFK_IdCuentaContableVenta) {
		this.id_cuenta_contable_ventaFK_IdCuentaContableVenta = id_cuenta_contable_ventaFK_IdCuentaContableVenta;
	}

	public Long id_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito=-1L;

	public Long getid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito() {
		return this.id_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito;
	}

	public void setid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito(Long id_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito) {
		this.id_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito = id_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public ParametroGraficoLogic getParametroGraficoLogic()	{		
		return parametrograficoLogic;
	}

	public void setParametroGraficoLogic(ParametroGraficoLogic parametrograficoLogic) {
		this.parametrograficoLogic = parametrograficoLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoParametroGrafico() {
		return isEsNuevoParametroGrafico;
	}

	public void setIsEsNuevoParametroGrafico(Boolean isEsNuevoParametroGrafico) {
		this.isEsNuevoParametroGrafico = isEsNuevoParametroGrafico;
	}

	public Boolean getEsParaAccionDesdeFormularioParametroGrafico() {
		return esParaAccionDesdeFormularioParametroGrafico;
	}
	
	public void setEsParaAccionDesdeFormularioParametroGrafico(Boolean esParaAccionDesdeFormularioParametroGrafico) {
		this.esParaAccionDesdeFormularioParametroGrafico = esParaAccionDesdeFormularioParametroGrafico;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(parametrograficoSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableActivosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableactivosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableActivo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableactivoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableactivosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableActivo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContableActivoActual());
					this.cuentacontableactivosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContablePasivosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablepasivosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContablePasivo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablepasivoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablepasivosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContablePasivo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContablePasivoActual());
					this.cuentacontablepasivosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableInventariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableinventarioLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableinventariosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableInventario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContableInventarioActual());
					this.cuentacontableinventariosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableDisponibilidadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontabledisponibilidadsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDisponibilidad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontabledisponibilidadLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontabledisponibilidadsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableDisponibilidad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContableDisponibilidadActual());
					this.cuentacontabledisponibilidadsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCostoVentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecostoventasForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCostoVenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecostoventaLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecostoventasForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCostoVenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContableCostoVentaActual());
					this.cuentacontablecostoventasForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableInventarioInisForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableinventarioinisForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventarioIni()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableinventarioiniLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableinventarioinisForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableInventarioIni(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContableInventarioIniActual());
					this.cuentacontableinventarioinisForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableInventarioFinsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableinventariofinsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventarioFin()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableinventariofinLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableinventariofinsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableInventarioFin(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContableInventarioFinActual());
					this.cuentacontableinventariofinsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCuentasCobrarsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecuentascobrarsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCuentasCobrar()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecuentascobrarLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecuentascobrarsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCuentasCobrar(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContableCuentasCobrarActual());
					this.cuentacontablecuentascobrarsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableVentaCreditosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableventacreditosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVentaCredito()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableventacreditoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableventacreditosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableVentaCredito(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContableVentaCreditoActual());
					this.cuentacontableventacreditosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableActivoTotalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableactivototalsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableActivoTotal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableactivototalLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableactivototalsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableActivoTotal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContableActivoTotalActual());
					this.cuentacontableactivototalsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContablePasivoTotalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablepasivototalsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContablePasivoTotal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablepasivototalLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablepasivototalsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContablePasivoTotal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContablePasivoTotalActual());
					this.cuentacontablepasivototalsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContablePatrimoniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablepatrimoniosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContablePatrimonio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablepatrimonioLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablepatrimoniosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContablePatrimonio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContablePatrimonioActual());
					this.cuentacontablepatrimoniosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContablePatrimonioTotalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablepatrimoniototalsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContablePatrimonioTotal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablepatrimoniototalLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablepatrimoniototalsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContablePatrimonioTotal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContablePatrimonioTotalActual());
					this.cuentacontablepatrimoniototalsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableVentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableventaLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontableventasForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableVenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(parametrograficoSessionBean.getlidCuentaContableVentaActual());
					this.cuentacontableventasForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaParametroGrafico.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaParametroGraficoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaParametroGraficoGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaParametroGraficoGenerico!=null && jComboBoxid_empresaParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_empresaParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableActivoForeignKey(Long idCuentaContableActivoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableactivoTemp=null;

			for(CuentaContable cuentacontableactivoAux:cuentacontableactivosForeignKey) {
				if(cuentacontableactivoAux.getId()!=null && cuentacontableactivoAux.getId().equals(idCuentaContableActivoSeleccionado)) {
					cuentacontableactivoTemp=cuentacontableactivoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableactivoTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContableActivo(cuentacontableactivoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.setSelectedItem(cuentacontableactivoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_activoParametroGrafico.setSelectedItem(cuentacontableactivoTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableActivo") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableactivoTemp!=null && jComboBoxid_cuenta_contable_activoFK_IdCuentaContableActivoParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_activoFK_IdCuentaContableActivoParametroGrafico.setSelectedItem(cuentacontableactivoTemp);
					} else {
						if(jComboBoxid_cuenta_contable_activoFK_IdCuentaContableActivoParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_activoFK_IdCuentaContableActivoParametroGrafico.setSelectedItem(cuentacontableactivoTemp);
							if(jComboBoxid_cuenta_contable_activoFK_IdCuentaContableActivoParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_activoFK_IdCuentaContableActivoParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableActivoForeignKeyDescripcion(Long idCuentaContableActivoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableactivoTemp=null;

			for(CuentaContable cuentacontableactivoAux:cuentacontableactivosForeignKey) {
				if(cuentacontableactivoAux.getId()!=null && cuentacontableactivoAux.getId().equals(idCuentaContableActivoSeleccionado)) {
					cuentacontableactivoTemp=cuentacontableactivoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableactivoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableActivoForeignKeyGenerico(Long idCuentaContableActivoSeleccionado,JComboBox jComboBoxid_cuenta_contable_activoParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableactivoTemp=null;

			for(CuentaContable cuentacontableactivoAux:cuentacontableactivosForeignKey) {
				if(cuentacontableactivoAux.getId()!=null && cuentacontableactivoAux.getId().equals(idCuentaContableActivoSeleccionado)) {
					cuentacontableactivoTemp=cuentacontableactivoAux;
					break;
				}
			}

			if(cuentacontableactivoTemp!=null) {
				jComboBoxid_cuenta_contable_activoParametroGraficoGenerico.setSelectedItem(cuentacontableactivoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_activoParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_activoParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_activoParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContablePasivoForeignKey(Long idCuentaContablePasivoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablepasivoTemp=null;

			for(CuentaContable cuentacontablepasivoAux:cuentacontablepasivosForeignKey) {
				if(cuentacontablepasivoAux.getId()!=null && cuentacontablepasivoAux.getId().equals(idCuentaContablePasivoSeleccionado)) {
					cuentacontablepasivoTemp=cuentacontablepasivoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablepasivoTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContablePasivo(cuentacontablepasivoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.setSelectedItem(cuentacontablepasivoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_pasivoParametroGrafico.setSelectedItem(cuentacontablepasivoTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContablePasivo") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablepasivoTemp!=null && jComboBoxid_cuenta_contable_pasivoFK_IdCuentaContablePasivoParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_pasivoFK_IdCuentaContablePasivoParametroGrafico.setSelectedItem(cuentacontablepasivoTemp);
					} else {
						if(jComboBoxid_cuenta_contable_pasivoFK_IdCuentaContablePasivoParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_pasivoFK_IdCuentaContablePasivoParametroGrafico.setSelectedItem(cuentacontablepasivoTemp);
							if(jComboBoxid_cuenta_contable_pasivoFK_IdCuentaContablePasivoParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_pasivoFK_IdCuentaContablePasivoParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContablePasivoForeignKeyDescripcion(Long idCuentaContablePasivoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablepasivoTemp=null;

			for(CuentaContable cuentacontablepasivoAux:cuentacontablepasivosForeignKey) {
				if(cuentacontablepasivoAux.getId()!=null && cuentacontablepasivoAux.getId().equals(idCuentaContablePasivoSeleccionado)) {
					cuentacontablepasivoTemp=cuentacontablepasivoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablepasivoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContablePasivoForeignKeyGenerico(Long idCuentaContablePasivoSeleccionado,JComboBox jComboBoxid_cuenta_contable_pasivoParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablepasivoTemp=null;

			for(CuentaContable cuentacontablepasivoAux:cuentacontablepasivosForeignKey) {
				if(cuentacontablepasivoAux.getId()!=null && cuentacontablepasivoAux.getId().equals(idCuentaContablePasivoSeleccionado)) {
					cuentacontablepasivoTemp=cuentacontablepasivoAux;
					break;
				}
			}

			if(cuentacontablepasivoTemp!=null) {
				jComboBoxid_cuenta_contable_pasivoParametroGraficoGenerico.setSelectedItem(cuentacontablepasivoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_pasivoParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_pasivoParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_pasivoParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableInventarioForeignKey(Long idCuentaContableInventarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableinventarioTemp=null;

			for(CuentaContable cuentacontableinventarioAux:cuentacontableinventariosForeignKey) {
				if(cuentacontableinventarioAux.getId()!=null && cuentacontableinventarioAux.getId().equals(idCuentaContableInventarioSeleccionado)) {
					cuentacontableinventarioTemp=cuentacontableinventarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableinventarioTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContableInventario(cuentacontableinventarioTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.setSelectedItem(cuentacontableinventarioTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_inventarioParametroGrafico.setSelectedItem(cuentacontableinventarioTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableInventario") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableinventarioTemp!=null && jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioParametroGrafico.setSelectedItem(cuentacontableinventarioTemp);
					} else {
						if(jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioParametroGrafico.setSelectedItem(cuentacontableinventarioTemp);
							if(jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableInventarioForeignKeyDescripcion(Long idCuentaContableInventarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableinventarioTemp=null;

			for(CuentaContable cuentacontableinventarioAux:cuentacontableinventariosForeignKey) {
				if(cuentacontableinventarioAux.getId()!=null && cuentacontableinventarioAux.getId().equals(idCuentaContableInventarioSeleccionado)) {
					cuentacontableinventarioTemp=cuentacontableinventarioAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableinventarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableInventarioForeignKeyGenerico(Long idCuentaContableInventarioSeleccionado,JComboBox jComboBoxid_cuenta_contable_inventarioParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableinventarioTemp=null;

			for(CuentaContable cuentacontableinventarioAux:cuentacontableinventariosForeignKey) {
				if(cuentacontableinventarioAux.getId()!=null && cuentacontableinventarioAux.getId().equals(idCuentaContableInventarioSeleccionado)) {
					cuentacontableinventarioTemp=cuentacontableinventarioAux;
					break;
				}
			}

			if(cuentacontableinventarioTemp!=null) {
				jComboBoxid_cuenta_contable_inventarioParametroGraficoGenerico.setSelectedItem(cuentacontableinventarioTemp);
			} else {
				if(jComboBoxid_cuenta_contable_inventarioParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_inventarioParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_inventarioParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableDisponibilidadForeignKey(Long idCuentaContableDisponibilidadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledisponibilidadTemp=null;

			for(CuentaContable cuentacontabledisponibilidadAux:cuentacontabledisponibilidadsForeignKey) {
				if(cuentacontabledisponibilidadAux.getId()!=null && cuentacontabledisponibilidadAux.getId().equals(idCuentaContableDisponibilidadSeleccionado)) {
					cuentacontabledisponibilidadTemp=cuentacontabledisponibilidadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontabledisponibilidadTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContableDisponibilidad(cuentacontabledisponibilidadTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.setSelectedItem(cuentacontabledisponibilidadTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.setSelectedItem(cuentacontabledisponibilidadTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableDisponibilad") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontabledisponibilidadTemp!=null && jComboBoxid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibiladParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibiladParametroGrafico.setSelectedItem(cuentacontabledisponibilidadTemp);
					} else {
						if(jComboBoxid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibiladParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibiladParametroGrafico.setSelectedItem(cuentacontabledisponibilidadTemp);
							if(jComboBoxid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibiladParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibiladParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableDisponibilidadForeignKeyDescripcion(Long idCuentaContableDisponibilidadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontabledisponibilidadTemp=null;

			for(CuentaContable cuentacontabledisponibilidadAux:cuentacontabledisponibilidadsForeignKey) {
				if(cuentacontabledisponibilidadAux.getId()!=null && cuentacontabledisponibilidadAux.getId().equals(idCuentaContableDisponibilidadSeleccionado)) {
					cuentacontabledisponibilidadTemp=cuentacontabledisponibilidadAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontabledisponibilidadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableDisponibilidadForeignKeyGenerico(Long idCuentaContableDisponibilidadSeleccionado,JComboBox jComboBoxid_cuenta_contable_disponibilidadParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontabledisponibilidadTemp=null;

			for(CuentaContable cuentacontabledisponibilidadAux:cuentacontabledisponibilidadsForeignKey) {
				if(cuentacontabledisponibilidadAux.getId()!=null && cuentacontabledisponibilidadAux.getId().equals(idCuentaContableDisponibilidadSeleccionado)) {
					cuentacontabledisponibilidadTemp=cuentacontabledisponibilidadAux;
					break;
				}
			}

			if(cuentacontabledisponibilidadTemp!=null) {
				jComboBoxid_cuenta_contable_disponibilidadParametroGraficoGenerico.setSelectedItem(cuentacontabledisponibilidadTemp);
			} else {
				if(jComboBoxid_cuenta_contable_disponibilidadParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_disponibilidadParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_disponibilidadParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCostoVentaForeignKey(Long idCuentaContableCostoVentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoventaTemp=null;

			for(CuentaContable cuentacontablecostoventaAux:cuentacontablecostoventasForeignKey) {
				if(cuentacontablecostoventaAux.getId()!=null && cuentacontablecostoventaAux.getId().equals(idCuentaContableCostoVentaSeleccionado)) {
					cuentacontablecostoventaTemp=cuentacontablecostoventaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecostoventaTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContableCostoVenta(cuentacontablecostoventaTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.setSelectedItem(cuentacontablecostoventaTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.setSelectedItem(cuentacontablecostoventaTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCostoVenta") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablecostoventaTemp!=null && jComboBoxid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVentaParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVentaParametroGrafico.setSelectedItem(cuentacontablecostoventaTemp);
					} else {
						if(jComboBoxid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVentaParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVentaParametroGrafico.setSelectedItem(cuentacontablecostoventaTemp);
							if(jComboBoxid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVentaParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVentaParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCostoVentaForeignKeyDescripcion(Long idCuentaContableCostoVentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecostoventaTemp=null;

			for(CuentaContable cuentacontablecostoventaAux:cuentacontablecostoventasForeignKey) {
				if(cuentacontablecostoventaAux.getId()!=null && cuentacontablecostoventaAux.getId().equals(idCuentaContableCostoVentaSeleccionado)) {
					cuentacontablecostoventaTemp=cuentacontablecostoventaAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecostoventaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCostoVentaForeignKeyGenerico(Long idCuentaContableCostoVentaSeleccionado,JComboBox jComboBoxid_cuenta_contable_costo_ventaParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecostoventaTemp=null;

			for(CuentaContable cuentacontablecostoventaAux:cuentacontablecostoventasForeignKey) {
				if(cuentacontablecostoventaAux.getId()!=null && cuentacontablecostoventaAux.getId().equals(idCuentaContableCostoVentaSeleccionado)) {
					cuentacontablecostoventaTemp=cuentacontablecostoventaAux;
					break;
				}
			}

			if(cuentacontablecostoventaTemp!=null) {
				jComboBoxid_cuenta_contable_costo_ventaParametroGraficoGenerico.setSelectedItem(cuentacontablecostoventaTemp);
			} else {
				if(jComboBoxid_cuenta_contable_costo_ventaParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_costo_ventaParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_costo_ventaParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableInventarioIniForeignKey(Long idCuentaContableInventarioIniSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableinventarioiniTemp=null;

			for(CuentaContable cuentacontableinventarioiniAux:cuentacontableinventarioinisForeignKey) {
				if(cuentacontableinventarioiniAux.getId()!=null && cuentacontableinventarioiniAux.getId().equals(idCuentaContableInventarioIniSeleccionado)) {
					cuentacontableinventarioiniTemp=cuentacontableinventarioiniAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableinventarioiniTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContableInventarioIni(cuentacontableinventarioiniTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.setSelectedItem(cuentacontableinventarioiniTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.setSelectedItem(cuentacontableinventarioiniTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableInventarioIni") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableinventarioiniTemp!=null && jComboBoxid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIniParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIniParametroGrafico.setSelectedItem(cuentacontableinventarioiniTemp);
					} else {
						if(jComboBoxid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIniParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIniParametroGrafico.setSelectedItem(cuentacontableinventarioiniTemp);
							if(jComboBoxid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIniParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIniParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableInventarioIniForeignKeyDescripcion(Long idCuentaContableInventarioIniSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableinventarioiniTemp=null;

			for(CuentaContable cuentacontableinventarioiniAux:cuentacontableinventarioinisForeignKey) {
				if(cuentacontableinventarioiniAux.getId()!=null && cuentacontableinventarioiniAux.getId().equals(idCuentaContableInventarioIniSeleccionado)) {
					cuentacontableinventarioiniTemp=cuentacontableinventarioiniAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableinventarioiniTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableInventarioIniForeignKeyGenerico(Long idCuentaContableInventarioIniSeleccionado,JComboBox jComboBoxid_cuenta_contable_inventario_iniParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableinventarioiniTemp=null;

			for(CuentaContable cuentacontableinventarioiniAux:cuentacontableinventarioinisForeignKey) {
				if(cuentacontableinventarioiniAux.getId()!=null && cuentacontableinventarioiniAux.getId().equals(idCuentaContableInventarioIniSeleccionado)) {
					cuentacontableinventarioiniTemp=cuentacontableinventarioiniAux;
					break;
				}
			}

			if(cuentacontableinventarioiniTemp!=null) {
				jComboBoxid_cuenta_contable_inventario_iniParametroGraficoGenerico.setSelectedItem(cuentacontableinventarioiniTemp);
			} else {
				if(jComboBoxid_cuenta_contable_inventario_iniParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_inventario_iniParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_inventario_iniParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableInventarioFinForeignKey(Long idCuentaContableInventarioFinSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableinventariofinTemp=null;

			for(CuentaContable cuentacontableinventariofinAux:cuentacontableinventariofinsForeignKey) {
				if(cuentacontableinventariofinAux.getId()!=null && cuentacontableinventariofinAux.getId().equals(idCuentaContableInventarioFinSeleccionado)) {
					cuentacontableinventariofinTemp=cuentacontableinventariofinAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableinventariofinTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContableInventarioFin(cuentacontableinventariofinTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.setSelectedItem(cuentacontableinventariofinTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_inventario_finParametroGrafico.setSelectedItem(cuentacontableinventariofinTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableInventarioFin") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableinventariofinTemp!=null && jComboBoxid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFinParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFinParametroGrafico.setSelectedItem(cuentacontableinventariofinTemp);
					} else {
						if(jComboBoxid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFinParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFinParametroGrafico.setSelectedItem(cuentacontableinventariofinTemp);
							if(jComboBoxid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFinParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFinParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableInventarioFinForeignKeyDescripcion(Long idCuentaContableInventarioFinSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableinventariofinTemp=null;

			for(CuentaContable cuentacontableinventariofinAux:cuentacontableinventariofinsForeignKey) {
				if(cuentacontableinventariofinAux.getId()!=null && cuentacontableinventariofinAux.getId().equals(idCuentaContableInventarioFinSeleccionado)) {
					cuentacontableinventariofinTemp=cuentacontableinventariofinAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableinventariofinTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableInventarioFinForeignKeyGenerico(Long idCuentaContableInventarioFinSeleccionado,JComboBox jComboBoxid_cuenta_contable_inventario_finParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableinventariofinTemp=null;

			for(CuentaContable cuentacontableinventariofinAux:cuentacontableinventariofinsForeignKey) {
				if(cuentacontableinventariofinAux.getId()!=null && cuentacontableinventariofinAux.getId().equals(idCuentaContableInventarioFinSeleccionado)) {
					cuentacontableinventariofinTemp=cuentacontableinventariofinAux;
					break;
				}
			}

			if(cuentacontableinventariofinTemp!=null) {
				jComboBoxid_cuenta_contable_inventario_finParametroGraficoGenerico.setSelectedItem(cuentacontableinventariofinTemp);
			} else {
				if(jComboBoxid_cuenta_contable_inventario_finParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_inventario_finParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_inventario_finParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCuentasCobrarForeignKey(Long idCuentaContableCuentasCobrarSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecuentascobrarTemp=null;

			for(CuentaContable cuentacontablecuentascobrarAux:cuentacontablecuentascobrarsForeignKey) {
				if(cuentacontablecuentascobrarAux.getId()!=null && cuentacontablecuentascobrarAux.getId().equals(idCuentaContableCuentasCobrarSeleccionado)) {
					cuentacontablecuentascobrarTemp=cuentacontablecuentascobrarAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecuentascobrarTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContableCuentasCobrar(cuentacontablecuentascobrarTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.setSelectedItem(cuentacontablecuentascobrarTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.setSelectedItem(cuentacontablecuentascobrarTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCuentasCobrar") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablecuentascobrarTemp!=null && jComboBoxid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrarParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrarParametroGrafico.setSelectedItem(cuentacontablecuentascobrarTemp);
					} else {
						if(jComboBoxid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrarParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrarParametroGrafico.setSelectedItem(cuentacontablecuentascobrarTemp);
							if(jComboBoxid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrarParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrarParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCuentasCobrarForeignKeyDescripcion(Long idCuentaContableCuentasCobrarSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecuentascobrarTemp=null;

			for(CuentaContable cuentacontablecuentascobrarAux:cuentacontablecuentascobrarsForeignKey) {
				if(cuentacontablecuentascobrarAux.getId()!=null && cuentacontablecuentascobrarAux.getId().equals(idCuentaContableCuentasCobrarSeleccionado)) {
					cuentacontablecuentascobrarTemp=cuentacontablecuentascobrarAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecuentascobrarTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCuentasCobrarForeignKeyGenerico(Long idCuentaContableCuentasCobrarSeleccionado,JComboBox jComboBoxid_cuenta_contable_cuenta_cobrarParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecuentascobrarTemp=null;

			for(CuentaContable cuentacontablecuentascobrarAux:cuentacontablecuentascobrarsForeignKey) {
				if(cuentacontablecuentascobrarAux.getId()!=null && cuentacontablecuentascobrarAux.getId().equals(idCuentaContableCuentasCobrarSeleccionado)) {
					cuentacontablecuentascobrarTemp=cuentacontablecuentascobrarAux;
					break;
				}
			}

			if(cuentacontablecuentascobrarTemp!=null) {
				jComboBoxid_cuenta_contable_cuenta_cobrarParametroGraficoGenerico.setSelectedItem(cuentacontablecuentascobrarTemp);
			} else {
				if(jComboBoxid_cuenta_contable_cuenta_cobrarParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_cuenta_cobrarParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_cuenta_cobrarParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableVentaCreditoForeignKey(Long idCuentaContableVentaCreditoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableventacreditoTemp=null;

			for(CuentaContable cuentacontableventacreditoAux:cuentacontableventacreditosForeignKey) {
				if(cuentacontableventacreditoAux.getId()!=null && cuentacontableventacreditoAux.getId().equals(idCuentaContableVentaCreditoSeleccionado)) {
					cuentacontableventacreditoTemp=cuentacontableventacreditoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableventacreditoTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContableVentaCredito(cuentacontableventacreditoTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.setSelectedItem(cuentacontableventacreditoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.setSelectedItem(cuentacontableventacreditoTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableVentaCredito") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableventacreditoTemp!=null && jComboBoxid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCreditoParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCreditoParametroGrafico.setSelectedItem(cuentacontableventacreditoTemp);
					} else {
						if(jComboBoxid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCreditoParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCreditoParametroGrafico.setSelectedItem(cuentacontableventacreditoTemp);
							if(jComboBoxid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCreditoParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCreditoParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableVentaCreditoForeignKeyDescripcion(Long idCuentaContableVentaCreditoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableventacreditoTemp=null;

			for(CuentaContable cuentacontableventacreditoAux:cuentacontableventacreditosForeignKey) {
				if(cuentacontableventacreditoAux.getId()!=null && cuentacontableventacreditoAux.getId().equals(idCuentaContableVentaCreditoSeleccionado)) {
					cuentacontableventacreditoTemp=cuentacontableventacreditoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableventacreditoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableVentaCreditoForeignKeyGenerico(Long idCuentaContableVentaCreditoSeleccionado,JComboBox jComboBoxid_cuenta_contable_venta_creditoParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableventacreditoTemp=null;

			for(CuentaContable cuentacontableventacreditoAux:cuentacontableventacreditosForeignKey) {
				if(cuentacontableventacreditoAux.getId()!=null && cuentacontableventacreditoAux.getId().equals(idCuentaContableVentaCreditoSeleccionado)) {
					cuentacontableventacreditoTemp=cuentacontableventacreditoAux;
					break;
				}
			}

			if(cuentacontableventacreditoTemp!=null) {
				jComboBoxid_cuenta_contable_venta_creditoParametroGraficoGenerico.setSelectedItem(cuentacontableventacreditoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_venta_creditoParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_venta_creditoParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_venta_creditoParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableActivoTotalForeignKey(Long idCuentaContableActivoTotalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableactivototalTemp=null;

			for(CuentaContable cuentacontableactivototalAux:cuentacontableactivototalsForeignKey) {
				if(cuentacontableactivototalAux.getId()!=null && cuentacontableactivototalAux.getId().equals(idCuentaContableActivoTotalSeleccionado)) {
					cuentacontableactivototalTemp=cuentacontableactivototalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableactivototalTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContableActivoTotal(cuentacontableactivototalTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.setSelectedItem(cuentacontableactivototalTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_activo_totalParametroGrafico.setSelectedItem(cuentacontableactivototalTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableActivoTotal") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableactivototalTemp!=null && jComboBoxid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotalParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotalParametroGrafico.setSelectedItem(cuentacontableactivototalTemp);
					} else {
						if(jComboBoxid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotalParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotalParametroGrafico.setSelectedItem(cuentacontableactivototalTemp);
							if(jComboBoxid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotalParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotalParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableActivoTotalForeignKeyDescripcion(Long idCuentaContableActivoTotalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableactivototalTemp=null;

			for(CuentaContable cuentacontableactivototalAux:cuentacontableactivototalsForeignKey) {
				if(cuentacontableactivototalAux.getId()!=null && cuentacontableactivototalAux.getId().equals(idCuentaContableActivoTotalSeleccionado)) {
					cuentacontableactivototalTemp=cuentacontableactivototalAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableactivototalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableActivoTotalForeignKeyGenerico(Long idCuentaContableActivoTotalSeleccionado,JComboBox jComboBoxid_cuenta_contable_activo_totalParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableactivototalTemp=null;

			for(CuentaContable cuentacontableactivototalAux:cuentacontableactivototalsForeignKey) {
				if(cuentacontableactivototalAux.getId()!=null && cuentacontableactivototalAux.getId().equals(idCuentaContableActivoTotalSeleccionado)) {
					cuentacontableactivototalTemp=cuentacontableactivototalAux;
					break;
				}
			}

			if(cuentacontableactivototalTemp!=null) {
				jComboBoxid_cuenta_contable_activo_totalParametroGraficoGenerico.setSelectedItem(cuentacontableactivototalTemp);
			} else {
				if(jComboBoxid_cuenta_contable_activo_totalParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_activo_totalParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_activo_totalParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContablePasivoTotalForeignKey(Long idCuentaContablePasivoTotalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablepasivototalTemp=null;

			for(CuentaContable cuentacontablepasivototalAux:cuentacontablepasivototalsForeignKey) {
				if(cuentacontablepasivototalAux.getId()!=null && cuentacontablepasivototalAux.getId().equals(idCuentaContablePasivoTotalSeleccionado)) {
					cuentacontablepasivototalTemp=cuentacontablepasivototalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablepasivototalTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContablePasivoTotal(cuentacontablepasivototalTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.setSelectedItem(cuentacontablepasivototalTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.setSelectedItem(cuentacontablepasivototalTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContablePasivoTotal") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablepasivototalTemp!=null && jComboBoxid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotalParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotalParametroGrafico.setSelectedItem(cuentacontablepasivototalTemp);
					} else {
						if(jComboBoxid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotalParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotalParametroGrafico.setSelectedItem(cuentacontablepasivototalTemp);
							if(jComboBoxid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotalParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotalParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContablePasivoTotalForeignKeyDescripcion(Long idCuentaContablePasivoTotalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablepasivototalTemp=null;

			for(CuentaContable cuentacontablepasivototalAux:cuentacontablepasivototalsForeignKey) {
				if(cuentacontablepasivototalAux.getId()!=null && cuentacontablepasivototalAux.getId().equals(idCuentaContablePasivoTotalSeleccionado)) {
					cuentacontablepasivototalTemp=cuentacontablepasivototalAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablepasivototalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContablePasivoTotalForeignKeyGenerico(Long idCuentaContablePasivoTotalSeleccionado,JComboBox jComboBoxid_cuenta_contable_pasivo_totalParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablepasivototalTemp=null;

			for(CuentaContable cuentacontablepasivototalAux:cuentacontablepasivototalsForeignKey) {
				if(cuentacontablepasivototalAux.getId()!=null && cuentacontablepasivototalAux.getId().equals(idCuentaContablePasivoTotalSeleccionado)) {
					cuentacontablepasivototalTemp=cuentacontablepasivototalAux;
					break;
				}
			}

			if(cuentacontablepasivototalTemp!=null) {
				jComboBoxid_cuenta_contable_pasivo_totalParametroGraficoGenerico.setSelectedItem(cuentacontablepasivototalTemp);
			} else {
				if(jComboBoxid_cuenta_contable_pasivo_totalParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_pasivo_totalParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_pasivo_totalParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContablePatrimonioForeignKey(Long idCuentaContablePatrimonioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablepatrimonioTemp=null;

			for(CuentaContable cuentacontablepatrimonioAux:cuentacontablepatrimoniosForeignKey) {
				if(cuentacontablepatrimonioAux.getId()!=null && cuentacontablepatrimonioAux.getId().equals(idCuentaContablePatrimonioSeleccionado)) {
					cuentacontablepatrimonioTemp=cuentacontablepatrimonioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablepatrimonioTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContablePatrimonio(cuentacontablepatrimonioTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.setSelectedItem(cuentacontablepatrimonioTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_patrimonioParametroGrafico.setSelectedItem(cuentacontablepatrimonioTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContablePatrimonio") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablepatrimonioTemp!=null && jComboBoxid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonioParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonioParametroGrafico.setSelectedItem(cuentacontablepatrimonioTemp);
					} else {
						if(jComboBoxid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonioParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonioParametroGrafico.setSelectedItem(cuentacontablepatrimonioTemp);
							if(jComboBoxid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonioParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonioParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContablePatrimonioForeignKeyDescripcion(Long idCuentaContablePatrimonioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablepatrimonioTemp=null;

			for(CuentaContable cuentacontablepatrimonioAux:cuentacontablepatrimoniosForeignKey) {
				if(cuentacontablepatrimonioAux.getId()!=null && cuentacontablepatrimonioAux.getId().equals(idCuentaContablePatrimonioSeleccionado)) {
					cuentacontablepatrimonioTemp=cuentacontablepatrimonioAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablepatrimonioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContablePatrimonioForeignKeyGenerico(Long idCuentaContablePatrimonioSeleccionado,JComboBox jComboBoxid_cuenta_contable_patrimonioParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablepatrimonioTemp=null;

			for(CuentaContable cuentacontablepatrimonioAux:cuentacontablepatrimoniosForeignKey) {
				if(cuentacontablepatrimonioAux.getId()!=null && cuentacontablepatrimonioAux.getId().equals(idCuentaContablePatrimonioSeleccionado)) {
					cuentacontablepatrimonioTemp=cuentacontablepatrimonioAux;
					break;
				}
			}

			if(cuentacontablepatrimonioTemp!=null) {
				jComboBoxid_cuenta_contable_patrimonioParametroGraficoGenerico.setSelectedItem(cuentacontablepatrimonioTemp);
			} else {
				if(jComboBoxid_cuenta_contable_patrimonioParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_patrimonioParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_patrimonioParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContablePatrimonioTotalForeignKey(Long idCuentaContablePatrimonioTotalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablepatrimoniototalTemp=null;

			for(CuentaContable cuentacontablepatrimoniototalAux:cuentacontablepatrimoniototalsForeignKey) {
				if(cuentacontablepatrimoniototalAux.getId()!=null && cuentacontablepatrimoniototalAux.getId().equals(idCuentaContablePatrimonioTotalSeleccionado)) {
					cuentacontablepatrimoniototalTemp=cuentacontablepatrimoniototalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablepatrimoniototalTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContablePatrimonioTotal(cuentacontablepatrimoniototalTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.setSelectedItem(cuentacontablepatrimoniototalTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.setSelectedItem(cuentacontablepatrimoniototalTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContablePatrimonioTotal") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablepatrimoniototalTemp!=null && jComboBoxid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotalParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotalParametroGrafico.setSelectedItem(cuentacontablepatrimoniototalTemp);
					} else {
						if(jComboBoxid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotalParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotalParametroGrafico.setSelectedItem(cuentacontablepatrimoniototalTemp);
							if(jComboBoxid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotalParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotalParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContablePatrimonioTotalForeignKeyDescripcion(Long idCuentaContablePatrimonioTotalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablepatrimoniototalTemp=null;

			for(CuentaContable cuentacontablepatrimoniototalAux:cuentacontablepatrimoniototalsForeignKey) {
				if(cuentacontablepatrimoniototalAux.getId()!=null && cuentacontablepatrimoniototalAux.getId().equals(idCuentaContablePatrimonioTotalSeleccionado)) {
					cuentacontablepatrimoniototalTemp=cuentacontablepatrimoniototalAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablepatrimoniototalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContablePatrimonioTotalForeignKeyGenerico(Long idCuentaContablePatrimonioTotalSeleccionado,JComboBox jComboBoxid_cuenta_contable_patrimonio_totalParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablepatrimoniototalTemp=null;

			for(CuentaContable cuentacontablepatrimoniototalAux:cuentacontablepatrimoniototalsForeignKey) {
				if(cuentacontablepatrimoniototalAux.getId()!=null && cuentacontablepatrimoniototalAux.getId().equals(idCuentaContablePatrimonioTotalSeleccionado)) {
					cuentacontablepatrimoniototalTemp=cuentacontablepatrimoniototalAux;
					break;
				}
			}

			if(cuentacontablepatrimoniototalTemp!=null) {
				jComboBoxid_cuenta_contable_patrimonio_totalParametroGraficoGenerico.setSelectedItem(cuentacontablepatrimoniototalTemp);
			} else {
				if(jComboBoxid_cuenta_contable_patrimonio_totalParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_patrimonio_totalParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_patrimonio_totalParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableVentaForeignKey(Long idCuentaContableVentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableventaTemp=null;

			for(CuentaContable cuentacontableventaAux:cuentacontableventasForeignKey) {
				if(cuentacontableventaAux.getId()!=null && cuentacontableventaAux.getId().equals(idCuentaContableVentaSeleccionado)) {
					cuentacontableventaTemp=cuentacontableventaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableventaTemp!=null) {

					if(this.parametrografico!=null) {
						this.parametrografico.setCuentaContableVenta(cuentacontableventaTemp);
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.setSelectedItem(cuentacontableventaTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_ventaParametroGrafico.setSelectedItem(cuentacontableventaTemp);
					if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
						if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.getItemCount()>0) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableVenta") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableventaTemp!=null && jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaParametroGrafico!=null) {
						jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaParametroGrafico.setSelectedItem(cuentacontableventaTemp);
					} else {
						if(jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaParametroGrafico!=null) {
							//jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaParametroGrafico.setSelectedItem(cuentacontableventaTemp);
							if(jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaParametroGrafico.getItemCount()>0) {
								jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaParametroGrafico.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableVentaForeignKeyDescripcion(Long idCuentaContableVentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableventaTemp=null;

			for(CuentaContable cuentacontableventaAux:cuentacontableventasForeignKey) {
				if(cuentacontableventaAux.getId()!=null && cuentacontableventaAux.getId().equals(idCuentaContableVentaSeleccionado)) {
					cuentacontableventaTemp=cuentacontableventaAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableventaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableVentaForeignKeyGenerico(Long idCuentaContableVentaSeleccionado,JComboBox jComboBoxid_cuenta_contable_ventaParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableventaTemp=null;

			for(CuentaContable cuentacontableventaAux:cuentacontableventasForeignKey) {
				if(cuentacontableventaAux.getId()!=null && cuentacontableventaAux.getId().equals(idCuentaContableVentaSeleccionado)) {
					cuentacontableventaTemp=cuentacontableventaAux;
					break;
				}
			}

			if(cuentacontableventaTemp!=null) {
				jComboBoxid_cuenta_contable_ventaParametroGraficoGenerico.setSelectedItem(cuentacontableventaTemp);
			} else {
				if(jComboBoxid_cuenta_contable_ventaParametroGraficoGenerico!=null && jComboBoxid_cuenta_contable_ventaParametroGraficoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_ventaParametroGraficoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_empresaParametroGraficoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaParametroGraficoGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaParametroGraficoGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				parametrografico.setid_empresa(empresaAux.getId());
				parametrografico.setempresa_descripcion(ParametroGraficoConstantesFunciones.getEmpresaDescripcion(empresaAux));
				parametrografico.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableActivoForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_activoParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_activoParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_activoParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_activo(cuentacontableAux.getId());
				parametrografico.setcuentacontableactivo_descripcion(ParametroGraficoConstantesFunciones.getCuentaContableActivoDescripcion(cuentacontableAux));
				parametrografico.setCuentaContableActivo(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContablePasivoForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_pasivoParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_pasivoParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_pasivoParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_pasivo(cuentacontableAux.getId());
				parametrografico.setcuentacontablepasivo_descripcion(ParametroGraficoConstantesFunciones.getCuentaContablePasivoDescripcion(cuentacontableAux));
				parametrografico.setCuentaContablePasivo(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableInventarioForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_inventarioParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_inventarioParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_inventarioParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_inventario(cuentacontableAux.getId());
				parametrografico.setcuentacontableinventario_descripcion(ParametroGraficoConstantesFunciones.getCuentaContableInventarioDescripcion(cuentacontableAux));
				parametrografico.setCuentaContableInventario(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableDisponibilidadForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_disponibilidadParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_disponibilidadParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_disponibilidadParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_disponibilidad(cuentacontableAux.getId());
				parametrografico.setcuentacontabledisponibilidad_descripcion(ParametroGraficoConstantesFunciones.getCuentaContableDisponibilidadDescripcion(cuentacontableAux));
				parametrografico.setCuentaContableDisponibilidad(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCostoVentaForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_costo_ventaParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_costo_ventaParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_costo_ventaParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_costo_venta(cuentacontableAux.getId());
				parametrografico.setcuentacontablecostoventa_descripcion(ParametroGraficoConstantesFunciones.getCuentaContableCostoVentaDescripcion(cuentacontableAux));
				parametrografico.setCuentaContableCostoVenta(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableInventarioIniForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_inventario_iniParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_inventario_iniParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_inventario_iniParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_inventario_ini(cuentacontableAux.getId());
				parametrografico.setcuentacontableinventarioini_descripcion(ParametroGraficoConstantesFunciones.getCuentaContableInventarioIniDescripcion(cuentacontableAux));
				parametrografico.setCuentaContableInventarioIni(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableInventarioFinForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_inventario_finParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_inventario_finParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_inventario_finParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_inventario_fin(cuentacontableAux.getId());
				parametrografico.setcuentacontableinventariofin_descripcion(ParametroGraficoConstantesFunciones.getCuentaContableInventarioFinDescripcion(cuentacontableAux));
				parametrografico.setCuentaContableInventarioFin(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCuentasCobrarForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_cuenta_cobrarParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_cuenta_cobrarParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_cuenta_cobrarParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_cuenta_cobrar(cuentacontableAux.getId());
				parametrografico.setcuentacontablecuentascobrar_descripcion(ParametroGraficoConstantesFunciones.getCuentaContableCuentasCobrarDescripcion(cuentacontableAux));
				parametrografico.setCuentaContableCuentasCobrar(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableVentaCreditoForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_venta_creditoParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_venta_creditoParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_venta_creditoParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_venta_credito(cuentacontableAux.getId());
				parametrografico.setcuentacontableventacredito_descripcion(ParametroGraficoConstantesFunciones.getCuentaContableVentaCreditoDescripcion(cuentacontableAux));
				parametrografico.setCuentaContableVentaCredito(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableActivoTotalForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_activo_totalParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_activo_totalParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_activo_totalParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_activo_total(cuentacontableAux.getId());
				parametrografico.setcuentacontableactivototal_descripcion(ParametroGraficoConstantesFunciones.getCuentaContableActivoTotalDescripcion(cuentacontableAux));
				parametrografico.setCuentaContableActivoTotal(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContablePasivoTotalForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_pasivo_totalParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_pasivo_totalParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_pasivo_totalParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_pasivo_total(cuentacontableAux.getId());
				parametrografico.setcuentacontablepasivototal_descripcion(ParametroGraficoConstantesFunciones.getCuentaContablePasivoTotalDescripcion(cuentacontableAux));
				parametrografico.setCuentaContablePasivoTotal(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContablePatrimonioForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_patrimonioParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_patrimonioParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_patrimonioParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_patrimonio(cuentacontableAux.getId());
				parametrografico.setcuentacontablepatrimonio_descripcion(ParametroGraficoConstantesFunciones.getCuentaContablePatrimonioDescripcion(cuentacontableAux));
				parametrografico.setCuentaContablePatrimonio(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContablePatrimonioTotalForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_patrimonio_totalParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_patrimonio_totalParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_patrimonio_totalParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_patrimonio_total(cuentacontableAux.getId());
				parametrografico.setcuentacontablepatrimoniototal_descripcion(ParametroGraficoConstantesFunciones.getCuentaContablePatrimonioTotalDescripcion(cuentacontableAux));
				parametrografico.setCuentaContablePatrimonioTotal(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableVentaForeignKey(ParametroGrafico parametrografico,JComboBox jComboBoxid_cuenta_contable_ventaParametroGraficoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_ventaParametroGraficoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_ventaParametroGraficoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				parametrografico.setid_cuenta_contable_venta(cuentacontableAux.getId());
				parametrografico.setcuentacontableventa_descripcion(ParametroGraficoConstantesFunciones.getCuentaContableVentaDescripcion(cuentacontableAux));
				parametrografico.setCuentaContableVenta(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableActivosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableactivo:this.cuentacontableactivosForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.addItem(cuentacontableactivo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableActivo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_activoFK_IdCuentaContableActivoParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableactivo:this.cuentacontableactivosForeignKey) {
								this.jComboBoxid_cuenta_contable_activoFK_IdCuentaContableActivoParametroGrafico.addItem(cuentacontableactivo);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContablePasivosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontablepasivo:this.cuentacontablepasivosForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.addItem(cuentacontablepasivo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContablePasivo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_pasivoFK_IdCuentaContablePasivoParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontablepasivo:this.cuentacontablepasivosForeignKey) {
								this.jComboBoxid_cuenta_contable_pasivoFK_IdCuentaContablePasivoParametroGrafico.addItem(cuentacontablepasivo);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableInventariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableinventario:this.cuentacontableinventariosForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.addItem(cuentacontableinventario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableInventario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableinventario:this.cuentacontableinventariosForeignKey) {
								this.jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioParametroGrafico.addItem(cuentacontableinventario);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableDisponibilidadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontabledisponibilidad:this.cuentacontabledisponibilidadsForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.addItem(cuentacontabledisponibilidad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableDisponibilad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibiladParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontabledisponibilidad:this.cuentacontabledisponibilidadsForeignKey) {
								this.jComboBoxid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibiladParametroGrafico.addItem(cuentacontabledisponibilidad);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCostoVentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontablecostoventa:this.cuentacontablecostoventasForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.addItem(cuentacontablecostoventa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCostoVenta") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVentaParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontablecostoventa:this.cuentacontablecostoventasForeignKey) {
								this.jComboBoxid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVentaParametroGrafico.addItem(cuentacontablecostoventa);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableInventarioInisForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableinventarioini:this.cuentacontableinventarioinisForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.addItem(cuentacontableinventarioini);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableInventarioIni") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIniParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableinventarioini:this.cuentacontableinventarioinisForeignKey) {
								this.jComboBoxid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIniParametroGrafico.addItem(cuentacontableinventarioini);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableInventarioFinsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableinventariofin:this.cuentacontableinventariofinsForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.addItem(cuentacontableinventariofin);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableInventarioFin") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFinParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableinventariofin:this.cuentacontableinventariofinsForeignKey) {
								this.jComboBoxid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFinParametroGrafico.addItem(cuentacontableinventariofin);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCuentasCobrarsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontablecuentascobrar:this.cuentacontablecuentascobrarsForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.addItem(cuentacontablecuentascobrar);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCuentasCobrar") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrarParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontablecuentascobrar:this.cuentacontablecuentascobrarsForeignKey) {
								this.jComboBoxid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrarParametroGrafico.addItem(cuentacontablecuentascobrar);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableVentaCreditosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableventacredito:this.cuentacontableventacreditosForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.addItem(cuentacontableventacredito);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableVentaCredito") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCreditoParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableventacredito:this.cuentacontableventacreditosForeignKey) {
								this.jComboBoxid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCreditoParametroGrafico.addItem(cuentacontableventacredito);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableActivoTotalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableactivototal:this.cuentacontableactivototalsForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.addItem(cuentacontableactivototal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableActivoTotal") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotalParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableactivototal:this.cuentacontableactivototalsForeignKey) {
								this.jComboBoxid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotalParametroGrafico.addItem(cuentacontableactivototal);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContablePasivoTotalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontablepasivototal:this.cuentacontablepasivototalsForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.addItem(cuentacontablepasivototal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContablePasivoTotal") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotalParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontablepasivototal:this.cuentacontablepasivototalsForeignKey) {
								this.jComboBoxid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotalParametroGrafico.addItem(cuentacontablepasivototal);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContablePatrimoniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontablepatrimonio:this.cuentacontablepatrimoniosForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.addItem(cuentacontablepatrimonio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContablePatrimonio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonioParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontablepatrimonio:this.cuentacontablepatrimoniosForeignKey) {
								this.jComboBoxid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonioParametroGrafico.addItem(cuentacontablepatrimonio);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContablePatrimonioTotalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontablepatrimoniototal:this.cuentacontablepatrimoniototalsForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.addItem(cuentacontablepatrimoniototal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContablePatrimonioTotal") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotalParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontablepatrimoniototal:this.cuentacontablepatrimoniototalsForeignKey) {
								this.jComboBoxid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotalParametroGrafico.addItem(cuentacontablepatrimoniototal);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableVentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableventa:this.cuentacontableventasForeignKey) {
								this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.addItem(cuentacontableventa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormParametroGrafico!=null) { 
					}

					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableVenta") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaParametroGrafico.removeAllItems();

							for(CuentaContable cuentacontableventa:this.cuentacontableventasForeignKey) {
								this.jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaParametroGrafico.addItem(cuentacontableventa);
							}
						}

						if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableActivoForeignKey(CuentaContable cuentacontableactivo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.setSelectedItem(cuentacontableactivo);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_activoFK_IdCuentaContableActivoParametroGrafico.setSelectedItem(cuentacontableactivo);
						} else {
							this.jComboBoxid_cuenta_contable_activoFK_IdCuentaContableActivoParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContablePasivoForeignKey(CuentaContable cuentacontablepasivo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.setSelectedItem(cuentacontablepasivo);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_pasivoFK_IdCuentaContablePasivoParametroGrafico.setSelectedItem(cuentacontablepasivo);
						} else {
							this.jComboBoxid_cuenta_contable_pasivoFK_IdCuentaContablePasivoParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableInventarioForeignKey(CuentaContable cuentacontableinventario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.setSelectedItem(cuentacontableinventario);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioParametroGrafico.setSelectedItem(cuentacontableinventario);
						} else {
							this.jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableDisponibilidadForeignKey(CuentaContable cuentacontabledisponibilidad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.setSelectedItem(cuentacontabledisponibilidad);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibiladParametroGrafico.setSelectedItem(cuentacontabledisponibilidad);
						} else {
							this.jComboBoxid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibiladParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCostoVentaForeignKey(CuentaContable cuentacontablecostoventa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.setSelectedItem(cuentacontablecostoventa);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVentaParametroGrafico.setSelectedItem(cuentacontablecostoventa);
						} else {
							this.jComboBoxid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVentaParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableInventarioIniForeignKey(CuentaContable cuentacontableinventarioini,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.setSelectedItem(cuentacontableinventarioini);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIniParametroGrafico.setSelectedItem(cuentacontableinventarioini);
						} else {
							this.jComboBoxid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIniParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableInventarioFinForeignKey(CuentaContable cuentacontableinventariofin,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.setSelectedItem(cuentacontableinventariofin);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFinParametroGrafico.setSelectedItem(cuentacontableinventariofin);
						} else {
							this.jComboBoxid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFinParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCuentasCobrarForeignKey(CuentaContable cuentacontablecuentascobrar,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.setSelectedItem(cuentacontablecuentascobrar);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrarParametroGrafico.setSelectedItem(cuentacontablecuentascobrar);
						} else {
							this.jComboBoxid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrarParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableVentaCreditoForeignKey(CuentaContable cuentacontableventacredito,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.setSelectedItem(cuentacontableventacredito);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCreditoParametroGrafico.setSelectedItem(cuentacontableventacredito);
						} else {
							this.jComboBoxid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCreditoParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableActivoTotalForeignKey(CuentaContable cuentacontableactivototal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.setSelectedItem(cuentacontableactivototal);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotalParametroGrafico.setSelectedItem(cuentacontableactivototal);
						} else {
							this.jComboBoxid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotalParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContablePasivoTotalForeignKey(CuentaContable cuentacontablepasivototal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.setSelectedItem(cuentacontablepasivototal);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotalParametroGrafico.setSelectedItem(cuentacontablepasivototal);
						} else {
							this.jComboBoxid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotalParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContablePatrimonioForeignKey(CuentaContable cuentacontablepatrimonio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.setSelectedItem(cuentacontablepatrimonio);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonioParametroGrafico.setSelectedItem(cuentacontablepatrimonio);
						} else {
							this.jComboBoxid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonioParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContablePatrimonioTotalForeignKey(CuentaContable cuentacontablepatrimoniototal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.setSelectedItem(cuentacontablepatrimoniototal);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotalParametroGrafico.setSelectedItem(cuentacontablepatrimoniototal);
						} else {
							this.jComboBoxid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotalParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableVentaForeignKey(CuentaContable cuentacontableventa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.setSelectedItem(cuentacontableventa);
						}
					} else {
						if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaParametroGrafico.setSelectedItem(cuentacontableventa);
						} else {
							this.jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaParametroGrafico.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesParametroGrafico() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			ParametroGraficoConstantesFunciones.refrescarForeignKeysDescripcionesParametroGrafico(this.parametrograficoLogic.getParametroGraficos());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			ParametroGraficoConstantesFunciones.refrescarForeignKeysDescripcionesParametroGrafico(this.parametrograficos);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(CuentaContable.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//parametrograficoLogic.setParametroGraficos(this.parametrograficos);
			parametrograficoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public ParametroGraficoParameterReturnGeneral getParametroGraficoParameterGeneral() {
		return this.parametrograficoParameterGeneral;
	}
	
	public void setParametroGraficoParameterGeneral(ParametroGraficoParameterReturnGeneral parametrograficoParameterGeneral) {
		this.parametrograficoParameterGeneral = parametrograficoParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoParametroGrafico() {
		return isPermisoTodoParametroGrafico;
	}

	public void setIsPermisoTodoParametroGrafico(Boolean isPermisoTodoParametroGrafico) {
		this.isPermisoTodoParametroGrafico = isPermisoTodoParametroGrafico;
	}

	public Boolean getIsPermisoNuevoParametroGrafico() {
		return isPermisoNuevoParametroGrafico;
	}

	public void setIsPermisoNuevoParametroGrafico(Boolean isPermisoNuevoParametroGrafico) {
		this.isPermisoNuevoParametroGrafico = isPermisoNuevoParametroGrafico;
	}

	public Boolean getIsPermisoActualizarParametroGrafico() {
		return isPermisoActualizarParametroGrafico;
	}

	public void setIsPermisoActualizarParametroGrafico(Boolean isPermisoActualizarParametroGrafico) {
		this.isPermisoActualizarParametroGrafico = isPermisoActualizarParametroGrafico;
	}

	public Boolean getIsPermisoEliminarParametroGrafico() {
		return isPermisoEliminarParametroGrafico;
	}

	public void setIsPermisoEliminarParametroGrafico(Boolean isPermisoEliminarParametroGrafico) {
		this.isPermisoEliminarParametroGrafico = isPermisoEliminarParametroGrafico;
	}

	public Boolean getIsPermisoGuardarCambiosParametroGrafico() {
		return isPermisoGuardarCambiosParametroGrafico;
	}

	public void setIsPermisoGuardarCambiosParametroGrafico(Boolean isPermisoGuardarCambiosParametroGrafico) {
		this.isPermisoGuardarCambiosParametroGrafico = isPermisoGuardarCambiosParametroGrafico;
	}
	
	public Boolean getIsPermisoConsultaParametroGrafico() {
		return isPermisoConsultaParametroGrafico;
	}

	public void setIsPermisoConsultaParametroGrafico(Boolean isPermisoConsultaParametroGrafico) {
		this.isPermisoConsultaParametroGrafico = isPermisoConsultaParametroGrafico;
	}

	public Boolean getIsPermisoBusquedaParametroGrafico() {
		return isPermisoBusquedaParametroGrafico;
	}

	public void setIsPermisoBusquedaParametroGrafico(Boolean isPermisoBusquedaParametroGrafico) {
		this.isPermisoBusquedaParametroGrafico = isPermisoBusquedaParametroGrafico;
	}

	public Boolean getIsPermisoReporteParametroGrafico() {
		return isPermisoReporteParametroGrafico;
	}

	public void setIsPermisoReporteParametroGrafico(Boolean isPermisoReporteParametroGrafico) {
		this.isPermisoReporteParametroGrafico = isPermisoReporteParametroGrafico;
	}
	
	public Boolean getIsPermisoPaginacionMedioParametroGrafico() {
		return isPermisoPaginacionMedioParametroGrafico;
	}

	public void setIsPermisoPaginacionMedioParametroGrafico(Boolean isPermisoPaginacionMedioParametroGrafico) {
		this.isPermisoPaginacionMedioParametroGrafico = isPermisoPaginacionMedioParametroGrafico;
	}
	
	public Boolean getIsPermisoPaginacionTodoParametroGrafico() {
		return isPermisoPaginacionTodoParametroGrafico;
	}

	public void setIsPermisoPaginacionTodoParametroGrafico(Boolean isPermisoPaginacionTodoParametroGrafico) {
		this.isPermisoPaginacionTodoParametroGrafico = isPermisoPaginacionTodoParametroGrafico;
	}
	
	public Boolean getIsPermisoPaginacionAltoParametroGrafico() {
		return isPermisoPaginacionAltoParametroGrafico;
	}

	public void setIsPermisoPaginacionAltoParametroGrafico(Boolean isPermisoPaginacionAltoParametroGrafico) {
		this.isPermisoPaginacionAltoParametroGrafico = isPermisoPaginacionAltoParametroGrafico;
	}
	
	public Boolean getIsPermisoCopiarParametroGrafico() {
		return isPermisoCopiarParametroGrafico;
	}

	public void setIsPermisoCopiarParametroGrafico(Boolean isPermisoCopiarParametroGrafico) {
		this.isPermisoCopiarParametroGrafico = isPermisoCopiarParametroGrafico;
	}
	
	public Boolean getIsPermisoVerFormParametroGrafico() {
		return isPermisoVerFormParametroGrafico;
	}

	public void setIsPermisoVerFormParametroGrafico(Boolean isPermisoVerFormParametroGrafico) {
		this.isPermisoVerFormParametroGrafico = isPermisoVerFormParametroGrafico;
	}
	
	public Boolean getIsPermisoDuplicarParametroGrafico() {
		return isPermisoDuplicarParametroGrafico;
	}

	public void setIsPermisoDuplicarParametroGrafico(Boolean isPermisoDuplicarParametroGrafico) {
		this.isPermisoDuplicarParametroGrafico = isPermisoDuplicarParametroGrafico;
	}
	
	public Boolean getIsPermisoOrdenParametroGrafico() {
		return isPermisoOrdenParametroGrafico;
	}

	public void setIsPermisoOrdenParametroGrafico(Boolean isPermisoOrdenParametroGrafico) {
		this.isPermisoOrdenParametroGrafico = isPermisoOrdenParametroGrafico;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoParametroGrafico() {
		return isVisibilidadCeldaNuevoParametroGrafico;
	}

	public void setIsVisibilidadCeldaNuevoParametroGrafico(Boolean isVisibilidadCeldaNuevoParametroGrafico) {
		this.isVisibilidadCeldaNuevoParametroGrafico = isVisibilidadCeldaNuevoParametroGrafico;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarParametroGrafico() {
		return isVisibilidadCeldaDuplicarParametroGrafico;
	}

	public void setIsVisibilidadCeldaDuplicarParametroGrafico(Boolean isVisibilidadCeldaDuplicarParametroGrafico) {
		this.isVisibilidadCeldaDuplicarParametroGrafico = isVisibilidadCeldaDuplicarParametroGrafico;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarParametroGrafico() {
		return isVisibilidadCeldaCopiarParametroGrafico;
	}

	public void setIsVisibilidadCeldaCopiarParametroGrafico(Boolean isVisibilidadCeldaCopiarParametroGrafico) {
		this.isVisibilidadCeldaCopiarParametroGrafico = isVisibilidadCeldaCopiarParametroGrafico;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormParametroGrafico() {
		return isVisibilidadCeldaVerFormParametroGrafico;
	}

	public void setIsVisibilidadCeldaVerFormParametroGrafico(Boolean isVisibilidadCeldaVerFormParametroGrafico) {
		this.isVisibilidadCeldaVerFormParametroGrafico = isVisibilidadCeldaVerFormParametroGrafico;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenParametroGrafico() {
		return isVisibilidadCeldaOrdenParametroGrafico;
	}

	public void setIsVisibilidadCeldaOrdenParametroGrafico(Boolean isVisibilidadCeldaOrdenParametroGrafico) {
		this.isVisibilidadCeldaOrdenParametroGrafico = isVisibilidadCeldaOrdenParametroGrafico;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesParametroGrafico() {
		return isVisibilidadCeldaNuevoRelacionesParametroGrafico;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesParametroGrafico(Boolean isVisibilidadCeldaNuevoRelacionesParametroGrafico) {
		this.isVisibilidadCeldaNuevoRelacionesParametroGrafico = isVisibilidadCeldaNuevoRelacionesParametroGrafico;
	}
	
	public Boolean getIsVisibilidadCeldaModificarParametroGrafico() {
		return isVisibilidadCeldaModificarParametroGrafico;
	}

	public void setIsVisibilidadCeldaModificarParametroGrafico(Boolean isVisibilidadCeldaModificarParametroGrafico) {
		this.isVisibilidadCeldaModificarParametroGrafico = isVisibilidadCeldaModificarParametroGrafico;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarParametroGrafico() {
		return isVisibilidadCeldaActualizarParametroGrafico;
	}

	public void setIsVisibilidadCeldaActualizarParametroGrafico(Boolean isVisibilidadCeldaActualizarParametroGrafico) {
		this.isVisibilidadCeldaActualizarParametroGrafico = isVisibilidadCeldaActualizarParametroGrafico;
	}

	public Boolean getIsVisibilidadCeldaEliminarParametroGrafico() {
		return isVisibilidadCeldaEliminarParametroGrafico;
	}

	public void setIsVisibilidadCeldaEliminarParametroGrafico(Boolean isVisibilidadCeldaEliminarParametroGrafico) {
		this.isVisibilidadCeldaEliminarParametroGrafico = isVisibilidadCeldaEliminarParametroGrafico;
	}

	public Boolean getIsVisibilidadCeldaCancelarParametroGrafico() {
		return isVisibilidadCeldaCancelarParametroGrafico;
	}

	public void setIsVisibilidadCeldaCancelarParametroGrafico(Boolean isVisibilidadCeldaCancelarParametroGrafico) {
		this.isVisibilidadCeldaCancelarParametroGrafico = isVisibilidadCeldaCancelarParametroGrafico;
	}

	public Boolean getIsVisibilidadCeldaGuardarParametroGrafico() {
		return isVisibilidadCeldaGuardarParametroGrafico;
	}

	public void setIsVisibilidadCeldaGuardarParametroGrafico(Boolean isVisibilidadCeldaGuardarParametroGrafico) {
		this.isVisibilidadCeldaGuardarParametroGrafico = isVisibilidadCeldaGuardarParametroGrafico;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosParametroGrafico() {
		return isVisibilidadCeldaGuardarCambiosParametroGrafico;
	}

	public void setIsVisibilidadCeldaGuardarCambiosParametroGrafico(Boolean isVisibilidadCeldaGuardarCambiosParametroGrafico) {
		this.isVisibilidadCeldaGuardarCambiosParametroGrafico = isVisibilidadCeldaGuardarCambiosParametroGrafico;
	}
		
	public ParametroGraficoSessionBean getparametrograficoSessionBean() {
		return this.parametrograficoSessionBean;
	}
	
	public void setparametrograficoSessionBean(ParametroGraficoSessionBean parametrograficoSessionBean) {
		this.parametrograficoSessionBean=parametrograficoSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdCuentaContableActivo() {
		return this.isVisibilidadFK_IdCuentaContableActivo;
	}

	public void setisVisibilidadFK_IdCuentaContableActivo(Boolean isVisibilidadFK_IdCuentaContableActivo) {
		this.isVisibilidadFK_IdCuentaContableActivo=isVisibilidadFK_IdCuentaContableActivo;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableActivoTotal() {
		return this.isVisibilidadFK_IdCuentaContableActivoTotal;
	}

	public void setisVisibilidadFK_IdCuentaContableActivoTotal(Boolean isVisibilidadFK_IdCuentaContableActivoTotal) {
		this.isVisibilidadFK_IdCuentaContableActivoTotal=isVisibilidadFK_IdCuentaContableActivoTotal;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCostoVenta() {
		return this.isVisibilidadFK_IdCuentaContableCostoVenta;
	}

	public void setisVisibilidadFK_IdCuentaContableCostoVenta(Boolean isVisibilidadFK_IdCuentaContableCostoVenta) {
		this.isVisibilidadFK_IdCuentaContableCostoVenta=isVisibilidadFK_IdCuentaContableCostoVenta;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCuentasCobrar() {
		return this.isVisibilidadFK_IdCuentaContableCuentasCobrar;
	}

	public void setisVisibilidadFK_IdCuentaContableCuentasCobrar(Boolean isVisibilidadFK_IdCuentaContableCuentasCobrar) {
		this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isVisibilidadFK_IdCuentaContableCuentasCobrar;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableDisponibilad() {
		return this.isVisibilidadFK_IdCuentaContableDisponibilad;
	}

	public void setisVisibilidadFK_IdCuentaContableDisponibilad(Boolean isVisibilidadFK_IdCuentaContableDisponibilad) {
		this.isVisibilidadFK_IdCuentaContableDisponibilad=isVisibilidadFK_IdCuentaContableDisponibilad;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableInventario() {
		return this.isVisibilidadFK_IdCuentaContableInventario;
	}

	public void setisVisibilidadFK_IdCuentaContableInventario(Boolean isVisibilidadFK_IdCuentaContableInventario) {
		this.isVisibilidadFK_IdCuentaContableInventario=isVisibilidadFK_IdCuentaContableInventario;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableInventarioFin() {
		return this.isVisibilidadFK_IdCuentaContableInventarioFin;
	}

	public void setisVisibilidadFK_IdCuentaContableInventarioFin(Boolean isVisibilidadFK_IdCuentaContableInventarioFin) {
		this.isVisibilidadFK_IdCuentaContableInventarioFin=isVisibilidadFK_IdCuentaContableInventarioFin;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableInventarioIni() {
		return this.isVisibilidadFK_IdCuentaContableInventarioIni;
	}

	public void setisVisibilidadFK_IdCuentaContableInventarioIni(Boolean isVisibilidadFK_IdCuentaContableInventarioIni) {
		this.isVisibilidadFK_IdCuentaContableInventarioIni=isVisibilidadFK_IdCuentaContableInventarioIni;
	}

	public Boolean getisVisibilidadFK_IdCuentaContablePasivo() {
		return this.isVisibilidadFK_IdCuentaContablePasivo;
	}

	public void setisVisibilidadFK_IdCuentaContablePasivo(Boolean isVisibilidadFK_IdCuentaContablePasivo) {
		this.isVisibilidadFK_IdCuentaContablePasivo=isVisibilidadFK_IdCuentaContablePasivo;
	}

	public Boolean getisVisibilidadFK_IdCuentaContablePasivoTotal() {
		return this.isVisibilidadFK_IdCuentaContablePasivoTotal;
	}

	public void setisVisibilidadFK_IdCuentaContablePasivoTotal(Boolean isVisibilidadFK_IdCuentaContablePasivoTotal) {
		this.isVisibilidadFK_IdCuentaContablePasivoTotal=isVisibilidadFK_IdCuentaContablePasivoTotal;
	}

	public Boolean getisVisibilidadFK_IdCuentaContablePatrimonio() {
		return this.isVisibilidadFK_IdCuentaContablePatrimonio;
	}

	public void setisVisibilidadFK_IdCuentaContablePatrimonio(Boolean isVisibilidadFK_IdCuentaContablePatrimonio) {
		this.isVisibilidadFK_IdCuentaContablePatrimonio=isVisibilidadFK_IdCuentaContablePatrimonio;
	}

	public Boolean getisVisibilidadFK_IdCuentaContablePatrimonioTotal() {
		return this.isVisibilidadFK_IdCuentaContablePatrimonioTotal;
	}

	public void setisVisibilidadFK_IdCuentaContablePatrimonioTotal(Boolean isVisibilidadFK_IdCuentaContablePatrimonioTotal) {
		this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isVisibilidadFK_IdCuentaContablePatrimonioTotal;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableVenta() {
		return this.isVisibilidadFK_IdCuentaContableVenta;
	}

	public void setisVisibilidadFK_IdCuentaContableVenta(Boolean isVisibilidadFK_IdCuentaContableVenta) {
		this.isVisibilidadFK_IdCuentaContableVenta=isVisibilidadFK_IdCuentaContableVenta;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableVentaCredito() {
		return this.isVisibilidadFK_IdCuentaContableVentaCredito;
	}

	public void setisVisibilidadFK_IdCuentaContableVentaCredito(Boolean isVisibilidadFK_IdCuentaContableVentaCredito) {
		this.isVisibilidadFK_IdCuentaContableVentaCredito=isVisibilidadFK_IdCuentaContableVentaCredito;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(ParametroGrafico parametrografico)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContableActivoForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContablePasivoForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContableInventarioForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContableDisponibilidadForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContableCostoVentaForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContableInventarioIniForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContableInventarioFinForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContableCuentasCobrarForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContableVentaCreditoForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContableActivoTotalForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContablePasivoTotalForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContablePatrimonioForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContablePatrimonioTotalForeignKey(parametrografico,null);
				this.setActualParaGuardarCuentaContableVentaForeignKey(parametrografico,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(ParametroGrafico parametrografico,ParametroGrafico parametrograficoAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalParametroGrafico(parametrografico);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		parametrograficoAux.setId(parametrografico.getId());
		parametrograficoAux.setVersionRow(parametrografico.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessParametroGrafico();
		
			int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = parametrograficoValidator.getInvalidValues(this.parametrografico);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			parametrograficoLogic.setDatosCliente(datosCliente);
			parametrograficoLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				parametrograficoAux=new  ParametroGrafico();
				
				parametrograficoAux.setIsNew(true);
				parametrograficoAux.setIsChanged(true);
				
				parametrograficoAux.setParametroGraficoOriginal(this.parametrografico);
				
				parametrograficoAux.setId(this.parametrografico.getId());	
				parametrograficoAux.setVersionRow(this.parametrografico.getVersionRow());	
				parametrograficoAux.setid_empresa(this.parametrografico.getid_empresa());	
				parametrograficoAux.setid_cuenta_contable_activo(this.parametrografico.getid_cuenta_contable_activo());	
				parametrograficoAux.setid_cuenta_contable_pasivo(this.parametrografico.getid_cuenta_contable_pasivo());	
				parametrograficoAux.setid_cuenta_contable_inventario(this.parametrografico.getid_cuenta_contable_inventario());	
				parametrograficoAux.setid_cuenta_contable_disponibilidad(this.parametrografico.getid_cuenta_contable_disponibilidad());	
				parametrograficoAux.setid_cuenta_contable_costo_venta(this.parametrografico.getid_cuenta_contable_costo_venta());	
				parametrograficoAux.setid_cuenta_contable_inventario_ini(this.parametrografico.getid_cuenta_contable_inventario_ini());	
				parametrograficoAux.setid_cuenta_contable_inventario_fin(this.parametrografico.getid_cuenta_contable_inventario_fin());	
				parametrograficoAux.setid_cuenta_contable_cuenta_cobrar(this.parametrografico.getid_cuenta_contable_cuenta_cobrar());	
				parametrograficoAux.setid_cuenta_contable_venta_credito(this.parametrografico.getid_cuenta_contable_venta_credito());	
				parametrograficoAux.setid_cuenta_contable_activo_total(this.parametrografico.getid_cuenta_contable_activo_total());	
				parametrograficoAux.setid_cuenta_contable_pasivo_total(this.parametrografico.getid_cuenta_contable_pasivo_total());	
				parametrograficoAux.setid_cuenta_contable_patrimonio(this.parametrografico.getid_cuenta_contable_patrimonio());	
				parametrograficoAux.setid_cuenta_contable_patrimonio_total(this.parametrografico.getid_cuenta_contable_patrimonio_total());	
				parametrograficoAux.setid_cuenta_contable_venta(this.parametrografico.getid_cuenta_contable_venta());	
				parametrograficoAux.setinventario_inicial(this.parametrografico.getinventario_inicial());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.parametrograficoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.parametrograficoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(parametrograficoAux,parametrograficoLogic.getParametroGraficos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametrograficoAux,parametrograficos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.parametrograficoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.parametrograficoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.saveParametroGraficos();//WithConnection
						//parametrograficoLogic.getSetVersionRowParametroGraficos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.parametrografico,parametrograficoAux);
					
					this.refrescarForeignKeysDescripcionesParametroGrafico();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.parametrograficoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								parametrograficoLogic.saveParametroGraficoRelaciones(parametrograficoAux);//WithConnection
								//parametrograficoLogic.getSetVersionRowParametroGraficos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.parametrografico,parametrograficoAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.parametrograficoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.parametrograficoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(parametrograficoAux,parametrograficoLogic.getParametroGraficos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(parametrograficoAux,parametrograficos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.parametrografico,parametrograficoAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				parametrograficoAux=new  ParametroGrafico();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.parametrograficoSessionBean.getEsGuardarRelacionado() 
					|| (this.parametrograficoSessionBean.getEsGuardarRelacionado() && this.parametrografico.getId()>=0)) {
						
					parametrograficoAux.setIsNew(false);
				}
				
				parametrograficoAux.setIsDeleted(false);
			
				parametrograficoAux.setId(this.parametrografico.getId());	
				parametrograficoAux.setVersionRow(this.parametrografico.getVersionRow());	
				parametrograficoAux.setid_empresa(this.parametrografico.getid_empresa());	
				parametrograficoAux.setid_cuenta_contable_activo(this.parametrografico.getid_cuenta_contable_activo());	
				parametrograficoAux.setid_cuenta_contable_pasivo(this.parametrografico.getid_cuenta_contable_pasivo());	
				parametrograficoAux.setid_cuenta_contable_inventario(this.parametrografico.getid_cuenta_contable_inventario());	
				parametrograficoAux.setid_cuenta_contable_disponibilidad(this.parametrografico.getid_cuenta_contable_disponibilidad());	
				parametrograficoAux.setid_cuenta_contable_costo_venta(this.parametrografico.getid_cuenta_contable_costo_venta());	
				parametrograficoAux.setid_cuenta_contable_inventario_ini(this.parametrografico.getid_cuenta_contable_inventario_ini());	
				parametrograficoAux.setid_cuenta_contable_inventario_fin(this.parametrografico.getid_cuenta_contable_inventario_fin());	
				parametrograficoAux.setid_cuenta_contable_cuenta_cobrar(this.parametrografico.getid_cuenta_contable_cuenta_cobrar());	
				parametrograficoAux.setid_cuenta_contable_venta_credito(this.parametrografico.getid_cuenta_contable_venta_credito());	
				parametrograficoAux.setid_cuenta_contable_activo_total(this.parametrografico.getid_cuenta_contable_activo_total());	
				parametrograficoAux.setid_cuenta_contable_pasivo_total(this.parametrografico.getid_cuenta_contable_pasivo_total());	
				parametrograficoAux.setid_cuenta_contable_patrimonio(this.parametrografico.getid_cuenta_contable_patrimonio());	
				parametrograficoAux.setid_cuenta_contable_patrimonio_total(this.parametrografico.getid_cuenta_contable_patrimonio_total());	
				parametrograficoAux.setid_cuenta_contable_venta(this.parametrografico.getid_cuenta_contable_venta());	
				parametrograficoAux.setinventario_inicial(this.parametrografico.getinventario_inicial());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(parametrograficoAux,parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametrograficoAux,parametrograficos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.parametrograficoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.parametrograficoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.saveParametroGraficos();//WithConnection
						//parametrograficoLogic.getSetVersionRowParametroGraficos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.parametrografico,parametrograficoAux);
					
					this.refrescarForeignKeysDescripcionesParametroGrafico();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.parametrograficoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								parametrograficoLogic.saveParametroGraficoRelaciones(parametrograficoAux);//WithConnection
								//parametrograficoLogic.getSetVersionRowParametroGraficos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.parametrografico,parametrograficoAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.parametrograficoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.parametrograficoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(parametrograficoAux,parametrograficoLogic.getParametroGraficos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(parametrograficoAux,parametrograficos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.parametrografico,parametrograficoAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				parametrograficoAux=new  ParametroGrafico();
				
				parametrograficoAux.setIsNew(false);
				parametrograficoAux.setIsChanged(false);
				
				parametrograficoAux.setIsDeleted(true);
				
				parametrograficoAux.setId(this.parametrografico.getId());	
				parametrograficoAux.setVersionRow(this.parametrografico.getVersionRow());	
				parametrograficoAux.setid_empresa(this.parametrografico.getid_empresa());	
				parametrograficoAux.setid_cuenta_contable_activo(this.parametrografico.getid_cuenta_contable_activo());	
				parametrograficoAux.setid_cuenta_contable_pasivo(this.parametrografico.getid_cuenta_contable_pasivo());	
				parametrograficoAux.setid_cuenta_contable_inventario(this.parametrografico.getid_cuenta_contable_inventario());	
				parametrograficoAux.setid_cuenta_contable_disponibilidad(this.parametrografico.getid_cuenta_contable_disponibilidad());	
				parametrograficoAux.setid_cuenta_contable_costo_venta(this.parametrografico.getid_cuenta_contable_costo_venta());	
				parametrograficoAux.setid_cuenta_contable_inventario_ini(this.parametrografico.getid_cuenta_contable_inventario_ini());	
				parametrograficoAux.setid_cuenta_contable_inventario_fin(this.parametrografico.getid_cuenta_contable_inventario_fin());	
				parametrograficoAux.setid_cuenta_contable_cuenta_cobrar(this.parametrografico.getid_cuenta_contable_cuenta_cobrar());	
				parametrograficoAux.setid_cuenta_contable_venta_credito(this.parametrografico.getid_cuenta_contable_venta_credito());	
				parametrograficoAux.setid_cuenta_contable_activo_total(this.parametrografico.getid_cuenta_contable_activo_total());	
				parametrograficoAux.setid_cuenta_contable_pasivo_total(this.parametrografico.getid_cuenta_contable_pasivo_total());	
				parametrograficoAux.setid_cuenta_contable_patrimonio(this.parametrografico.getid_cuenta_contable_patrimonio());	
				parametrograficoAux.setid_cuenta_contable_patrimonio_total(this.parametrografico.getid_cuenta_contable_patrimonio_total());	
				parametrograficoAux.setid_cuenta_contable_venta(this.parametrografico.getid_cuenta_contable_venta());	
				parametrograficoAux.setinventario_inicial(this.parametrografico.getinventario_inicial());	
				
				if(this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.parametrograficoAux.getId()>=0) {	
						this.parametrograficosEliminados.add(parametrograficoAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(parametrograficoAux,parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametrograficoAux,parametrograficos);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.parametrograficoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.parametrograficoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.saveParametroGraficos();//WithConnection
						//parametrograficoLogic.getSetVersionRowParametroGraficos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.parametrograficoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								parametrograficoLogic.saveParametroGraficoRelaciones(parametrograficoAux);//WithConnection
								//parametrograficoLogic.getSetVersionRowParametroGraficos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.parametrograficoSessionBean.getEstaModoGuardarRelaciones() 
								|| this.parametrograficoSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(parametrograficoAux,parametrograficoLogic.getParametroGraficos());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(parametrograficoAux,parametrograficos);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getParametroGraficos().addAll(this.parametrograficosEliminados);
					
					parametrograficoLogic.saveParametroGraficos();//WithConnection
					//parametrograficoLogic.getSetVersionRowParametroGraficos();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesParametroGrafico();
				
				this.parametrograficosEliminados= new ArrayList<ParametroGrafico>();		
			}
			
			if(this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrograficoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Parametro Grafico GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Parametro Grafico",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.parametrografico=parametrograficoAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessParametroGrafico();
      	}
		
	}	
	
	public void actualizarRelaciones(ParametroGrafico parametrograficoLocal) throws Exception {
		
		if(this.parametrograficoSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(ParametroGrafico parametrograficoLocal) throws Exception {	
		if(this.parametrograficoSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				parametrograficoLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableactivoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableactivoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableactivoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableactivoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableactivoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableactivosForeignKey);

				cuentacontableactivoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableactivoBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContableActivo(cuentacontableactivoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableActivo();
				this.cargarCombosFrameCuentaContableActivosForeignKey("Formulario");
				this.setActualCuentaContableActivoForeignKey(cuentacontableactivoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablepasivoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablepasivoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablepasivoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablepasivoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablepasivoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablepasivosForeignKey);

				cuentacontablepasivoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablepasivoBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContablePasivo(cuentacontablepasivoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContablePasivo();
				this.cargarCombosFrameCuentaContablePasivosForeignKey("Formulario");
				this.setActualCuentaContablePasivoForeignKey(cuentacontablepasivoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableinventarioBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableinventarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableinventarioBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableinventarioBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableinventariosForeignKey);

				cuentacontableinventarioBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContableInventario(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableInventario();
				this.cargarCombosFrameCuentaContableInventariosForeignKey("Formulario");
				this.setActualCuentaContableInventarioForeignKey(cuentacontableinventarioBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontabledisponibilidadBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontabledisponibilidadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontabledisponibilidadBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontabledisponibilidadBeanSwingJInternalFrameLocal.actualizarLista(cuentacontabledisponibilidadBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontabledisponibilidadsForeignKey);

				cuentacontabledisponibilidadBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontabledisponibilidadBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContableDisponibilidad(cuentacontabledisponibilidadBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableDisponibilidad();
				this.cargarCombosFrameCuentaContableDisponibilidadsForeignKey("Formulario");
				this.setActualCuentaContableDisponibilidadForeignKey(cuentacontabledisponibilidadBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecostoventaBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecostoventaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecostoventaBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecostoventaBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecostoventaBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecostoventasForeignKey);

				cuentacontablecostoventaBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecostoventaBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContableCostoVenta(cuentacontablecostoventaBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCostoVenta();
				this.cargarCombosFrameCuentaContableCostoVentasForeignKey("Formulario");
				this.setActualCuentaContableCostoVentaForeignKey(cuentacontablecostoventaBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableinventarioiniBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableinventarioiniBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableinventarioiniBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableinventarioiniBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableinventarioiniBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableinventarioinisForeignKey);

				cuentacontableinventarioiniBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableinventarioiniBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContableInventarioIni(cuentacontableinventarioiniBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableInventarioIni();
				this.cargarCombosFrameCuentaContableInventarioInisForeignKey("Formulario");
				this.setActualCuentaContableInventarioIniForeignKey(cuentacontableinventarioiniBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableinventariofinBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableinventariofinBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableinventariofinBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableinventariofinBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableinventariofinBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableinventariofinsForeignKey);

				cuentacontableinventariofinBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableinventariofinBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContableInventarioFin(cuentacontableinventariofinBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableInventarioFin();
				this.cargarCombosFrameCuentaContableInventarioFinsForeignKey("Formulario");
				this.setActualCuentaContableInventarioFinForeignKey(cuentacontableinventariofinBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecuentascobrarBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecuentascobrarBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecuentascobrarBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecuentascobrarBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecuentascobrarBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecuentascobrarsForeignKey);

				cuentacontablecuentascobrarBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecuentascobrarBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContableCuentasCobrar(cuentacontablecuentascobrarBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCuentasCobrar();
				this.cargarCombosFrameCuentaContableCuentasCobrarsForeignKey("Formulario");
				this.setActualCuentaContableCuentasCobrarForeignKey(cuentacontablecuentascobrarBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableventacreditoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableventacreditoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableventacreditoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableventacreditoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableventacreditoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableventacreditosForeignKey);

				cuentacontableventacreditoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableventacreditoBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContableVentaCredito(cuentacontableventacreditoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableVentaCredito();
				this.cargarCombosFrameCuentaContableVentaCreditosForeignKey("Formulario");
				this.setActualCuentaContableVentaCreditoForeignKey(cuentacontableventacreditoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableactivototalBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableactivototalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableactivototalBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableactivototalBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableactivototalBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableactivototalsForeignKey);

				cuentacontableactivototalBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableactivototalBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContableActivoTotal(cuentacontableactivototalBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableActivoTotal();
				this.cargarCombosFrameCuentaContableActivoTotalsForeignKey("Formulario");
				this.setActualCuentaContableActivoTotalForeignKey(cuentacontableactivototalBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablepasivototalBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablepasivototalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablepasivototalBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablepasivototalBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablepasivototalBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablepasivototalsForeignKey);

				cuentacontablepasivototalBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablepasivototalBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContablePasivoTotal(cuentacontablepasivototalBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContablePasivoTotal();
				this.cargarCombosFrameCuentaContablePasivoTotalsForeignKey("Formulario");
				this.setActualCuentaContablePasivoTotalForeignKey(cuentacontablepasivototalBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablepatrimonioBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablepatrimonioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablepatrimonioBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablepatrimonioBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablepatrimonioBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablepatrimoniosForeignKey);

				cuentacontablepatrimonioBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablepatrimonioBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContablePatrimonio(cuentacontablepatrimonioBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContablePatrimonio();
				this.cargarCombosFrameCuentaContablePatrimoniosForeignKey("Formulario");
				this.setActualCuentaContablePatrimonioForeignKey(cuentacontablepatrimonioBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablepatrimoniototalBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablepatrimoniototalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablepatrimoniototalBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablepatrimoniototalBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablepatrimoniototalBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablepatrimoniototalsForeignKey);

				cuentacontablepatrimoniototalBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablepatrimoniototalBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContablePatrimonioTotal(cuentacontablepatrimoniototalBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContablePatrimonioTotal();
				this.cargarCombosFrameCuentaContablePatrimonioTotalsForeignKey("Formulario");
				this.setActualCuentaContablePatrimonioTotalForeignKey(cuentacontablepatrimoniototalBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableventaBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableventaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableventaBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableventaBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontableventasForeignKey);

				cuentacontableventaBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable);

				parametrograficoLocal.setCuentaContableVenta(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableVenta();
				this.cargarCombosFrameCuentaContableVentasForeignKey("Formulario");
				this.setActualCuentaContableVentaForeignKey(cuentacontableventaBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarParametroGraficoActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = parametrograficoValidator.getInvalidValues(this.parametrografico);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(ParametroGrafico parametrografico,List<ParametroGrafico> parametrograficos) throws Exception {
		try	{		
			ParametroGraficoConstantesFunciones.actualizarLista(parametrografico,parametrograficos,this.parametrograficoSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(ParametroGrafico parametrografico,List<ParametroGrafico> parametrograficos) throws Exception {
		try	{			
			ParametroGraficoConstantesFunciones.actualizarSelectedLista(parametrografico,parametrograficos);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<ParametroGrafico> parametrograficosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				parametrograficosLocal=this.parametrograficoLogic.getParametroGraficos();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				parametrograficosLocal=this.parametrograficos;
			}
			//ARCHITECTURE
		
			for(ParametroGrafico parametrograficoLocal:parametrograficosLocal) {
				if(this.permiteMantenimiento(parametrograficoLocal) && parametrograficoLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+ParametroGraficoConstantesFunciones.getParametroGraficoLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_empresaParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEACTIVO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_activoParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEPASIVO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_pasivoParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEINVENTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_inventarioParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEDISPONIBILIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_disponibilidadParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLECOSTOVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_costo_ventaParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEINVENTARIOINI)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_inventario_iniParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEINVENTARIOFIN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_inventario_finParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLECUENTASCOBRAR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_cuenta_cobrarParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEVENTACREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_venta_creditoParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEACTIVOTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_activo_totalParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEPASIVOTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_pasivo_totalParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEPATRIMONIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_patrimonioParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEPATRIMONIOTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_patrimonio_totalParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_ventaParametroGrafico,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(ParametroGraficoConstantesFunciones.INVENTARIOINICIAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelinventario_inicialParametroGrafico,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_empresaParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_activoParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_pasivoParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_inventarioParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_disponibilidadParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_costo_ventaParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_inventario_iniParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_inventario_finParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_cuenta_cobrarParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_venta_creditoParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_activo_totalParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_pasivo_totalParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_patrimonioParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_patrimonio_totalParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelid_cuenta_contable_ventaParametroGrafico,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormParametroGrafico.jLabelinventario_inicialParametroGrafico,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoParametroGrafico--;	
		
		
		this.parametrograficoAux=new ParametroGrafico();
		
		this.parametrograficoAux.setId(this.iIdNuevoParametroGrafico);
		this.parametrograficoAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.parametrograficoLogic.getParametroGraficos().add(this.parametrograficoAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.parametrograficos.add(this.parametrograficoAux);
		}
		//ARCHITECTURE
		
		this.parametrografico=this.parametrograficoAux;
		
		if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioParametroGrafico(this.parametrografico);
			this.setVariablesObjetoActualToFormularioForeignKeyParametroGrafico(this.parametrografico);
		}
				
		//this.setDefaultControlesParametroGrafico();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyParametroGrafico();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyParametroGrafico();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyParametroGrafico();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualParametroGrafico(this.parametrograficoBean,this.parametrografico,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(ParametroGraficoConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.parametrograficoSessionBean.getConGuardarRelaciones()) {
			classes=ParametroGraficoConstantesFunciones.getClassesRelationshipsOfParametroGrafico(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.parametrograficoReturnGeneral=parametrograficoLogic.procesarEventosParametroGraficosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.parametrograficoLogic.getParametroGraficos(),this.parametrografico,this.parametrograficoParameterGeneral,this.isEsNuevoParametroGrafico,classes);//this.parametrograficoLogic.getParametroGrafico()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanParametroGrafico(this.parametrograficoReturnGeneral,this.parametrograficoBean,false);
		
		if(this.parametrograficoReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyParametroGrafico(this.parametrograficoReturnGeneral.getParametroGrafico());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioParametroGrafico(this.parametrograficoReturnGeneral.getParametroGrafico());
		}
		
		if(this.parametrograficoReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioParametroGrafico(this.parametrograficoReturnGeneral.getParametroGrafico(),classes);//this.parametrograficoBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyParametroGrafico();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyParametroGrafico();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ParametroGraficoBeanSwingJInternalFrameAdditional.RecargarFormParametroGrafico(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingParametroGrafico(false);
						
			if(parametrograficoSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualParametroGrafico();
			}
			
			this.actualizarVisualTableDatosParametroGrafico();
			
			this.jTableDatosParametroGrafico.setRowSelectionInterval(this.getIndiceNuevoParametroGrafico(), this.getIndiceNuevoParametroGrafico());
			
			this.seleccionarFilaTablaParametroGraficoActual();
						
			this.actualizarEstadoCeldasBotonesParametroGrafico("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesParametroGrafico(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormParametroGrafico.jTextFieldinventario_inicialParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarinventario_inicialParametroGrafico);	
		//
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_empresaParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_activoParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_pasivoParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventarioParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_disponibilidadParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_costo_ventaParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventario_iniParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventario_finParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_cuenta_cobrarParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_venta_creditoParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_activo_totalParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_pasivo_totalParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_patrimonioParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_patrimonio_totalParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.setEnabled(isHabilitar && this.parametrograficoConstantesFunciones.activarid_cuenta_contable_ventaParametroGrafico);
	};
	
	public void setDefaultControlesParametroGrafico() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoParametroGrafico(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.parametrograficoSessionBean.setConGuardarRelaciones(true);			
			this.parametrograficoSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormParametroGrafico.jTabbedPaneRelacionesParametroGrafico.setVisible(true);
			
					
		} else {
			//this.parametrograficoSessionBean.setConGuardarRelaciones(false);			
			this.parametrograficoSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormParametroGrafico.jTabbedPaneRelacionesParametroGrafico.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoParametroGrafico() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroGrafico parametrograficoAux:this.parametrograficoLogic.getParametroGraficos()) {
				if(parametrograficoAux.getId().equals(this.iIdNuevoParametroGrafico)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroGrafico parametrograficoAux:this.parametrograficos) {
				if(parametrograficoAux.getId().equals(this.iIdNuevoParametroGrafico)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualParametroGrafico(ParametroGrafico parametrografico,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroGrafico parametrograficoAux:this.parametrograficoLogic.getParametroGraficos()) {
				if(parametrograficoAux.getId().equals(parametrografico.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroGrafico parametrograficoAux:this.parametrograficos) {
				if(parametrograficoAux.getId().equals(parametrografico.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalParametroGrafico(ParametroGrafico parametrograficoOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroGrafico parametrograficoAux:this.parametrograficoLogic.getParametroGraficos()) {
				if(parametrograficoAux.getParametroGraficoOriginal().getId().equals(parametrograficoOriginal.getId())) {
					existe=true;
					parametrograficoOriginal.setId(parametrograficoAux.getId());
					parametrograficoOriginal.setVersionRow(parametrograficoAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroGrafico parametrograficoAux:this.parametrograficos) {
				if(parametrograficoAux.getParametroGraficoOriginal().getId().equals(parametrograficoOriginal.getId())) {
					existe=true;
					parametrograficoOriginal.setId(parametrograficoAux.getId());
					parametrograficoOriginal.setVersionRow(parametrograficoAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosParametroGrafico(Boolean esParaCancelar) throws Exception {
		parametrograficosAux=new ArrayList<ParametroGrafico>();
		parametrograficoAux=new ParametroGrafico();
		
		if(!this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ParametroGrafico parametrograficoAux:this.parametrograficoLogic.getParametroGraficos()) {
					if(parametrograficoAux.getId()<0) {
						parametrograficosAux.add(parametrograficoAux);
					}		
				}
				this.iIdNuevoParametroGrafico=0L;
				this.parametrograficoLogic.getParametroGraficos().removeAll(parametrograficosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroGrafico parametrograficoAux:this.parametrograficos) {
					if(parametrograficoAux.getId()<0) {
						parametrograficosAux.add(parametrograficoAux);
					}		
				}
				this.iIdNuevoParametroGrafico=0L;
				this.parametrograficos.removeAll(parametrograficosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoParametroGrafico 
					&& this.parametrograficoLogic.getParametroGraficos().size()>0
					) {
					parametrograficoAux=this.parametrograficoLogic.getParametroGraficos().get(this.parametrograficoLogic.getParametroGraficos().size() - 1);
				
					if(parametrograficoAux.getId()<0) {
						this.parametrograficoLogic.getParametroGraficos().remove(parametrograficoAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoParametroGrafico && this.parametrograficos.size()>0) {
					parametrograficoAux=this.parametrograficos.get(this.parametrograficos.size() - 1);
				
					if(parametrograficoAux.getId()<0) {
						this.parametrograficos.remove(parametrograficoAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoParametroGrafico(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(parametrografico.getId()<0) {
				this.parametrograficoLogic.getParametroGraficos().remove(this.parametrografico);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(parametrografico.getId()<0) {
				this.parametrograficos.remove(this.parametrografico);
			}
		}			
	}
	
	public void setEstadosInicialesParametroGrafico(List<ParametroGrafico> parametrograficosAux) throws Exception {
		ParametroGraficoConstantesFunciones.setEstadosInicialesParametroGrafico(parametrograficosAux);
	}
	
	public void setEstadosInicialesParametroGrafico(ParametroGrafico parametrograficoAux) throws Exception {
		ParametroGraficoConstantesFunciones.setEstadosInicialesParametroGrafico(parametrograficoAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarParametroGraficoActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesParametroGrafico("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarParametroGraficoActual()) {
				if(!this.isEsNuevoParametroGrafico) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesParametroGrafico("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoParametroGrafico=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarParametroGraficoActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Parametro Grafico ?", "MANTENIMIENTO DE Parametro Grafico", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesParametroGrafico("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(ParametroGrafico parametrografico) throws Exception {
		ParametroGraficoConstantesFunciones.seleccionarAsignar(this.parametrografico,parametrografico);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarParametroGrafico=this.isPermisoActualizarOriginalParametroGrafico;
			
			
			this.seleccionarAsignar(parametrografico);
			
			

			idCuentaContableActivoActual=parametrografico.getid_cuenta_contable_activo();
			this.seleccionarCuentaContableActivoActual();

			idCuentaContablePasivoActual=parametrografico.getid_cuenta_contable_pasivo();
			this.seleccionarCuentaContablePasivoActual();

			idCuentaContableInventarioActual=parametrografico.getid_cuenta_contable_inventario();
			this.seleccionarCuentaContableInventarioActual();

			idCuentaContableDisponibilidadActual=parametrografico.getid_cuenta_contable_disponibilidad();
			this.seleccionarCuentaContableDisponibilidadActual();

			idCuentaContableCostoVentaActual=parametrografico.getid_cuenta_contable_costo_venta();
			this.seleccionarCuentaContableCostoVentaActual();

			idCuentaContableInventarioIniActual=parametrografico.getid_cuenta_contable_inventario_ini();
			this.seleccionarCuentaContableInventarioIniActual();

			idCuentaContableInventarioFinActual=parametrografico.getid_cuenta_contable_inventario_fin();
			this.seleccionarCuentaContableInventarioFinActual();

			idCuentaContableCuentasCobrarActual=parametrografico.getid_cuenta_contable_cuenta_cobrar();
			this.seleccionarCuentaContableCuentasCobrarActual();

			idCuentaContableVentaCreditoActual=parametrografico.getid_cuenta_contable_venta_credito();
			this.seleccionarCuentaContableVentaCreditoActual();

			idCuentaContableActivoTotalActual=parametrografico.getid_cuenta_contable_activo_total();
			this.seleccionarCuentaContableActivoTotalActual();

			idCuentaContablePasivoTotalActual=parametrografico.getid_cuenta_contable_pasivo_total();
			this.seleccionarCuentaContablePasivoTotalActual();

			idCuentaContablePatrimonioActual=parametrografico.getid_cuenta_contable_patrimonio();
			this.seleccionarCuentaContablePatrimonioActual();

			idCuentaContablePatrimonioTotalActual=parametrografico.getid_cuenta_contable_patrimonio_total();
			this.seleccionarCuentaContablePatrimonioTotalActual();

			idCuentaContableVentaActual=parametrografico.getid_cuenta_contable_venta();
			this.seleccionarCuentaContableVentaActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			ParametroGraficoConstantesFunciones.quitarEspaciosParametroGrafico(this.parametrografico,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesParametroGrafico("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.parametrograficoSessionBean.setsFuncionBusquedaRapida(this.parametrograficoSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarCuentaContableActivoActual() throws Exception {
		try	{
			CuentaContable cuentacontableactivoAux=new CuentaContable();

			if(this.idCuentaContableActivoActual != null && this.idCuentaContableActivoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableactivoLogic.getEntityWithConnection(this.idCuentaContableActivoActual);
					cuentacontableactivoAux= cuentacontableactivoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableactivosForeignKey=new ArrayList<CuentaContable>();
				cuentacontableactivosForeignKey.add(cuentacontableactivoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContablePasivoActual() throws Exception {
		try	{
			CuentaContable cuentacontablepasivoAux=new CuentaContable();

			if(this.idCuentaContablePasivoActual != null && this.idCuentaContablePasivoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablepasivoLogic.getEntityWithConnection(this.idCuentaContablePasivoActual);
					cuentacontablepasivoAux= cuentacontablepasivoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablepasivosForeignKey=new ArrayList<CuentaContable>();
				cuentacontablepasivosForeignKey.add(cuentacontablepasivoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableInventarioActual() throws Exception {
		try	{
			CuentaContable cuentacontableinventarioAux=new CuentaContable();

			if(this.idCuentaContableInventarioActual != null && this.idCuentaContableInventarioActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableinventarioLogic.getEntityWithConnection(this.idCuentaContableInventarioActual);
					cuentacontableinventarioAux= cuentacontableinventarioLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();
				cuentacontableinventariosForeignKey.add(cuentacontableinventarioAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableDisponibilidadActual() throws Exception {
		try	{
			CuentaContable cuentacontabledisponibilidadAux=new CuentaContable();

			if(this.idCuentaContableDisponibilidadActual != null && this.idCuentaContableDisponibilidadActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontabledisponibilidadLogic.getEntityWithConnection(this.idCuentaContableDisponibilidadActual);
					cuentacontabledisponibilidadAux= cuentacontabledisponibilidadLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontabledisponibilidadsForeignKey=new ArrayList<CuentaContable>();
				cuentacontabledisponibilidadsForeignKey.add(cuentacontabledisponibilidadAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCostoVentaActual() throws Exception {
		try	{
			CuentaContable cuentacontablecostoventaAux=new CuentaContable();

			if(this.idCuentaContableCostoVentaActual != null && this.idCuentaContableCostoVentaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecostoventaLogic.getEntityWithConnection(this.idCuentaContableCostoVentaActual);
					cuentacontablecostoventaAux= cuentacontablecostoventaLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecostoventasForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecostoventasForeignKey.add(cuentacontablecostoventaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableInventarioIniActual() throws Exception {
		try	{
			CuentaContable cuentacontableinventarioiniAux=new CuentaContable();

			if(this.idCuentaContableInventarioIniActual != null && this.idCuentaContableInventarioIniActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableinventarioiniLogic.getEntityWithConnection(this.idCuentaContableInventarioIniActual);
					cuentacontableinventarioiniAux= cuentacontableinventarioiniLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableinventarioinisForeignKey=new ArrayList<CuentaContable>();
				cuentacontableinventarioinisForeignKey.add(cuentacontableinventarioiniAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableInventarioFinActual() throws Exception {
		try	{
			CuentaContable cuentacontableinventariofinAux=new CuentaContable();

			if(this.idCuentaContableInventarioFinActual != null && this.idCuentaContableInventarioFinActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableinventariofinLogic.getEntityWithConnection(this.idCuentaContableInventarioFinActual);
					cuentacontableinventariofinAux= cuentacontableinventariofinLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableinventariofinsForeignKey=new ArrayList<CuentaContable>();
				cuentacontableinventariofinsForeignKey.add(cuentacontableinventariofinAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCuentasCobrarActual() throws Exception {
		try	{
			CuentaContable cuentacontablecuentascobrarAux=new CuentaContable();

			if(this.idCuentaContableCuentasCobrarActual != null && this.idCuentaContableCuentasCobrarActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecuentascobrarLogic.getEntityWithConnection(this.idCuentaContableCuentasCobrarActual);
					cuentacontablecuentascobrarAux= cuentacontablecuentascobrarLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecuentascobrarsForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecuentascobrarsForeignKey.add(cuentacontablecuentascobrarAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableVentaCreditoActual() throws Exception {
		try	{
			CuentaContable cuentacontableventacreditoAux=new CuentaContable();

			if(this.idCuentaContableVentaCreditoActual != null && this.idCuentaContableVentaCreditoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableventacreditoLogic.getEntityWithConnection(this.idCuentaContableVentaCreditoActual);
					cuentacontableventacreditoAux= cuentacontableventacreditoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableventacreditosForeignKey=new ArrayList<CuentaContable>();
				cuentacontableventacreditosForeignKey.add(cuentacontableventacreditoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableActivoTotalActual() throws Exception {
		try	{
			CuentaContable cuentacontableactivototalAux=new CuentaContable();

			if(this.idCuentaContableActivoTotalActual != null && this.idCuentaContableActivoTotalActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableactivototalLogic.getEntityWithConnection(this.idCuentaContableActivoTotalActual);
					cuentacontableactivototalAux= cuentacontableactivototalLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableactivototalsForeignKey=new ArrayList<CuentaContable>();
				cuentacontableactivototalsForeignKey.add(cuentacontableactivototalAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContablePasivoTotalActual() throws Exception {
		try	{
			CuentaContable cuentacontablepasivototalAux=new CuentaContable();

			if(this.idCuentaContablePasivoTotalActual != null && this.idCuentaContablePasivoTotalActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablepasivototalLogic.getEntityWithConnection(this.idCuentaContablePasivoTotalActual);
					cuentacontablepasivototalAux= cuentacontablepasivototalLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablepasivototalsForeignKey=new ArrayList<CuentaContable>();
				cuentacontablepasivototalsForeignKey.add(cuentacontablepasivototalAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContablePatrimonioActual() throws Exception {
		try	{
			CuentaContable cuentacontablepatrimonioAux=new CuentaContable();

			if(this.idCuentaContablePatrimonioActual != null && this.idCuentaContablePatrimonioActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablepatrimonioLogic.getEntityWithConnection(this.idCuentaContablePatrimonioActual);
					cuentacontablepatrimonioAux= cuentacontablepatrimonioLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablepatrimoniosForeignKey=new ArrayList<CuentaContable>();
				cuentacontablepatrimoniosForeignKey.add(cuentacontablepatrimonioAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContablePatrimonioTotalActual() throws Exception {
		try	{
			CuentaContable cuentacontablepatrimoniototalAux=new CuentaContable();

			if(this.idCuentaContablePatrimonioTotalActual != null && this.idCuentaContablePatrimonioTotalActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablepatrimoniototalLogic.getEntityWithConnection(this.idCuentaContablePatrimonioTotalActual);
					cuentacontablepatrimoniototalAux= cuentacontablepatrimoniototalLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablepatrimoniototalsForeignKey=new ArrayList<CuentaContable>();
				cuentacontablepatrimoniototalsForeignKey.add(cuentacontablepatrimoniototalAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableVentaActual() throws Exception {
		try	{
			CuentaContable cuentacontableventaAux=new CuentaContable();

			if(this.idCuentaContableVentaActual != null && this.idCuentaContableVentaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableventaLogic.getEntityWithConnection(this.idCuentaContableVentaActual);
					cuentacontableventaAux= cuentacontableventaLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontableventasForeignKey=new ArrayList<CuentaContable>();
				cuentacontableventasForeignKey.add(cuentacontableventaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoParametroGrafico) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosParametroGrafico(esParaCancelar);				
				this.cancelarNuevoParametroGrafico(esParaCancelar);								
			}
			
			this.parametrografico=new ParametroGrafico();
			
			this.inicializarParametroGrafico();
			
			this.actualizarEstadoCeldasBotonesParametroGrafico("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarParametroGrafico() throws Exception {
		try {
			ParametroGraficoConstantesFunciones.inicializarParametroGrafico(this.parametrografico);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.parametrograficoLogic.getParametroGraficos().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteParametroGraficos(String sAccionBusqueda,List<ParametroGrafico> parametrograficosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="ParametroGrafico"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="ParametroGraficoMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("ParametroGraficoMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="ParametroGrafico"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Parametro Graficos");		
		parameters.put("busquedapor", ParametroGraficoConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceParametroGrafico=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			ParametroGraficoConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			ParametroGraficoConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceParametroGrafico=new JRBeanArrayDataSource(ParametroGraficoJInternalFrame.TraerParametroGraficoBeans(parametrograficosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceParametroGrafico);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+ParametroGraficoConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+ParametroGraficoConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(ParametroGraficoBean.TraerParametroGraficoBeans(parametrograficosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteParametroGraficos(sAccionBusqueda,sTipoArchivoReporte,parametrograficosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalParametroGraficos(sAccionBusqueda,sTipoArchivoReporte,parametrograficosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoParametroGraficoActionPerformed(null);
					//this.generarExcelReporteParametroGraficos(sAccionBusqueda,sTipoArchivoReporte,parametrograficosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalParametroGraficos(sAccionBusqueda,sTipoArchivoReporte,parametrograficosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesParametroGraficos(sAccionBusqueda,sTipoArchivoReporte,parametrograficosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesParametroGraficos(sAccionBusqueda,sTipoArchivoReporte,parametrograficosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteParametroGraficos(String sAccionBusqueda,String sTipoArchivoReporte,List<ParametroGrafico> parametrograficosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrografico";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ParametroGraficos");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderParametroGrafico("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(ParametroGrafico parametrografico : parametrograficosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			ParametroGraficoConstantesFunciones.generarExcelReporteDataParametroGrafico("NORMAL",row,workbook,parametrografico,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrograficoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Grafico",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderParametroGrafico(String sTipo,Row row,Workbook workbook) {
		
		ParametroGraficoConstantesFunciones.generarExcelReporteHeaderParametroGrafico(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalParametroGraficos(String sAccionBusqueda,String sTipoArchivoReporte,List<ParametroGrafico> parametrograficosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrografico_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ParametroGraficos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(ParametroGrafico parametrografico : parametrograficosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(ParametroGraficoConstantesFunciones.getParametroGraficoDescripcion(parametrografico));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontableactivo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontablepasivo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontableinventario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontabledisponibilidad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontablecostoventa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontableinventarioini_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontableinventariofin_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontablecuentascobrar_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontableventacredito_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontableactivototal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontablepasivototal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontablepatrimonio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontablepatrimoniototal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getcuentacontableventa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(parametrografico.getinventario_inicial());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrograficoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Grafico",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesParametroGraficos(String sAccionBusqueda,String sTipoArchivoReporte,List<ParametroGrafico> parametrograficosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<ParametroGrafico> parametrograficosRespaldo=null;
		
		classes=ParametroGraficoConstantesFunciones.getClassesRelationshipsOfParametroGrafico(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.parametrograficoLogic.setDatosCliente(this.datosCliente);
		this.parametrograficoLogic.setDatosDeep(this.datosDeep);
		this.parametrograficoLogic.setIsConDeep(true);
		
		parametrograficosRespaldo=this.parametrograficoLogic.getParametroGraficos();
		
		this.parametrograficoLogic.setParametroGraficos(parametrograficosParaReportes);	
		this.parametrograficoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		parametrograficosParaReportes=this.parametrograficoLogic.getParametroGraficos();
		this.parametrograficoLogic.setParametroGraficos(parametrograficosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrografico_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("ParametroGraficos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderParametroGrafico("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(ParametroGrafico parametrografico : parametrograficosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderParametroGrafico("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			ParametroGraficoConstantesFunciones.generarExcelReporteDataParametroGrafico("NORMAL",row,workbook,parametrografico,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(ParametroGraficoConstantesFunciones.getParametroGraficoDescripcion(parametrografico));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrograficoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Grafico",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoParametroGrafico.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroGrafico.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessParametroGrafico() throws Exception {		
		this.startProcessParametroGrafico(true);
	}
	
	public void startProcessParametroGrafico(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasParametroGrafico ,this.jPanelParametrosReportesParametroGrafico, this.jScrollPanelDatosParametroGrafico,this.jPanelPaginacionParametroGrafico, this.jScrollPanelDatosEdicionParametroGrafico, this.jPanelAccionesParametroGrafico,this.jPanelAccionesFormularioParametroGrafico,this.jmenuBarParametroGrafico,this.jmenuBarDetalleParametroGrafico,this.jTtoolBarParametroGrafico,this.jTtoolBarDetalleParametroGrafico);		
		
		final JTabbedPane jTabbedPaneBusquedasParametroGrafico=this.jTabbedPaneBusquedasParametroGrafico; 
		
		final JPanel jPanelParametrosReportesParametroGrafico=this.jPanelParametrosReportesParametroGrafico;
		//final JScrollPane jScrollPanelDatosParametroGrafico=this.jScrollPanelDatosParametroGrafico;
		final JTable jTableDatosParametroGrafico=this.jTableDatosParametroGrafico;		
		final JPanel jPanelPaginacionParametroGrafico=this.jPanelPaginacionParametroGrafico;
		//final JScrollPane jScrollPanelDatosEdicionParametroGrafico=this.jScrollPanelDatosEdicionParametroGrafico;
		final JPanel jPanelAccionesParametroGrafico=this.jPanelAccionesParametroGrafico;
		
		JPanel jPanelCamposAuxiliarParametroGrafico=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarParametroGrafico=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
			jPanelCamposAuxiliarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jPanelCamposParametroGrafico;
			jPanelAccionesFormularioAuxiliarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jPanelAccionesFormularioParametroGrafico;
		}
		
		final JPanel jPanelCamposParametroGrafico=jPanelCamposAuxiliarParametroGrafico;
		final JPanel jPanelAccionesFormularioParametroGrafico=jPanelAccionesFormularioAuxiliarParametroGrafico;
		
		
		final JMenuBar jmenuBarParametroGrafico=this.jmenuBarParametroGrafico;
		final JToolBar jTtoolBarParametroGrafico=this.jTtoolBarParametroGrafico;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarParametroGrafico=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarParametroGrafico=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
			jmenuBarDetalleAuxiliarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jmenuBarDetalleParametroGrafico;
			jTtoolBarDetalleAuxiliarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jTtoolBarDetalleParametroGrafico;
		}
		
		final JMenuBar jmenuBarDetalleParametroGrafico=jmenuBarDetalleAuxiliarParametroGrafico;
		final JToolBar jTtoolBarDetalleParametroGrafico=jTtoolBarDetalleAuxiliarParametroGrafico;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasParametroGrafico;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesParametroGrafico;
			processRunnable.jTableDatos=jTableDatosParametroGrafico;
			processRunnable.jPanelCampos=jPanelCamposParametroGrafico;
			processRunnable.jPanelPaginacion=jPanelPaginacionParametroGrafico;
			processRunnable.jPanelAcciones=jPanelAccionesParametroGrafico;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioParametroGrafico;
			
			
			processRunnable.jmenuBar=jmenuBarParametroGrafico;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleParametroGrafico;
			processRunnable.jTtoolBar=jTtoolBarParametroGrafico;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleParametroGrafico;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasParametroGrafico ,jPanelParametrosReportesParametroGrafico,jTableDatosParametroGrafico, /*jScrollPanelDatosParametroGrafico,*/jPanelCamposParametroGrafico,jPanelPaginacionParametroGrafico, /*jScrollPanelDatosEdicionParametroGrafico,*/ jPanelAccionesParametroGrafico,jPanelAccionesFormularioParametroGrafico,jmenuBarParametroGrafico,jmenuBarDetalleParametroGrafico,jTtoolBarParametroGrafico,jTtoolBarDetalleParametroGrafico);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasParametroGrafico ,jPanelParametrosReportesParametroGrafico, jScrollPanelDatosParametroGrafico,jPanelPaginacionParametroGrafico, jScrollPanelDatosEdicionParametroGrafico, jPanelAccionesParametroGrafico,jPanelAccionesFormularioParametroGrafico,jmenuBarParametroGrafico,jmenuBarDetalleParametroGrafico,jTtoolBarParametroGrafico,jTtoolBarDetalleParametroGrafico);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessParametroGrafico() {// throws Exception 
		this.finishProcessParametroGrafico(true);
	}
	
	public void finishProcessParametroGrafico(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasParametroGrafico ,this.jPanelParametrosReportesParametroGrafico, this.jScrollPanelDatosParametroGrafico,this.jPanelPaginacionParametroGrafico, this.jScrollPanelDatosEdicionParametroGrafico, this.jPanelAccionesParametroGrafico,this.jPanelAccionesFormularioParametroGrafico,this.jmenuBarParametroGrafico,this.jmenuBarDetalleParametroGrafico,this.jTtoolBarParametroGrafico,this.jTtoolBarDetalleParametroGrafico);		
		
		final JTabbedPane jTabbedPaneBusquedasParametroGrafico=this.jTabbedPaneBusquedasParametroGrafico; 
		
		final JPanel jPanelParametrosReportesParametroGrafico=this.jPanelParametrosReportesParametroGrafico;
		//final JScrollPane jScrollPanelDatosParametroGrafico=this.jScrollPanelDatosParametroGrafico;
		final JTable jTableDatosParametroGrafico=this.jTableDatosParametroGrafico;		
		final JPanel jPanelPaginacionParametroGrafico=this.jPanelPaginacionParametroGrafico;
		//final JScrollPane jScrollPanelDatosEdicionParametroGrafico=this.jScrollPanelDatosEdicionParametroGrafico;
		final JPanel jPanelAccionesParametroGrafico=this.jPanelAccionesParametroGrafico;
		
		JPanel jPanelCamposAuxiliarParametroGrafico=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarParametroGrafico=new JPanel();
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
			jPanelCamposAuxiliarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jPanelCamposParametroGrafico;
			jPanelAccionesFormularioAuxiliarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jPanelAccionesFormularioParametroGrafico;
		}
		
		final JPanel jPanelCamposParametroGrafico=jPanelCamposAuxiliarParametroGrafico;
		final JPanel jPanelAccionesFormularioParametroGrafico=jPanelAccionesFormularioAuxiliarParametroGrafico;
		
		
		final JMenuBar jmenuBarParametroGrafico=this.jmenuBarParametroGrafico;		
		final JToolBar jTtoolBarParametroGrafico=this.jTtoolBarParametroGrafico;
				
		JMenuBar jmenuBarDetalleAuxiliarParametroGrafico=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarParametroGrafico=new JToolBar();
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
			jmenuBarDetalleAuxiliarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jmenuBarDetalleParametroGrafico;
			jTtoolBarDetalleAuxiliarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jTtoolBarDetalleParametroGrafico;		
		}
		
		final JMenuBar jmenuBarDetalleParametroGrafico=jmenuBarDetalleAuxiliarParametroGrafico;
		final JToolBar jTtoolBarDetalleParametroGrafico=jTtoolBarDetalleAuxiliarParametroGrafico;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasParametroGrafico;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesParametroGrafico;
			processRunnable.jTableDatos=jTableDatosParametroGrafico;
			processRunnable.jPanelCampos=jPanelCamposParametroGrafico;
			processRunnable.jPanelPaginacion=jPanelPaginacionParametroGrafico;
			processRunnable.jPanelAcciones=jPanelAccionesParametroGrafico;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioParametroGrafico;
			
			
			processRunnable.jmenuBar=jmenuBarParametroGrafico;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleParametroGrafico;
			processRunnable.jTtoolBar=jTtoolBarParametroGrafico;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleParametroGrafico;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasParametroGrafico ,jPanelParametrosReportesParametroGrafico, jTableDatosParametroGrafico,/*jScrollPanelDatosParametroGrafico,*/jPanelCamposParametroGrafico,jPanelPaginacionParametroGrafico, /*jScrollPanelDatosEdicionParametroGrafico,*/ jPanelAccionesParametroGrafico,jPanelAccionesFormularioParametroGrafico,jmenuBarParametroGrafico,jmenuBarDetalleParametroGrafico,jTtoolBarParametroGrafico,jTtoolBarDetalleParametroGrafico));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesParametroGrafico(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarParametroGrafico(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuParametroGrafico(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarParametroGrafico(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarParametroGrafico,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleParametroGrafico,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuParametroGrafico(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarParametroGrafico,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleParametroGrafico,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.parametrograficoConstantesFunciones.getsFinalQueryParametroGrafico();
		String  finalQueryPaginacionTodos=this.parametrograficoConstantesFunciones.getsFinalQueryParametroGrafico();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=ParametroGraficoConstantesFunciones.getArrayColumnasGlobalesNoParametroGrafico(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=ParametroGraficoConstantesFunciones.getArrayColumnasGlobalesParametroGrafico(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,ParametroGraficoConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.parametrograficosEliminados= new ArrayList<ParametroGrafico>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessParametroGrafico();
		
				///*ParametroGraficoSessionBean*/this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			
			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=ParametroGraficoConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=ParametroGraficoConstantesFunciones.getClassesForeignKeysOfParametroGrafico(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/parametrografico."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			parametrograficosAux= new ArrayList<ParametroGrafico>();
			
				
			parametrograficoLogic.setDatosCliente(this.datosCliente);
			parametrograficoLogic.setDatosDeep(this.datosDeep);
			parametrograficoLogic.setIsConDeep(true);
			
			
			parametrograficoLogic.getParametroGraficoDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					parametrograficoLogic.getTodosParametroGraficos(finalQueryGlobal,pagination);
					
					//parametrograficoLogic.getTodosParametroGraficosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(parametrograficoLogic.getParametroGraficos()==null|| parametrograficoLogic.getParametroGraficos().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							parametrograficosAux= new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux= new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							parametrograficoLogic.getTodosParametroGraficos(finalQueryGlobal+"",this.pagination);												
							
							//parametrograficoLogic.getTodosParametroGraficosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteParametroGraficos("Todos",parametrograficoLogic.getParametroGraficos() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());					
							parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idParametroGrafico=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idParametroGrafico=this.idActual;
				
				} else if(this.idParametroGraficoActual!=null && this.idParametroGraficoActual!=0L) {
					idParametroGrafico=idParametroGraficoActual;
				}
				
					
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndicePorId(idParametroGrafico);
				
				this.parametrograficos=new ArrayList<ParametroGrafico>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					parametrograficoLogic.getEntity(idParametroGrafico);
					
					//parametrograficoLogic.getEntityWithConnection(idParametroGrafico);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
					parametrograficoLogic.getParametroGraficos().add(parametrograficoLogic.getParametroGrafico());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrograficos=new ArrayList<ParametroGrafico>();
					this.parametrograficos.add(parametrografico);
				}
				
				if(parametrograficoLogic.getParametroGrafico()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdCuentaContableActivo")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableActivo(id_cuenta_contable_activoFK_IdCuentaContableActivo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableActivo(finalQueryGlobal,pagination,id_cuenta_contable_activoFK_IdCuentaContableActivo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableActivo(id_cuenta_contable_activoFK_IdCuentaContableActivo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableActivo(id_cuenta_contable_activoFK_IdCuentaContableActivo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContableActivo(finalQueryGlobal,pagination,id_cuenta_contable_activoFK_IdCuentaContableActivo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableActivo(id_cuenta_contable_activoFK_IdCuentaContableActivo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableActivo(id_cuenta_contable_activoFK_IdCuentaContableActivo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContableActivo",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContableActivo",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableActivoTotal")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableActivoTotal(id_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableActivoTotal(finalQueryGlobal,pagination,id_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableActivoTotal(id_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableActivoTotal(id_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContableActivoTotal(finalQueryGlobal,pagination,id_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableActivoTotal(id_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableActivoTotal(id_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContableActivoTotal",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContableActivoTotal",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableCostoVenta")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCostoVenta(id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableCostoVenta(finalQueryGlobal,pagination,id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCostoVenta(id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCostoVenta(id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContableCostoVenta(finalQueryGlobal,pagination,id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCostoVenta(id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCostoVenta(id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContableCostoVenta",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContableCostoVenta",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableCuentasCobrar")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCuentasCobrar(id_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableCuentasCobrar(finalQueryGlobal,pagination,id_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCuentasCobrar(id_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCuentasCobrar(id_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContableCuentasCobrar(finalQueryGlobal,pagination,id_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCuentasCobrar(id_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCuentasCobrar(id_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContableCuentasCobrar",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContableCuentasCobrar",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableDisponibilad")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDisponibilad(id_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableDisponibilad(finalQueryGlobal,pagination,id_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDisponibilad(id_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDisponibilad(id_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContableDisponibilad(finalQueryGlobal,pagination,id_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDisponibilad(id_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDisponibilad(id_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContableDisponibilad",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContableDisponibilad",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableInventario")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventario(id_cuenta_contable_inventarioFK_IdCuentaContableInventario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableInventario(finalQueryGlobal,pagination,id_cuenta_contable_inventarioFK_IdCuentaContableInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventario(id_cuenta_contable_inventarioFK_IdCuentaContableInventario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventario(id_cuenta_contable_inventarioFK_IdCuentaContableInventario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContableInventario(finalQueryGlobal,pagination,id_cuenta_contable_inventarioFK_IdCuentaContableInventario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventario(id_cuenta_contable_inventarioFK_IdCuentaContableInventario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventario(id_cuenta_contable_inventarioFK_IdCuentaContableInventario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContableInventario",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContableInventario",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableInventarioFin")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventarioFin(id_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableInventarioFin(finalQueryGlobal,pagination,id_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventarioFin(id_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventarioFin(id_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContableInventarioFin(finalQueryGlobal,pagination,id_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventarioFin(id_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventarioFin(id_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContableInventarioFin",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContableInventarioFin",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableInventarioIni")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventarioIni(id_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableInventarioIni(finalQueryGlobal,pagination,id_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventarioIni(id_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventarioIni(id_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContableInventarioIni(finalQueryGlobal,pagination,id_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventarioIni(id_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableInventarioIni(id_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContableInventarioIni",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContableInventarioIni",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContablePasivo")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePasivo(id_cuenta_contable_pasivoFK_IdCuentaContablePasivo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContablePasivo(finalQueryGlobal,pagination,id_cuenta_contable_pasivoFK_IdCuentaContablePasivo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePasivo(id_cuenta_contable_pasivoFK_IdCuentaContablePasivo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePasivo(id_cuenta_contable_pasivoFK_IdCuentaContablePasivo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContablePasivo(finalQueryGlobal,pagination,id_cuenta_contable_pasivoFK_IdCuentaContablePasivo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePasivo(id_cuenta_contable_pasivoFK_IdCuentaContablePasivo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePasivo(id_cuenta_contable_pasivoFK_IdCuentaContablePasivo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContablePasivo",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContablePasivo",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContablePasivoTotal")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePasivoTotal(id_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContablePasivoTotal(finalQueryGlobal,pagination,id_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePasivoTotal(id_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePasivoTotal(id_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContablePasivoTotal(finalQueryGlobal,pagination,id_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePasivoTotal(id_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePasivoTotal(id_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContablePasivoTotal",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContablePasivoTotal",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContablePatrimonio")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePatrimonio(id_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContablePatrimonio(finalQueryGlobal,pagination,id_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePatrimonio(id_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePatrimonio(id_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContablePatrimonio(finalQueryGlobal,pagination,id_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePatrimonio(id_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePatrimonio(id_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContablePatrimonio",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContablePatrimonio",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContablePatrimonioTotal")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePatrimonioTotal(id_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContablePatrimonioTotal(finalQueryGlobal,pagination,id_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePatrimonioTotal(id_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePatrimonioTotal(id_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContablePatrimonioTotal(finalQueryGlobal,pagination,id_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePatrimonioTotal(id_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContablePatrimonioTotal(id_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContablePatrimonioTotal",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContablePatrimonioTotal",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableVenta")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVenta(id_cuenta_contable_ventaFK_IdCuentaContableVenta);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableVenta(finalQueryGlobal,pagination,id_cuenta_contable_ventaFK_IdCuentaContableVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVenta(id_cuenta_contable_ventaFK_IdCuentaContableVenta);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVenta(id_cuenta_contable_ventaFK_IdCuentaContableVenta);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContableVenta(finalQueryGlobal,pagination,id_cuenta_contable_ventaFK_IdCuentaContableVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVenta(id_cuenta_contable_ventaFK_IdCuentaContableVenta);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVenta(id_cuenta_contable_ventaFK_IdCuentaContableVenta);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContableVenta",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContableVenta",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableVentaCredito")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVentaCredito(id_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableVentaCredito(finalQueryGlobal,pagination,id_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVentaCredito(id_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVentaCredito(id_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdCuentaContableVentaCredito(finalQueryGlobal,pagination,id_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVentaCredito(id_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableVentaCredito(id_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdCuentaContableVentaCredito",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdCuentaContableVentaCredito",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					parametrograficoLogic.getParametroGraficosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=parametrograficoLogic.getParametroGraficos()==null||parametrograficoLogic.getParametroGraficos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=parametrograficos==null|| parametrograficos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficosAux=new ArrayList<ParametroGrafico>();
						parametrograficosAux.addAll(parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficosAux=new ArrayList<ParametroGrafico>();
							parametrograficosAux.addAll(parametrograficos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							parametrograficoLogic.getParametroGraficosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=ParametroGraficoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteParametroGraficos("FK_IdEmpresa",parametrograficoLogic.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteParametroGraficos("FK_IdEmpresa",parametrograficos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoLogic.setParametroGraficos(new ArrayList<ParametroGrafico>());
						parametrograficoLogic.getParametroGraficos().addAll(parametrograficosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficos=new ArrayList<ParametroGrafico>();
							parametrograficos.addAll(parametrograficosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesParametroGrafico();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessParametroGrafico();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=parametrograficoLogic.getParametroGraficos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=parametrograficos.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=parametrograficoLogic.getParametroGraficos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=parametrograficos.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(ParametroGrafico parametrografico) {
		Boolean permite=true;
		
		if(this.parametrografico.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=ParametroGraficoConstantesFunciones.getOrderByListaParametroGrafico();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=ParametroGraficoConstantesFunciones.getOrderByListaParametroGrafico();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroGrafico parametrografico:parametrograficoLogic.getParametroGraficos()) {
				if(parametrografico.getsType().equals(Constantes2.S_TOTALES)) {
					parametrograficoTotales=parametrografico;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroGrafico parametrografico:this.parametrograficos) {
				if(parametrografico.getsType().equals(Constantes2.S_TOTALES)) {
					parametrograficoTotales=parametrografico;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.parametrograficoAux=new ParametroGrafico();
			this.parametrograficoAux.setsType(Constantes2.S_TOTALES);
			this.parametrograficoAux.setIsNew(false);
			this.parametrograficoAux.setIsChanged(false);
			this.parametrograficoAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				ParametroGraficoConstantesFunciones.TotalizarValoresFilaParametroGrafico(this.parametrograficoLogic.getParametroGraficos(),this.parametrograficoAux);
				
				this.parametrograficoLogic.getParametroGraficos().add(this.parametrograficoAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				ParametroGraficoConstantesFunciones.TotalizarValoresFilaParametroGrafico(this.parametrograficos,this.parametrograficoAux);
				
				this.parametrograficos.add(this.parametrograficoAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		parametrograficoTotales=new ParametroGrafico();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.parametrograficoLogic.getParametroGraficos().remove(parametrograficoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.parametrograficos.remove(parametrograficoTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		parametrograficoTotales=new ParametroGrafico();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(ParametroGrafico parametrografico:parametrograficoLogic.getParametroGraficos()) {
				if(parametrografico.getsType().equals(Constantes2.S_TOTALES)) {
					parametrograficoTotales=parametrografico;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ParametroGraficoConstantesFunciones.TotalizarValoresFilaParametroGrafico(this.parametrograficoLogic.getParametroGraficos(),parametrograficoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(ParametroGrafico parametrografico:this.parametrograficos) {
				if(parametrografico.getsType().equals(Constantes2.S_TOTALES)) {
					parametrograficoTotales=parametrografico;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				ParametroGraficoConstantesFunciones.TotalizarValoresFilaParametroGrafico(this.parametrograficos,parametrograficoTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getParametroGraficosFK_IdCuentaContableActivo()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableActivo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdCuentaContableActivoTotal()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableActivoTotal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdCuentaContableCostoVenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCostoVenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdCuentaContableCuentasCobrar()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCuentasCobrar";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdCuentaContableDisponibilad()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableDisponibilad";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdCuentaContableInventario()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableInventario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdCuentaContableInventarioFin()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableInventarioFin";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdCuentaContableInventarioIni()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableInventarioIni";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdCuentaContablePasivo()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContablePasivo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdCuentaContablePasivoTotal()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContablePasivoTotal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdCuentaContablePatrimonio()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContablePatrimonio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdCuentaContablePatrimonioTotal()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContablePatrimonioTotal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdCuentaContableVenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableVenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdCuentaContableVentaCredito()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableVentaCredito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getParametroGraficosFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getParametroGraficosFK_IdCuentaContableActivo(String sFinalQuery,Long id_cuenta_contable_activo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableActivo(sFinalQuery,this.pagination,id_cuenta_contable_activo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdCuentaContableActivoTotal(String sFinalQuery,Long id_cuenta_contable_activo_total)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableActivoTotal(sFinalQuery,this.pagination,id_cuenta_contable_activo_total);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdCuentaContableCostoVenta(String sFinalQuery,Long id_cuenta_contable_costo_venta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableCostoVenta(sFinalQuery,this.pagination,id_cuenta_contable_costo_venta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdCuentaContableCuentasCobrar(String sFinalQuery,Long id_cuenta_contable_cuenta_cobrar)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableCuentasCobrar(sFinalQuery,this.pagination,id_cuenta_contable_cuenta_cobrar);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdCuentaContableDisponibilad(String sFinalQuery,Long id_cuenta_contable_disponibilidad)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableDisponibilad(sFinalQuery,this.pagination,id_cuenta_contable_disponibilidad);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdCuentaContableInventario(String sFinalQuery,Long id_cuenta_contable_inventario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableInventario(sFinalQuery,this.pagination,id_cuenta_contable_inventario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdCuentaContableInventarioFin(String sFinalQuery,Long id_cuenta_contable_inventario_fin)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableInventarioFin(sFinalQuery,this.pagination,id_cuenta_contable_inventario_fin);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdCuentaContableInventarioIni(String sFinalQuery,Long id_cuenta_contable_inventario_ini)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableInventarioIni(sFinalQuery,this.pagination,id_cuenta_contable_inventario_ini);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdCuentaContablePasivo(String sFinalQuery,Long id_cuenta_contable_pasivo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContablePasivo(sFinalQuery,this.pagination,id_cuenta_contable_pasivo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdCuentaContablePasivoTotal(String sFinalQuery,Long id_cuenta_contable_pasivo_total)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContablePasivoTotal(sFinalQuery,this.pagination,id_cuenta_contable_pasivo_total);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdCuentaContablePatrimonio(String sFinalQuery,Long id_cuenta_contable_patrimonio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContablePatrimonio(sFinalQuery,this.pagination,id_cuenta_contable_patrimonio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdCuentaContablePatrimonioTotal(String sFinalQuery,Long id_cuenta_contable_patrimonio_total)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContablePatrimonioTotal(sFinalQuery,this.pagination,id_cuenta_contable_patrimonio_total);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdCuentaContableVenta(String sFinalQuery,Long id_cuenta_contable_venta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableVenta(sFinalQuery,this.pagination,id_cuenta_contable_venta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdCuentaContableVentaCredito(String sFinalQuery,Long id_cuenta_contable_venta_credito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdCuentaContableVentaCredito(sFinalQuery,this.pagination,id_cuenta_contable_venta_credito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getParametroGraficosFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLogic.getParametroGraficosFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosParametroGrafico() {
		this.isPermisoTodoParametroGrafico=false;
		this.isPermisoNuevoParametroGrafico=false;
		this.isPermisoActualizarParametroGrafico=false;
		this.isPermisoActualizarOriginalParametroGrafico=false;
		this.isPermisoEliminarParametroGrafico=false;
		this.isPermisoGuardarCambiosParametroGrafico=false;
		this.isPermisoConsultaParametroGrafico=false;
		this.isPermisoBusquedaParametroGrafico=false;
		this.isPermisoReporteParametroGrafico=false;		
		this.isPermisoOrdenParametroGrafico=false;		
		this.isPermisoPaginacionMedioParametroGrafico=false;		
		this.isPermisoPaginacionAltoParametroGrafico=false;
		this.isPermisoPaginacionTodoParametroGrafico=false;
		this.isPermisoCopiarParametroGrafico=false;		
		this.isPermisoVerFormParametroGrafico=false;		
		this.isPermisoDuplicarParametroGrafico=false;		
		this.isPermisoOrdenParametroGrafico=false;		
	}
	
	public void setPermisosUsuarioParametroGrafico(Boolean isPermiso) {
		this.isPermisoTodoParametroGrafico=isPermiso;
		this.isPermisoNuevoParametroGrafico=isPermiso;
		this.isPermisoActualizarParametroGrafico=isPermiso;
		this.isPermisoActualizarOriginalParametroGrafico=isPermiso;
		this.isPermisoEliminarParametroGrafico=isPermiso;
		this.isPermisoGuardarCambiosParametroGrafico=isPermiso;
		this.isPermisoConsultaParametroGrafico=isPermiso;
		this.isPermisoBusquedaParametroGrafico=isPermiso;
		this.isPermisoReporteParametroGrafico=isPermiso;
		this.isPermisoOrdenParametroGrafico=isPermiso;		
		this.isPermisoPaginacionMedioParametroGrafico=isPermiso;		
		this.isPermisoPaginacionAltoParametroGrafico=isPermiso;		
		this.isPermisoPaginacionTodoParametroGrafico=isPermiso;		
		this.isPermisoCopiarParametroGrafico=isPermiso;		
		this.isPermisoVerFormParametroGrafico=isPermiso;		
		this.isPermisoDuplicarParametroGrafico=isPermiso;
		this.isPermisoOrdenParametroGrafico=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioParametroGrafico(Boolean isPermiso) {
		//this.isPermisoTodoParametroGrafico=isPermiso;
		this.isPermisoNuevoParametroGrafico=isPermiso;
		this.isPermisoActualizarParametroGrafico=isPermiso;
		this.isPermisoActualizarOriginalParametroGrafico=isPermiso;
		this.isPermisoEliminarParametroGrafico=isPermiso;
		this.isPermisoGuardarCambiosParametroGrafico=isPermiso;
		//this.isPermisoConsultaParametroGrafico=isPermiso;
		//this.isPermisoBusquedaParametroGrafico=isPermiso;
		//this.isPermisoReporteParametroGrafico=isPermiso;
		//this.isPermisoOrdenParametroGrafico=isPermiso;		
		//this.isPermisoPaginacionMedioParametroGrafico=isPermiso;		
		//this.isPermisoPaginacionAltoParametroGrafico=isPermiso;		
		//this.isPermisoPaginacionTodoParametroGrafico=isPermiso;		
		//this.isPermisoCopiarParametroGrafico=isPermiso;		
		//this.isPermisoDuplicarParametroGrafico=isPermiso;
		//this.isPermisoOrdenParametroGrafico=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioParametroGraficoClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(ParametroGraficoJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebParametroGrafico(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioParametroGraficoClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioParametroGraficoClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionParametroGraficoClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioParametroGraficoClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioParametroGrafico() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(ParametroGraficoJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, ParametroGraficoConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoParametroGrafico=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarParametroGrafico=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalParametroGrafico=this.isPermisoActualizarParametroGrafico;
			this.isPermisoEliminarParametroGrafico=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosParametroGrafico=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaParametroGrafico=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaParametroGrafico=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoParametroGrafico=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteParametroGrafico=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenParametroGrafico=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioParametroGrafico=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoParametroGrafico=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoParametroGrafico=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarParametroGrafico=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormParametroGrafico=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarParametroGrafico=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenParametroGrafico=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosParametroGrafico.setToolTipText(this.jTableDatosParametroGrafico.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioParametroGrafico(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioParametroGrafico(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(ParametroGraficoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(ParametroGraficoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioParametroGrafico() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyParametroGraficoListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.cuentacontableactivosForeignKey=new ArrayList();
				this.cuentacontablepasivosForeignKey=new ArrayList();
				this.cuentacontableinventariosForeignKey=new ArrayList();
				this.cuentacontabledisponibilidadsForeignKey=new ArrayList();
				this.cuentacontablecostoventasForeignKey=new ArrayList();
				this.cuentacontableinventarioinisForeignKey=new ArrayList();
				this.cuentacontableinventariofinsForeignKey=new ArrayList();
				this.cuentacontablecuentascobrarsForeignKey=new ArrayList();
				this.cuentacontableventacreditosForeignKey=new ArrayList();
				this.cuentacontableactivototalsForeignKey=new ArrayList();
				this.cuentacontablepasivototalsForeignKey=new ArrayList();
				this.cuentacontablepatrimoniosForeignKey=new ArrayList();
				this.cuentacontablepatrimoniototalsForeignKey=new ArrayList();
				this.cuentacontableventasForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyParametroGraficoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(ParametroGraficoJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyParametroGraficoListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableActivoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContablePasivoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableDisponibilidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCostoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableInventarioIniListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableInventarioFinListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCuentasCobrarListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableVentaCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableActivoTotalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContablePasivoTotalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContablePatrimonioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContablePatrimonioTotalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableVentaListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableActivoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableactivosForeignKey==null||this.cuentacontableactivosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableActivosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContablePasivoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablepasivosForeignKey==null||this.cuentacontablepasivosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContablePasivosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableInventarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableinventariosForeignKey==null||this.cuentacontableinventariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableInventariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDisponibilidadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontabledisponibilidadsForeignKey==null||this.cuentacontabledisponibilidadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableDisponibilidadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCostoVentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecostoventasForeignKey==null||this.cuentacontablecostoventasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCostoVentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableInventarioIniListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableinventarioinisForeignKey==null||this.cuentacontableinventarioinisForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableInventarioInisForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableInventarioFinListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableinventariofinsForeignKey==null||this.cuentacontableinventariofinsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableInventarioFinsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCuentasCobrarListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecuentascobrarsForeignKey==null||this.cuentacontablecuentascobrarsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCuentasCobrarsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableVentaCreditoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableventacreditosForeignKey==null||this.cuentacontableventacreditosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableVentaCreditosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableActivoTotalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableactivototalsForeignKey==null||this.cuentacontableactivototalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableActivoTotalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContablePasivoTotalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablepasivototalsForeignKey==null||this.cuentacontablepasivototalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContablePasivoTotalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContablePatrimonioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablepatrimoniosForeignKey==null||this.cuentacontablepatrimoniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContablePatrimoniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContablePatrimonioTotalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablepatrimoniototalsForeignKey==null||this.cuentacontablepatrimoniototalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContablePatrimonioTotalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableVentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontableventasForeignKey==null||this.cuentacontableventasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableVentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyParametroGraficoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			ParametroGraficoParameterReturnGeneral parametrograficoReturnGeneral=new ParametroGraficoParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_empresaParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_empresaParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalCuentaContableActivo="";

				if(((this.cuentacontableactivosForeignKey==null||this.cuentacontableactivosForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_activoParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_activoParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableActivo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableActivo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableActivo=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableActivo, "");
						finalQueryGlobalCuentaContableActivo+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableActivosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableActivo=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContableActivoActual();
					}
				} else {
					finalQueryGlobalCuentaContableActivo="NONE";
				}


				String finalQueryGlobalCuentaContablePasivo="";

				if(((this.cuentacontablepasivosForeignKey==null||this.cuentacontablepasivosForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_pasivoParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_pasivoParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContablePasivo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContablePasivo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContablePasivo=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContablePasivo, "");
						finalQueryGlobalCuentaContablePasivo+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContablePasivosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContablePasivo=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContablePasivoActual();
					}
				} else {
					finalQueryGlobalCuentaContablePasivo="NONE";
				}


				String finalQueryGlobalCuentaContableInventario="";

				if(((this.cuentacontableinventariosForeignKey==null||this.cuentacontableinventariosForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_inventarioParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_inventarioParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableInventario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableInventario=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableInventario, "");
						finalQueryGlobalCuentaContableInventario+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableInventariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableInventario=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContableInventarioActual();
					}
				} else {
					finalQueryGlobalCuentaContableInventario="NONE";
				}


				String finalQueryGlobalCuentaContableDisponibilidad="";

				if(((this.cuentacontabledisponibilidadsForeignKey==null||this.cuentacontabledisponibilidadsForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_disponibilidadParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_disponibilidadParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDisponibilidad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableDisponibilidad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableDisponibilidad=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableDisponibilidad, "");
						finalQueryGlobalCuentaContableDisponibilidad+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableDisponibilidadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableDisponibilidad=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContableDisponibilidadActual();
					}
				} else {
					finalQueryGlobalCuentaContableDisponibilidad="NONE";
				}


				String finalQueryGlobalCuentaContableCostoVenta="";

				if(((this.cuentacontablecostoventasForeignKey==null||this.cuentacontablecostoventasForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_costo_ventaParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_costo_ventaParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCostoVenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCostoVenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCostoVenta=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCostoVenta, "");
						finalQueryGlobalCuentaContableCostoVenta+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCostoVentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCostoVenta=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContableCostoVentaActual();
					}
				} else {
					finalQueryGlobalCuentaContableCostoVenta="NONE";
				}


				String finalQueryGlobalCuentaContableInventarioIni="";

				if(((this.cuentacontableinventarioinisForeignKey==null||this.cuentacontableinventarioinisForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_inventario_iniParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_inventario_iniParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventarioIni()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableInventarioIni=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableInventarioIni=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableInventarioIni, "");
						finalQueryGlobalCuentaContableInventarioIni+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableInventarioInisForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableInventarioIni=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContableInventarioIniActual();
					}
				} else {
					finalQueryGlobalCuentaContableInventarioIni="NONE";
				}


				String finalQueryGlobalCuentaContableInventarioFin="";

				if(((this.cuentacontableinventariofinsForeignKey==null||this.cuentacontableinventariofinsForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_inventario_finParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_inventario_finParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventarioFin()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableInventarioFin=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableInventarioFin=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableInventarioFin, "");
						finalQueryGlobalCuentaContableInventarioFin+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableInventarioFinsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableInventarioFin=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContableInventarioFinActual();
					}
				} else {
					finalQueryGlobalCuentaContableInventarioFin="NONE";
				}


				String finalQueryGlobalCuentaContableCuentasCobrar="";

				if(((this.cuentacontablecuentascobrarsForeignKey==null||this.cuentacontablecuentascobrarsForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_cuenta_cobrarParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_cuenta_cobrarParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCuentasCobrar()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCuentasCobrar=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCuentasCobrar=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCuentasCobrar, "");
						finalQueryGlobalCuentaContableCuentasCobrar+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCuentasCobrarsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCuentasCobrar=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContableCuentasCobrarActual();
					}
				} else {
					finalQueryGlobalCuentaContableCuentasCobrar="NONE";
				}


				String finalQueryGlobalCuentaContableVentaCredito="";

				if(((this.cuentacontableventacreditosForeignKey==null||this.cuentacontableventacreditosForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_venta_creditoParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_venta_creditoParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVentaCredito()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableVentaCredito=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableVentaCredito=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableVentaCredito, "");
						finalQueryGlobalCuentaContableVentaCredito+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableVentaCreditosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableVentaCredito=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContableVentaCreditoActual();
					}
				} else {
					finalQueryGlobalCuentaContableVentaCredito="NONE";
				}


				String finalQueryGlobalCuentaContableActivoTotal="";

				if(((this.cuentacontableactivototalsForeignKey==null||this.cuentacontableactivototalsForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_activo_totalParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_activo_totalParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableActivoTotal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableActivoTotal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableActivoTotal=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableActivoTotal, "");
						finalQueryGlobalCuentaContableActivoTotal+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableActivoTotalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableActivoTotal=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContableActivoTotalActual();
					}
				} else {
					finalQueryGlobalCuentaContableActivoTotal="NONE";
				}


				String finalQueryGlobalCuentaContablePasivoTotal="";

				if(((this.cuentacontablepasivototalsForeignKey==null||this.cuentacontablepasivototalsForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_pasivo_totalParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_pasivo_totalParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContablePasivoTotal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContablePasivoTotal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContablePasivoTotal=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContablePasivoTotal, "");
						finalQueryGlobalCuentaContablePasivoTotal+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContablePasivoTotalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContablePasivoTotal=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContablePasivoTotalActual();
					}
				} else {
					finalQueryGlobalCuentaContablePasivoTotal="NONE";
				}


				String finalQueryGlobalCuentaContablePatrimonio="";

				if(((this.cuentacontablepatrimoniosForeignKey==null||this.cuentacontablepatrimoniosForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_patrimonioParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_patrimonioParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContablePatrimonio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContablePatrimonio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContablePatrimonio=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContablePatrimonio, "");
						finalQueryGlobalCuentaContablePatrimonio+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContablePatrimoniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContablePatrimonio=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContablePatrimonioActual();
					}
				} else {
					finalQueryGlobalCuentaContablePatrimonio="NONE";
				}


				String finalQueryGlobalCuentaContablePatrimonioTotal="";

				if(((this.cuentacontablepatrimoniototalsForeignKey==null||this.cuentacontablepatrimoniototalsForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_patrimonio_totalParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_patrimonio_totalParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContablePatrimonioTotal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContablePatrimonioTotal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContablePatrimonioTotal=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContablePatrimonioTotal, "");
						finalQueryGlobalCuentaContablePatrimonioTotal+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContablePatrimonioTotalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContablePatrimonioTotal=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContablePatrimonioTotalActual();
					}
				} else {
					finalQueryGlobalCuentaContablePatrimonioTotal="NONE";
				}


				String finalQueryGlobalCuentaContableVenta="";

				if(((this.cuentacontableventasForeignKey==null||this.cuentacontableventasForeignKey.size()<=0) && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_ventaParametroGrafico)
					 || (this.esRecargarFks && this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_ventaParametroGrafico)) {

					if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableVenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableVenta=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableVenta, "");
						finalQueryGlobalCuentaContableVenta+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableVentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableVenta=" WHERE " + ConstantesSql.ID + "="+parametrograficoSessionBean.getlidCuentaContableVentaActual();
					}
				} else {
					finalQueryGlobalCuentaContableVenta="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				parametrograficoReturnGeneral=parametrograficoLogic.cargarCombosLoteForeignKeyParametroGrafico(finalQueryGlobalEmpresa,finalQueryGlobalCuentaContableActivo,finalQueryGlobalCuentaContablePasivo,finalQueryGlobalCuentaContableInventario,finalQueryGlobalCuentaContableDisponibilidad,finalQueryGlobalCuentaContableCostoVenta,finalQueryGlobalCuentaContableInventarioIni,finalQueryGlobalCuentaContableInventarioFin,finalQueryGlobalCuentaContableCuentasCobrar,finalQueryGlobalCuentaContableVentaCredito,finalQueryGlobalCuentaContableActivoTotal,finalQueryGlobalCuentaContablePasivoTotal,finalQueryGlobalCuentaContablePatrimonio,finalQueryGlobalCuentaContablePatrimonioTotal,finalQueryGlobalCuentaContableVenta);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=parametrograficoReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableActivo.equals("NONE")) {
				this.cuentacontableactivosForeignKey=parametrograficoReturnGeneral.getcuentacontableactivosForeignKey();
			}

			if(!finalQueryGlobalCuentaContablePasivo.equals("NONE")) {
				this.cuentacontablepasivosForeignKey=parametrograficoReturnGeneral.getcuentacontablepasivosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableInventario.equals("NONE")) {
				this.cuentacontableinventariosForeignKey=parametrograficoReturnGeneral.getcuentacontableinventariosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableDisponibilidad.equals("NONE")) {
				this.cuentacontabledisponibilidadsForeignKey=parametrograficoReturnGeneral.getcuentacontabledisponibilidadsForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCostoVenta.equals("NONE")) {
				this.cuentacontablecostoventasForeignKey=parametrograficoReturnGeneral.getcuentacontablecostoventasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableInventarioIni.equals("NONE")) {
				this.cuentacontableinventarioinisForeignKey=parametrograficoReturnGeneral.getcuentacontableinventarioinisForeignKey();
			}

			if(!finalQueryGlobalCuentaContableInventarioFin.equals("NONE")) {
				this.cuentacontableinventariofinsForeignKey=parametrograficoReturnGeneral.getcuentacontableinventariofinsForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCuentasCobrar.equals("NONE")) {
				this.cuentacontablecuentascobrarsForeignKey=parametrograficoReturnGeneral.getcuentacontablecuentascobrarsForeignKey();
			}

			if(!finalQueryGlobalCuentaContableVentaCredito.equals("NONE")) {
				this.cuentacontableventacreditosForeignKey=parametrograficoReturnGeneral.getcuentacontableventacreditosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableActivoTotal.equals("NONE")) {
				this.cuentacontableactivototalsForeignKey=parametrograficoReturnGeneral.getcuentacontableactivototalsForeignKey();
			}

			if(!finalQueryGlobalCuentaContablePasivoTotal.equals("NONE")) {
				this.cuentacontablepasivototalsForeignKey=parametrograficoReturnGeneral.getcuentacontablepasivototalsForeignKey();
			}

			if(!finalQueryGlobalCuentaContablePatrimonio.equals("NONE")) {
				this.cuentacontablepatrimoniosForeignKey=parametrograficoReturnGeneral.getcuentacontablepatrimoniosForeignKey();
			}

			if(!finalQueryGlobalCuentaContablePatrimonioTotal.equals("NONE")) {
				this.cuentacontablepatrimoniototalsForeignKey=parametrograficoReturnGeneral.getcuentacontablepatrimoniototalsForeignKey();
			}

			if(!finalQueryGlobalCuentaContableVenta.equals("NONE")) {
				this.cuentacontableventasForeignKey=parametrograficoReturnGeneral.getcuentacontableventasForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyParametroGrafico()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeyCuentaContableActivo();
			this.addItemDefectoCombosForeignKeyCuentaContablePasivo();
			this.addItemDefectoCombosForeignKeyCuentaContableInventario();
			this.addItemDefectoCombosForeignKeyCuentaContableDisponibilidad();
			this.addItemDefectoCombosForeignKeyCuentaContableCostoVenta();
			this.addItemDefectoCombosForeignKeyCuentaContableInventarioIni();
			this.addItemDefectoCombosForeignKeyCuentaContableInventarioFin();
			this.addItemDefectoCombosForeignKeyCuentaContableCuentasCobrar();
			this.addItemDefectoCombosForeignKeyCuentaContableVentaCredito();
			this.addItemDefectoCombosForeignKeyCuentaContableActivoTotal();
			this.addItemDefectoCombosForeignKeyCuentaContablePasivoTotal();
			this.addItemDefectoCombosForeignKeyCuentaContablePatrimonio();
			this.addItemDefectoCombosForeignKeyCuentaContablePatrimonioTotal();
			this.addItemDefectoCombosForeignKeyCuentaContableVenta();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.parametrograficoSessionBean==null) {
				this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableActivo()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableActivo()) {
				CuentaContable cuentacontableactivo=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableactivo,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableactivo.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableactivosForeignKey,cuentacontableactivo,true)) {

					this.cuentacontableactivosForeignKey.add(0,cuentacontableactivo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContablePasivo()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContablePasivo()) {
				CuentaContable cuentacontablepasivo=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablepasivo,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablepasivo.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablepasivosForeignKey,cuentacontablepasivo,true)) {

					this.cuentacontablepasivosForeignKey.add(0,cuentacontablepasivo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableInventario()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventario()) {
				CuentaContable cuentacontableinventario=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableinventario,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableinventario.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableinventariosForeignKey,cuentacontableinventario,true)) {

					this.cuentacontableinventariosForeignKey.add(0,cuentacontableinventario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableDisponibilidad()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDisponibilidad()) {
				CuentaContable cuentacontabledisponibilidad=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontabledisponibilidad,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontabledisponibilidad.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontabledisponibilidadsForeignKey,cuentacontabledisponibilidad,true)) {

					this.cuentacontabledisponibilidadsForeignKey.add(0,cuentacontabledisponibilidad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCostoVenta()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCostoVenta()) {
				CuentaContable cuentacontablecostoventa=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecostoventa,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecostoventa.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecostoventasForeignKey,cuentacontablecostoventa,true)) {

					this.cuentacontablecostoventasForeignKey.add(0,cuentacontablecostoventa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableInventarioIni()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventarioIni()) {
				CuentaContable cuentacontableinventarioini=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableinventarioini,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableinventarioini.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableinventarioinisForeignKey,cuentacontableinventarioini,true)) {

					this.cuentacontableinventarioinisForeignKey.add(0,cuentacontableinventarioini);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableInventarioFin()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableInventarioFin()) {
				CuentaContable cuentacontableinventariofin=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableinventariofin,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableinventariofin.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableinventariofinsForeignKey,cuentacontableinventariofin,true)) {

					this.cuentacontableinventariofinsForeignKey.add(0,cuentacontableinventariofin);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCuentasCobrar()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCuentasCobrar()) {
				CuentaContable cuentacontablecuentascobrar=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecuentascobrar,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecuentascobrar.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecuentascobrarsForeignKey,cuentacontablecuentascobrar,true)) {

					this.cuentacontablecuentascobrarsForeignKey.add(0,cuentacontablecuentascobrar);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableVentaCredito()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVentaCredito()) {
				CuentaContable cuentacontableventacredito=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableventacredito,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableventacredito.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableventacreditosForeignKey,cuentacontableventacredito,true)) {

					this.cuentacontableventacreditosForeignKey.add(0,cuentacontableventacredito);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableActivoTotal()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableActivoTotal()) {
				CuentaContable cuentacontableactivototal=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableactivototal,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableactivototal.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableactivototalsForeignKey,cuentacontableactivototal,true)) {

					this.cuentacontableactivototalsForeignKey.add(0,cuentacontableactivototal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContablePasivoTotal()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContablePasivoTotal()) {
				CuentaContable cuentacontablepasivototal=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablepasivototal,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablepasivototal.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablepasivototalsForeignKey,cuentacontablepasivototal,true)) {

					this.cuentacontablepasivototalsForeignKey.add(0,cuentacontablepasivototal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContablePatrimonio()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContablePatrimonio()) {
				CuentaContable cuentacontablepatrimonio=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablepatrimonio,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablepatrimonio.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablepatrimoniosForeignKey,cuentacontablepatrimonio,true)) {

					this.cuentacontablepatrimoniosForeignKey.add(0,cuentacontablepatrimonio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContablePatrimonioTotal()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContablePatrimonioTotal()) {
				CuentaContable cuentacontablepatrimoniototal=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablepatrimoniototal,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablepatrimoniototal.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablepatrimoniototalsForeignKey,cuentacontablepatrimoniototal,true)) {

					this.cuentacontablepatrimoniototalsForeignKey.add(0,cuentacontablepatrimoniototal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableVenta()throws Exception {
		try {

			if(!this.parametrograficoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableVenta()) {
				CuentaContable cuentacontableventa=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontableventa,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontableventa.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontableventasForeignKey,cuentacontableventa,true)) {

					this.cuentacontableventasForeignKey.add(0,cuentacontableventa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyParametroGrafico()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyParametroGrafico(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyParametroGrafico()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyParametroGrafico();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyParametroGrafico(ParametroGrafico parametrografico)throws Exception {	
		try {
			
			this.setActualCuentaContableActivoForeignKey(parametrografico.getid_cuenta_contable_activo(),false,"Formulario");
			this.setActualCuentaContablePasivoForeignKey(parametrografico.getid_cuenta_contable_pasivo(),false,"Formulario");
			this.setActualCuentaContableInventarioForeignKey(parametrografico.getid_cuenta_contable_inventario(),false,"Formulario");
			this.setActualCuentaContableDisponibilidadForeignKey(parametrografico.getid_cuenta_contable_disponibilidad(),false,"Formulario");
			this.setActualCuentaContableCostoVentaForeignKey(parametrografico.getid_cuenta_contable_costo_venta(),false,"Formulario");
			this.setActualCuentaContableInventarioIniForeignKey(parametrografico.getid_cuenta_contable_inventario_ini(),false,"Formulario");
			this.setActualCuentaContableInventarioFinForeignKey(parametrografico.getid_cuenta_contable_inventario_fin(),false,"Formulario");
			this.setActualCuentaContableCuentasCobrarForeignKey(parametrografico.getid_cuenta_contable_cuenta_cobrar(),false,"Formulario");
			this.setActualCuentaContableVentaCreditoForeignKey(parametrografico.getid_cuenta_contable_venta_credito(),false,"Formulario");
			this.setActualCuentaContableActivoTotalForeignKey(parametrografico.getid_cuenta_contable_activo_total(),false,"Formulario");
			this.setActualCuentaContablePasivoTotalForeignKey(parametrografico.getid_cuenta_contable_pasivo_total(),false,"Formulario");
			this.setActualCuentaContablePatrimonioForeignKey(parametrografico.getid_cuenta_contable_patrimonio(),false,"Formulario");
			this.setActualCuentaContablePatrimonioTotalForeignKey(parametrografico.getid_cuenta_contable_patrimonio_total(),false,"Formulario");
			this.setActualCuentaContableVentaForeignKey(parametrografico.getid_cuenta_contable_venta(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyParametroGrafico(ParametroGrafico parametrografico,String sTipoEvento)throws Exception {	
		try {
			
			

				if(parametrografico.getCuentaContableActivo()!=null && !sTipoEvento.equals("id_cuenta_contable_activoParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableactivosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableactivosForeignKey.add(parametrografico.getCuentaContableActivo());

					this.addItemDefectoCombosForeignKeyCuentaContableActivo();
					this.cargarCombosFrameCuentaContableActivosForeignKey("Todos");
				}

				if(parametrografico.getCuentaContablePasivo()!=null && !sTipoEvento.equals("id_cuenta_contable_pasivoParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablepasivosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablepasivosForeignKey.add(parametrografico.getCuentaContablePasivo());

					this.addItemDefectoCombosForeignKeyCuentaContablePasivo();
					this.cargarCombosFrameCuentaContablePasivosForeignKey("Todos");
				}

				if(parametrografico.getCuentaContableInventario()!=null && !sTipoEvento.equals("id_cuenta_contable_inventarioParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableinventariosForeignKey.add(parametrografico.getCuentaContableInventario());

					this.addItemDefectoCombosForeignKeyCuentaContableInventario();
					this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
				}

				if(parametrografico.getCuentaContableDisponibilidad()!=null && !sTipoEvento.equals("id_cuenta_contable_disponibilidadParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontabledisponibilidadsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontabledisponibilidadsForeignKey.add(parametrografico.getCuentaContableDisponibilidad());

					this.addItemDefectoCombosForeignKeyCuentaContableDisponibilidad();
					this.cargarCombosFrameCuentaContableDisponibilidadsForeignKey("Todos");
				}

				if(parametrografico.getCuentaContableCostoVenta()!=null && !sTipoEvento.equals("id_cuenta_contable_costo_ventaParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecostoventasForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecostoventasForeignKey.add(parametrografico.getCuentaContableCostoVenta());

					this.addItemDefectoCombosForeignKeyCuentaContableCostoVenta();
					this.cargarCombosFrameCuentaContableCostoVentasForeignKey("Todos");
				}

				if(parametrografico.getCuentaContableInventarioIni()!=null && !sTipoEvento.equals("id_cuenta_contable_inventario_iniParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableinventarioinisForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableinventarioinisForeignKey.add(parametrografico.getCuentaContableInventarioIni());

					this.addItemDefectoCombosForeignKeyCuentaContableInventarioIni();
					this.cargarCombosFrameCuentaContableInventarioInisForeignKey("Todos");
				}

				if(parametrografico.getCuentaContableInventarioFin()!=null && !sTipoEvento.equals("id_cuenta_contable_inventario_finParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableinventariofinsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableinventariofinsForeignKey.add(parametrografico.getCuentaContableInventarioFin());

					this.addItemDefectoCombosForeignKeyCuentaContableInventarioFin();
					this.cargarCombosFrameCuentaContableInventarioFinsForeignKey("Todos");
				}

				if(parametrografico.getCuentaContableCuentasCobrar()!=null && !sTipoEvento.equals("id_cuenta_contable_cuenta_cobrarParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecuentascobrarsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecuentascobrarsForeignKey.add(parametrografico.getCuentaContableCuentasCobrar());

					this.addItemDefectoCombosForeignKeyCuentaContableCuentasCobrar();
					this.cargarCombosFrameCuentaContableCuentasCobrarsForeignKey("Todos");
				}

				if(parametrografico.getCuentaContableVentaCredito()!=null && !sTipoEvento.equals("id_cuenta_contable_venta_creditoParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableventacreditosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableventacreditosForeignKey.add(parametrografico.getCuentaContableVentaCredito());

					this.addItemDefectoCombosForeignKeyCuentaContableVentaCredito();
					this.cargarCombosFrameCuentaContableVentaCreditosForeignKey("Todos");
				}

				if(parametrografico.getCuentaContableActivoTotal()!=null && !sTipoEvento.equals("id_cuenta_contable_activo_totalParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableactivototalsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableactivototalsForeignKey.add(parametrografico.getCuentaContableActivoTotal());

					this.addItemDefectoCombosForeignKeyCuentaContableActivoTotal();
					this.cargarCombosFrameCuentaContableActivoTotalsForeignKey("Todos");
				}

				if(parametrografico.getCuentaContablePasivoTotal()!=null && !sTipoEvento.equals("id_cuenta_contable_pasivo_totalParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablepasivototalsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablepasivototalsForeignKey.add(parametrografico.getCuentaContablePasivoTotal());

					this.addItemDefectoCombosForeignKeyCuentaContablePasivoTotal();
					this.cargarCombosFrameCuentaContablePasivoTotalsForeignKey("Todos");
				}

				if(parametrografico.getCuentaContablePatrimonio()!=null && !sTipoEvento.equals("id_cuenta_contable_patrimonioParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablepatrimoniosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablepatrimoniosForeignKey.add(parametrografico.getCuentaContablePatrimonio());

					this.addItemDefectoCombosForeignKeyCuentaContablePatrimonio();
					this.cargarCombosFrameCuentaContablePatrimoniosForeignKey("Todos");
				}

				if(parametrografico.getCuentaContablePatrimonioTotal()!=null && !sTipoEvento.equals("id_cuenta_contable_patrimonio_totalParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablepatrimoniototalsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablepatrimoniototalsForeignKey.add(parametrografico.getCuentaContablePatrimonioTotal());

					this.addItemDefectoCombosForeignKeyCuentaContablePatrimonioTotal();
					this.cargarCombosFrameCuentaContablePatrimonioTotalsForeignKey("Todos");
				}

				if(parametrografico.getCuentaContableVenta()!=null && !sTipoEvento.equals("id_cuenta_contable_ventaParametroGrafico")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontableventasForeignKey.add(parametrografico.getCuentaContableVenta());

					this.addItemDefectoCombosForeignKeyCuentaContableVenta();
					this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyParametroGrafico()throws Exception {	
		try {
			
			this.setActualCuentaContableActivoForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_activo(),false,"Formulario");
			this.setActualCuentaContablePasivoForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_pasivo(),false,"Formulario");
			this.setActualCuentaContableInventarioForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_inventario(),false,"Formulario");
			this.setActualCuentaContableDisponibilidadForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_disponibilidad(),false,"Formulario");
			this.setActualCuentaContableCostoVentaForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_costo_venta(),false,"Formulario");
			this.setActualCuentaContableInventarioIniForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_inventario_ini(),false,"Formulario");
			this.setActualCuentaContableInventarioFinForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_inventario_fin(),false,"Formulario");
			this.setActualCuentaContableCuentasCobrarForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_cuenta_cobrar(),false,"Formulario");
			this.setActualCuentaContableVentaCreditoForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_venta_credito(),false,"Formulario");
			this.setActualCuentaContableActivoTotalForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_activo_total(),false,"Formulario");
			this.setActualCuentaContablePasivoTotalForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_pasivo_total(),false,"Formulario");
			this.setActualCuentaContablePatrimonioForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_patrimonio(),false,"Formulario");
			this.setActualCuentaContablePatrimonioTotalForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_patrimonio_total(),false,"Formulario");
			this.setActualCuentaContableVentaForeignKey(this.parametrograficoConstantesFunciones.getid_cuenta_contable_venta(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyParametroGrafico()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyParametroGrafico()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyParametroGrafico()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroParametroGrafico()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyParametroGrafico()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableActivosForeignKey("Todos");
			this.cargarCombosFrameCuentaContablePasivosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableDisponibilidadsForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCostoVentasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableInventarioInisForeignKey("Todos");
			this.cargarCombosFrameCuentaContableInventarioFinsForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCuentasCobrarsForeignKey("Todos");
			this.cargarCombosFrameCuentaContableVentaCreditosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableActivoTotalsForeignKey("Todos");
			this.cargarCombosFrameCuentaContablePasivoTotalsForeignKey("Todos");
			this.cargarCombosFrameCuentaContablePatrimoniosForeignKey("Todos");
			this.cargarCombosFrameCuentaContablePatrimonioTotalsForeignKey("Todos");
			this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyParametroGrafico(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableActivosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContablePasivosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableInventariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableDisponibilidadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCostoVentasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableInventarioInisForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableInventarioFinsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCuentasCobrarsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableVentaCreditosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableActivoTotalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContablePasivoTotalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContablePatrimoniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContablePatrimonioTotalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableVentasForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyParametroGrafico()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.getItemCount()>0) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	






























	
	

	public ParametroGraficoBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public ParametroGraficoBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public ParametroGraficoBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.parametrograficoSessionBean=new ParametroGraficoSessionBean(); 
		this.parametrograficoConstantesFunciones=new ParametroGraficoConstantesFunciones(); 
		this.parametrograficoBean=new ParametroGrafico();//(this.parametrograficoConstantesFunciones); 		
		this.parametrograficoReturnGeneral=new ParametroGraficoParameterReturnGeneral(); 
		
		this.parametrograficoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.parametrograficoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public ParametroGraficoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public ParametroGraficoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public ParametroGraficoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessParametroGrafico(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.parametrograficoConstantesFunciones=new ParametroGraficoConstantesFunciones(); 
			this.parametrograficoBean=new ParametroGrafico();//this.parametrograficoConstantesFunciones); 			
			this.parametrograficoReturnGeneral=new ParametroGraficoParameterReturnGeneral(); 
		
			ParametroGraficoBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Parametro Grafico Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.parametrografico=new ParametroGrafico();
			this.parametrograficos = new ArrayList<ParametroGrafico>();
			this.parametrograficosAux = new ArrayList<ParametroGrafico>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic=new ParametroGraficoLogic();
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}
			
			//this.parametrograficoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.parametrograficoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormParametroGrafico);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoParametroGrafico!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoParametroGrafico);	
					}
					
					if(this.jInternalFrameImportacionParametroGrafico!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionParametroGrafico);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByParametroGrafico!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByParametroGrafico);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormParametroGrafico);
				this.jInternalFrameDetalleFormParametroGrafico.setVisible(false);
				this.jInternalFrameDetalleFormParametroGrafico.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoParametroGrafico!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoParametroGrafico);
					this.jInternalFrameReporteDinamicoParametroGrafico.setVisible(false);
					this.jInternalFrameReporteDinamicoParametroGrafico.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionParametroGrafico!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionParametroGrafico);
					this.jInternalFrameImportacionParametroGrafico.setVisible(false);
					this.jInternalFrameImportacionParametroGrafico.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByParametroGrafico!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByParametroGrafico);
					this.jInternalFrameOrderByParametroGrafico.setVisible(false);
					this.jInternalFrameOrderByParametroGrafico.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idParametroGraficoActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=ParametroGraficoConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.parametrograficoReturnGeneral=new ParametroGraficoParameterReturnGeneral();
			
			this.parametrograficoParameterGeneral=new ParametroGraficoParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.parametrograficoLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(ParametroGraficoJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ParametroGraficoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.parametrograficoSessionBean.getEsGuardarRelacionado(),this.parametrograficoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,ParametroGraficoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.parametrograficoSessionBean.getEsGuardarRelacionado(),this.parametrograficoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoParametroGrafico=false;
			this.isVisibilidadCeldaDuplicarParametroGrafico=true;
			this.isVisibilidadCeldaCopiarParametroGrafico=true;
			this.isVisibilidadCeldaVerFormParametroGrafico=true;
			this.isVisibilidadCeldaOrdenParametroGrafico=true;
			this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=false;
			this.isVisibilidadCeldaModificarParametroGrafico=false;
			this.isVisibilidadCeldaActualizarParametroGrafico=false;
			this.isVisibilidadCeldaEliminarParametroGrafico=false;
			this.isVisibilidadCeldaCancelarParametroGrafico=false;
			this.isVisibilidadCeldaGuardarParametroGrafico=false;
			this.isVisibilidadCeldaGuardarCambiosParametroGrafico=false;
			
			
			this.isVisibilidadFK_IdCuentaContableActivo=true;
			this.isVisibilidadFK_IdCuentaContableActivoTotal=true;
			this.isVisibilidadFK_IdCuentaContableCostoVenta=true;
			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=true;
			this.isVisibilidadFK_IdCuentaContableDisponibilad=true;
			this.isVisibilidadFK_IdCuentaContableInventario=true;
			this.isVisibilidadFK_IdCuentaContableInventarioFin=true;
			this.isVisibilidadFK_IdCuentaContableInventarioIni=true;
			this.isVisibilidadFK_IdCuentaContablePasivo=true;
			this.isVisibilidadFK_IdCuentaContablePasivoTotal=true;
			this.isVisibilidadFK_IdCuentaContablePatrimonio=true;
			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=true;
			this.isVisibilidadFK_IdCuentaContableVenta=true;
			this.isVisibilidadFK_IdCuentaContableVentaCredito=true;
			this.isVisibilidadFK_IdEmpresa=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesParametroGrafico("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosParametroGrafico();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioParametroGrafico(false);
			
			this.setPermisosUsuarioParametroGrafico();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.parametrograficoSessionBean.getEsGuardarRelacionado() 
				|| (this.parametrograficoSessionBean.getEsGuardarRelacionado() && this.parametrograficoSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioParametroGraficoClasesRelacionadas();
			}
			
			if(this.parametrograficoSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioParametroGraficoClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosParametroGrafico();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualParametroGrafico();
			}
			
			if(!this.isPermisoBusquedaParametroGrafico) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasParametroGrafico.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.parametrograficoSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioParametroGrafico,this.isPermisoPaginacionMedioParametroGrafico,this.isPermisoPaginacionTodoParametroGrafico);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(ParametroGraficoConstantesFunciones.getTiposSeleccionarParametroGrafico());
				
				this.tiposColumnasSelect=ParametroGraficoConstantesFunciones.getTiposSeleccionarParametroGrafico(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioParametroGrafico();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioParametroGrafico(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioParametroGrafico(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesParametroGrafico() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.cuentacontableactivoLogic=new CuentaContableLogic();
			this.cuentacontablepasivoLogic=new CuentaContableLogic();
			this.cuentacontableinventarioLogic=new CuentaContableLogic();
			this.cuentacontabledisponibilidadLogic=new CuentaContableLogic();
			this.cuentacontablecostoventaLogic=new CuentaContableLogic();
			this.cuentacontableinventarioiniLogic=new CuentaContableLogic();
			this.cuentacontableinventariofinLogic=new CuentaContableLogic();
			this.cuentacontablecuentascobrarLogic=new CuentaContableLogic();
			this.cuentacontableventacreditoLogic=new CuentaContableLogic();
			this.cuentacontableactivototalLogic=new CuentaContableLogic();
			this.cuentacontablepasivototalLogic=new CuentaContableLogic();
			this.cuentacontablepatrimonioLogic=new CuentaContableLogic();
			this.cuentacontablepatrimoniototalLogic=new CuentaContableLogic();
			this.cuentacontableventaLogic=new CuentaContableLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				parametrograficoImplementable= (ParametroGraficoImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ParametroGraficoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				parametrograficoImplementableHome= (ParametroGraficoImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+ParametroGraficoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.parametrograficos= new ArrayList<ParametroGrafico>();
			this.parametrograficosEliminados= new ArrayList<ParametroGrafico>();
						
			this.isEsNuevoParametroGrafico=false;
			this.esParaAccionDesdeFormularioParametroGrafico=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idCuentaContableActivoActual=0L;
			this.idCuentaContablePasivoActual=0L;
			this.idCuentaContableInventarioActual=0L;
			this.idCuentaContableDisponibilidadActual=0L;
			this.idCuentaContableCostoVentaActual=0L;
			this.idCuentaContableInventarioIniActual=0L;
			this.idCuentaContableInventarioFinActual=0L;
			this.idCuentaContableCuentasCobrarActual=0L;
			this.idCuentaContableVentaCreditoActual=0L;
			this.idCuentaContableActivoTotalActual=0L;
			this.idCuentaContablePasivoTotalActual=0L;
			this.idCuentaContablePatrimonioActual=0L;
			this.idCuentaContablePatrimonioTotalActual=0L;
			this.idCuentaContableVentaActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.cuentacontableactivosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablepasivosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontabledisponibilidadsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecostoventasForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableinventarioinisForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableinventariofinsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecuentascobrarsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableventacreditosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableactivototalsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablepasivototalsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablepatrimoniosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablepatrimoniototalsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyParametroGrafico(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroParametroGrafico();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			ParametroGraficoBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=ParametroGraficoConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesParametroGrafico("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingParametroGrafico(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormParametroGrafico!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioParametroGrafico();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioParametroGrafico();
			}
			
			ParametroGraficoBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasParametroGrafico.getTabCount(); i++) {
					this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessParametroGrafico(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga ParametroGrafico: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectParametroGrafico() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesParametroGrafico")) {
				iIndex=this.jInternalFrameDetalleFormParametroGrafico.jTabbedPaneRelacionesParametroGrafico.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormParametroGrafico.jTabbedPaneRelacionesParametroGrafico.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessParametroGrafico();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyParametroGrafico(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyParametroGrafico(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyParametroGrafico(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyParametroGraficoListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyParametroGrafico();
		
		this.cargarCombosFrameForeignKeyParametroGrafico();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyParametroGrafico();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyParametroGrafico();
		}
	}
	
	

	public void cargarCombosForeignKeyCuentaContableActivo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableActivoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableActivo();
				this.cargarCombosFrameCuentaContableActivosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableActivo(this.cuentacontableactivosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContablePasivo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContablePasivoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContablePasivo();
				this.cargarCombosFrameCuentaContablePasivosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContablePasivo(this.cuentacontablepasivosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableInventario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableInventarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableInventario();
				this.cargarCombosFrameCuentaContableInventariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableInventario(this.cuentacontableinventariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDisponibilidad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableDisponibilidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableDisponibilidad();
				this.cargarCombosFrameCuentaContableDisponibilidadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableDisponibilidad(this.cuentacontabledisponibilidadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCostoVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCostoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCostoVenta();
				this.cargarCombosFrameCuentaContableCostoVentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCostoVenta(this.cuentacontablecostoventasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableInventarioIni(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableInventarioIniListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableInventarioIni();
				this.cargarCombosFrameCuentaContableInventarioInisForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableInventarioIni(this.cuentacontableinventarioinisForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableInventarioFin(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableInventarioFinListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableInventarioFin();
				this.cargarCombosFrameCuentaContableInventarioFinsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableInventarioFin(this.cuentacontableinventariofinsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCuentasCobrar(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCuentasCobrarListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCuentasCobrar();
				this.cargarCombosFrameCuentaContableCuentasCobrarsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCuentasCobrar(this.cuentacontablecuentascobrarsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableVentaCredito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableVentaCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableVentaCredito();
				this.cargarCombosFrameCuentaContableVentaCreditosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableVentaCredito(this.cuentacontableventacreditosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableActivoTotal(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableActivoTotalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableActivoTotal();
				this.cargarCombosFrameCuentaContableActivoTotalsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableActivoTotal(this.cuentacontableactivototalsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContablePasivoTotal(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContablePasivoTotalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContablePasivoTotal();
				this.cargarCombosFrameCuentaContablePasivoTotalsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContablePasivoTotal(this.cuentacontablepasivototalsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContablePatrimonio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContablePatrimonioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContablePatrimonio();
				this.cargarCombosFrameCuentaContablePatrimoniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContablePatrimonio(this.cuentacontablepatrimoniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContablePatrimonioTotal(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContablePatrimonioTotalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContablePatrimonioTotal();
				this.cargarCombosFrameCuentaContablePatrimonioTotalsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContablePatrimonioTotal(this.cuentacontablepatrimoniototalsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableVenta();
				this.cargarCombosFrameCuentaContableVentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableVenta(this.cuentacontableventasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoParametroGraficoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.parametrograficoSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormParametroGrafico==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			
			
			if(jTableDatosParametroGrafico.getRowCount()>=1) {
				jTableDatosParametroGrafico.removeRowSelectionInterval(0, jTableDatosParametroGrafico.getRowCount()-1);						
			}
			
			this.isEsNuevoParametroGrafico=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoParametroGrafico(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesParametroGrafico(true);			
			//this.parametrografico=new ParametroGrafico();
			//this.parametrografico.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesParametroGrafico(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroGrafico() ;
			
			if(ParametroGraficoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleParametroGrafico(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.parametrografico);	
			this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);				
			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			
			if(this.parametrograficoSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar ParametroGrafico: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarParametroGraficoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosParametroGrafico.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosParametroGrafico.getSelectedRows().length;			
			}
			
			parametrograficosSeleccionados=this.getParametroGraficosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoParametroGrafico--;			
				//ParametroGrafico parametrograficoAux= new ParametroGrafico();			
				//parametrograficoAux.setId(this.iIdNuevoParametroGrafico);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//ParametroGrafico parametrograficoOrigen=new ParametroGrafico();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(ParametroGrafico parametrograficoOrigen : parametrograficosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							parametrograficoOrigen =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							parametrograficoOrigen =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaParametroGrafico();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.parametrografico.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosParametroGrafico(parametrograficoOrigen,this.parametrografico,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.parametrograficoLogic.getParametroGraficos().add(this.parametrograficoAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.parametrograficos.add(this.parametrograficoAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaParametroGrafico(false);
				
				this.jTableDatosParametroGrafico.setRowSelectionInterval(this.getIndiceNuevoParametroGrafico(), this.getIndiceNuevoParametroGrafico());
				
				int iLastRow =  this.jTableDatosParametroGrafico.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosParametroGrafico.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosParametroGrafico.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaParametroGrafico(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarParametroGraficoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();									
		
			ParametroGrafico parametrograficoOrigen=new ParametroGrafico();
			ParametroGrafico parametrograficoDestino=new ParametroGrafico();
				
			parametrograficosSeleccionados=this.getParametroGraficosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosParametroGrafico.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || parametrograficosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosParametroGrafico.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoOrigen =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						parametrograficoOrigen =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						parametrograficoDestino =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						parametrograficoDestino =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				parametrograficoOrigen =parametrograficosSeleccionados.get(0);
				parametrograficoDestino =parametrograficosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosParametroGrafico(parametrograficoOrigen,parametrograficoDestino,true,false);
				
				parametrograficoDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(parametrograficoDestino,parametrograficoLogic.getParametroGraficos());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(parametrograficoDestino,parametrograficos);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaParametroGrafico(false);
				
				//this.jTableDatosParametroGrafico.setRowSelectionInterval(this.getIndiceNuevoParametroGrafico(), this.getIndiceNuevoParametroGrafico());
				
				int iLastRow =  this.jTableDatosParametroGrafico.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosParametroGrafico.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosParametroGrafico.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaParametroGrafico(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormParametroGraficoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormParametroGrafico==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormParametroGrafico.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarParametroGraficoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesParametroGrafico.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasParametroGrafico.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesParametroGrafico.setVisible(!isVisible);
			this.jPanelPaginacionParametroGrafico.setVisible(!isVisible);
			this.jPanelAccionesParametroGrafico.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarParametroGraficoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameParametroGrafico();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoParametroGraficoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoParametroGrafico();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionParametroGraficoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionParametroGrafico();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByParametroGraficoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByParametroGrafico();
			
			this.abrirFrameOrderByParametroGrafico();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByParametroGraficoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByParametroGrafico();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleParametroGrafico(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormParametroGrafico);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormParametroGrafico.isMaximum()) {
					this.jInternalFrameDetalleFormParametroGrafico.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormParametroGrafico.setSize(this.jInternalFrameDetalleFormParametroGrafico.iWidthFormulario,this.jInternalFrameDetalleFormParametroGrafico.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormParametroGrafico.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormParametroGrafico.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormParametroGrafico.isMaximum()) {
						this.jInternalFrameDetalleFormParametroGrafico.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormParametroGrafico.jContentPaneDetalleParametroGrafico.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormParametroGrafico.jTabbedPaneRelacionesParametroGrafico.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormParametroGrafico.jContentPaneDetalleParametroGrafico.getWidth(),ParametroGraficoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormParametroGrafico.jTabbedPaneRelacionesParametroGrafico.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormParametroGrafico.jContentPaneDetalleParametroGrafico.getWidth(),ParametroGraficoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormParametroGrafico.jTabbedPaneRelacionesParametroGrafico.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormParametroGrafico.jContentPaneDetalleParametroGrafico.getWidth(),ParametroGraficoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormParametroGrafico.setVisible(true);
	        this.jInternalFrameDetalleFormParametroGrafico.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByParametroGrafico() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByParametroGrafico==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByParametroGrafico=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByParametroGrafico,false,this);
				} else {
					this.jInternalFrameOrderByParametroGrafico=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByParametroGrafico,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByParametroGrafico);
				this.jInternalFrameOrderByParametroGrafico.setVisible(false);
				this.jInternalFrameOrderByParametroGrafico.setSelected(false);
				
				this.jInternalFrameOrderByParametroGrafico.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByParametroGrafico"));
				
				this.inicializarActualizarBindingTablaOrderByParametroGrafico();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionParametroGrafico() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionParametroGrafico==null) {
				
				this.jInternalFrameImportacionParametroGrafico=new ImportacionJInternalFrame(ParametroGraficoConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionParametroGrafico);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionParametroGrafico);
				this.jInternalFrameImportacionParametroGrafico.setVisible(false);
				this.jInternalFrameImportacionParametroGrafico.setSelected(false);


				this.jInternalFrameImportacionParametroGrafico.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionParametroGrafico"));
				this.jInternalFrameImportacionParametroGrafico.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionParametroGrafico"));
				this.jInternalFrameImportacionParametroGrafico.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionParametroGrafico"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoParametroGrafico() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoParametroGrafico==null) {
				this.jInternalFrameReporteDinamicoParametroGrafico=new ReporteDinamicoJInternalFrame(ParametroGraficoConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoParametroGrafico);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoParametroGrafico);
				this.jInternalFrameReporteDinamicoParametroGrafico.setVisible(false);
				this.jInternalFrameReporteDinamicoParametroGrafico.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoParametroGrafico.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoParametroGrafico"));
				this.jInternalFrameReporteDinamicoParametroGrafico.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoParametroGrafico"));
				this.jInternalFrameReporteDinamicoParametroGrafico.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoParametroGrafico"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualParametroGrafico();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleParametroGrafico() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormParametroGrafico);
			
	       	this.jInternalFrameDetalleFormParametroGrafico.setVisible(false);
	        this.jInternalFrameDetalleFormParametroGrafico.setSelected(false);
			
			//this.jInternalFrameDetalleFormParametroGrafico.dispose();
			//this.jInternalFrameDetalleFormParametroGrafico=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoParametroGrafico() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoParametroGrafico.setVisible(true);
	        this.jInternalFrameReporteDinamicoParametroGrafico.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionParametroGrafico() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionParametroGrafico.setVisible(true);
	        this.jInternalFrameImportacionParametroGrafico.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByParametroGrafico() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByParametroGrafico.setVisible(true);
	        this.jInternalFrameOrderByParametroGrafico.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByParametroGrafico() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByParametroGrafico.setVisible(false);
	        this.jInternalFrameOrderByParametroGrafico.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoParametroGrafico() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoParametroGrafico.setVisible(false);
	        this.jInternalFrameReporteDinamicoParametroGrafico.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionParametroGrafico() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionParametroGrafico.setVisible(false);
	        this.jInternalFrameImportacionParametroGrafico.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCuentaContableActivo(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableActivo";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContableActivo=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableActivo.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableActivo(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContablePasivo(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContablePasivo";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContablePasivo=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContablePasivo.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContablePasivo(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableInventario(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableInventario";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContableInventario=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableInventario.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableInventario(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableDisponibilidad(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableDisponibilidad";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContableDisponibilidad=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableDisponibilidad.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableDisponibilidad(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCostoVenta(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCostoVenta";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContableCostoVenta=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCostoVenta.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCostoVenta(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableInventarioIni(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableInventarioIni";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContableInventarioIni=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableInventarioIni.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableInventarioIni(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableInventarioFin(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableInventarioFin";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContableInventarioFin=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableInventarioFin.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableInventarioFin(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCuentasCobrar(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCuentasCobrar";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContableCuentasCobrar=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCuentasCobrar.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCuentasCobrar(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableVentaCredito(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableVentaCredito";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContableVentaCredito=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableVentaCredito.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableVentaCredito(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableActivoTotal(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableActivoTotal";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContableActivoTotal=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableActivoTotal.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableActivoTotal(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContablePasivoTotal(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContablePasivoTotal";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContablePasivoTotal=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContablePasivoTotal.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContablePasivoTotal(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContablePatrimonio(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContablePatrimonio";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContablePatrimonio=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContablePatrimonio.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContablePatrimonio(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContablePatrimonioTotal(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContablePatrimonioTotal";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContablePatrimonioTotal=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContablePatrimonioTotal.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContablePatrimonioTotal(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableVenta(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableVenta";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
						TitledBorder titledBorderCuentaContableVenta=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableVenta.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableVenta(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarParametroGraficoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarParametroGrafico(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarParametroGrafico(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesParametroGrafico(true);
			//this.isEsNuevoParametroGrafico=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesParametroGrafico("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesParametroGrafico(false) ;
			
			if(parametrograficoSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(ParametroGraficoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleParametroGrafico(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroGrafico(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaParametroGraficoActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarParametroGrafico(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormParametroGrafico==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesParametroGrafico(true);
			//this.isEsNuevoParametroGrafico=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.parametrografico.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesParametroGrafico("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesParametroGrafico(false) ;
			
			if(ParametroGraficoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleParametroGrafico(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroGrafico(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("CuentaContableActivo")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_activoParametroGrafico) {
					this.cargarCombosCuentaContableActivosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContableActivosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_activo (id);

				this.recargarComboTablaCuentaContableActivo(this.cuentacontableactivosForeignKey);

			}
			
			if(sType.equals("CuentaContablePasivo")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_pasivoParametroGrafico) {
					this.cargarCombosCuentaContablePasivosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContablePasivosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_pasivo (id);

				this.recargarComboTablaCuentaContablePasivo(this.cuentacontablepasivosForeignKey);

			}
			
			if(sType.equals("CuentaContableInventario")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_inventarioParametroGrafico) {
					this.cargarCombosCuentaContableInventariosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario (id);

				this.recargarComboTablaCuentaContableInventario(this.cuentacontableinventariosForeignKey);

			}
			
			if(sType.equals("CuentaContableDisponibilidad")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_disponibilidadParametroGrafico) {
					this.cargarCombosCuentaContableDisponibilidadsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContableDisponibilidadsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_disponibilidad (id);

				this.recargarComboTablaCuentaContableDisponibilidad(this.cuentacontabledisponibilidadsForeignKey);

			}
			
			if(sType.equals("CuentaContableCostoVenta")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_costo_ventaParametroGrafico) {
					this.cargarCombosCuentaContableCostoVentasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContableCostoVentasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo_venta (id);

				this.recargarComboTablaCuentaContableCostoVenta(this.cuentacontablecostoventasForeignKey);

			}
			
			if(sType.equals("CuentaContableInventarioIni")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_inventario_iniParametroGrafico) {
					this.cargarCombosCuentaContableInventarioInisForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContableInventarioInisForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario_ini (id);

				this.recargarComboTablaCuentaContableInventarioIni(this.cuentacontableinventarioinisForeignKey);

			}
			
			if(sType.equals("CuentaContableInventarioFin")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_inventario_finParametroGrafico) {
					this.cargarCombosCuentaContableInventarioFinsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContableInventarioFinsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario_fin (id);

				this.recargarComboTablaCuentaContableInventarioFin(this.cuentacontableinventariofinsForeignKey);

			}
			
			if(sType.equals("CuentaContableCuentasCobrar")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_cuenta_cobrarParametroGrafico) {
					this.cargarCombosCuentaContableCuentasCobrarsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContableCuentasCobrarsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_cuenta_cobrar (id);

				this.recargarComboTablaCuentaContableCuentasCobrar(this.cuentacontablecuentascobrarsForeignKey);

			}
			
			if(sType.equals("CuentaContableVentaCredito")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_venta_creditoParametroGrafico) {
					this.cargarCombosCuentaContableVentaCreditosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContableVentaCreditosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_venta_credito (id);

				this.recargarComboTablaCuentaContableVentaCredito(this.cuentacontableventacreditosForeignKey);

			}
			
			if(sType.equals("CuentaContableActivoTotal")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_activo_totalParametroGrafico) {
					this.cargarCombosCuentaContableActivoTotalsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContableActivoTotalsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_activo_total (id);

				this.recargarComboTablaCuentaContableActivoTotal(this.cuentacontableactivototalsForeignKey);

			}
			
			if(sType.equals("CuentaContablePasivoTotal")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_pasivo_totalParametroGrafico) {
					this.cargarCombosCuentaContablePasivoTotalsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContablePasivoTotalsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_pasivo_total (id);

				this.recargarComboTablaCuentaContablePasivoTotal(this.cuentacontablepasivototalsForeignKey);

			}
			
			if(sType.equals("CuentaContablePatrimonio")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_patrimonioParametroGrafico) {
					this.cargarCombosCuentaContablePatrimoniosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContablePatrimoniosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_patrimonio (id);

				this.recargarComboTablaCuentaContablePatrimonio(this.cuentacontablepatrimoniosForeignKey);

			}
			
			if(sType.equals("CuentaContablePatrimonioTotal")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_patrimonio_totalParametroGrafico) {
					this.cargarCombosCuentaContablePatrimonioTotalsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContablePatrimonioTotalsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_patrimonio_total (id);

				this.recargarComboTablaCuentaContablePatrimonioTotal(this.cuentacontablepatrimoniototalsForeignKey);

			}
			
			if(sType.equals("CuentaContableVenta")) {
				if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_ventaParametroGrafico) {
					this.cargarCombosCuentaContableVentasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingParametroGrafico(false,false);
					this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_venta (id);

				this.recargarComboTablaCuentaContableVenta(this.cuentacontableventasForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
		
	
	public void recargarComboTablaCuentaContableActivo(List<CuentaContable> cuentacontableactivosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableActivo=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO));
		TableCellEditor tableCellEditorCuentaContableActivo =tableColumnCuentaContableActivo.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableActivo;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableactivosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableactivosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContablePasivo(List<CuentaContable> cuentacontablepasivosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContablePasivo=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO));
		TableCellEditor tableCellEditorCuentaContablePasivo =tableColumnCuentaContablePasivo.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContablePasivo;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablepasivosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablepasivosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableInventario(List<CuentaContable> cuentacontableinventariosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableInventario=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO));
		TableCellEditor tableCellEditorCuentaContableInventario =tableColumnCuentaContableInventario.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableInventario;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableinventariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableinventariosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableDisponibilidad(List<CuentaContable> cuentacontabledisponibilidadsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableDisponibilidad=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD));
		TableCellEditor tableCellEditorCuentaContableDisponibilidad =tableColumnCuentaContableDisponibilidad.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableDisponibilidad;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontabledisponibilidadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontabledisponibilidadsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCostoVenta(List<CuentaContable> cuentacontablecostoventasForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCostoVenta=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA));
		TableCellEditor tableCellEditorCuentaContableCostoVenta =tableColumnCuentaContableCostoVenta.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCostoVenta;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecostoventasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecostoventasForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableInventarioIni(List<CuentaContable> cuentacontableinventarioinisForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableInventarioIni=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI));
		TableCellEditor tableCellEditorCuentaContableInventarioIni =tableColumnCuentaContableInventarioIni.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableInventarioIni;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableinventarioinisForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableinventarioinisForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableInventarioFin(List<CuentaContable> cuentacontableinventariofinsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableInventarioFin=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN));
		TableCellEditor tableCellEditorCuentaContableInventarioFin =tableColumnCuentaContableInventarioFin.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableInventarioFin;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableinventariofinsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableinventariofinsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCuentasCobrar(List<CuentaContable> cuentacontablecuentascobrarsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCuentasCobrar=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR));
		TableCellEditor tableCellEditorCuentaContableCuentasCobrar =tableColumnCuentaContableCuentasCobrar.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCuentasCobrar;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecuentascobrarsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecuentascobrarsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableVentaCredito(List<CuentaContable> cuentacontableventacreditosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableVentaCredito=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO));
		TableCellEditor tableCellEditorCuentaContableVentaCredito =tableColumnCuentaContableVentaCredito.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableVentaCredito;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableventacreditosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableventacreditosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableActivoTotal(List<CuentaContable> cuentacontableactivototalsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableActivoTotal=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL));
		TableCellEditor tableCellEditorCuentaContableActivoTotal =tableColumnCuentaContableActivoTotal.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableActivoTotal;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableactivototalsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableactivototalsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContablePasivoTotal(List<CuentaContable> cuentacontablepasivototalsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContablePasivoTotal=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL));
		TableCellEditor tableCellEditorCuentaContablePasivoTotal =tableColumnCuentaContablePasivoTotal.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContablePasivoTotal;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablepasivototalsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablepasivototalsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContablePatrimonio(List<CuentaContable> cuentacontablepatrimoniosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContablePatrimonio=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO));
		TableCellEditor tableCellEditorCuentaContablePatrimonio =tableColumnCuentaContablePatrimonio.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContablePatrimonio;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablepatrimoniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablepatrimoniosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContablePatrimonioTotal(List<CuentaContable> cuentacontablepatrimoniototalsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContablePatrimonioTotal=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL));
		TableCellEditor tableCellEditorCuentaContablePatrimonioTotal =tableColumnCuentaContablePatrimonioTotal.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContablePatrimonioTotal;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablepatrimoniototalsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablepatrimoniototalsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableVenta(List<CuentaContable> cuentacontableventasForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableVenta=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA));
		TableCellEditor tableCellEditorCuentaContableVenta =tableColumnCuentaContableVenta.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableVenta;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontableventasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontableventasForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_activo (Long id) throws Exception {
		this.setActualCuentaContableActivoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_pasivo (Long id) throws Exception {
		this.setActualCuentaContablePasivoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario (Long id) throws Exception {
		this.setActualCuentaContableInventarioForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_disponibilidad (Long id) throws Exception {
		this.setActualCuentaContableDisponibilidadForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_costo_venta (Long id) throws Exception {
		this.setActualCuentaContableCostoVentaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario_ini (Long id) throws Exception {
		this.setActualCuentaContableInventarioIniForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario_fin (Long id) throws Exception {
		this.setActualCuentaContableInventarioFinForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_cuenta_cobrar (Long id) throws Exception {
		this.setActualCuentaContableCuentasCobrarForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_venta_credito (Long id) throws Exception {
		this.setActualCuentaContableVentaCreditoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_activo_total (Long id) throws Exception {
		this.setActualCuentaContableActivoTotalForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_pasivo_total (Long id) throws Exception {
		this.setActualCuentaContablePasivoTotalForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_patrimonio (Long id) throws Exception {
		this.setActualCuentaContablePatrimonioForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_patrimonio_total (Long id) throws Exception {
		this.setActualCuentaContablePatrimonioTotalForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_venta (Long id) throws Exception {
		this.setActualCuentaContableVentaForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarParametroGraficoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesParametroGrafico(false);
			
			//if(!this.isEsNuevoParametroGrafico) {								
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				
			}
			
			if(this.permiteMantenimiento(this.parametrografico)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoParametroGrafico=true;
					this.inicializarActualizarBindingTablaParametroGrafico(false);
					this.isEsNuevoParametroGrafico=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoParametroGrafico=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoParametroGrafico=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesParametroGrafico(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualParametroGrafico(false);
				
				this.habilitarDeshabilitarControlesParametroGrafico(false);
			
												
				
				if(ParametroGraficoJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleParametroGrafico();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoParametroGraficoActionPerformed(evt,parametrograficoSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualParametroGrafico(this.parametrografico,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,parametrograficoSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.parametrografico.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(ParametroGrafico.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroGrafico.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarParametroGraficoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				this.parametrografico.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				this.parametrografico.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.parametrografico)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((ParametroGraficoModel) this.jTableDatosParametroGrafico.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoParametroGrafico=true;
				this.inicializarActualizarBindingTablaParametroGrafico(false);
				this.isEsNuevoParametroGrafico=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesParametroGrafico(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualParametroGrafico(false);
				
				this.habilitarDeshabilitarControlesParametroGrafico(false);
				
				
				
				if(ParametroGraficoJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleParametroGrafico();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarParametroGraficoActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosParametroGrafico.getRowCount()>=1) {
				jTableDatosParametroGrafico.removeRowSelectionInterval(0, jTableDatosParametroGrafico.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesParametroGrafico(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaParametroGrafico(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesParametroGrafico(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualParametroGrafico(false) ;
			
			this.isEsNuevoParametroGrafico=false;
			
			if(ParametroGraficoJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleParametroGrafico();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosParametroGraficoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingParametroGrafico(false);
				
				//SI ES MANUAL
				if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualParametroGrafico();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosParametroGraficoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoParametroGrafico--;			
			//ParametroGrafico parametrograficoAux= new ParametroGrafico();			
			//parametrograficoAux.setId(this.iIdNuevoParametroGrafico);
			
			if(this.jInternalFrameDetalleFormParametroGrafico==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaParametroGrafico();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
			
			this.parametrografico.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.parametrograficoLogic.getParametroGraficos().add(this.parametrograficoAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.parametrograficos.add(this.parametrograficoAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaParametroGrafico(false);
			
			this.jTableDatosParametroGrafico.setRowSelectionInterval(this.getIndiceNuevoParametroGrafico(), this.getIndiceNuevoParametroGrafico());
			
			int iLastRow =  this.jTableDatosParametroGrafico.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosParametroGrafico.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosParametroGrafico.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaParametroGrafico(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionParametroGraficoActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametroGrafico(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroGrafico(false);
			
			//SI ES MANUAL
			if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualParametroGrafico();
			}
			
			//this.abrirFrameTreeParametroGrafico();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionParametroGraficoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Parametro GraficoS ?", "MANTENIMIENTO DE Parametro Grafico", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionParametroGrafico.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralParametroGrafico();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.parametrograficoReturnGeneral=parametrograficoLogic.procesarImportacionParametroGraficosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.parametrograficoParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarParametroGraficoReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionParametroGraficoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionParametroGrafico.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionParametroGrafico.setFileImportacion(this.jInternalFrameImportacionParametroGrafico.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionParametroGrafico.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionParametroGrafico.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionParametroGrafico.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionParametroGrafico.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoParametroGraficoActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();		

		parametrograficosSeleccionados=this.getParametroGraficosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("ParametroGraficoBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"ParametroGraficoBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteParametroGraficos("Todos",parametrograficosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrograficoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Grafico",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ParametroGraficoConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableActivo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableActivo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableActivo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableActivo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContablePasivo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContablePasivo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContablePasivo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContablePasivo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableInventario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableInventario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableInventario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableInventario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableDisponibilidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableDisponibilidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableDisponibilidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableDisponibilidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCostoVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCostoVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCostoVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCostoVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableInventarioIni_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableInventarioIni_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableInventarioIni_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableInventarioIni_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableInventarioFin_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableInventarioFin_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableInventarioFin_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableInventarioFin_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCuentasCobrar_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCuentasCobrar_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCuentasCobrar_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCuentasCobrar_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableVentaCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableVentaCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableVentaCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableVentaCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableActivoTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableActivoTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableActivoTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableActivoTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContablePasivoTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContablePasivoTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContablePasivoTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContablePasivoTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContablePatrimonio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContablePatrimonio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContablePatrimonio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContablePatrimonio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContablePatrimonioTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContablePatrimonioTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContablePatrimonioTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContablePatrimonioTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ventarioInicial_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ventarioInicial_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ventarioInicial_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ventarioInicial_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoParametroGrafico.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case ParametroGraficoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO:
					sNombreCampoCategoria="id_cuenta_contable_activo";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO:
					sNombreCampoCategoria="id_cuenta_contable_pasivo";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					sNombreCampoCategoria="id_cuenta_contable_inventario";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD:
					sNombreCampoCategoria="id_cuenta_contable_disponibilidad";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA:
					sNombreCampoCategoria="id_cuenta_contable_costo_venta";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI:
					sNombreCampoCategoria="id_cuenta_contable_inventario_ini";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN:
					sNombreCampoCategoria="id_cuenta_contable_inventario_fin";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR:
					sNombreCampoCategoria="id_cuenta_contable_cuenta_cobrar";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO:
					sNombreCampoCategoria="id_cuenta_contable_venta_credito";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL:
					sNombreCampoCategoria="id_cuenta_contable_activo_total";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL:
					sNombreCampoCategoria="id_cuenta_contable_pasivo_total";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO:
					sNombreCampoCategoria="id_cuenta_contable_patrimonio";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL:
					sNombreCampoCategoria="id_cuenta_contable_patrimonio_total";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					sNombreCampoCategoria="id_cuenta_contable_venta";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL:
					sNombreCampoCategoria="inventario_inicial";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case ParametroGraficoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO:
					sNombreCampoCategoriaValor="id_cuenta_contable_activo";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO:
					sNombreCampoCategoriaValor="id_cuenta_contable_pasivo";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					sNombreCampoCategoriaValor="id_cuenta_contable_inventario";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD:
					sNombreCampoCategoriaValor="id_cuenta_contable_disponibilidad";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA:
					sNombreCampoCategoriaValor="id_cuenta_contable_costo_venta";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI:
					sNombreCampoCategoriaValor="id_cuenta_contable_inventario_ini";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN:
					sNombreCampoCategoriaValor="id_cuenta_contable_inventario_fin";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR:
					sNombreCampoCategoriaValor="id_cuenta_contable_cuenta_cobrar";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO:
					sNombreCampoCategoriaValor="id_cuenta_contable_venta_credito";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL:
					sNombreCampoCategoriaValor="id_cuenta_contable_activo_total";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL:
					sNombreCampoCategoriaValor="id_cuenta_contable_pasivo_total";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO:
					sNombreCampoCategoriaValor="id_cuenta_contable_patrimonio";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL:
					sNombreCampoCategoriaValor="id_cuenta_contable_patrimonio_total";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					sNombreCampoCategoriaValor="id_cuenta_contable_venta";
					break;

				case ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL:
					sNombreCampoCategoriaValor="inventario_inicial";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case ParametroGraficoConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Activo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_activo");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Pasivo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_pasivo");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Inventario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_inventario");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Disponibilad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_disponibilidad");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Costo Venta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_costo_venta");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Inventario Ini",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_inventario_ini");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Inventario Fin",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_inventario_fin");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Cuentas Cobrar",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_cuenta_cobrar");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Venta Credito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_venta_credito");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Activo Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_activo_total");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Pasivo Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_pasivo_total");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Patrimonio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_patrimonio");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Patrimonio Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_patrimonio_total");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta C. Venta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_venta");
					break;

				case ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Inventario Inicial",sNombreCampoCategoria,sNombreCampoCategoriaValor,"inventario_inicial");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoParametroGraficoActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();		
		
		parametrograficosSeleccionados=this.getParametroGraficosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrografico";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("ParametroGraficos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case ParametroGraficoConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontableactivo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontablepasivo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontableinventario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontabledisponibilidad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontablecostoventa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontableinventarioini_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontableinventariofin_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontablecuentascobrar_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontableventacredito_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontableactivototal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontablepasivototal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontablepatrimonio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontablepatrimoniototal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getcuentacontableventa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL);
					iRow++;

					for(ParametroGrafico parametrografico:parametrograficosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(parametrografico.getinventario_inicial());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelParametroGrafico(row);				
			//	iRow++;
			//}				
			
			//for(ParametroGrafico parametrograficoAux:parametrograficosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelParametroGrafico(parametrograficoAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrograficoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Grafico",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroGrafico(false);
			
			//SI ES MANUAL
			if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualParametroGrafico();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresParametroGraficoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroGrafico(false);
			
			//SI ES MANUAL
			if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualParametroGrafico();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesParametroGraficoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingParametroGrafico(false);
			
			//SI ES MANUAL
			if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualParametroGrafico();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaParametroGrafico() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosParametroGrafico.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosParametroGrafico.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosParametroGrafico.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosParametroGrafico.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosParametroGrafico.setMinimumSize(dimensionMinimum);
		this.jTableDatosParametroGrafico.setMaximumSize(dimensionMaximum);
		this.jTableDatosParametroGrafico.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingParametroGrafico(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingParametroGrafico(esInicializar,true);
	}
	
	public void inicializarActualizarBindingParametroGrafico(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaParametroGrafico(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesParametroGrafico(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasParametroGrafico(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesParametroGrafico(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesParametroGrafico(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !ParametroGraficoJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualParametroGrafico() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaParametroGrafico();
		
		this.inicializarActualizarBindingBotonesManualParametroGrafico(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualParametroGrafico();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesParametroGrafico() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualParametroGrafico(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualParametroGrafico(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosParametroGrafico.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosParametroGrafico.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteParametroGrafico.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormParametroGrafico.jCheckBoxPostAccionNuevoParametroGrafico.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormParametroGrafico.jCheckBoxPostAccionSinCerrarParametroGrafico.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormParametroGrafico.jCheckBoxPostAccionSinMensajeParametroGrafico.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosParametroGrafico.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosParametroGrafico.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteParametroGrafico.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
				this.jInternalFrameDetalleFormParametroGrafico.jCheckBoxPostAccionNuevoParametroGrafico.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormParametroGrafico.jCheckBoxPostAccionSinCerrarParametroGrafico.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormParametroGrafico.jCheckBoxPostAccionSinMensajeParametroGrafico.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionParametroGrafico.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionParametroGrafico.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesParametroGrafico.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoParametroGrafico!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesParametroGrafico.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesParametroGrafico.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarParametroGrafico.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesParametroGrafico.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoParametroGrafico!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesParametroGrafico.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralParametroGrafico.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesParametroGrafico(Boolean esInicializar) throws Exception {
		try	{	
			if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualParametroGrafico(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesParametroGrafico() throws Exception {
		try	{
			if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualParametroGrafico();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleParametroGrafico() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualParametroGrafico() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesParametroGrafico.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesParametroGrafico.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesParametroGrafico.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesParametroGrafico.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesParametroGrafico.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesParametroGrafico.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionParametroGrafico.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionParametroGrafico.addItem(reporte);
			}
			
			
			if(!this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionParametroGrafico.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionParametroGrafico.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesParametroGrafico.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesParametroGrafico.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesParametroGrafico.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesParametroGrafico.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarParametroGrafico.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarParametroGrafico.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarParametroGrafico.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualParametroGrafico();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualParametroGrafico() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoParametroGrafico!=null) {
				this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoParametroGrafico!=null) {
				this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoParametroGrafico!=null) {
				
				if(this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoParametroGrafico.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoParametroGrafico.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoParametroGrafico.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=ParametroGraficoConstantesFunciones.getTiposSeleccionarParametroGrafico(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=ParametroGraficoConstantesFunciones.getTiposSeleccionarParametroGrafico(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=ParametroGraficoConstantesFunciones.getTiposSeleccionarParametroGrafico(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoParametroGrafico.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoParametroGrafico.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualParametroGrafico()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_cuenta_contable_activoFK_IdCuentaContableActivoParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_activoFK_IdCuentaContableActivo=((CuentaContable)this.jComboBoxid_cuenta_contable_activoFK_IdCuentaContableActivoParametroGrafico.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotalParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal=((CuentaContable)this.jComboBoxid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotalParametroGrafico.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVentaParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta=((CuentaContable)this.jComboBoxid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVentaParametroGrafico.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrarParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar=((CuentaContable)this.jComboBoxid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrarParametroGrafico.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibiladParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad=((CuentaContable)this.jComboBoxid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibiladParametroGrafico.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_inventarioFK_IdCuentaContableInventario=((CuentaContable)this.jComboBoxid_cuenta_contable_inventarioFK_IdCuentaContableInventarioParametroGrafico.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFinParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin=((CuentaContable)this.jComboBoxid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFinParametroGrafico.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIniParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni=((CuentaContable)this.jComboBoxid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIniParametroGrafico.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_pasivoFK_IdCuentaContablePasivoParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_pasivoFK_IdCuentaContablePasivo=((CuentaContable)this.jComboBoxid_cuenta_contable_pasivoFK_IdCuentaContablePasivoParametroGrafico.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotalParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal=((CuentaContable)this.jComboBoxid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotalParametroGrafico.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonioParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio=((CuentaContable)this.jComboBoxid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonioParametroGrafico.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotalParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal=((CuentaContable)this.jComboBoxid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotalParametroGrafico.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_ventaFK_IdCuentaContableVenta=((CuentaContable)this.jComboBoxid_cuenta_contable_ventaFK_IdCuentaContableVentaParametroGrafico.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCreditoParametroGrafico.getSelectedItem()!=null){this.id_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito=((CuentaContable)this.jComboBoxid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCreditoParametroGrafico.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasParametroGrafico(Boolean esInicializar) throws Exception {				
		if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualParametroGrafico();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaParametroGrafico() throws Exception {
		this.inicializarActualizarBindingTablaParametroGrafico(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByParametroGrafico() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByParametroGrafico.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByParametroGrafico.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByParametroGrafico.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByParametroGrafico.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByParametroGrafico.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosParametroGraficoOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGraficoOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByParametroGrafico.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByParametroGrafico.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByParametroGrafico.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaParametroGrafico(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=parametrograficoLogic.getParametroGraficos().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=parametrograficos.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosParametroGrafico.setModel(new ParametroGraficoModel(this.parametrograficoLogic.getParametroGraficos(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosParametroGrafico.setModel(new ParametroGraficoModel(this.parametrograficos,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByParametroGrafico!=null && this.jInternalFrameOrderByParametroGrafico.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByParametroGrafico();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+ParametroGraficoConstantesFunciones.SCLASSWEBTITULO,parametrograficoConstantesFunciones.resaltarSeleccionarParametroGrafico,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+ParametroGraficoConstantesFunciones.SCLASSWEBTITULO,parametrograficoConstantesFunciones.resaltarSeleccionarParametroGrafico,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_ID));

		if(this.parametrograficoConstantesFunciones.mostraridParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametrograficoConstantesFunciones.resaltaridParametroGrafico,this.parametrograficoConstantesFunciones.activaridParametroGrafico,iSizeTabla,this,true,"idParametroGrafico","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametrograficoConstantesFunciones.resaltaridParametroGrafico,this.parametrograficoConstantesFunciones.activaridParametroGrafico,this,true,"idParametroGrafico","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDEMPRESA));

		if(this.parametrograficoConstantesFunciones.mostrarid_empresaParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.parametrograficoConstantesFunciones.resaltarid_empresaParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_empresaParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.parametrograficoConstantesFunciones.resaltarid_empresaParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_empresaParametroGrafico,false,"id_empresaParametroGrafico","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_activoParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableactivosForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_activoParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_activoParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableactivosForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_activoParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_activoParametroGrafico,true,"id_cuenta_contable_activoParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_pasivoParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablepasivosForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_pasivoParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_pasivoParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablepasivosForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_pasivoParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_pasivoParametroGrafico,true,"id_cuenta_contable_pasivoParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_inventarioParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableinventariosForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_inventarioParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventarioParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableinventariosForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_inventarioParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventarioParametroGrafico,true,"id_cuenta_contable_inventarioParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_disponibilidadParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontabledisponibilidadsForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_disponibilidadParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_disponibilidadParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontabledisponibilidadsForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_disponibilidadParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_disponibilidadParametroGrafico,true,"id_cuenta_contable_disponibilidadParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_costo_ventaParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecostoventasForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_costo_ventaParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_costo_ventaParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecostoventasForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_costo_ventaParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_costo_ventaParametroGrafico,true,"id_cuenta_contable_costo_ventaParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_inventario_iniParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableinventarioinisForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_inventario_iniParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventario_iniParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableinventarioinisForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_inventario_iniParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventario_iniParametroGrafico,true,"id_cuenta_contable_inventario_iniParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_inventario_finParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableinventariofinsForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_inventario_finParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventario_finParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableinventariofinsForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_inventario_finParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventario_finParametroGrafico,true,"id_cuenta_contable_inventario_finParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_cuenta_cobrarParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecuentascobrarsForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_cuenta_cobrarParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_cuenta_cobrarParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecuentascobrarsForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_cuenta_cobrarParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_cuenta_cobrarParametroGrafico,true,"id_cuenta_contable_cuenta_cobrarParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_venta_creditoParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableventacreditosForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_venta_creditoParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_venta_creditoParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableventacreditosForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_venta_creditoParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_venta_creditoParametroGrafico,true,"id_cuenta_contable_venta_creditoParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_activo_totalParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableactivototalsForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_activo_totalParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_activo_totalParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableactivototalsForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_activo_totalParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_activo_totalParametroGrafico,true,"id_cuenta_contable_activo_totalParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_pasivo_totalParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablepasivototalsForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_pasivo_totalParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_pasivo_totalParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablepasivototalsForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_pasivo_totalParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_pasivo_totalParametroGrafico,true,"id_cuenta_contable_pasivo_totalParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_patrimonioParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablepatrimoniosForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_patrimonioParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_patrimonioParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablepatrimoniosForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_patrimonioParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_patrimonioParametroGrafico,true,"id_cuenta_contable_patrimonioParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_patrimonio_totalParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablepatrimoniototalsForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_patrimonio_totalParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_patrimonio_totalParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablepatrimoniototalsForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_patrimonio_totalParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_patrimonio_totalParametroGrafico,true,"id_cuenta_contable_patrimonio_totalParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA));

		if(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_ventaParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontableventasForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_ventaParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_ventaParametroGrafico,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontableventasForeignKey,this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_ventaParametroGrafico,this,this.parametrograficoConstantesFunciones.activarid_cuenta_contable_ventaParametroGrafico,true,"id_cuenta_contable_ventaParametroGrafico","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL));

		if(this.parametrograficoConstantesFunciones.mostrarinventario_inicialParametroGrafico && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.parametrograficoConstantesFunciones.resaltarinventario_inicialParametroGrafico,this.parametrograficoConstantesFunciones.activarinventario_inicialParametroGrafico,iSizeTabla,this,true,"inventario_inicialParametroGrafico","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.parametrograficoConstantesFunciones.resaltarinventario_inicialParametroGrafico,this.parametrograficoConstantesFunciones.activarinventario_inicialParametroGrafico,this,true,"inventario_inicialParametroGrafico","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new ParametroGraficoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.parametrograficoSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.parametrograficoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.parametrograficoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosParametroGrafico.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.parametrograficoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.parametrograficoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosParametroGrafico.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarParametroGrafico && this.isPermisoGuardarCambiosParametroGrafico) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.parametrograficoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.parametrograficoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosParametroGrafico.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosParametroGrafico.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarParametroGrafico && this.isPermisoGuardarCambiosParametroGrafico) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarParametroGrafico && this.isPermisoGuardarCambiosParametroGrafico) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosParametroGrafico.moveColumn(this.jTableDatosParametroGrafico.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosParametroGrafico.moveColumn(this.jTableDatosParametroGrafico.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosParametroGrafico.moveColumn(this.jTableDatosParametroGrafico.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosParametroGrafico.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosParametroGrafico.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosParametroGrafico,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosParametroGrafico.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosParametroGrafico.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!ParametroGraficoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosParametroGrafico.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosParametroGrafico.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosParametroGrafico.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=parametrograficoLogic.getParametroGraficos().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=parametrograficos.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosParametroGrafico.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosParametroGrafico.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosParametroGrafico();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoParametroGrafico=false;
					
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			
				if(this.parametrograficoSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormParametroGrafico==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosParametroGrafico.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.parametrografico.getsType().equals("DUPLICADO")
				   || this.parametrografico.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoParametroGrafico=true;
				
				} else {
					this.isEsNuevoParametroGrafico=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
					if(this.parametrografico.getId()>=0 && !this.parametrografico.getIsNew()) {						
						this.isEsNuevoParametroGrafico=false;
						
					} else {
						this.isEsNuevoParametroGrafico=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoParametroGrafico(esRelaciones);						
				
				this.seleccionarParametroGrafico(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.parametrografico.getId()<0) {
					this.isEsNuevoParametroGrafico=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarParametroGrafico(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarParametroGrafico(evt,rowIndex);
				}	
				
				if(this.parametrograficoSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion ParametroGrafico: " + this.dDif); 
					}
				}								
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarParametroGrafico(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.parametrografico)) {
					if(this.parametrografico.getId()>0) {
						this.parametrografico.setIsDeleted(true);
						
						this.parametrograficosEliminados.add(this.parametrografico);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.parametrograficoLogic.getParametroGraficos().remove(this.parametrografico);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.parametrograficos.remove(this.parametrografico);				
					}
					
					
					((ParametroGraficoModel) this.jTableDatosParametroGrafico.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaParametroGrafico(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarParametroGrafico(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoParametroGrafico) {
			
			if(this.jInternalFrameDetalleFormParametroGrafico==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosParametroGrafico.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosParametroGrafico.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioParametroGrafico(this.parametrografico);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.parametrograficoConstantesFunciones.cargarid_empresaParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_empresaParametroGrafico) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.parametrografico.getid_empresa());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(parametrografico.getEmpresa()!=null) {
							this.empresasForeignKey.add(parametrografico.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.parametrografico.getid_empresa(),false,"Formulario");

					//CuentaContableActivo
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_activoParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_activoParametroGrafico) {
						//this.cargarCombosCuentaContableActivosForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_activo());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontableactivosForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContableActivo()!=null) {
							this.cuentacontableactivosForeignKey.add(parametrografico.getCuentaContableActivo());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableActivo();
						this.cargarCombosFrameCuentaContableActivosForeignKey("Todos");
					}
					this.setActualCuentaContableActivoForeignKey(this.parametrografico.getid_cuenta_contable_activo(),false,"Formulario");

					//CuentaContablePasivo
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_pasivoParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_pasivoParametroGrafico) {
						//this.cargarCombosCuentaContablePasivosForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_pasivo());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontablepasivosForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContablePasivo()!=null) {
							this.cuentacontablepasivosForeignKey.add(parametrografico.getCuentaContablePasivo());
						}

						this.addItemDefectoCombosForeignKeyCuentaContablePasivo();
						this.cargarCombosFrameCuentaContablePasivosForeignKey("Todos");
					}
					this.setActualCuentaContablePasivoForeignKey(this.parametrografico.getid_cuenta_contable_pasivo(),false,"Formulario");

					//CuentaContableInventario
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_inventarioParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_inventarioParametroGrafico) {
						//this.cargarCombosCuentaContableInventariosForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_inventario());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontableinventariosForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContableInventario()!=null) {
							this.cuentacontableinventariosForeignKey.add(parametrografico.getCuentaContableInventario());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableInventario();
						this.cargarCombosFrameCuentaContableInventariosForeignKey("Todos");
					}
					this.setActualCuentaContableInventarioForeignKey(this.parametrografico.getid_cuenta_contable_inventario(),false,"Formulario");

					//CuentaContableDisponibilidad
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_disponibilidadParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_disponibilidadParametroGrafico) {
						//this.cargarCombosCuentaContableDisponibilidadsForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_disponibilidad());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontabledisponibilidadsForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContableDisponibilidad()!=null) {
							this.cuentacontabledisponibilidadsForeignKey.add(parametrografico.getCuentaContableDisponibilidad());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableDisponibilidad();
						this.cargarCombosFrameCuentaContableDisponibilidadsForeignKey("Todos");
					}
					this.setActualCuentaContableDisponibilidadForeignKey(this.parametrografico.getid_cuenta_contable_disponibilidad(),false,"Formulario");

					//CuentaContableCostoVenta
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_costo_ventaParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_costo_ventaParametroGrafico) {
						//this.cargarCombosCuentaContableCostoVentasForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_costo_venta());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontablecostoventasForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContableCostoVenta()!=null) {
							this.cuentacontablecostoventasForeignKey.add(parametrografico.getCuentaContableCostoVenta());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCostoVenta();
						this.cargarCombosFrameCuentaContableCostoVentasForeignKey("Todos");
					}
					this.setActualCuentaContableCostoVentaForeignKey(this.parametrografico.getid_cuenta_contable_costo_venta(),false,"Formulario");

					//CuentaContableInventarioIni
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_inventario_iniParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_inventario_iniParametroGrafico) {
						//this.cargarCombosCuentaContableInventarioInisForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_inventario_ini());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontableinventarioinisForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContableInventarioIni()!=null) {
							this.cuentacontableinventarioinisForeignKey.add(parametrografico.getCuentaContableInventarioIni());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableInventarioIni();
						this.cargarCombosFrameCuentaContableInventarioInisForeignKey("Todos");
					}
					this.setActualCuentaContableInventarioIniForeignKey(this.parametrografico.getid_cuenta_contable_inventario_ini(),false,"Formulario");

					//CuentaContableInventarioFin
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_inventario_finParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_inventario_finParametroGrafico) {
						//this.cargarCombosCuentaContableInventarioFinsForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_inventario_fin());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontableinventariofinsForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContableInventarioFin()!=null) {
							this.cuentacontableinventariofinsForeignKey.add(parametrografico.getCuentaContableInventarioFin());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableInventarioFin();
						this.cargarCombosFrameCuentaContableInventarioFinsForeignKey("Todos");
					}
					this.setActualCuentaContableInventarioFinForeignKey(this.parametrografico.getid_cuenta_contable_inventario_fin(),false,"Formulario");

					//CuentaContableCuentasCobrar
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_cuenta_cobrarParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_cuenta_cobrarParametroGrafico) {
						//this.cargarCombosCuentaContableCuentasCobrarsForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_cuenta_cobrar());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontablecuentascobrarsForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContableCuentasCobrar()!=null) {
							this.cuentacontablecuentascobrarsForeignKey.add(parametrografico.getCuentaContableCuentasCobrar());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCuentasCobrar();
						this.cargarCombosFrameCuentaContableCuentasCobrarsForeignKey("Todos");
					}
					this.setActualCuentaContableCuentasCobrarForeignKey(this.parametrografico.getid_cuenta_contable_cuenta_cobrar(),false,"Formulario");

					//CuentaContableVentaCredito
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_venta_creditoParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_venta_creditoParametroGrafico) {
						//this.cargarCombosCuentaContableVentaCreditosForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_venta_credito());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontableventacreditosForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContableVentaCredito()!=null) {
							this.cuentacontableventacreditosForeignKey.add(parametrografico.getCuentaContableVentaCredito());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableVentaCredito();
						this.cargarCombosFrameCuentaContableVentaCreditosForeignKey("Todos");
					}
					this.setActualCuentaContableVentaCreditoForeignKey(this.parametrografico.getid_cuenta_contable_venta_credito(),false,"Formulario");

					//CuentaContableActivoTotal
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_activo_totalParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_activo_totalParametroGrafico) {
						//this.cargarCombosCuentaContableActivoTotalsForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_activo_total());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontableactivototalsForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContableActivoTotal()!=null) {
							this.cuentacontableactivototalsForeignKey.add(parametrografico.getCuentaContableActivoTotal());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableActivoTotal();
						this.cargarCombosFrameCuentaContableActivoTotalsForeignKey("Todos");
					}
					this.setActualCuentaContableActivoTotalForeignKey(this.parametrografico.getid_cuenta_contable_activo_total(),false,"Formulario");

					//CuentaContablePasivoTotal
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_pasivo_totalParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_pasivo_totalParametroGrafico) {
						//this.cargarCombosCuentaContablePasivoTotalsForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_pasivo_total());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontablepasivototalsForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContablePasivoTotal()!=null) {
							this.cuentacontablepasivototalsForeignKey.add(parametrografico.getCuentaContablePasivoTotal());
						}

						this.addItemDefectoCombosForeignKeyCuentaContablePasivoTotal();
						this.cargarCombosFrameCuentaContablePasivoTotalsForeignKey("Todos");
					}
					this.setActualCuentaContablePasivoTotalForeignKey(this.parametrografico.getid_cuenta_contable_pasivo_total(),false,"Formulario");

					//CuentaContablePatrimonio
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_patrimonioParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_patrimonioParametroGrafico) {
						//this.cargarCombosCuentaContablePatrimoniosForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_patrimonio());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontablepatrimoniosForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContablePatrimonio()!=null) {
							this.cuentacontablepatrimoniosForeignKey.add(parametrografico.getCuentaContablePatrimonio());
						}

						this.addItemDefectoCombosForeignKeyCuentaContablePatrimonio();
						this.cargarCombosFrameCuentaContablePatrimoniosForeignKey("Todos");
					}
					this.setActualCuentaContablePatrimonioForeignKey(this.parametrografico.getid_cuenta_contable_patrimonio(),false,"Formulario");

					//CuentaContablePatrimonioTotal
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_patrimonio_totalParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_patrimonio_totalParametroGrafico) {
						//this.cargarCombosCuentaContablePatrimonioTotalsForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_patrimonio_total());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontablepatrimoniototalsForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContablePatrimonioTotal()!=null) {
							this.cuentacontablepatrimoniototalsForeignKey.add(parametrografico.getCuentaContablePatrimonioTotal());
						}

						this.addItemDefectoCombosForeignKeyCuentaContablePatrimonioTotal();
						this.cargarCombosFrameCuentaContablePatrimonioTotalsForeignKey("Todos");
					}
					this.setActualCuentaContablePatrimonioTotalForeignKey(this.parametrografico.getid_cuenta_contable_patrimonio_total(),false,"Formulario");

					//CuentaContableVenta
					if(!this.parametrograficoConstantesFunciones.cargarid_cuenta_contable_ventaParametroGrafico || this.parametrograficoConstantesFunciones.event_dependid_cuenta_contable_ventaParametroGrafico) {
						//this.cargarCombosCuentaContableVentasForeignKeyLista(" where id="+this.parametrografico.getid_cuenta_contable_venta());
									//this.inicializarActualizarBindingParametroGrafico(false,false);
						this.cuentacontableventasForeignKey=new ArrayList<CuentaContable>();

						if(parametrografico.getCuentaContableVenta()!=null) {
							this.cuentacontableventasForeignKey.add(parametrografico.getCuentaContableVenta());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableVenta();
						this.cargarCombosFrameCuentaContableVentasForeignKey("Todos");
					}
					this.setActualCuentaContableVentaForeignKey(this.parametrografico.getid_cuenta_contable_venta(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesParametroGrafico("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesParametroGrafico(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualParametroGrafico() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoParametroGrafico(ParametroGrafico parametrografico) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoParametroGrafico(parametrografico,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoParametroGrafico(ParametroGrafico parametrografico,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioParametroGrafico(parametrografico);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyParametroGrafico(parametrografico,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyParametroGrafico(parametrografico);
	}
	
	public void setVariablesObjetoActualToFormularioParametroGrafico(ParametroGrafico parametrografico) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormParametroGrafico==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormParametroGrafico.jLabelidParametroGrafico.setText(parametrografico.getId().toString());
			this.jInternalFrameDetalleFormParametroGrafico.jTextFieldinventario_inicialParametroGrafico.setText(parametrografico.getinventario_inicial().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,ParametroGrafico parametrograficoLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,parametrograficoLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,ParametroGrafico parametrograficoLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				parametrograficoLocal=this.parametrografico;
			} else {
				parametrograficoLocal=this.parametrograficoAnterior;
			}
		}
		
		if(this.permiteMantenimiento(parametrograficoLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoParametroGrafico(parametrograficoLocal,true);
					
					if(parametrograficoSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(parametrograficoLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(parametrograficoLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoParametroGrafico(ParametroGrafico parametrografico,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualParametroGrafico(parametrografico,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(parametrografico);
	}
	
	public void setVariablesFormularioToObjetoActualParametroGrafico(ParametroGrafico parametrografico,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualParametroGrafico(parametrografico,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualParametroGrafico(ParametroGrafico parametrografico,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormParametroGrafico==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormParametroGrafico.jLabelidParametroGrafico.getText()==null || this.jInternalFrameDetalleFormParametroGrafico.jLabelidParametroGrafico.getText()=="" || this.jInternalFrameDetalleFormParametroGrafico.jLabelidParametroGrafico.getText()=="Id") {
				this.jInternalFrameDetalleFormParametroGrafico.jLabelidParametroGrafico.setText("0");
			}

			if(conColumnasBase) {parametrografico.setId(Long.parseLong(this.jInternalFrameDetalleFormParametroGrafico.jLabelidParametroGrafico.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroGraficoConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelIdParametroGrafico,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			parametrografico.setinventario_inicial(Double.parseDouble(this.jInternalFrameDetalleFormParametroGrafico.jTextFieldinventario_inicialParametroGrafico.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormParametroGrafico.jLabelinventario_inicialParametroGrafico,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualParametroGrafico(ParametroGrafico parametrograficoBean,ParametroGrafico parametrografico,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_activo()!=null && !parametrograficoBean.getid_cuenta_contable_activo().equals(-1L))) {parametrografico.setid_cuenta_contable_activo(parametrograficoBean.getid_cuenta_contable_activo());}
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_pasivo()!=null && !parametrograficoBean.getid_cuenta_contable_pasivo().equals(-1L))) {parametrografico.setid_cuenta_contable_pasivo(parametrograficoBean.getid_cuenta_contable_pasivo());}
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_inventario()!=null && !parametrograficoBean.getid_cuenta_contable_inventario().equals(-1L))) {parametrografico.setid_cuenta_contable_inventario(parametrograficoBean.getid_cuenta_contable_inventario());}
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_disponibilidad()!=null && !parametrograficoBean.getid_cuenta_contable_disponibilidad().equals(-1L))) {parametrografico.setid_cuenta_contable_disponibilidad(parametrograficoBean.getid_cuenta_contable_disponibilidad());}
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_costo_venta()!=null && !parametrograficoBean.getid_cuenta_contable_costo_venta().equals(-1L))) {parametrografico.setid_cuenta_contable_costo_venta(parametrograficoBean.getid_cuenta_contable_costo_venta());}
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_inventario_ini()!=null && !parametrograficoBean.getid_cuenta_contable_inventario_ini().equals(-1L))) {parametrografico.setid_cuenta_contable_inventario_ini(parametrograficoBean.getid_cuenta_contable_inventario_ini());}
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_inventario_fin()!=null && !parametrograficoBean.getid_cuenta_contable_inventario_fin().equals(-1L))) {parametrografico.setid_cuenta_contable_inventario_fin(parametrograficoBean.getid_cuenta_contable_inventario_fin());}
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_cuenta_cobrar()!=null && !parametrograficoBean.getid_cuenta_contable_cuenta_cobrar().equals(-1L))) {parametrografico.setid_cuenta_contable_cuenta_cobrar(parametrograficoBean.getid_cuenta_contable_cuenta_cobrar());}
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_venta_credito()!=null && !parametrograficoBean.getid_cuenta_contable_venta_credito().equals(-1L))) {parametrografico.setid_cuenta_contable_venta_credito(parametrograficoBean.getid_cuenta_contable_venta_credito());}
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_activo_total()!=null && !parametrograficoBean.getid_cuenta_contable_activo_total().equals(-1L))) {parametrografico.setid_cuenta_contable_activo_total(parametrograficoBean.getid_cuenta_contable_activo_total());}
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_pasivo_total()!=null && !parametrograficoBean.getid_cuenta_contable_pasivo_total().equals(-1L))) {parametrografico.setid_cuenta_contable_pasivo_total(parametrograficoBean.getid_cuenta_contable_pasivo_total());}
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_patrimonio()!=null && !parametrograficoBean.getid_cuenta_contable_patrimonio().equals(-1L))) {parametrografico.setid_cuenta_contable_patrimonio(parametrograficoBean.getid_cuenta_contable_patrimonio());}
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_patrimonio_total()!=null && !parametrograficoBean.getid_cuenta_contable_patrimonio_total().equals(-1L))) {parametrografico.setid_cuenta_contable_patrimonio_total(parametrograficoBean.getid_cuenta_contable_patrimonio_total());}
			if(conDefault || (!conDefault && parametrograficoBean.getid_cuenta_contable_venta()!=null && !parametrograficoBean.getid_cuenta_contable_venta().equals(-1L))) {parametrografico.setid_cuenta_contable_venta(parametrograficoBean.getid_cuenta_contable_venta());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosParametroGrafico(ParametroGrafico parametrograficoOrigen,ParametroGrafico parametrografico,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && parametrograficoOrigen.getId()!=null && !parametrograficoOrigen.getId().equals(0L))) {parametrografico.setId(parametrograficoOrigen.getId());}}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_activo()!=null && !parametrograficoOrigen.getid_cuenta_contable_activo().equals(-1L))) {parametrografico.setid_cuenta_contable_activo(parametrograficoOrigen.getid_cuenta_contable_activo());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_pasivo()!=null && !parametrograficoOrigen.getid_cuenta_contable_pasivo().equals(-1L))) {parametrografico.setid_cuenta_contable_pasivo(parametrograficoOrigen.getid_cuenta_contable_pasivo());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_inventario()!=null && !parametrograficoOrigen.getid_cuenta_contable_inventario().equals(-1L))) {parametrografico.setid_cuenta_contable_inventario(parametrograficoOrigen.getid_cuenta_contable_inventario());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_disponibilidad()!=null && !parametrograficoOrigen.getid_cuenta_contable_disponibilidad().equals(-1L))) {parametrografico.setid_cuenta_contable_disponibilidad(parametrograficoOrigen.getid_cuenta_contable_disponibilidad());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_costo_venta()!=null && !parametrograficoOrigen.getid_cuenta_contable_costo_venta().equals(-1L))) {parametrografico.setid_cuenta_contable_costo_venta(parametrograficoOrigen.getid_cuenta_contable_costo_venta());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_inventario_ini()!=null && !parametrograficoOrigen.getid_cuenta_contable_inventario_ini().equals(-1L))) {parametrografico.setid_cuenta_contable_inventario_ini(parametrograficoOrigen.getid_cuenta_contable_inventario_ini());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_inventario_fin()!=null && !parametrograficoOrigen.getid_cuenta_contable_inventario_fin().equals(-1L))) {parametrografico.setid_cuenta_contable_inventario_fin(parametrograficoOrigen.getid_cuenta_contable_inventario_fin());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_cuenta_cobrar()!=null && !parametrograficoOrigen.getid_cuenta_contable_cuenta_cobrar().equals(-1L))) {parametrografico.setid_cuenta_contable_cuenta_cobrar(parametrograficoOrigen.getid_cuenta_contable_cuenta_cobrar());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_venta_credito()!=null && !parametrograficoOrigen.getid_cuenta_contable_venta_credito().equals(-1L))) {parametrografico.setid_cuenta_contable_venta_credito(parametrograficoOrigen.getid_cuenta_contable_venta_credito());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_activo_total()!=null && !parametrograficoOrigen.getid_cuenta_contable_activo_total().equals(-1L))) {parametrografico.setid_cuenta_contable_activo_total(parametrograficoOrigen.getid_cuenta_contable_activo_total());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_pasivo_total()!=null && !parametrograficoOrigen.getid_cuenta_contable_pasivo_total().equals(-1L))) {parametrografico.setid_cuenta_contable_pasivo_total(parametrograficoOrigen.getid_cuenta_contable_pasivo_total());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_patrimonio()!=null && !parametrograficoOrigen.getid_cuenta_contable_patrimonio().equals(-1L))) {parametrografico.setid_cuenta_contable_patrimonio(parametrograficoOrigen.getid_cuenta_contable_patrimonio());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_patrimonio_total()!=null && !parametrograficoOrigen.getid_cuenta_contable_patrimonio_total().equals(-1L))) {parametrografico.setid_cuenta_contable_patrimonio_total(parametrograficoOrigen.getid_cuenta_contable_patrimonio_total());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getid_cuenta_contable_venta()!=null && !parametrograficoOrigen.getid_cuenta_contable_venta().equals(-1L))) {parametrografico.setid_cuenta_contable_venta(parametrograficoOrigen.getid_cuenta_contable_venta());}
			if(conDefault || (!conDefault && parametrograficoOrigen.getinventario_inicial()!=null && !parametrograficoOrigen.getinventario_inicial().equals(0.0))) {parametrografico.setinventario_inicial(parametrograficoOrigen.getinventario_inicial());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioParametroGrafico(ParametroGrafico parametrografico) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormParametroGrafico.jLabelidParametroGrafico.setText(parametrografico.getId().toString());
			this.jInternalFrameDetalleFormParametroGrafico.jTextFieldinventario_inicialParametroGrafico.setText(parametrografico.getinventario_inicial().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioParametroGrafico(ParametroGraficoBean parametrograficoBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormParametroGrafico.jLabelidParametroGrafico.setText(parametrograficoBean.getId().toString());
			this.jInternalFrameDetalleFormParametroGrafico.jTextFieldinventario_inicialParametroGrafico.setText(parametrograficoBean.getinventario_inicial().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanParametroGrafico(ParametroGraficoParameterReturnGeneral parametrograficoReturnGeneral,ParametroGraficoBean parametrograficoBean,Boolean conDefault) throws Exception { 
		try {
			ParametroGrafico parametrograficoLocal=new ParametroGrafico();
			
			parametrograficoLocal=parametrograficoReturnGeneral.getParametroGrafico();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && parametrograficoLocal.getId()!=null && !parametrograficoLocal.getId().equals(0L))) {parametrograficoBean.setId(parametrograficoLocal.getId());}}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_activo()!=null && !parametrograficoLocal.getid_cuenta_contable_activo().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_activo(parametrograficoLocal.getid_cuenta_contable_activo());}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_pasivo()!=null && !parametrograficoLocal.getid_cuenta_contable_pasivo().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_pasivo(parametrograficoLocal.getid_cuenta_contable_pasivo());}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_inventario()!=null && !parametrograficoLocal.getid_cuenta_contable_inventario().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_inventario(parametrograficoLocal.getid_cuenta_contable_inventario());}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_disponibilidad()!=null && !parametrograficoLocal.getid_cuenta_contable_disponibilidad().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_disponibilidad(parametrograficoLocal.getid_cuenta_contable_disponibilidad());}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_costo_venta()!=null && !parametrograficoLocal.getid_cuenta_contable_costo_venta().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_costo_venta(parametrograficoLocal.getid_cuenta_contable_costo_venta());}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_inventario_ini()!=null && !parametrograficoLocal.getid_cuenta_contable_inventario_ini().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_inventario_ini(parametrograficoLocal.getid_cuenta_contable_inventario_ini());}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_inventario_fin()!=null && !parametrograficoLocal.getid_cuenta_contable_inventario_fin().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_inventario_fin(parametrograficoLocal.getid_cuenta_contable_inventario_fin());}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_cuenta_cobrar()!=null && !parametrograficoLocal.getid_cuenta_contable_cuenta_cobrar().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_cuenta_cobrar(parametrograficoLocal.getid_cuenta_contable_cuenta_cobrar());}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_venta_credito()!=null && !parametrograficoLocal.getid_cuenta_contable_venta_credito().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_venta_credito(parametrograficoLocal.getid_cuenta_contable_venta_credito());}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_activo_total()!=null && !parametrograficoLocal.getid_cuenta_contable_activo_total().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_activo_total(parametrograficoLocal.getid_cuenta_contable_activo_total());}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_pasivo_total()!=null && !parametrograficoLocal.getid_cuenta_contable_pasivo_total().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_pasivo_total(parametrograficoLocal.getid_cuenta_contable_pasivo_total());}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_patrimonio()!=null && !parametrograficoLocal.getid_cuenta_contable_patrimonio().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_patrimonio(parametrograficoLocal.getid_cuenta_contable_patrimonio());}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_patrimonio_total()!=null && !parametrograficoLocal.getid_cuenta_contable_patrimonio_total().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_patrimonio_total(parametrograficoLocal.getid_cuenta_contable_patrimonio_total());}
			if(conDefault || (!conDefault && parametrograficoLocal.getid_cuenta_contable_venta()!=null && !parametrograficoLocal.getid_cuenta_contable_venta().equals(-1L))) {parametrograficoBean.setid_cuenta_contable_venta(parametrograficoLocal.getid_cuenta_contable_venta());}
			if(conDefault || (!conDefault && parametrograficoLocal.getinventario_inicial()!=null && !parametrograficoLocal.getinventario_inicial().equals(0.0))) {parametrograficoBean.setinventario_inicial(parametrograficoLocal.getinventario_inicial());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxParametroGraficoGenerico(Long idParametroGraficoSeleccionado,JComboBox jComboBoxParametroGrafico,List<ParametroGrafico> parametrograficosLocal)throws Exception {
		try {
			ParametroGrafico  parametrograficoTemp=null;

			for(ParametroGrafico parametrograficoAux:parametrograficosLocal) {
				if(parametrograficoAux.getId()!=null && parametrograficoAux.getId().equals(idParametroGraficoSeleccionado)) {
					parametrograficoTemp=parametrograficoAux;
					break;
				}
			}

			jComboBoxParametroGrafico.setSelectedItem(parametrograficoTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxParametroGraficoGenerico(JComboBox jComboBoxParametroGrafico,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxParametroGrafico.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxParametroGrafico.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxParametroGrafico.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxParametroGrafico.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxParametroGrafico.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxParametroGrafico.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxParametroGrafico.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxParametroGrafico.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxParametroGrafico.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxParametroGrafico.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			parametrografico=(ParametroGrafico) parametrograficoLogic.getParametroGraficos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			parametrografico =(ParametroGrafico) parametrograficos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getempresa_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableActivo")) {
			//sDescripcion=this.getActualCuentaContableActivoForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontableactivo_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableActivoForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontableactivo_descripcion();
			}
		}

		if(sTipo.equals("CuentaContablePasivo")) {
			//sDescripcion=this.getActualCuentaContablePasivoForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontablepasivo_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContablePasivoForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontablepasivo_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableInventario")) {
			//sDescripcion=this.getActualCuentaContableInventarioForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontableinventario_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableInventarioForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontableinventario_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableDisponibilidad")) {
			//sDescripcion=this.getActualCuentaContableDisponibilidadForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontabledisponibilidad_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableDisponibilidadForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontabledisponibilidad_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCostoVenta")) {
			//sDescripcion=this.getActualCuentaContableCostoVentaForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontablecostoventa_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCostoVentaForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontablecostoventa_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableInventarioIni")) {
			//sDescripcion=this.getActualCuentaContableInventarioIniForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontableinventarioini_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableInventarioIniForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontableinventarioini_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableInventarioFin")) {
			//sDescripcion=this.getActualCuentaContableInventarioFinForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontableinventariofin_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableInventarioFinForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontableinventariofin_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCuentasCobrar")) {
			//sDescripcion=this.getActualCuentaContableCuentasCobrarForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontablecuentascobrar_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCuentasCobrarForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontablecuentascobrar_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableVentaCredito")) {
			//sDescripcion=this.getActualCuentaContableVentaCreditoForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontableventacredito_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableVentaCreditoForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontableventacredito_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableActivoTotal")) {
			//sDescripcion=this.getActualCuentaContableActivoTotalForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontableactivototal_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableActivoTotalForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontableactivototal_descripcion();
			}
		}

		if(sTipo.equals("CuentaContablePasivoTotal")) {
			//sDescripcion=this.getActualCuentaContablePasivoTotalForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontablepasivototal_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContablePasivoTotalForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontablepasivototal_descripcion();
			}
		}

		if(sTipo.equals("CuentaContablePatrimonio")) {
			//sDescripcion=this.getActualCuentaContablePatrimonioForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontablepatrimonio_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContablePatrimonioForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontablepatrimonio_descripcion();
			}
		}

		if(sTipo.equals("CuentaContablePatrimonioTotal")) {
			//sDescripcion=this.getActualCuentaContablePatrimonioTotalForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontablepatrimoniototal_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContablePatrimonioTotalForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontablepatrimoniototal_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableVenta")) {
			//sDescripcion=this.getActualCuentaContableVentaForeignKeyDescripcion((Long)value);
			if(!parametrografico.getIsNew() && !parametrografico.getIsChanged() && !parametrografico.getIsDeleted()) {
				sDescripcion=parametrografico.getcuentacontableventa_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableVentaForeignKeyDescripcion((Long)value);
				sDescripcion=parametrografico.getcuentacontableventa_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		ParametroGrafico parametrograficoRow=new ParametroGrafico();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			parametrograficoRow=(ParametroGrafico) parametrograficoLogic.getParametroGraficos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			parametrograficoRow=(ParametroGrafico) parametrograficos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualParametroGrafico(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoParametroGrafico.setVisible((this.isVisibilidadCeldaNuevoParametroGrafico && this.isPermisoNuevoParametroGrafico));			
			this.jButtonDuplicarParametroGrafico.setVisible((this.isVisibilidadCeldaDuplicarParametroGrafico && this.isPermisoDuplicarParametroGrafico));			
			this.jButtonCopiarParametroGrafico.setVisible((this.isVisibilidadCeldaCopiarParametroGrafico && this.isPermisoCopiarParametroGrafico));
			this.jButtonVerFormParametroGrafico.setVisible((this.isVisibilidadCeldaVerFormParametroGrafico && this.isPermisoVerFormParametroGrafico));
			
			this.jButtonAbrirOrderByParametroGrafico.setVisible((this.isVisibilidadCeldaOrdenParametroGrafico && this.isPermisoOrdenParametroGrafico));			
			
			this.jButtonNuevoRelacionesParametroGrafico.setVisible((this.isVisibilidadCeldaNuevoRelacionesParametroGrafico && this.isPermisoNuevoParametroGrafico));			
			this.jButtonNuevoGuardarCambiosParametroGrafico.setVisible((this.isVisibilidadCeldaNuevoParametroGrafico && this.isPermisoNuevoParametroGrafico && this.isPermisoGuardarCambiosParametroGrafico));
			
			if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
			this.jInternalFrameDetalleFormParametroGrafico.jButtonModificarParametroGrafico.setVisible((this.isVisibilidadCeldaModificarParametroGrafico && this.isPermisoActualizarParametroGrafico));	
			this.jInternalFrameDetalleFormParametroGrafico.jButtonActualizarParametroGrafico.setVisible((this.isVisibilidadCeldaActualizarParametroGrafico && this.isPermisoActualizarParametroGrafico));	
			this.jInternalFrameDetalleFormParametroGrafico.jButtonEliminarParametroGrafico.setVisible((this.isVisibilidadCeldaEliminarParametroGrafico && this.isPermisoEliminarParametroGrafico));
			this.jInternalFrameDetalleFormParametroGrafico.jButtonCancelarParametroGrafico.setVisible(this.isVisibilidadCeldaCancelarParametroGrafico);							
			this.jInternalFrameDetalleFormParametroGrafico.jButtonGuardarCambiosParametroGrafico.setVisible((this.isVisibilidadCeldaGuardarParametroGrafico && this.isPermisoGuardarCambiosParametroGrafico));			
			
			}
						
			this.jButtonGuardarCambiosTablaParametroGrafico.setVisible((this.isVisibilidadCeldaGuardarCambiosParametroGrafico && this.isPermisoGuardarCambiosParametroGrafico));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarParametroGrafico.setVisible((this.isVisibilidadCeldaNuevoParametroGrafico && this.isPermisoNuevoParametroGrafico));						
			this.jButtonDuplicarToolBarParametroGrafico.setVisible((this.isVisibilidadCeldaDuplicarParametroGrafico && this.isPermisoDuplicarParametroGrafico));						
			this.jButtonCopiarToolBarParametroGrafico.setVisible((this.isVisibilidadCeldaCopiarParametroGrafico && this.isPermisoCopiarParametroGrafico));			
			this.jButtonVerFormToolBarParametroGrafico.setVisible((this.isVisibilidadCeldaVerFormParametroGrafico && this.isPermisoVerFormParametroGrafico));			
			this.jButtonAbrirOrderByToolBarParametroGrafico.setVisible((this.isVisibilidadCeldaOrdenParametroGrafico && this.isPermisoOrdenParametroGrafico));
			this.jButtonNuevoRelacionesToolBarParametroGrafico.setVisible((this.isVisibilidadCeldaNuevoRelacionesParametroGrafico && this.isPermisoNuevoParametroGrafico));			
			this.jButtonNuevoGuardarCambiosToolBarParametroGrafico.setVisible((this.isVisibilidadCeldaNuevoParametroGrafico && this.isPermisoNuevoParametroGrafico && this.isPermisoGuardarCambiosParametroGrafico));			
			
			if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
			this.jInternalFrameDetalleFormParametroGrafico.jButtonModificarToolBarParametroGrafico.setVisible((this.isVisibilidadCeldaModificarParametroGrafico && this.isPermisoActualizarParametroGrafico));	
			this.jInternalFrameDetalleFormParametroGrafico.jButtonActualizarToolBarParametroGrafico.setVisible((this.isVisibilidadCeldaActualizarParametroGrafico  && this.isPermisoActualizarParametroGrafico));	
			this.jInternalFrameDetalleFormParametroGrafico.jButtonEliminarToolBarParametroGrafico.setVisible((this.isVisibilidadCeldaEliminarParametroGrafico && this.isPermisoEliminarParametroGrafico));
			this.jInternalFrameDetalleFormParametroGrafico.jButtonCancelarToolBarParametroGrafico.setVisible(this.isVisibilidadCeldaCancelarParametroGrafico);				
			this.jInternalFrameDetalleFormParametroGrafico.jButtonGuardarCambiosToolBarParametroGrafico.setVisible((this.isVisibilidadCeldaGuardarParametroGrafico && this.isPermisoGuardarCambiosParametroGrafico));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarParametroGrafico.setVisible((this.isVisibilidadCeldaGuardarCambiosParametroGrafico && this.isPermisoGuardarCambiosParametroGrafico));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoParametroGrafico.setVisible((this.isVisibilidadCeldaNuevoParametroGrafico && this.isPermisoNuevoParametroGrafico));			
			this.jMenuItemDuplicarParametroGrafico.setVisible((this.isVisibilidadCeldaDuplicarParametroGrafico && this.isPermisoDuplicarParametroGrafico));			
			this.jMenuItemCopiarParametroGrafico.setVisible((this.isVisibilidadCeldaCopiarParametroGrafico && this.isPermisoCopiarParametroGrafico));			
			this.jMenuItemVerFormParametroGrafico.setVisible((this.isVisibilidadCeldaVerFormParametroGrafico && this.isPermisoVerFormParametroGrafico));			
			this.jMenuItemAbrirOrderByParametroGrafico.setVisible((this.isVisibilidadCeldaOrdenParametroGrafico && this.isPermisoOrdenParametroGrafico));			
			//this.jMenuItemMostrarOcultarParametroGrafico.setVisible((this.isVisibilidadCeldaOrdenParametroGrafico && this.isPermisoOrdenParametroGrafico));
			this.jMenuItemDetalleAbrirOrderByParametroGrafico.setVisible((this.isVisibilidadCeldaOrdenParametroGrafico && this.isPermisoOrdenParametroGrafico));			
			//this.jMenuItemDetalleMostrarOcultarParametroGrafico.setVisible((this.isVisibilidadCeldaOrdenParametroGrafico && this.isPermisoOrdenParametroGrafico));			
			this.jMenuItemNuevoRelacionesParametroGrafico.setVisible((this.isVisibilidadCeldaNuevoRelacionesParametroGrafico && this.isPermisoNuevoParametroGrafico));			
			this.jMenuItemNuevoGuardarCambiosParametroGrafico.setVisible((this.isVisibilidadCeldaNuevoParametroGrafico && this.isPermisoNuevoParametroGrafico && this.isPermisoGuardarCambiosParametroGrafico));									
			
			if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
			this.jInternalFrameDetalleFormParametroGrafico.jMenuItemModificarParametroGrafico.setVisible((this.isVisibilidadCeldaModificarParametroGrafico && this.isPermisoActualizarParametroGrafico));	
			this.jInternalFrameDetalleFormParametroGrafico.jMenuItemActualizarParametroGrafico.setVisible((this.isVisibilidadCeldaActualizarParametroGrafico && this.isPermisoActualizarParametroGrafico));	
			this.jInternalFrameDetalleFormParametroGrafico.jMenuItemEliminarParametroGrafico.setVisible((this.isVisibilidadCeldaEliminarParametroGrafico && this.isPermisoEliminarParametroGrafico));
			this.jInternalFrameDetalleFormParametroGrafico.jMenuItemCancelarParametroGrafico.setVisible(this.isVisibilidadCeldaCancelarParametroGrafico);				
			}
			
			this.jMenuItemGuardarCambiosParametroGrafico.setVisible((this.isVisibilidadCeldaGuardarParametroGrafico && this.isPermisoGuardarCambiosParametroGrafico));						
			this.jMenuItemGuardarCambiosTablaParametroGrafico.setVisible((this.isVisibilidadCeldaGuardarCambiosParametroGrafico && this.isPermisoGuardarCambiosParametroGrafico));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoParametroGrafico=this.jButtonNuevoParametroGrafico.isVisible();
			this.isVisibilidadCeldaDuplicarParametroGrafico=this.jButtonDuplicarParametroGrafico.isVisible();
			this.isVisibilidadCeldaCopiarParametroGrafico=this.jButtonCopiarParametroGrafico.isVisible();
			this.isVisibilidadCeldaVerFormParametroGrafico=this.jButtonVerFormParametroGrafico.isVisible();
			
			this.isVisibilidadCeldaOrdenParametroGrafico=this.jButtonAbrirOrderByParametroGrafico.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=this.jButtonNuevoRelacionesParametroGrafico.isVisible();
			this.isVisibilidadCeldaModificarParametroGrafico=this.jButtonModificarParametroGrafico.isVisible();
			
			if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
			this.isVisibilidadCeldaActualizarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jButtonActualizarParametroGrafico.isVisible();
			this.isVisibilidadCeldaEliminarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jButtonEliminarParametroGrafico.isVisible();
			this.isVisibilidadCeldaCancelarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jButtonCancelarParametroGrafico.isVisible();
			this.isVisibilidadCeldaGuardarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jButtonGuardarCambiosParametroGrafico.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosParametroGrafico=this.jButtonGuardarCambiosTablaParametroGrafico.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoParametroGrafico=this.jButtonNuevoToolBarParametroGrafico.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=this.jButtonNuevoRelacionesToolBarParametroGrafico.isVisible();
			
			if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
			this.isVisibilidadCeldaModificarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jButtonModificarToolBarParametroGrafico.isVisible();
			this.isVisibilidadCeldaActualizarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jButtonActualizarToolBarParametroGrafico.isVisible();
			this.isVisibilidadCeldaEliminarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jButtonEliminarToolBarParametroGrafico.isVisible();
			this.isVisibilidadCeldaCancelarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jButtonCancelarToolBarParametroGrafico.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarParametroGrafico=this.jButtonGuardarCambiosToolBarParametroGrafico.isVisible();
			this.isVisibilidadCeldaGuardarCambiosParametroGrafico=this.jButtonGuardarCambiosTablaToolBarParametroGrafico.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoParametroGrafico=this.jMenuItemNuevoParametroGrafico.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=this.jMenuItemNuevoRelacionesParametroGrafico.isVisible();
			
			if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
			this.isVisibilidadCeldaModificarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jMenuItemModificarParametroGrafico.isVisible();
			this.isVisibilidadCeldaActualizarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jMenuItemActualizarParametroGrafico.isVisible();
			this.isVisibilidadCeldaEliminarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jMenuItemEliminarParametroGrafico.isVisible();
			this.isVisibilidadCeldaCancelarParametroGrafico=this.jInternalFrameDetalleFormParametroGrafico.jMenuItemCancelarParametroGrafico.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarParametroGrafico=this.jMenuItemGuardarCambiosParametroGrafico.isVisible();
			this.isVisibilidadCeldaGuardarCambiosParametroGrafico=this.jMenuItemGuardarCambiosTablaParametroGrafico.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesParametroGrafico(Boolean esInicializar) {
		if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {			
			if(this.parametrograficoSessionBean.getConGuardarRelaciones()) {
				//if(this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesParametroGrafico();
			}
			
			this.inicializarActualizarBindingBotonesManualParametroGrafico(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualParametroGrafico() {
		this.jButtonNuevoParametroGrafico.setVisible(this.isPermisoNuevoParametroGrafico);			
		this.jButtonDuplicarParametroGrafico.setVisible(this.isPermisoDuplicarParametroGrafico);			
		this.jButtonCopiarParametroGrafico.setVisible(this.isPermisoCopiarParametroGrafico);			
		this.jButtonVerFormParametroGrafico.setVisible(this.isPermisoVerFormParametroGrafico);			
		
		this.jButtonAbrirOrderByParametroGrafico.setVisible(this.isPermisoOrdenParametroGrafico);					
		
		this.jButtonNuevoRelacionesParametroGrafico.setVisible(this.isPermisoNuevoParametroGrafico);			
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.jButtonModificarParametroGrafico.setVisible(this.isPermisoActualizarParametroGrafico);	
			this.jInternalFrameDetalleFormParametroGrafico.jButtonActualizarParametroGrafico.setVisible(this.isPermisoActualizarParametroGrafico);	
			this.jInternalFrameDetalleFormParametroGrafico.jButtonEliminarParametroGrafico.setVisible(this.isPermisoEliminarParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonCancelarParametroGrafico.setVisible(this.isVisibilidadCeldaCancelarParametroGrafico);						
			this.jInternalFrameDetalleFormParametroGrafico.jButtonGuardarCambiosParametroGrafico.setVisible(this.isPermisoGuardarCambiosParametroGrafico);							
		}
		
		this.jButtonGuardarCambiosTablaParametroGrafico.setVisible(this.isPermisoActualizarParametroGrafico);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleParametroGrafico() {
		this.jInternalFrameDetalleFormParametroGrafico.jButtonModificarParametroGrafico.setVisible(this.isPermisoActualizarParametroGrafico);	
		this.jInternalFrameDetalleFormParametroGrafico.jButtonActualizarParametroGrafico.setVisible(this.isPermisoActualizarParametroGrafico);	
		this.jInternalFrameDetalleFormParametroGrafico.jButtonEliminarParametroGrafico.setVisible(this.isPermisoEliminarParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jButtonCancelarParametroGrafico.setVisible(this.isVisibilidadCeldaCancelarParametroGrafico);							
		this.jInternalFrameDetalleFormParametroGrafico.jButtonGuardarCambiosParametroGrafico.setVisible((this.isVisibilidadCeldaGuardarParametroGrafico && this.isPermisoGuardarCambiosParametroGrafico));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosParametroGrafico() {
		if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualParametroGrafico();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesParametroGrafico() {
	}
	
	public void jTableDatosParametroGraficoListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarParametroGrafico(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.parametrografico.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderParametroGrafico.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.parametrografico.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_activoParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableactivoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableactivoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableactivoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableActivo";

			if(!this.sFinalQueryGeneral_cuentacontableactivo.equals("")) {
				this.cuentacontableactivoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableactivo);
				this.cuentacontableactivoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableactivoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableactivoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableactivoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableActivo.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableactivoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontableactivo=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontableactivo=(TitledBorder)this.cuentacontableactivoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableactivo.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_activoParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableactivo=true;

			idTienePermisocuentacontableactivo=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableactivo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontableactivoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableactivoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableactivoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_activo()!=null) {
					this.cuentacontableactivoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableactivoBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_activo());
					this.cuentacontableactivoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableactivoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableactivoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableactivoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontableactivo=(TitledBorder)this.cuentacontableactivoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableactivo.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_activoParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_activo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_activo = "+this.parametrografico.getid_cuenta_contable_activo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_pasivoParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablepasivoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablepasivoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablepasivoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContablePasivo";

			if(!this.sFinalQueryGeneral_cuentacontablepasivo.equals("")) {
				this.cuentacontablepasivoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablepasivo);
				this.cuentacontablepasivoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablepasivoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablepasivoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablepasivoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContablePasivo.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablepasivoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontablepasivo=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontablepasivo=(TitledBorder)this.cuentacontablepasivoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablepasivo.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_pasivoParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablepasivo=true;

			idTienePermisocuentacontablepasivo=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablepasivo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontablepasivoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablepasivoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablepasivoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_pasivo()!=null) {
					this.cuentacontablepasivoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablepasivoBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_pasivo());
					this.cuentacontablepasivoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablepasivoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablepasivoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablepasivoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontablepasivo=(TitledBorder)this.cuentacontablepasivoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablepasivo.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_pasivoParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_pasivo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_pasivo = "+this.parametrografico.getid_cuenta_contable_pasivo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_inventarioParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableinventarioBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableinventarioBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableInventario";

			if(!this.sFinalQueryGeneral_cuentacontableinventario.equals("")) {
				this.cuentacontableinventarioBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableinventario);
				this.cuentacontableinventarioBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableinventarioBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableinventarioBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableinventarioBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableInventario.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableinventarioBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontableinventario=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontableinventario=(TitledBorder)this.cuentacontableinventarioBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableinventario.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_inventarioParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableinventario=true;

			idTienePermisocuentacontableinventario=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableinventario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontableinventarioBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableinventarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableinventarioBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_inventario()!=null) {
					this.cuentacontableinventarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableinventarioBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_inventario());
					this.cuentacontableinventarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableinventarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableinventarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableinventarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontableinventario=(TitledBorder)this.cuentacontableinventarioBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableinventario.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_inventarioParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_inventario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_inventario = "+this.parametrografico.getid_cuenta_contable_inventario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_disponibilidadParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontabledisponibilidadBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontabledisponibilidadBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontabledisponibilidadBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableDisponibilidad";

			if(!this.sFinalQueryGeneral_cuentacontabledisponibilidad.equals("")) {
				this.cuentacontabledisponibilidadBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontabledisponibilidad);
				this.cuentacontabledisponibilidadBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontabledisponibilidadBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontabledisponibilidadBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontabledisponibilidadBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableDisponibilidad.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontabledisponibilidadBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontabledisponibilidad=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontabledisponibilidad=(TitledBorder)this.cuentacontabledisponibilidadBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledisponibilidad.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_disponibilidadParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontabledisponibilidad=true;

			idTienePermisocuentacontabledisponibilidad=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontabledisponibilidad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontabledisponibilidadBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontabledisponibilidadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontabledisponibilidadBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_disponibilidad()!=null) {
					this.cuentacontabledisponibilidadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontabledisponibilidadBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_disponibilidad());
					this.cuentacontabledisponibilidadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontabledisponibilidadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontabledisponibilidadBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontabledisponibilidadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontabledisponibilidad=(TitledBorder)this.cuentacontabledisponibilidadBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontabledisponibilidad.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_disponibilidadParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_disponibilidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_disponibilidad = "+this.parametrografico.getid_cuenta_contable_disponibilidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_costo_ventaParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecostoventaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecostoventaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecostoventaBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCostoVenta";

			if(!this.sFinalQueryGeneral_cuentacontablecostoventa.equals("")) {
				this.cuentacontablecostoventaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecostoventa);
				this.cuentacontablecostoventaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecostoventaBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecostoventaBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecostoventaBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCostoVenta.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecostoventaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontablecostoventa=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontablecostoventa=(TitledBorder)this.cuentacontablecostoventaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecostoventa.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_costo_ventaParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecostoventa=true;

			idTienePermisocuentacontablecostoventa=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecostoventa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontablecostoventaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecostoventaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecostoventaBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_costo_venta()!=null) {
					this.cuentacontablecostoventaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecostoventaBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_costo_venta());
					this.cuentacontablecostoventaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecostoventaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecostoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecostoventaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontablecostoventa=(TitledBorder)this.cuentacontablecostoventaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecostoventa.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_costo_ventaParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_costo_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_costo_venta = "+this.parametrografico.getid_cuenta_contable_costo_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_inventario_iniParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableinventarioiniBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableinventarioiniBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableinventarioiniBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableInventarioIni";

			if(!this.sFinalQueryGeneral_cuentacontableinventarioini.equals("")) {
				this.cuentacontableinventarioiniBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableinventarioini);
				this.cuentacontableinventarioiniBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableinventarioiniBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableinventarioiniBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableinventarioiniBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableInventarioIni.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableinventarioiniBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontableinventarioini=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontableinventarioini=(TitledBorder)this.cuentacontableinventarioiniBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableinventarioini.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_inventario_iniParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableinventarioini=true;

			idTienePermisocuentacontableinventarioini=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableinventarioini) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontableinventarioiniBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableinventarioiniBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableinventarioiniBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_inventario_ini()!=null) {
					this.cuentacontableinventarioiniBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableinventarioiniBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_inventario_ini());
					this.cuentacontableinventarioiniBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableinventarioiniBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableinventarioiniBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableinventarioiniBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontableinventarioini=(TitledBorder)this.cuentacontableinventarioiniBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableinventarioini.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_inventario_iniParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_inventario_ini()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_inventario_ini = "+this.parametrografico.getid_cuenta_contable_inventario_ini().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_inventario_finParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableinventariofinBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableinventariofinBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableinventariofinBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableInventarioFin";

			if(!this.sFinalQueryGeneral_cuentacontableinventariofin.equals("")) {
				this.cuentacontableinventariofinBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableinventariofin);
				this.cuentacontableinventariofinBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableinventariofinBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableinventariofinBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableinventariofinBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableInventarioFin.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableinventariofinBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontableinventariofin=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontableinventariofin=(TitledBorder)this.cuentacontableinventariofinBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableinventariofin.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_inventario_finParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableinventariofin=true;

			idTienePermisocuentacontableinventariofin=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableinventariofin) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontableinventariofinBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableinventariofinBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableinventariofinBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_inventario_fin()!=null) {
					this.cuentacontableinventariofinBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableinventariofinBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_inventario_fin());
					this.cuentacontableinventariofinBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableinventariofinBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableinventariofinBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableinventariofinBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontableinventariofin=(TitledBorder)this.cuentacontableinventariofinBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableinventariofin.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_inventario_finParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_inventario_fin()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_inventario_fin = "+this.parametrografico.getid_cuenta_contable_inventario_fin().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecuentascobrarBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecuentascobrarBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecuentascobrarBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCuentasCobrar";

			if(!this.sFinalQueryGeneral_cuentacontablecuentascobrar.equals("")) {
				this.cuentacontablecuentascobrarBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecuentascobrar);
				this.cuentacontablecuentascobrarBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecuentascobrarBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecuentascobrarBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecuentascobrarBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCuentasCobrar.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecuentascobrarBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontablecuentascobrar=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontablecuentascobrar=(TitledBorder)this.cuentacontablecuentascobrarBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecuentascobrar.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecuentascobrar=true;

			idTienePermisocuentacontablecuentascobrar=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecuentascobrar) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontablecuentascobrarBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecuentascobrarBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecuentascobrarBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_cuenta_cobrar()!=null) {
					this.cuentacontablecuentascobrarBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecuentascobrarBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_cuenta_cobrar());
					this.cuentacontablecuentascobrarBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecuentascobrarBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecuentascobrarBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecuentascobrarBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontablecuentascobrar=(TitledBorder)this.cuentacontablecuentascobrarBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecuentascobrar.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_cuenta_cobrar()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_cuenta_cobrar = "+this.parametrografico.getid_cuenta_contable_cuenta_cobrar().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_venta_creditoParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableventacreditoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableventacreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableventacreditoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableVentaCredito";

			if(!this.sFinalQueryGeneral_cuentacontableventacredito.equals("")) {
				this.cuentacontableventacreditoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableventacredito);
				this.cuentacontableventacreditoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableventacreditoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableventacreditoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableventacreditoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableVentaCredito.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableventacreditoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontableventacredito=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontableventacredito=(TitledBorder)this.cuentacontableventacreditoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableventacredito.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_venta_creditoParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableventacredito=true;

			idTienePermisocuentacontableventacredito=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableventacredito) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontableventacreditoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableventacreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableventacreditoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_venta_credito()!=null) {
					this.cuentacontableventacreditoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableventacreditoBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_venta_credito());
					this.cuentacontableventacreditoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableventacreditoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableventacreditoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableventacreditoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontableventacredito=(TitledBorder)this.cuentacontableventacreditoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableventacredito.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_venta_creditoParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_venta_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_venta_credito = "+this.parametrografico.getid_cuenta_contable_venta_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_activo_totalParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableactivototalBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableactivototalBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableactivototalBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableActivoTotal";

			if(!this.sFinalQueryGeneral_cuentacontableactivototal.equals("")) {
				this.cuentacontableactivototalBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableactivototal);
				this.cuentacontableactivototalBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableactivototalBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableactivototalBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableactivototalBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableActivoTotal.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableactivototalBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontableactivototal=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontableactivototal=(TitledBorder)this.cuentacontableactivototalBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableactivototal.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_activo_totalParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableactivototal=true;

			idTienePermisocuentacontableactivototal=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableactivototal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontableactivototalBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableactivototalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableactivototalBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_activo_total()!=null) {
					this.cuentacontableactivototalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableactivototalBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_activo_total());
					this.cuentacontableactivototalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableactivototalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableactivototalBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableactivototalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontableactivototal=(TitledBorder)this.cuentacontableactivototalBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableactivototal.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_activo_totalParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_activo_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_activo_total = "+this.parametrografico.getid_cuenta_contable_activo_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_pasivo_totalParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablepasivototalBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablepasivototalBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablepasivototalBeanSwingJInternalFrame.sTipoBusqueda="CuentaContablePasivoTotal";

			if(!this.sFinalQueryGeneral_cuentacontablepasivototal.equals("")) {
				this.cuentacontablepasivototalBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablepasivototal);
				this.cuentacontablepasivototalBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablepasivototalBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablepasivototalBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablepasivototalBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContablePasivoTotal.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablepasivototalBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontablepasivototal=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontablepasivototal=(TitledBorder)this.cuentacontablepasivototalBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablepasivototal.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_pasivo_totalParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablepasivototal=true;

			idTienePermisocuentacontablepasivototal=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablepasivototal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontablepasivototalBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablepasivototalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablepasivototalBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_pasivo_total()!=null) {
					this.cuentacontablepasivototalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablepasivototalBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_pasivo_total());
					this.cuentacontablepasivototalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablepasivototalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablepasivototalBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablepasivototalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontablepasivototal=(TitledBorder)this.cuentacontablepasivototalBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablepasivototal.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_pasivo_totalParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_pasivo_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_pasivo_total = "+this.parametrografico.getid_cuenta_contable_pasivo_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_patrimonioParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablepatrimonioBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablepatrimonioBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablepatrimonioBeanSwingJInternalFrame.sTipoBusqueda="CuentaContablePatrimonio";

			if(!this.sFinalQueryGeneral_cuentacontablepatrimonio.equals("")) {
				this.cuentacontablepatrimonioBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablepatrimonio);
				this.cuentacontablepatrimonioBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablepatrimonioBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablepatrimonioBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablepatrimonioBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContablePatrimonio.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablepatrimonioBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontablepatrimonio=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontablepatrimonio=(TitledBorder)this.cuentacontablepatrimonioBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablepatrimonio.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_patrimonioParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablepatrimonio=true;

			idTienePermisocuentacontablepatrimonio=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablepatrimonio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontablepatrimonioBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablepatrimonioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablepatrimonioBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_patrimonio()!=null) {
					this.cuentacontablepatrimonioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablepatrimonioBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_patrimonio());
					this.cuentacontablepatrimonioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablepatrimonioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablepatrimonioBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablepatrimonioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontablepatrimonio=(TitledBorder)this.cuentacontablepatrimonioBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablepatrimonio.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_patrimonioParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_patrimonio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_patrimonio = "+this.parametrografico.getid_cuenta_contable_patrimonio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_patrimonio_totalParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablepatrimoniototalBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.sTipoBusqueda="CuentaContablePatrimonioTotal";

			if(!this.sFinalQueryGeneral_cuentacontablepatrimoniototal.equals("")) {
				this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablepatrimoniototal);
				this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContablePatrimonioTotal.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablepatrimoniototalBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontablepatrimoniototal=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontablepatrimoniototal=(TitledBorder)this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablepatrimoniototal.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_patrimonio_totalParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablepatrimoniototal=true;

			idTienePermisocuentacontablepatrimoniototal=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablepatrimoniototal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontablepatrimoniototalBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_patrimonio_total()!=null) {
					this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_patrimonio_total());
					this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablepatrimoniototalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontablepatrimoniototal=(TitledBorder)this.cuentacontablepatrimoniototalBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablepatrimoniototal.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_patrimonio_totalParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_patrimonio_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_patrimonio_total = "+this.parametrografico.getid_cuenta_contable_patrimonio_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_ventaParametroGraficoActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontableventaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontableventaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontableventaBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableVenta";

			if(!this.sFinalQueryGeneral_cuentacontableventa.equals("")) {
				this.cuentacontableventaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontableventa);
				this.cuentacontableventaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontableventaBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontableventaBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontableventaBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableVenta.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontableventaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderParametroGrafico=null;
			TitledBorder titledBordercuentacontableventa=null;

			if(!this.jScrollPanelDatosParametroGrafico.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				titledBordercuentacontableventa=(TitledBorder)this.cuentacontableventaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableventa.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_ventaParametroGraficoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontableventa=true;

			idTienePermisocuentacontableventa=this.tienePermisosUsuarioEnPaginaWebParametroGrafico(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontableventa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosParametroGrafico.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosParametroGrafico.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);

				this.cuentacontableventaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableventaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableventaBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.parametrograficoLogic.getConnexion());

				if(this.parametrografico.getid_cuenta_contable_venta()!=null) {
					this.cuentacontableventaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableventaBeanSwingJInternalFrame.setIdActual(this.parametrografico.getid_cuenta_contable_venta());
					this.cuentacontableventaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableventaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableventaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderParametroGrafico=(TitledBorder)this.jScrollPanelDatosParametroGrafico.getBorder();
				TitledBorder titledBordercuentacontableventa=(TitledBorder)this.cuentacontableventaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontableventa.setTitle(titledBorderParametroGrafico.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_ventaParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getid_cuenta_contable_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_venta = "+this.parametrografico.getid_cuenta_contable_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoninventario_inicialParametroGraficoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.getparametrografico(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.parametrografico==null) {
						this.parametrografico = new ParametroGrafico();
					}

					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);
				}

				if(this.parametrografico.getinventario_inicial()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where inventario_inicial = "+this.parametrografico.getinventario_inicial().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingParametroGrafico(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdCuentaContableActivoParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContableActivo();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableActivoTotalParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContableActivoTotal();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCostoVentaParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContableCostoVenta();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCuentasCobrarParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContableCuentasCobrar();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableDisponibiladParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContableDisponibilad();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableInventarioParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContableInventario();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableInventarioFinParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContableInventarioFin();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableInventarioIniParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContableInventarioIni();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContablePasivoParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContablePasivo();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContablePasivoTotalParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContablePasivoTotal();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContablePatrimonioParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContablePatrimonio();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContablePatrimonioTotalParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContablePatrimonioTotal();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableVentaParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContableVenta();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableVentaCreditoParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdCuentaContableVentaCredito();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaParametroGraficoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingParametroGrafico(false,false);

			this.getParametroGraficosFK_IdEmpresa();

			this.inicializarActualizarBindingParametroGrafico(false);

			//if(ParametroGraficoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingParametroGrafico(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.parametrograficoLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameParametroGrafico() {
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
			this.jInternalFrameDetalleFormParametroGrafico.setVisible(false);	    			
			this.jInternalFrameDetalleFormParametroGrafico.dispose();
			this.jInternalFrameDetalleFormParametroGrafico=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoParametroGrafico!=null) {
			this.jInternalFrameReporteDinamicoParametroGrafico.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoParametroGrafico.dispose();
			this.jInternalFrameReporteDinamicoParametroGrafico=null;
		}
		
		if(this.jInternalFrameImportacionParametroGrafico!=null) {
			this.jInternalFrameImportacionParametroGrafico.setVisible(false);	    			
			this.jInternalFrameImportacionParametroGrafico.dispose();
			this.jInternalFrameImportacionParametroGrafico=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessParametroGrafico();
			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			
			
			if(sTipo.equals("NuevoParametroGrafico")) {
				jButtonNuevoParametroGraficoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarParametroGrafico")) {
				jButtonDuplicarParametroGraficoActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarParametroGrafico")) {
				jButtonCopiarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("VerFormParametroGrafico")) {
				jButtonVerFormParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarParametroGrafico")) {
				jButtonNuevoParametroGraficoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarParametroGrafico")) {
				jButtonDuplicarParametroGraficoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoParametroGrafico")) {
				jButtonNuevoParametroGraficoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarParametroGrafico")) {
				jButtonDuplicarParametroGraficoActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesParametroGrafico")) {
				jButtonNuevoParametroGraficoActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarParametroGrafico")) {
				jButtonNuevoParametroGraficoActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesParametroGrafico")) {
				jButtonNuevoParametroGraficoActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarParametroGrafico")) {
				jButtonModificarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarParametroGrafico")) {
				jButtonModificarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarParametroGrafico")) {
				jButtonModificarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarParametroGrafico")) {
				jButtonActualizarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarParametroGrafico")) {
				jButtonActualizarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarParametroGrafico")) {
				jButtonActualizarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("EliminarParametroGrafico")) {
				jButtonEliminarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarParametroGrafico")) {
				jButtonEliminarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarParametroGrafico")) {
				jButtonEliminarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("CancelarParametroGrafico")) {
				jButtonCancelarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarParametroGrafico")) {
				jButtonCancelarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarParametroGrafico")) {
				jButtonCancelarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("CerrarParametroGrafico")) {
				jButtonCerrarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarParametroGrafico")) {
				jButtonCerrarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarParametroGrafico")) {
				jButtonCerrarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarParametroGrafico")) {
				jButtonMostrarOcultarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarParametroGrafico")) {
				jButtonCancelarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosParametroGrafico")) {
				jButtonGuardarCambiosParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarParametroGrafico")) {
				jButtonGuardarCambiosParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarParametroGrafico")) {
				jButtonCopiarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarParametroGrafico")) {
				jButtonVerFormParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosParametroGrafico")) {
				jButtonGuardarCambiosParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarParametroGrafico")) {
				jButtonCopiarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormParametroGrafico")) {
				jButtonVerFormParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaParametroGrafico")) {
				jButtonGuardarCambiosParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarParametroGrafico")) {
				jButtonGuardarCambiosParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaParametroGrafico")) {
				jButtonGuardarCambiosParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionParametroGrafico")) {
				jButtonRecargarInformacionParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarParametroGrafico")) {
				jButtonRecargarInformacionParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionParametroGrafico")) {
				jButtonRecargarInformacionParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresParametroGrafico")) {
				jButtonAnterioresParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarParametroGrafico")) {
				jButtonAnterioresParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreParametroGrafico")) {
				jButtonAnterioresParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesParametroGrafico")) {
				jButtonSiguientesParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarParametroGrafico")) {
				jButtonSiguientesParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesParametroGrafico")) {
				jButtonSiguientesParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByParametroGrafico") || sTipo.equals("MenuItemDetalleAbrirOrderByParametroGrafico")) {
				jButtonAbrirOrderByParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarParametroGrafico") || sTipo.equals("MenuItemDetalleMostrarOcultarParametroGrafico")) {
				jButtonMostrarOcultarParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosParametroGrafico")) {
				jButtonNuevoGuardarCambiosParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarParametroGrafico")) {
				jButtonNuevoGuardarCambiosParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosParametroGrafico")) {
				jButtonNuevoGuardarCambiosParametroGraficoActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoParametroGrafico")) {
				jButtonCerrarReporteDinamicoParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoParametroGrafico")) {
				jButtonGenerarReporteDinamicoParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoParametroGrafico")) {
				
				jButtonGenerarExcelReporteDinamicoParametroGraficoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionParametroGrafico")) {
				jButtonCerrarImportacionParametroGraficoActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionParametroGrafico")) {
				
				jButtonGenerarImportacionParametroGraficoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionParametroGrafico")) {
				
				jButtonAbrirImportacionParametroGraficoActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesParametroGrafico")) {
				jComboBoxTiposAccionesParametroGraficoActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesParametroGrafico")) {
				jComboBoxTiposRelacionesParametroGraficoActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioParametroGrafico")) {
				jComboBoxTiposAccionesParametroGraficoActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarParametroGrafico")) {
				
				jComboBoxTiposSeleccionarParametroGraficoActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralParametroGrafico")) {
				jTextFieldValorCampoGeneralParametroGraficoActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByParametroGrafico")) {
				jButtonAbrirOrderByParametroGraficoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarParametroGrafico")) {
				jButtonAbrirOrderByParametroGraficoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByParametroGrafico")) {
				jButtonCerrarOrderByParametroGraficoActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idParametroGraficoBusqueda")) {
				this.jButtonidParametroGraficoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaParametroGraficoUpdate")) {
				this.jButtonid_empresaParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaParametroGraficoBusqueda")) {
				this.jButtonid_empresaParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_activoParametroGrafico")) {
				this.jButtonid_cuenta_contable_activoParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_activoParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableActivo("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_activoParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_activoParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_activoParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_activoParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivoParametroGrafico")) {
				this.jButtonid_cuenta_contable_pasivoParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivoParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContablePasivo("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivoParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_pasivoParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivoParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_pasivoParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioParametroGrafico")) {
				this.jButtonid_cuenta_contable_inventarioParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_inventarioParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_inventarioParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_disponibilidadParametroGrafico")) {
				this.jButtonid_cuenta_contable_disponibilidadParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_disponibilidadParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableDisponibilidad("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_disponibilidadParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_disponibilidadParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_disponibilidadParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_disponibilidadParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaParametroGrafico")) {
				this.jButtonid_cuenta_contable_costo_ventaParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableCostoVenta("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_costo_ventaParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_costo_ventaParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_iniParametroGrafico")) {
				this.jButtonid_cuenta_contable_inventario_iniParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_iniParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableInventarioIni("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_iniParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_inventario_iniParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_iniParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_inventario_iniParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_finParametroGrafico")) {
				this.jButtonid_cuenta_contable_inventario_finParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_finParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableInventarioFin("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_finParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_inventario_finParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_finParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_inventario_finParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_cuenta_cobrarParametroGrafico")) {
				this.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_cuenta_cobrarParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableCuentasCobrar("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_cuenta_cobrarParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_cuenta_cobrarParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_venta_creditoParametroGrafico")) {
				this.jButtonid_cuenta_contable_venta_creditoParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_venta_creditoParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableVentaCredito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_venta_creditoParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_venta_creditoParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_venta_creditoParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_venta_creditoParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_activo_totalParametroGrafico")) {
				this.jButtonid_cuenta_contable_activo_totalParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_activo_totalParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableActivoTotal("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_activo_totalParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_activo_totalParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_activo_totalParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_activo_totalParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivo_totalParametroGrafico")) {
				this.jButtonid_cuenta_contable_pasivo_totalParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivo_totalParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContablePasivoTotal("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivo_totalParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_pasivo_totalParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivo_totalParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_pasivo_totalParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonioParametroGrafico")) {
				this.jButtonid_cuenta_contable_patrimonioParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonioParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContablePatrimonio("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonioParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_patrimonioParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonioParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_patrimonioParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonio_totalParametroGrafico")) {
				this.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonio_totalParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContablePatrimonioTotal("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonio_totalParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonio_totalParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaParametroGrafico")) {
				this.jButtonid_cuenta_contable_ventaParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_ventaParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_ventaParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("inventario_inicialParametroGraficoBusqueda")) {
				this.jButtoninventario_inicialParametroGraficoBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_cuenta_contable_activoParametroGrafico")) {
				this.jButtonid_cuenta_contable_activoParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_activo_totalParametroGrafico")) {
				this.jButtonid_cuenta_contable_activo_totalParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_costo_ventaParametroGrafico")) {
				this.jButtonid_cuenta_contable_costo_ventaParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_cuenta_cobrarParametroGrafico")) {
				this.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_disponibilidadParametroGrafico")) {
				this.jButtonid_cuenta_contable_disponibilidadParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_inventarioParametroGrafico")) {
				this.jButtonid_cuenta_contable_inventarioParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_inventario_finParametroGrafico")) {
				this.jButtonid_cuenta_contable_inventario_finParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_inventario_iniParametroGrafico")) {
				this.jButtonid_cuenta_contable_inventario_iniParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_pasivoParametroGrafico")) {
				this.jButtonid_cuenta_contable_pasivoParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_pasivo_totalParametroGrafico")) {
				this.jButtonid_cuenta_contable_pasivo_totalParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_patrimonioParametroGrafico")) {
				this.jButtonid_cuenta_contable_patrimonioParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_patrimonio_totalParametroGrafico")) {
				this.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_ventaParametroGrafico")) {
				this.jButtonid_cuenta_contable_ventaParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("id_cuenta_contable_venta_creditoParametroGrafico")) {
				this.jButtonid_cuenta_contable_venta_creditoParametroGraficoActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdCuentaContableActivoParametroGrafico")) {
				this.jButtonFK_IdCuentaContableActivoParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableActivoTotalParametroGrafico")) {
				this.jButtonFK_IdCuentaContableActivoTotalParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableCostoVentaParametroGrafico")) {
				this.jButtonFK_IdCuentaContableCostoVentaParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableCuentasCobrarParametroGrafico")) {
				this.jButtonFK_IdCuentaContableCuentasCobrarParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableDisponibiladParametroGrafico")) {
				this.jButtonFK_IdCuentaContableDisponibiladParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableInventarioParametroGrafico")) {
				this.jButtonFK_IdCuentaContableInventarioParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableInventarioFinParametroGrafico")) {
				this.jButtonFK_IdCuentaContableInventarioFinParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableInventarioIniParametroGrafico")) {
				this.jButtonFK_IdCuentaContableInventarioIniParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContablePasivoParametroGrafico")) {
				this.jButtonFK_IdCuentaContablePasivoParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContablePasivoTotalParametroGrafico")) {
				this.jButtonFK_IdCuentaContablePasivoTotalParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContablePatrimonioParametroGrafico")) {
				this.jButtonFK_IdCuentaContablePatrimonioParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContablePatrimonioTotalParametroGrafico")) {
				this.jButtonFK_IdCuentaContablePatrimonioTotalParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableVentaParametroGrafico")) {
				this.jButtonFK_IdCuentaContableVentaParametroGraficoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableVentaCreditoParametroGrafico")) {
				this.jButtonFK_IdCuentaContableVentaCreditoParametroGraficoActionPerformed(evt);
			}
			
			;
			
			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessParametroGrafico();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroGraficoActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				


				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroGrafico.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroGrafico.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			ParametroGrafico parametrograficoLocal=null;
			
			if(!this.getEsControlTabla()) {
				parametrograficoLocal=this.parametrografico;
			} else {
				parametrograficoLocal=this.parametrograficoAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
							
				
				


				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroGrafico.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroGrafico.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroGraficoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroGraficoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
								
						
				


				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroGrafico.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroGrafico.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
								
				
				


				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroGrafico.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroGrafico.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroGraficoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroGraficoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroGraficoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
			
			this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
							
				
				


				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroGrafico.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroGrafico.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroGraficoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroGraficoActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
			
			this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
								
				
				


				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroGrafico.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroGrafico.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroGraficoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroGraficoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
			
			this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroGraficoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosParametroGrafico")) {
					jCheckBoxSeleccionarTodosParametroGraficoItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosParametroGrafico")) {
					jCheckBoxSeleccionadosParametroGraficoItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarParametroGrafico")) {
					
				}
				
				


				
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroGrafico.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroGrafico.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
												
				
				


				
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroGrafico.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroGrafico.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroGraficoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroGraficoActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaParametroGraficoActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroGrafico.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroGrafico.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.parametrografico);
				
				this.actualizarInformacion("INFO_PADRE",false,this.parametrografico);
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(ParametroGrafico.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",ParametroGrafico.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaParametroGraficoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.parametrograficoAnterior =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarParametroGrafico")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosParametroGraficoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosParametroGrafico.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.parametrografico =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.parametrografico =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.parametrografico);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarParametroGrafico")) {
				
				}
				
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarParametroGrafico")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosParametroGrafico.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarParametroGrafico")) {
			
			}
			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessParametroGrafico();
			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			
			if(sTipo.equals("NuevoParametroGrafico")) {
				jButtonNuevoParametroGraficoActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarParametroGrafico")) {
				jButtonDuplicarParametroGraficoActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarParametroGrafico")) {
				jButtonCopiarParametroGraficoActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormParametroGrafico")) {
				jButtonVerFormParametroGraficoActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesParametroGrafico")) {
				jButtonNuevoParametroGraficoActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarParametroGrafico")) {
				jButtonModificarParametroGraficoActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarParametroGrafico")) {
				jButtonActualizarParametroGraficoActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarParametroGrafico")) {
				jButtonEliminarParametroGraficoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaParametroGrafico")) {
				jButtonGuardarCambiosParametroGraficoActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarParametroGrafico")) {
				jButtonCancelarParametroGraficoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarParametroGrafico")) {
				jButtonCerrarParametroGraficoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosParametroGrafico")) {
				jButtonGuardarCambiosParametroGraficoActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosParametroGrafico")) {
				jButtonNuevoGuardarCambiosParametroGraficoActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByParametroGrafico")) {
				jButtonAbrirOrderByParametroGraficoActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionParametroGrafico")) {
				jButtonRecargarInformacionParametroGraficoActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresParametroGrafico")) {
				jButtonAnterioresParametroGraficoActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesParametroGrafico")) {
				jButtonSiguientesParametroGraficoActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idParametroGraficoBusqueda")) {
				this.jButtonidParametroGraficoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaParametroGraficoUpdate")) {
				this.jButtonid_empresaParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaParametroGraficoBusqueda")) {
				this.jButtonid_empresaParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_activoParametroGrafico")) {
				this.jButtonid_cuenta_contable_activoParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_activoParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableActivo("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_activoParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_activoParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_activoParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_activoParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivoParametroGrafico")) {
				this.jButtonid_cuenta_contable_pasivoParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivoParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContablePasivo("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivoParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_pasivoParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivoParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_pasivoParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioParametroGrafico")) {
				this.jButtonid_cuenta_contable_inventarioParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_inventarioParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventarioParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_inventarioParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_disponibilidadParametroGrafico")) {
				this.jButtonid_cuenta_contable_disponibilidadParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_disponibilidadParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableDisponibilidad("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_disponibilidadParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_disponibilidadParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_disponibilidadParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_disponibilidadParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaParametroGrafico")) {
				this.jButtonid_cuenta_contable_costo_ventaParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableCostoVenta("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_costo_ventaParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_costo_ventaParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_costo_ventaParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_iniParametroGrafico")) {
				this.jButtonid_cuenta_contable_inventario_iniParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_iniParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableInventarioIni("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_iniParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_inventario_iniParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_iniParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_inventario_iniParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_finParametroGrafico")) {
				this.jButtonid_cuenta_contable_inventario_finParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_finParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableInventarioFin("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_finParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_inventario_finParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_inventario_finParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_inventario_finParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_cuenta_cobrarParametroGrafico")) {
				this.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_cuenta_cobrarParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableCuentasCobrar("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_cuenta_cobrarParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_cuenta_cobrarParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_venta_creditoParametroGrafico")) {
				this.jButtonid_cuenta_contable_venta_creditoParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_venta_creditoParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableVentaCredito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_venta_creditoParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_venta_creditoParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_venta_creditoParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_venta_creditoParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_activo_totalParametroGrafico")) {
				this.jButtonid_cuenta_contable_activo_totalParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_activo_totalParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableActivoTotal("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_activo_totalParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_activo_totalParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_activo_totalParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_activo_totalParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivo_totalParametroGrafico")) {
				this.jButtonid_cuenta_contable_pasivo_totalParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivo_totalParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContablePasivoTotal("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivo_totalParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_pasivo_totalParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_pasivo_totalParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_pasivo_totalParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonioParametroGrafico")) {
				this.jButtonid_cuenta_contable_patrimonioParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonioParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContablePatrimonio("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonioParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_patrimonioParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonioParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_patrimonioParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonio_totalParametroGrafico")) {
				this.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonio_totalParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContablePatrimonioTotal("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonio_totalParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_patrimonio_totalParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaParametroGrafico")) {
				this.jButtonid_cuenta_contable_ventaParametroGraficoActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaParametroGraficoArbol")) {
				this.abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaParametroGraficoUpdate")) {
				this.jButtonid_cuenta_contable_ventaParametroGraficoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_ventaParametroGraficoBusqueda")) {
				this.jButtonid_cuenta_contable_ventaParametroGraficoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("inventario_inicialParametroGraficoBusqueda")) {
				this.jButtoninventario_inicialParametroGraficoBusquedaActionPerformed(evt);
			}
			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessParametroGrafico();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameParametroGrafico")) {
				closingInternalFrameParametroGrafico();
				
			} else if(sTipo.equals("jButtonCancelarParametroGrafico")) {
				JInternalFrameBase jInternalFrameDetalleFormParametroGrafico = (JInternalFrameBase)evt.getSource();
	            	
	            ParametroGraficoBeanSwingJInternalFrame jInternalFrameParent=(ParametroGraficoBeanSwingJInternalFrame)jInternalFrameDetalleFormParametroGrafico.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarParametroGraficoActionPerformed(null);
			}
			
			ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.parametrografico,new Object(),this.parametrograficoParameterGeneral,this.parametrograficoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormParametroGrafico(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormParametroGrafico(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormParametroGrafico(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.parametrografico)) {
			if(!esControlTabla) {
				if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);			
				}
				
				if(this.parametrograficoSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualParametroGrafico(this.parametrografico,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.parametrograficoReturnGeneral=parametrograficoLogic.procesarEventosParametroGraficosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametrograficoLogic.getParametroGraficos(),this.parametrografico,this.parametrograficoParameterGeneral,this.isEsNuevoParametroGrafico,classes);//this.parametrograficoLogic.getParametroGrafico()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanParametroGrafico(this.parametrograficoReturnGeneral,this.parametrograficoBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.parametrograficoSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanParametroGrafico(classes,this.parametrograficoReturnGeneral,this.parametrograficoBean,false);
					}
						
					if(this.parametrograficoReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyParametroGrafico(this.parametrograficoReturnGeneral.getParametroGrafico());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioParametroGrafico(this.parametrograficoReturnGeneral.getParametroGrafico());	
					}
						
					if(this.parametrograficoReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioParametroGrafico(this.parametrograficoReturnGeneral.getParametroGrafico(),classes);//this.parametrograficoBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioParametroGrafico(this.parametrografico,classes);//this.parametrograficoBean);									
				}
			
				if(ParametroGraficoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualParametroGrafico(this.parametrografico,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysParametroGrafico(this.parametrografico);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.parametrograficoAnterior!=null) {
						this.parametrografico=this.parametrograficoAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.parametrograficoReturnGeneral=parametrograficoLogic.procesarEventosParametroGraficosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametrograficoLogic.getParametroGraficos(),this.parametrografico,this.parametrograficoParameterGeneral,this.isEsNuevoParametroGrafico,classes);//this.parametrograficoLogic.getParametroGrafico()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.parametrograficoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.parametrograficoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.parametrograficoReturnGeneral.getParametroGrafico(),parametrograficoLogic.getParametroGraficos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.parametrograficoReturnGeneral.getParametroGrafico(),this.parametrograficos);
				}
				//ARCHITECTURE
				
				//this.jTableDatosParametroGrafico.repaint();
				
				//((AbstractTableModel) this.jTableDatosParametroGrafico.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosParametroGrafico();
			}
		}
	}
	
	public void actualizarVisualTableDatosParametroGrafico() throws Exception {
		
		ParametroGraficoModel parametrograficoModel=(ParametroGraficoModel)this.jTableDatosParametroGrafico.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			parametrograficoModel.parametrograficos=this.parametrograficoLogic.getParametroGraficos();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			parametrograficoModel.parametrograficos=this.parametrograficos;
		}
		
		
		((ParametroGraficoModel) this.jTableDatosParametroGrafico.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaParametroGrafico() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getparametrograficoAnterior(),this.parametrograficoLogic.getParametroGraficos());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getparametrograficoAnterior(),this.parametrograficos);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosParametroGrafico();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioParametroGrafico(ParametroGrafico parametrografico,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametrografico,new Object(),generalEntityParameterGeneral,this.parametrograficoReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.parametrograficoSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=ParametroGraficoConstantesFunciones.getClassesRelationshipsOfParametroGrafico(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=ParametroGraficoConstantesFunciones.getClassesRelationshipsFromStringsOfParametroGrafico(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormParametroGrafico(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				ParametroGraficoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.parametrografico,new Object(),generalEntityParameterGeneral,this.parametrograficoReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioParametroGrafico(ParametroGraficoBean parametrograficoBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanParametroGrafico(ArrayList<Classe> classes,ParametroGraficoReturnGeneral parametrograficoReturnGeneral,ParametroGraficoBean parametrograficoBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualParametroGrafico(ParametroGrafico parametrografico,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.parametrografico)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormParametroGrafico = new ParametroGraficoDetalleFormJInternalFrame(jDesktopPane,this.parametrograficoSessionBean.getConGuardarRelaciones(),this.parametrograficoSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.setVisible(false);
		this.jInternalFrameDetalleFormParametroGrafico.setSelected(false);						
		
		this.jInternalFrameDetalleFormParametroGrafico.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormParametroGrafico.parametrograficoLogic=this.parametrograficoLogic;
		
		this.cargarCombosFrameForeignKeyParametroGrafico("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleParametroGrafico();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleParametroGrafico();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyParametroGrafico("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyParametroGrafico();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormParametroGrafico.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarParametroGrafico"));
		
		this.jInternalFrameDetalleFormParametroGrafico.jButtonModificarParametroGrafico.addActionListener(new ButtonActionListener(this,"ModificarParametroGrafico"));

		
		this.jInternalFrameDetalleFormParametroGrafico.jButtonModificarToolBarParametroGrafico.addActionListener(new ButtonActionListener(this,"ModificarToolBarParametroGrafico"));
					
		this.jInternalFrameDetalleFormParametroGrafico.jMenuItemModificarParametroGrafico.addActionListener(new ButtonActionListener(this,"MenuItemModificarParametroGrafico"));		
		
		
		
		this.jInternalFrameDetalleFormParametroGrafico.jButtonActualizarParametroGrafico.addActionListener (new ButtonActionListener(this,"ActualizarParametroGrafico"));
		
		
		this.jInternalFrameDetalleFormParametroGrafico.jButtonActualizarToolBarParametroGrafico.addActionListener(new ButtonActionListener(this,"ActualizarToolBarParametroGrafico"));
						
		this.jInternalFrameDetalleFormParametroGrafico.jMenuItemActualizarParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemActualizarParametroGrafico"));		
		
		
		
		this.jInternalFrameDetalleFormParametroGrafico.jButtonEliminarParametroGrafico.addActionListener (new ButtonActionListener(this,"EliminarParametroGrafico"));
		
		
		this.jInternalFrameDetalleFormParametroGrafico.jButtonEliminarToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"EliminarToolBarParametroGrafico"));
								
		this.jInternalFrameDetalleFormParametroGrafico.jMenuItemEliminarParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemEliminarParametroGrafico"));		
		
		
		
		this.jInternalFrameDetalleFormParametroGrafico.jButtonCancelarParametroGrafico.addActionListener (new ButtonActionListener(this,"CancelarParametroGrafico"));
		
		
		this.jInternalFrameDetalleFormParametroGrafico.jButtonCancelarToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"CancelarToolBarParametroGrafico"));
					
		this.jInternalFrameDetalleFormParametroGrafico.jMenuItemCancelarParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemCancelarParametroGrafico"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormParametroGrafico.jMenuItemDetalleCerrarParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarParametroGrafico"));		
		
		
		
		this.jInternalFrameDetalleFormParametroGrafico.jButtonGuardarCambiosToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarParametroGrafico"));
		
		
		
		this.jInternalFrameDetalleFormParametroGrafico.jButtonGuardarCambiosToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarParametroGrafico"));
		
		
		
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioParametroGrafico"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonidParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"idParametroGraficoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_empresaParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_empresaParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_activoParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_activoParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGrafico"));
		//jButtonid_cuenta_contable_activoParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableActivo("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_pasivoParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_pasivoParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGrafico"));
		//jButtonid_cuenta_contable_pasivoParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContablePasivo("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_inventarioParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventarioParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGrafico"));
		//jButtonid_cuenta_contable_inventarioParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_disponibilidadParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_disponibilidadParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGrafico"));
		//jButtonid_cuenta_contable_disponibilidadParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDisponibilidad("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_costo_ventaParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costo_ventaParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGrafico"));
		//jButtonid_cuenta_contable_costo_ventaParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCostoVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_inventario_iniParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventario_iniParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGrafico"));
		//jButtonid_cuenta_contable_inventario_iniParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventarioIni("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_inventario_finParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventario_finParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGrafico"));
		//jButtonid_cuenta_contable_inventario_finParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventarioFin("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_cuenta_cobrarParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGrafico"));
		//jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCuentasCobrar("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_venta_creditoParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_venta_creditoParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGrafico"));
		//jButtonid_cuenta_contable_venta_creditoParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableVentaCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_activo_totalParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_activo_totalParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGrafico"));
		//jButtonid_cuenta_contable_activo_totalParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableActivoTotal("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_pasivo_totalParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_pasivo_totalParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGrafico"));
		//jButtonid_cuenta_contable_pasivo_totalParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContablePasivoTotal("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_patrimonioParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_patrimonioParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGrafico"));
		//jButtonid_cuenta_contable_patrimonioParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContablePatrimonio("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_patrimonio_totalParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_patrimonio_totalParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGrafico"));
		//jButtonid_cuenta_contable_patrimonio_totalParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContablePatrimonioTotal("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_ventaParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_ventaParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGrafico"));
		//jButtonid_cuenta_contable_ventaParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGraficoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtoninventario_inicialParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"inventario_inicialParametroGraficoBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormParametroGrafico.jTabbedPaneRelacionesParametroGrafico.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesParametroGrafico"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameParametroGrafico"));
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarParametroGrafico"));
		}
		
		this.jTableDatosParametroGrafico.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarParametroGrafico"));
		
		this.jTableDatosParametroGrafico.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarParametroGrafico"));
		
		this.jButtonNuevoParametroGrafico.addActionListener(new ButtonActionListener(this,"NuevoParametroGrafico"));
		
		this.jButtonDuplicarParametroGrafico.addActionListener(new ButtonActionListener(this,"DuplicarParametroGrafico"));
		
		this.jButtonCopiarParametroGrafico.addActionListener(new ButtonActionListener(this,"CopiarParametroGrafico"));
		
		this.jButtonVerFormParametroGrafico.addActionListener(new ButtonActionListener(this,"VerFormParametroGrafico"));
		
		
		this.jButtonNuevoToolBarParametroGrafico.addActionListener(new ButtonActionListener(this,"NuevoToolBarParametroGrafico"));
			
		this.jButtonDuplicarToolBarParametroGrafico.addActionListener(new ButtonActionListener(this,"DuplicarToolBarParametroGrafico"));
			
		this.jMenuItemNuevoParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemNuevoParametroGrafico"));
			
		this.jMenuItemDuplicarParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarParametroGrafico"));		
		
		
		this.jButtonNuevoRelacionesParametroGrafico.addActionListener (new ButtonActionListener(this,"NuevoRelacionesParametroGrafico"));
		
		
		this.jButtonNuevoRelacionesToolBarParametroGrafico.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarParametroGrafico"));
			
		this.jMenuItemNuevoRelacionesParametroGrafico.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesParametroGrafico"));		
		
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.jButtonModificarParametroGrafico.addActionListener(new ButtonActionListener(this,"ModificarParametroGrafico"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.jButtonModificarToolBarParametroGrafico.addActionListener(new ButtonActionListener(this,"ModificarToolBarParametroGrafico"));
			
			this.jInternalFrameDetalleFormParametroGrafico.jMenuItemModificarParametroGrafico.addActionListener(new ButtonActionListener(this,"MenuItemModificarParametroGrafico"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormParametroGrafico.jButtonActualizarParametroGrafico.addActionListener (new ButtonActionListener(this,"ActualizarParametroGrafico"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.jButtonActualizarToolBarParametroGrafico.addActionListener(new ButtonActionListener(this,"ActualizarToolBarParametroGrafico"));
				
			this.jInternalFrameDetalleFormParametroGrafico.jMenuItemActualizarParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemActualizarParametroGrafico"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.jButtonEliminarParametroGrafico.addActionListener (new ButtonActionListener(this,"EliminarParametroGrafico"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.jButtonEliminarToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"EliminarToolBarParametroGrafico"));
						
			this.jInternalFrameDetalleFormParametroGrafico.jMenuItemEliminarParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemEliminarParametroGrafico"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.jButtonCancelarParametroGrafico.addActionListener (new ButtonActionListener(this,"CancelarParametroGrafico"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.jButtonCancelarToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"CancelarToolBarParametroGrafico"));
			
			this.jInternalFrameDetalleFormParametroGrafico.jMenuItemCancelarParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemCancelarParametroGrafico"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarParametroGrafico"));		
		
		
		this.jButtonCerrarParametroGrafico.addActionListener (new ButtonActionListener(this,"CerrarParametroGrafico"));
		
		
		this.jButtonCerrarToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"CerrarToolBarParametroGrafico"));
			
		this.jMenuItemCerrarParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemCerrarParametroGrafico"));
			
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.jMenuItemDetalleCerrarParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarParametroGrafico"));		
		}
		
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.jButtonGuardarCambiosParametroGrafico.addActionListener (new ButtonActionListener(this,"GuardarCambiosParametroGrafico"));
		}
		
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.jButtonGuardarCambiosToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarParametroGrafico"));
		}
		
		this.jButtonCopiarToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"CopiarToolBarParametroGrafico"));
			
		this.jButtonVerFormToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"VerFormToolBarParametroGrafico"));
		
		this.jMenuItemGuardarCambiosParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosParametroGrafico"));
			
		this.jMenuItemCopiarParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemCopiarParametroGrafico"));		
		
		this.jMenuItemVerFormParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemVerFormParametroGrafico"));		
		
		
		this.jButtonGuardarCambiosTablaParametroGrafico.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaParametroGrafico"));
		
		
		this.jButtonGuardarCambiosTablaToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarParametroGrafico"));
			
		this.jMenuItemGuardarCambiosTablaParametroGrafico.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaParametroGrafico"));		
		
		
		
		this.jButtonRecargarInformacionParametroGrafico.addActionListener (new ButtonActionListener(this,"RecargarInformacionParametroGrafico"));
					
		this.jButtonRecargarInformacionToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarParametroGrafico"));
		
		this.jMenuItemRecargarInformacionParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionParametroGrafico"));		
		
		
		
		this.jButtonAnterioresParametroGrafico.addActionListener (new ButtonActionListener(this,"AnterioresParametroGrafico"));
		
		
		this.jButtonAnterioresToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"AnterioresToolBarParametroGrafico"));
		
		this.jMenuItemAnterioresParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresParametroGrafico"));		
		
		
		this.jButtonSiguientesParametroGrafico.addActionListener (new ButtonActionListener(this,"SiguientesParametroGrafico"));
		
		
		this.jButtonSiguientesToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"SiguientesToolBarParametroGrafico"));
			
		this.jMenuItemSiguientesParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesParametroGrafico"));
			
		this.jMenuItemAbrirOrderByParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByParametroGrafico"));
			
		this.jMenuItemMostrarOcultarParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarParametroGrafico"));
			
		this.jMenuItemDetalleAbrirOrderByParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByParametroGrafico"));
			
		this.jMenuItemDetalleMostarOcultarParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarParametroGrafico"));		
		
		
		this.jButtonNuevoGuardarCambiosParametroGrafico.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosParametroGrafico"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarParametroGrafico"));
			
		this.jMenuItemNuevoGuardarCambiosParametroGrafico.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosParametroGrafico"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosParametroGrafico.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosParametroGrafico"));

		this.jCheckBoxSeleccionadosParametroGrafico.addItemListener(new CheckBoxItemListener(this,"SeleccionadosParametroGrafico"));
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioParametroGrafico"));
		}
		
		
		this.jComboBoxTiposRelacionesParametroGrafico.addActionListener (new ButtonActionListener(this,"TiposRelacionesParametroGrafico"));
			
		this.jComboBoxTiposAccionesParametroGrafico.addActionListener (new ButtonActionListener(this,"TiposAccionesParametroGrafico"));
					
		this.jComboBoxTiposSeleccionarParametroGrafico.addActionListener (new ButtonActionListener(this,"TiposSeleccionarParametroGrafico"));
			
		this.jTextFieldValorCampoGeneralParametroGrafico.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralParametroGrafico"));		
		
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonidParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"idParametroGraficoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_empresaParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_empresaParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_activoParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_activoParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGrafico"));
		//jButtonid_cuenta_contable_activoParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableActivo("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_pasivoParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_pasivoParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGrafico"));
		//jButtonid_cuenta_contable_pasivoParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContablePasivo("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_inventarioParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventarioParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGrafico"));
		//jButtonid_cuenta_contable_inventarioParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_disponibilidadParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_disponibilidadParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGrafico"));
		//jButtonid_cuenta_contable_disponibilidadParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDisponibilidad("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_costo_ventaParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costo_ventaParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGrafico"));
		//jButtonid_cuenta_contable_costo_ventaParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCostoVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_inventario_iniParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventario_iniParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGrafico"));
		//jButtonid_cuenta_contable_inventario_iniParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventarioIni("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_inventario_finParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventario_finParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGrafico"));
		//jButtonid_cuenta_contable_inventario_finParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventarioFin("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_cuenta_cobrarParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGrafico"));
		//jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCuentasCobrar("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_venta_creditoParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_venta_creditoParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGrafico"));
		//jButtonid_cuenta_contable_venta_creditoParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableVentaCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_activo_totalParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_activo_totalParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGrafico"));
		//jButtonid_cuenta_contable_activo_totalParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableActivoTotal("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_pasivo_totalParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_pasivo_totalParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGrafico"));
		//jButtonid_cuenta_contable_pasivo_totalParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContablePasivoTotal("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_patrimonioParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_patrimonioParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGrafico"));
		//jButtonid_cuenta_contable_patrimonioParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContablePatrimonio("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_patrimonio_totalParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_patrimonio_totalParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGrafico"));
		//jButtonid_cuenta_contable_patrimonio_totalParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContablePatrimonioTotal("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_ventaParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_ventaParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGrafico"));
		//jButtonid_cuenta_contable_ventaParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGraficoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtoninventario_inicialParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"inventario_inicialParametroGraficoBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdCuentaContableActivoParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableActivoParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContableActivoid_cuenta_contable_activoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGrafico"));

			this.jButtonFK_IdCuentaContableActivoTotalParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableActivoTotalParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContableActivoTotalid_cuenta_contable_activo_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGrafico"));

			this.jButtonFK_IdCuentaContableCostoVentaParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCostoVentaParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContableCostoVentaid_cuenta_contable_costo_ventaParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGrafico"));

			this.jButtonFK_IdCuentaContableCuentasCobrarParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCuentasCobrarParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContableCuentasCobrarid_cuenta_contable_cuenta_cobrarParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGrafico"));

			this.jButtonFK_IdCuentaContableDisponibiladParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDisponibiladParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContableDisponibiladid_cuenta_contable_disponibilidadParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGrafico"));

			this.jButtonFK_IdCuentaContableInventarioParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableInventarioParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContableInventarioid_cuenta_contable_inventarioParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGrafico"));

			this.jButtonFK_IdCuentaContableInventarioFinParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableInventarioFinParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContableInventarioFinid_cuenta_contable_inventario_finParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGrafico"));

			this.jButtonFK_IdCuentaContableInventarioIniParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableInventarioIniParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContableInventarioIniid_cuenta_contable_inventario_iniParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGrafico"));

			this.jButtonFK_IdCuentaContablePasivoParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContablePasivoParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContablePasivoid_cuenta_contable_pasivoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGrafico"));

			this.jButtonFK_IdCuentaContablePasivoTotalParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContablePasivoTotalParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContablePasivoTotalid_cuenta_contable_pasivo_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGrafico"));

			this.jButtonFK_IdCuentaContablePatrimonioParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContablePatrimonioParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContablePatrimonioid_cuenta_contable_patrimonioParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGrafico"));

			this.jButtonFK_IdCuentaContablePatrimonioTotalParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContablePatrimonioTotalParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContablePatrimonioTotalid_cuenta_contable_patrimonio_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGrafico"));

			this.jButtonFK_IdCuentaContableVentaParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableVentaParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContableVentaid_cuenta_contable_ventaParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGrafico"));

			this.jButtonFK_IdCuentaContableVentaCreditoParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableVentaCreditoParametroGrafico"));

			this.jButtonBuscarFK_IdCuentaContableVentaCreditoid_cuenta_contable_venta_creditoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGrafico"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoParametroGrafico!=null) {
				this.jInternalFrameReporteDinamicoParametroGrafico.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoParametroGrafico"));
				this.jInternalFrameReporteDinamicoParametroGrafico.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoParametroGrafico"));
				this.jInternalFrameReporteDinamicoParametroGrafico.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoParametroGrafico"));
			}
			
			//this.jButtonCerrarReporteDinamicoParametroGrafico.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoParametroGrafico"));				
			//this.jButtonGenerarReporteDinamicoParametroGrafico.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoParametroGrafico"));
			//this.jButtonGenerarExcelReporteDinamicoParametroGrafico.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoParametroGrafico"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionParametroGrafico!=null) {
				this.jInternalFrameImportacionParametroGrafico.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionParametroGrafico"));
				this.jInternalFrameImportacionParametroGrafico.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionParametroGrafico"));
				this.jInternalFrameImportacionParametroGrafico.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionParametroGrafico"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByParametroGrafico.addActionListener (new ButtonActionListener(this,"AbrirOrderByParametroGrafico"));
			
			this.jButtonAbrirOrderByToolBarParametroGrafico.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarParametroGrafico"));			
			
			if(this.jInternalFrameOrderByParametroGrafico!=null) {
				this.jInternalFrameOrderByParametroGrafico.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByParametroGrafico"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormParametroGrafico.jTabbedPaneRelacionesParametroGrafico.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesParametroGrafico"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameParametroGrafico();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormParametroGrafico.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormParametroGrafico = (JInternalFrameBase)event.getSource();
	            	
	            ParametroGraficoBeanSwingJInternalFrame jInternalFrameParent=(ParametroGraficoBeanSwingJInternalFrame)jInternalFrameDetalleFormParametroGrafico.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarParametroGraficoActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosParametroGrafico.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosParametroGraficoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosParametroGrafico.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosParametroGrafico.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroGraficoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroGraficoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroGraficoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoParametroGrafico";
		inputMap = this.jButtonNuevoParametroGrafico.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoParametroGrafico.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoParametroGraficoActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroGraficoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroGraficoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoParametroGraficoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesParametroGrafico";
		inputMap = this.jButtonNuevoRelacionesParametroGrafico.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesParametroGrafico.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoParametroGraficoActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarParametroGrafico";
		inputMap = this.jButtonModificarParametroGrafico.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarParametroGrafico.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarParametroGraficoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarParametroGrafico";
		inputMap = this.jButtonActualizarParametroGrafico.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarParametroGrafico.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarParametroGraficoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarParametroGrafico";
		inputMap = this.jButtonEliminarParametroGrafico.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarParametroGrafico.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarParametroGraficoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarParametroGrafico";
		inputMap = this.jButtonCancelarParametroGrafico.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarParametroGrafico.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarParametroGraficoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarParametroGrafico";
		inputMap = this.jButtonCerrarParametroGrafico.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarParametroGrafico.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarParametroGraficoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormParametroGrafico.jButtonGuardarCambiosParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosParametroGrafico";
		inputMap = this.jInternalFrameDetalleFormParametroGrafico.jButtonGuardarCambiosParametroGrafico.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormParametroGrafico.jButtonGuardarCambiosParametroGrafico.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosParametroGraficoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosParametroGrafico.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosParametroGraficoItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesParametroGrafico.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesParametroGraficoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarParametroGrafico.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarParametroGraficoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralParametroGrafico.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralParametroGraficoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonidParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"idParametroGraficoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_empresaParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_empresaParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_activoParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_activoParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGrafico"));
		//jButtonid_cuenta_contable_activoParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableActivo("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_pasivoParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_pasivoParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGrafico"));
		//jButtonid_cuenta_contable_pasivoParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContablePasivo("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_inventarioParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventarioParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGrafico"));
		//jButtonid_cuenta_contable_inventarioParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventario("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_disponibilidadParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_disponibilidadParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGrafico"));
		//jButtonid_cuenta_contable_disponibilidadParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableDisponibilidad("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_costo_ventaParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_costo_ventaParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGrafico"));
		//jButtonid_cuenta_contable_costo_ventaParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCostoVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_inventario_iniParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventario_iniParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGrafico"));
		//jButtonid_cuenta_contable_inventario_iniParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventarioIni("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_inventario_finParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_inventario_finParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGrafico"));
		//jButtonid_cuenta_contable_inventario_finParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableInventarioFin("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_cuenta_cobrarParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGrafico"));
		//jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCuentasCobrar("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_venta_creditoParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_venta_creditoParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGrafico"));
		//jButtonid_cuenta_contable_venta_creditoParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableVentaCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_activo_totalParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_activo_totalParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGrafico"));
		//jButtonid_cuenta_contable_activo_totalParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableActivoTotal("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_pasivo_totalParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_pasivo_totalParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGrafico"));
		//jButtonid_cuenta_contable_pasivo_totalParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContablePasivoTotal("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_patrimonioParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_patrimonioParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGrafico"));
		//jButtonid_cuenta_contable_patrimonioParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContablePatrimonio("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_patrimonio_totalParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_patrimonio_totalParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGrafico"));
		//jButtonid_cuenta_contable_patrimonio_totalParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContablePatrimonioTotal("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGraficoBusqueda"));
		//jButtonid_cuenta_contable_ventaParametroGrafico.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_ventaParametroGraficoActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGrafico"));
		//jButtonid_cuenta_contable_ventaParametroGraficoArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableVenta("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGraficoArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGraficoArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGraficoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGraficoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGraficoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormParametroGrafico.jButtoninventario_inicialParametroGraficoBusqueda.addActionListener(new ButtonActionListener(this,"inventario_inicialParametroGraficoBusqueda"));
		
		
		this.jButtonFK_IdCuentaContableActivoParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableActivoParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContableActivoid_cuenta_contable_activoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activoParametroGrafico"));

		this.jButtonFK_IdCuentaContableActivoTotalParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableActivoTotalParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContableActivoTotalid_cuenta_contable_activo_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_activo_totalParametroGrafico"));

		this.jButtonFK_IdCuentaContableCostoVentaParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCostoVentaParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContableCostoVentaid_cuenta_contable_costo_ventaParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_costo_ventaParametroGrafico"));

		this.jButtonFK_IdCuentaContableCuentasCobrarParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCuentasCobrarParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContableCuentasCobrarid_cuenta_contable_cuenta_cobrarParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_cuenta_cobrarParametroGrafico"));

		this.jButtonFK_IdCuentaContableDisponibiladParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDisponibiladParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContableDisponibiladid_cuenta_contable_disponibilidadParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_disponibilidadParametroGrafico"));

		this.jButtonFK_IdCuentaContableInventarioParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableInventarioParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContableInventarioid_cuenta_contable_inventarioParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventarioParametroGrafico"));

		this.jButtonFK_IdCuentaContableInventarioFinParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableInventarioFinParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContableInventarioFinid_cuenta_contable_inventario_finParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_finParametroGrafico"));

		this.jButtonFK_IdCuentaContableInventarioIniParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableInventarioIniParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContableInventarioIniid_cuenta_contable_inventario_iniParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_inventario_iniParametroGrafico"));

		this.jButtonFK_IdCuentaContablePasivoParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContablePasivoParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContablePasivoid_cuenta_contable_pasivoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivoParametroGrafico"));

		this.jButtonFK_IdCuentaContablePasivoTotalParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContablePasivoTotalParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContablePasivoTotalid_cuenta_contable_pasivo_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_pasivo_totalParametroGrafico"));

		this.jButtonFK_IdCuentaContablePatrimonioParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContablePatrimonioParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContablePatrimonioid_cuenta_contable_patrimonioParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonioParametroGrafico"));

		this.jButtonFK_IdCuentaContablePatrimonioTotalParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContablePatrimonioTotalParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContablePatrimonioTotalid_cuenta_contable_patrimonio_totalParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_patrimonio_totalParametroGrafico"));

		this.jButtonFK_IdCuentaContableVentaParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableVentaParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContableVentaid_cuenta_contable_ventaParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_ventaParametroGrafico"));

		this.jButtonFK_IdCuentaContableVentaCreditoParametroGrafico.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableVentaCreditoParametroGrafico"));

		this.jButtonBuscarFK_IdCuentaContableVentaCreditoid_cuenta_contable_venta_creditoParametroGrafico.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_venta_creditoParametroGrafico"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionParametroGrafico.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionParametroGraficoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarParametroGraficoActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarParametroGrafico.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosParametroGrafico(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(ParametroGrafico parametrograficoAux:this.parametrograficoLogic.getParametroGraficos()) {
					parametrograficoAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroGrafico parametrograficoAux:parametrograficos) {
					parametrograficoAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosParametroGraficoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingParametroGrafico(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ParametroGrafico parametrograficoAux:this.parametrograficoLogic.getParametroGraficos()) {
						parametrograficoAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ParametroGrafico parametrograficoAux:parametrograficos) {
						parametrograficoAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(ParametroGrafico parametrograficoAux:this.parametrograficoLogic.getParametroGraficos()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ParametroGrafico parametrograficoAux:parametrograficos) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaParametroGrafico(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosParametroGrafico.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosParametroGrafico.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosParametroGraficoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingParametroGrafico(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosParametroGrafico.getSelectedRows();
			
			ParametroGrafico parametrograficoLocal=new ParametroGrafico();
			
			//this.seleccionarTodosParametroGrafico(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					parametrograficoLocal =(ParametroGrafico) this.parametrograficoLogic.getParametroGraficos().toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					parametrograficoLocal =(ParametroGrafico) this.parametrograficos.toArray()[this.jTableDatosParametroGrafico.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				parametrograficoLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(ParametroGrafico parametrograficoAux:this.parametrograficoLogic.getParametroGraficos()) {
						parametrograficoAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(ParametroGrafico parametrograficoAux:parametrograficos) {
						parametrograficoAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaParametroGrafico(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosParametroGrafico.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosParametroGrafico.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosParametroGrafico,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualParametroGraficoItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarParametroGraficoParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralParametroGraficoActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingParametroGrafico(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralParametroGrafico.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(ParametroGrafico parametrograficoAux:this.parametrograficoLogic.getParametroGraficos()) {
				
						if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL)) {
							existe=true;
							parametrograficoAux.setinventario_inicial(Double.parseDouble(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroGrafico parametrograficoAux:parametrograficos) {
					
						if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL)) {
							existe=true;
							parametrograficoAux.setinventario_inicial(Double.parseDouble(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaParametroGrafico(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesParametroGraficoActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingParametroGrafico(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioParametroGrafico=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesParametroGrafico.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteParametroGrafico) {				
					conSplash=true;//false;										
					
					//this.startProcessParametroGrafico(conSplash);
				
					this.generarReporteParametroGraficosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroGrafico.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoParametroGraficosSeleccionados();
				//this.jComboBoxTiposAccionesParametroGrafico.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoParametroGraficosSeleccionados(false);
				//this.jComboBoxTiposAccionesParametroGrafico.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoParametroGraficosSeleccionados(true);
				//this.jComboBoxTiposAccionesParametroGrafico.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessParametroGrafico();
				
				this.exportarParametroGraficosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroGrafico.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionParametroGraficos();
				//this.importarParametroGraficos();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroGrafico.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessParametroGrafico();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelParametroGraficosSeleccionados();
				//this.jComboBoxTiposAccionesParametroGrafico.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Parametro Grafico", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessParametroGrafico();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoParametroGrafico)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyParametroGrafico(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Parametro Grafico",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesParametroGrafico.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.setSelectedIndex(0);					
				}	
			} 			
			else if(ParametroGraficoBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteParametroGrafico) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessParametroGrafico(conSplash);
					
						//this.actualizarParametrosGeneralParametroGrafico();
						
						this.generarReporteProcesoAccionParametroGraficosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesParametroGrafico.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(ParametroGraficoBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Parametro GraficoS SELECCIONADOS?", "MANTENIMIENTO DE Parametro Grafico", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessParametroGrafico();
				
						this.actualizarParametrosGeneralParametroGrafico();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.parametrograficoReturnGeneral=parametrograficoLogic.procesarAccionParametroGraficosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.parametrograficoLogic.getParametroGraficos(),this.parametrograficoParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarParametroGraficoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesParametroGrafico.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralParametroGrafico();
					
					ParametroGraficoBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarParametroGraficoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesParametroGrafico.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormParametroGrafico.jComboBoxTiposAccionesFormularioParametroGrafico.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessParametroGrafico(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesParametroGraficoActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessParametroGrafico();
			
			if(this.jInternalFrameDetalleFormParametroGrafico==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();		
			ParametroGrafico parametrografico=new ParametroGrafico();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingParametroGrafico(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesParametroGrafico.getSelectedItem();
			
			
			
			
			parametrograficosSeleccionados=this.getParametroGraficosSeleccionados(true);
			//this.sTipoAccion;
			
			if(parametrograficosSeleccionados.size()==1) {
				for(ParametroGrafico parametrograficoAux:parametrograficosSeleccionados) {
					parametrografico=parametrograficoAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessParametroGrafico();
			
      		//this.finishProcessParametroGrafico(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarParametroGraficoReturnGeneral() throws Exception {
		if(this.parametrograficoReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.parametrograficoReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.parametrograficoReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.parametrograficoReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.parametrograficoReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.parametrograficoReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingParametroGrafico(false);
		}
		
		if(this.parametrograficoReturnGeneral.getConRetornoLista() || this.parametrograficoReturnGeneral.getConRetornoObjeto()) {
			if(this.parametrograficoReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.parametrograficoLogic.setParametroGraficos(this.parametrograficoReturnGeneral.getParametroGraficos());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.parametrograficoReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.parametrograficoLogic.setParametroGrafico(this.parametrograficoReturnGeneral.getParametroGrafico());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingParametroGrafico(false);
		}
	}
	
	public void actualizarParametrosGeneralParametroGrafico() throws Exception {
		
		
	}
	
	public ArrayList<ParametroGrafico> getParametroGraficosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioParametroGrafico) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(ParametroGrafico parametrograficoAux:parametrograficoLogic.getParametroGraficos()) {
					if(parametrograficoAux.getIsSelected()) {
						parametrograficosSeleccionados.add(parametrograficoAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(ParametroGrafico parametrograficoAux:this.parametrograficos) {
					if(parametrograficoAux.getIsSelected()) {
						parametrograficosSeleccionados.add(parametrograficoAux);				
					}
				}
			}
			
			if(parametrograficosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						parametrograficosSeleccionados.addAll(this.parametrograficoLogic.getParametroGraficos());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						parametrograficosSeleccionados.addAll(this.parametrograficos);				
					}
				}
			}
		} else {
			parametrograficosSeleccionados.add(this.parametrografico);
		}
		
		return parametrograficosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteParametroGraficosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalParametroGraficosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoParametroGraficosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoParametroGraficosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoParametroGraficosSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Parametro Grafico",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesParametroGraficosSeleccionados() throws Exception {
		ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();		
		
		parametrograficosSeleccionados=this.getParametroGraficosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteParametroGraficos("Todos",parametrograficosSeleccionados);
		
	}	
	
	public void generarReporteNormalParametroGraficosSeleccionados() throws Exception {
		ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();		
		
		parametrograficosSeleccionados=this.getParametroGraficosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteParametroGraficos("Todos",parametrograficosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionParametroGraficosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();
		
		parametrograficosSeleccionados=this.getParametroGraficosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteParametroGraficos("Todos",parametrograficosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoParametroGraficosSeleccionados() throws Exception {
		ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();		
		
		
		this.abrirInicializarFrameReporteDinamicoParametroGrafico();
		
		
		parametrograficosSeleccionados=this.getParametroGraficosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoParametroGrafico();
		
		
		//this.generarReporteParametroGraficos("Todos",parametrograficosSeleccionados ,parametrograficoImplementable,parametrograficoImplementableHome);
	}
	
	public void mostrarImportacionParametroGraficos() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionParametroGrafico();
		
		this.abrirFrameImportacionParametroGrafico();		
		
			
		//this.generarReporteParametroGraficos("Todos",parametrograficosSeleccionados ,parametrograficoImplementable,parametrograficoImplementableHome);
	}
	
	public void importarParametroGraficos() throws Exception {		
	
	}
	
	public void exportarParametroGraficosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelParametroGraficosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoParametroGraficosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlParametroGraficosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Parametro Grafico",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoParametroGraficosSeleccionados() throws Exception {
		ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();		
		
		parametrograficosSeleccionados=this.getParametroGraficosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrografico."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarParametroGrafico(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(ParametroGrafico parametrograficoAux:parametrograficosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarParametroGrafico(parametrograficoAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//parametrograficoAux.setsDetalleGeneralEntityReporte(parametrograficoAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrograficoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Grafico",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarParametroGrafico(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarParametroGrafico(ParametroGrafico parametrografico,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=parametrografico.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontableactivo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontablepasivo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontableinventario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontabledisponibilidad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontablecostoventa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontableinventarioini_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontableinventariofin_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontablecuentascobrar_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontableventacredito_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontableactivototal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontablepasivototal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontablepatrimonio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontablepatrimoniototal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getcuentacontableventa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=parametrografico.getinventario_inicial().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelParametroGraficosSeleccionados() throws Exception {
		ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();		
		
		parametrograficosSeleccionados=this.getParametroGraficosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrografico.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("ParametroGraficos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelParametroGrafico(row);				
				iRow++;
			}				
			
			for(ParametroGrafico parametrograficoAux:parametrograficosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelParametroGrafico(parametrograficoAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrograficoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Grafico",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlParametroGraficosSeleccionados() throws Exception {
		ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();		
		
		parametrograficosSeleccionados=this.getParametroGraficosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"parametrografico.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("parametrograficos");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("parametrografico");
			//elementRoot.appendChild(element);
		
			for(ParametroGrafico parametrograficoAux:parametrograficosSeleccionados) {
				element = document.createElement("parametrografico");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlParametroGrafico(parametrograficoAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.parametrograficoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Parametro Grafico",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelParametroGrafico(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(ParametroGraficoConstantesFunciones.LABEL_INVENTARIOINICIAL);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelParametroGrafico(ParametroGrafico parametrografico,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontableactivo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontablepasivo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontableinventario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontabledisponibilidad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontablecostoventa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontableinventarioini_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontableinventariofin_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontablecuentascobrar_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontableventacredito_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontableactivototal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontablepasivototal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontablepatrimonio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontablepatrimoniototal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getcuentacontableventa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(parametrografico.getinventario_inicial());				
	}
	
	public void setFilaDatosExportarXmlParametroGrafico(ParametroGrafico parametrografico,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(ParametroGraficoConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(parametrografico.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(ParametroGraficoConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(parametrografico.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(parametrografico.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementcuentacontableactivo_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEACTIVO);
		elementcuentacontableactivo_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontableactivo_descripcion()));
		element.appendChild(elementcuentacontableactivo_descripcion);

		Element elementcuentacontablepasivo_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEPASIVO);
		elementcuentacontablepasivo_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontablepasivo_descripcion()));
		element.appendChild(elementcuentacontablepasivo_descripcion);

		Element elementcuentacontableinventario_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEINVENTARIO);
		elementcuentacontableinventario_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontableinventario_descripcion()));
		element.appendChild(elementcuentacontableinventario_descripcion);

		Element elementcuentacontabledisponibilidad_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEDISPONIBILIDAD);
		elementcuentacontabledisponibilidad_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontabledisponibilidad_descripcion()));
		element.appendChild(elementcuentacontabledisponibilidad_descripcion);

		Element elementcuentacontablecostoventa_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLECOSTOVENTA);
		elementcuentacontablecostoventa_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontablecostoventa_descripcion()));
		element.appendChild(elementcuentacontablecostoventa_descripcion);

		Element elementcuentacontableinventarioini_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEINVENTARIOINI);
		elementcuentacontableinventarioini_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontableinventarioini_descripcion()));
		element.appendChild(elementcuentacontableinventarioini_descripcion);

		Element elementcuentacontableinventariofin_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEINVENTARIOFIN);
		elementcuentacontableinventariofin_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontableinventariofin_descripcion()));
		element.appendChild(elementcuentacontableinventariofin_descripcion);

		Element elementcuentacontablecuentascobrar_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLECUENTASCOBRAR);
		elementcuentacontablecuentascobrar_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontablecuentascobrar_descripcion()));
		element.appendChild(elementcuentacontablecuentascobrar_descripcion);

		Element elementcuentacontableventacredito_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEVENTACREDITO);
		elementcuentacontableventacredito_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontableventacredito_descripcion()));
		element.appendChild(elementcuentacontableventacredito_descripcion);

		Element elementcuentacontableactivototal_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEACTIVOTOTAL);
		elementcuentacontableactivototal_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontableactivototal_descripcion()));
		element.appendChild(elementcuentacontableactivototal_descripcion);

		Element elementcuentacontablepasivototal_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEPASIVOTOTAL);
		elementcuentacontablepasivototal_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontablepasivototal_descripcion()));
		element.appendChild(elementcuentacontablepasivototal_descripcion);

		Element elementcuentacontablepatrimonio_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEPATRIMONIO);
		elementcuentacontablepatrimonio_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontablepatrimonio_descripcion()));
		element.appendChild(elementcuentacontablepatrimonio_descripcion);

		Element elementcuentacontablepatrimoniototal_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEPATRIMONIOTOTAL);
		elementcuentacontablepatrimoniototal_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontablepatrimoniototal_descripcion()));
		element.appendChild(elementcuentacontablepatrimoniototal_descripcion);

		Element elementcuentacontableventa_descripcion = document.createElement(ParametroGraficoConstantesFunciones.IDCUENTACONTABLEVENTA);
		elementcuentacontableventa_descripcion.appendChild(document.createTextNode(parametrografico.getcuentacontableventa_descripcion()));
		element.appendChild(elementcuentacontableventa_descripcion);

		Element elementinventario_inicial = document.createElement(ParametroGraficoConstantesFunciones.INVENTARIOINICIAL);
		elementinventario_inicial.appendChild(document.createTextNode(parametrografico.getinventario_inicial().toString().trim()));
		element.appendChild(elementinventario_inicial);
	}
	
	public void generarReporteGroupGenericoParametroGraficosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<ParametroGrafico> parametrograficosSeleccionados=new ArrayList<ParametroGrafico>();
		
		parametrograficosSeleccionados=this.getParametroGraficosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoParametroGrafico(parametrograficosSeleccionados);
		
		this.generarReporteParametroGraficos("Todos",parametrograficosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoParametroGrafico(ArrayList<ParametroGrafico> parametrograficosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(ParametroGrafico parametrograficoAux:parametrograficosSeleccionados) {
				parametrograficoAux.setsDetalleGeneralEntityReporte(parametrograficoAux.toString());
			
				if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVO)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontableactivo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVO)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontablepasivo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIO)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontableinventario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEDISPONIBILIDAD)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontabledisponibilidad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECOSTOVENTA)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontablecostoventa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOINI)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontableinventarioini_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEINVENTARIOFIN)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontableinventariofin_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLECUENTASCOBRAR)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontablecuentascobrar_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTACREDITO)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontableventacredito_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEACTIVOTOTAL)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontableactivototal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPASIVOTOTAL)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontablepasivototal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIO)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontablepatrimonio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEPATRIMONIOTOTAL)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontablepatrimoniototal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(ParametroGraficoConstantesFunciones.LABEL_IDCUENTACONTABLEVENTA)) {
					existe=true;
					parametrograficoAux.setsDescripcionGeneralEntityReporte1(parametrograficoAux.getcuentacontableventa_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,ParametroGraficoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesParametroGrafico(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoParametroGrafico=true;
				this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=true;
				this.isVisibilidadCeldaGuardarCambiosParametroGrafico=true;
			}
			
			this.isVisibilidadCeldaModificarParametroGrafico=false;
			this.isVisibilidadCeldaActualizarParametroGrafico=false;
			this.isVisibilidadCeldaEliminarParametroGrafico=false;
			this.isVisibilidadCeldaCancelarParametroGrafico=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroGrafico=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroGrafico=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoParametroGrafico=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=false;
			this.isVisibilidadCeldaGuardarCambiosParametroGrafico=false;
			this.isVisibilidadCeldaModificarParametroGrafico=false;
			this.isVisibilidadCeldaActualizarParametroGrafico=true;
			this.isVisibilidadCeldaEliminarParametroGrafico=false;
			this.isVisibilidadCeldaCancelarParametroGrafico=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroGrafico=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroGrafico=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoParametroGrafico=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=false;
			this.isVisibilidadCeldaGuardarCambiosParametroGrafico=false;
			this.isVisibilidadCeldaModificarParametroGrafico=false;
			this.isVisibilidadCeldaActualizarParametroGrafico=true;
			this.isVisibilidadCeldaEliminarParametroGrafico=true;
			this.isVisibilidadCeldaCancelarParametroGrafico=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroGrafico=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroGrafico=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoParametroGrafico=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=false;
			this.isVisibilidadCeldaGuardarCambiosParametroGrafico=false;
			this.isVisibilidadCeldaModificarParametroGrafico=false;
			this.isVisibilidadCeldaActualizarParametroGrafico=true;
			this.isVisibilidadCeldaEliminarParametroGrafico=false;
			this.isVisibilidadCeldaCancelarParametroGrafico=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroGrafico=false;
				} else {
					this.isVisibilidadCeldaGuardarParametroGrafico=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoParametroGrafico=true;
			this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=true;
			this.isVisibilidadCeldaGuardarCambiosParametroGrafico=true;
			this.isVisibilidadCeldaModificarParametroGrafico=false;
			this.isVisibilidadCeldaActualizarParametroGrafico=false;
			this.isVisibilidadCeldaEliminarParametroGrafico=false;
			this.isVisibilidadCeldaCancelarParametroGrafico=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroGrafico=true;
				} else {
					this.isVisibilidadCeldaGuardarParametroGrafico=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoParametroGrafico=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=false;
			this.isVisibilidadCeldaGuardarCambiosParametroGrafico=false;
			this.isVisibilidadCeldaActualizarParametroGrafico=false;
			this.isVisibilidadCeldaEliminarParametroGrafico=false;
			this.isVisibilidadCeldaCancelarParametroGrafico=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroGrafico=false;
				} else {
					this.isVisibilidadCeldaGuardarParametroGrafico=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoParametroGrafico=false;
			this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=false;
			this.isVisibilidadCeldaGuardarCambiosParametroGrafico=false;
			this.isVisibilidadCeldaModificarParametroGrafico=true;
			this.isVisibilidadCeldaActualizarParametroGrafico=false;
			this.isVisibilidadCeldaEliminarParametroGrafico=false;
			this.isVisibilidadCeldaCancelarParametroGrafico=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarParametroGrafico=false;
				} else {
					this.isVisibilidadCeldaGuardarParametroGrafico=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(ParametroGraficoJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoParametroGrafico=true;
			this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=true;
			this.isVisibilidadCeldaGuardarCambiosParametroGrafico=true;
		} else {
			this.actualizarEstadoPanelsParametroGrafico(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarParametroGrafico=false;
			//this.isVisibilidadCeldaVerFormParametroGrafico=false;
			this.isVisibilidadCeldaDuplicarParametroGrafico=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!parametrograficoSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=false;
		} else {
			this.isVisibilidadCeldaNuevoParametroGrafico=false;
			this.isVisibilidadCeldaGuardarCambiosParametroGrafico=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(parametrograficoSessionBean.getEsGuardarRelacionado()) {
			if(!parametrograficoSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=false;												
			}
			
			this.jButtonCerrarParametroGrafico.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesParametroGrafico=false;
		}
		
		if(!this.permiteMantenimiento(this.parametrografico)) {
			this.isVisibilidadCeldaActualizarParametroGrafico=false;
			this.isVisibilidadCeldaEliminarParametroGrafico=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesParametroGrafico() {
	}
	
	public void actualizarEstadoPanelsParametroGrafico(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionParametroGrafico!=null) {
				this.jScrollPanelDatosEdicionParametroGrafico.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroGrafico!=null) {
				this.jTabbedPaneBusquedasParametroGrafico.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroGrafico!=null) {
				this.jScrollPanelDatosParametroGrafico.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroGrafico!=null) {
				this.jPanelPaginacionParametroGrafico.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroGrafico!=null) {
				this.jPanelParametrosReportesParametroGrafico.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionParametroGrafico!=null) {
				this.jScrollPanelDatosEdicionParametroGrafico.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroGrafico!=null) {
				this.jTabbedPaneBusquedasParametroGrafico.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosParametroGrafico!=null) {
				this.jScrollPanelDatosParametroGrafico.setVisible(false);
			}
			
			if(this.jPanelPaginacionParametroGrafico!=null) {
				this.jPanelPaginacionParametroGrafico.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesParametroGrafico!=null) {
				this.jPanelParametrosReportesParametroGrafico.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionParametroGrafico!=null) {
				this.jScrollPanelDatosEdicionParametroGrafico.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroGrafico!=null) {
				this.jTabbedPaneBusquedasParametroGrafico.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosParametroGrafico!=null) {
				this.jScrollPanelDatosParametroGrafico.setVisible(false);
			}
			
			if(this.jPanelPaginacionParametroGrafico!=null) {
				this.jPanelPaginacionParametroGrafico.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesParametroGrafico!=null) {
				this.jPanelParametrosReportesParametroGrafico.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionParametroGrafico!=null) {
				this.jScrollPanelDatosEdicionParametroGrafico.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroGrafico!=null) {
				this.jTabbedPaneBusquedasParametroGrafico.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosParametroGrafico!=null) {
				this.jScrollPanelDatosParametroGrafico.setVisible(false);
			}
			
			if(this.jPanelPaginacionParametroGrafico!=null) {
				this.jPanelPaginacionParametroGrafico.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesParametroGrafico!=null) {
				this.jPanelParametrosReportesParametroGrafico.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionParametroGrafico!=null) {
				this.jScrollPanelDatosEdicionParametroGrafico.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroGrafico!=null) {
				this.jTabbedPaneBusquedasParametroGrafico.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroGrafico!=null) {
				this.jScrollPanelDatosParametroGrafico.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroGrafico!=null) {
				this.jPanelPaginacionParametroGrafico.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroGrafico!=null) {
				this.jPanelParametrosReportesParametroGrafico.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionParametroGrafico!=null) {
				this.jScrollPanelDatosEdicionParametroGrafico.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroGrafico!=null) {
				this.jTabbedPaneBusquedasParametroGrafico.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroGrafico!=null) {
				this.jScrollPanelDatosParametroGrafico.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroGrafico!=null) {
				this.jPanelPaginacionParametroGrafico.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroGrafico!=null) {
				this.jPanelParametrosReportesParametroGrafico.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionParametroGrafico!=null) {
				this.jScrollPanelDatosEdicionParametroGrafico.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroGrafico!=null) {
				this.jTabbedPaneBusquedasParametroGrafico.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosParametroGrafico!=null) {
				this.jScrollPanelDatosParametroGrafico.setVisible(true);
			}
			
			if(this.jPanelPaginacionParametroGrafico!=null) {
				this.jPanelPaginacionParametroGrafico.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesParametroGrafico!=null) {
				this.jPanelParametrosReportesParametroGrafico.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasParametroGrafico!=null) {
					this.jTabbedPaneBusquedasParametroGrafico.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesParametroGrafico!=null) {
				this.jPanelParametrosReportesParametroGrafico.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.parametrograficoSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasParametroGrafico!=null) {
				this.jTabbedPaneBusquedasParametroGrafico.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesParametroGrafico!=null) {
				this.jPanelParametrosReportesParametroGrafico.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableActivo(Boolean isParaCuentaContableActivo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableActivoNegation=!isParaCuentaContableActivo;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContableActivo;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContableActivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContableActivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContableActivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContableActivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableActivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContableActivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContableActivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContableActivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContableActivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContableActivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContableActivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableActivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContableActivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContablePasivo(Boolean isParaCuentaContablePasivo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContablePasivoNegation=!isParaCuentaContablePasivo;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContablePasivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContablePasivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContablePasivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContablePasivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContablePasivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContablePasivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContablePasivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContablePasivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContablePasivo;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContablePasivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContablePasivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContablePasivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContablePasivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContablePasivoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableInventario(Boolean isParaCuentaContableInventario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableInventarioNegation=!isParaCuentaContableInventario;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableInventario;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContableInventarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableDisponibilidad(Boolean isParaCuentaContableDisponibilidad){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableDisponibilidadNegation=!isParaCuentaContableDisponibilidad;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContableDisponibilidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContableDisponibilidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContableDisponibilidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContableDisponibilidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContableDisponibilidad;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableDisponibilidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContableDisponibilidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContableDisponibilidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContableDisponibilidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContableDisponibilidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContableDisponibilidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContableDisponibilidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableDisponibilidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContableDisponibilidadNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCostoVenta(Boolean isParaCuentaContableCostoVenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCostoVentaNegation=!isParaCuentaContableCostoVenta;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContableCostoVenta;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContableCostoVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableInventarioIni(Boolean isParaCuentaContableInventarioIni){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableInventarioIniNegation=!isParaCuentaContableInventarioIni;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContableInventarioIniNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContableInventarioIniNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContableInventarioIniNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContableInventarioIniNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContableInventarioIniNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableInventarioIniNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContableInventarioIniNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContableInventarioIni;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContableInventarioIniNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContableInventarioIniNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContableInventarioIniNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContableInventarioIniNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableInventarioIniNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContableInventarioIniNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableInventarioFin(Boolean isParaCuentaContableInventarioFin){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableInventarioFinNegation=!isParaCuentaContableInventarioFin;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContableInventarioFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContableInventarioFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContableInventarioFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContableInventarioFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContableInventarioFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableInventarioFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContableInventarioFin;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContableInventarioFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContableInventarioFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContableInventarioFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContableInventarioFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContableInventarioFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableInventarioFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContableInventarioFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCuentasCobrar(Boolean isParaCuentaContableCuentasCobrar){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCuentasCobrarNegation=!isParaCuentaContableCuentasCobrar;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContableCuentasCobrarNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContableCuentasCobrarNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContableCuentasCobrarNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContableCuentasCobrar;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContableCuentasCobrarNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableCuentasCobrarNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContableCuentasCobrarNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContableCuentasCobrarNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContableCuentasCobrarNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContableCuentasCobrarNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContableCuentasCobrarNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContableCuentasCobrarNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableCuentasCobrarNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContableCuentasCobrarNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableVentaCredito(Boolean isParaCuentaContableVentaCredito){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableVentaCreditoNegation=!isParaCuentaContableVentaCredito;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContableVentaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContableVentaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContableVentaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContableVentaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContableVentaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableVentaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContableVentaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContableVentaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContableVentaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContableVentaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContableVentaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContableVentaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableVentaCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContableVentaCredito;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableActivoTotal(Boolean isParaCuentaContableActivoTotal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableActivoTotalNegation=!isParaCuentaContableActivoTotal;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContableActivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContableActivoTotal;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContableActivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContableActivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContableActivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableActivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContableActivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContableActivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContableActivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContableActivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContableActivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContableActivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableActivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContableActivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContablePasivoTotal(Boolean isParaCuentaContablePasivoTotal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContablePasivoTotalNegation=!isParaCuentaContablePasivoTotal;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContablePasivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContablePasivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContablePasivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContablePasivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContablePasivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContablePasivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContablePasivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContablePasivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContablePasivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContablePasivoTotal;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContablePasivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContablePasivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContablePasivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContablePasivoTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContablePatrimonio(Boolean isParaCuentaContablePatrimonio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContablePatrimonioNegation=!isParaCuentaContablePatrimonio;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContablePatrimonioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContablePatrimonioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContablePatrimonioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContablePatrimonioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContablePatrimonioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContablePatrimonioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContablePatrimonioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContablePatrimonioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContablePatrimonioNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContablePatrimonioNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContablePatrimonio;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContablePatrimonioNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContablePatrimonioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContablePatrimonioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContablePatrimonioTotal(Boolean isParaCuentaContablePatrimonioTotal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContablePatrimonioTotalNegation=!isParaCuentaContablePatrimonioTotal;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContablePatrimonioTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContablePatrimonioTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContablePatrimonioTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContablePatrimonioTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContablePatrimonioTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContablePatrimonioTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContablePatrimonioTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContablePatrimonioTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContablePatrimonioTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContablePatrimonioTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContablePatrimonioTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContablePatrimonioTotal;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContablePatrimonioTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContablePatrimonioTotalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableVenta(Boolean isParaCuentaContableVenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableVentaNegation=!isParaCuentaContableVenta;

			this.isVisibilidadFK_IdCuentaContableActivo=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableActivoTotal=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableActivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableActivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCostoVenta=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCostoVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCostoVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableCuentasCobrar=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCuentasCobrar) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableDisponibilad=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDisponibilad) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableDisponibiladParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventario=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventario) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioFin=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioFin) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioFinParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableInventarioIni=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableInventarioIni) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableInventarioIniParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivo=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivo) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePasivoTotal=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePasivoTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonio=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonio) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContablePatrimonioTotal=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContablePatrimonioTotal) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVenta=isParaCuentaContableVenta;
			if(!this.isVisibilidadFK_IdCuentaContableVenta) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaParametroGrafico);}

			this.isVisibilidadFK_IdCuentaContableVentaCredito=isParaCuentaContableVentaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableVentaCredito) {this.jTabbedPaneBusquedasParametroGrafico.remove(jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);}
		}
		
	}
	
	
	
	

	public String registrarSesionParametroGraficoParaBusquedaCuentaContableActivos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontableactivoSessionBean==null) {
				cuentacontableactivoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableactivoSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableactivoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableactivoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableactivoSessionBean.getisPaginaPopup();
			cuentacontableactivoSessionBean.setisPaginaPopup(false);
			cuentacontableactivoSessionBean.setEstaModoBusqueda(true);
			cuentacontableactivoSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_activo(TO_REPLACE);");
			cuentacontableactivoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableactivoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroGraficoParaBusquedaCuentaContablePasivos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontablepasivoSessionBean==null) {
				cuentacontablepasivoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablepasivoSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablepasivoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablepasivoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablepasivoSessionBean.getisPaginaPopup();
			cuentacontablepasivoSessionBean.setisPaginaPopup(false);
			cuentacontablepasivoSessionBean.setEstaModoBusqueda(true);
			cuentacontablepasivoSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_pasivo(TO_REPLACE);");
			cuentacontablepasivoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablepasivoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroGraficoParaBusquedaCuentaContableInventarios() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontableinventarioSessionBean==null) {
				cuentacontableinventarioSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableinventarioSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableinventarioSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableinventarioSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableinventarioSessionBean.getisPaginaPopup();
			cuentacontableinventarioSessionBean.setisPaginaPopup(false);
			cuentacontableinventarioSessionBean.setEstaModoBusqueda(true);
			cuentacontableinventarioSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario(TO_REPLACE);");
			cuentacontableinventarioSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableinventarioSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroGraficoParaBusquedaCuentaContableDisponibilidads() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontabledisponibilidadSessionBean==null) {
				cuentacontabledisponibilidadSessionBean=new CuentaContableSessionBean();
			}

			cuentacontabledisponibilidadSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontabledisponibilidadSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontabledisponibilidadSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontabledisponibilidadSessionBean.getisPaginaPopup();
			cuentacontabledisponibilidadSessionBean.setisPaginaPopup(false);
			cuentacontabledisponibilidadSessionBean.setEstaModoBusqueda(true);
			cuentacontabledisponibilidadSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_disponibilidad(TO_REPLACE);");
			cuentacontabledisponibilidadSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontabledisponibilidadSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroGraficoParaBusquedaCuentaContableCostoVentas() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontablecostoventaSessionBean==null) {
				cuentacontablecostoventaSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecostoventaSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecostoventaSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecostoventaSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecostoventaSessionBean.getisPaginaPopup();
			cuentacontablecostoventaSessionBean.setisPaginaPopup(false);
			cuentacontablecostoventaSessionBean.setEstaModoBusqueda(true);
			cuentacontablecostoventaSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_costo_venta(TO_REPLACE);");
			cuentacontablecostoventaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecostoventaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroGraficoParaBusquedaCuentaContableInventarioInis() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontableinventarioiniSessionBean==null) {
				cuentacontableinventarioiniSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableinventarioiniSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableinventarioiniSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableinventarioiniSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableinventarioiniSessionBean.getisPaginaPopup();
			cuentacontableinventarioiniSessionBean.setisPaginaPopup(false);
			cuentacontableinventarioiniSessionBean.setEstaModoBusqueda(true);
			cuentacontableinventarioiniSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario_ini(TO_REPLACE);");
			cuentacontableinventarioiniSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableinventarioiniSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroGraficoParaBusquedaCuentaContableInventarioFins() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontableinventariofinSessionBean==null) {
				cuentacontableinventariofinSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableinventariofinSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableinventariofinSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableinventariofinSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableinventariofinSessionBean.getisPaginaPopup();
			cuentacontableinventariofinSessionBean.setisPaginaPopup(false);
			cuentacontableinventariofinSessionBean.setEstaModoBusqueda(true);
			cuentacontableinventariofinSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_inventario_fin(TO_REPLACE);");
			cuentacontableinventariofinSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableinventariofinSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroGraficoParaBusquedaCuentaContableCuentasCobrars() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontablecuentascobrarSessionBean==null) {
				cuentacontablecuentascobrarSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecuentascobrarSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecuentascobrarSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecuentascobrarSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecuentascobrarSessionBean.getisPaginaPopup();
			cuentacontablecuentascobrarSessionBean.setisPaginaPopup(false);
			cuentacontablecuentascobrarSessionBean.setEstaModoBusqueda(true);
			cuentacontablecuentascobrarSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_cuenta_cobrar(TO_REPLACE);");
			cuentacontablecuentascobrarSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecuentascobrarSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroGraficoParaBusquedaCuentaContableVentaCreditos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontableventacreditoSessionBean==null) {
				cuentacontableventacreditoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableventacreditoSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableventacreditoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableventacreditoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableventacreditoSessionBean.getisPaginaPopup();
			cuentacontableventacreditoSessionBean.setisPaginaPopup(false);
			cuentacontableventacreditoSessionBean.setEstaModoBusqueda(true);
			cuentacontableventacreditoSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_venta_credito(TO_REPLACE);");
			cuentacontableventacreditoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableventacreditoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroGraficoParaBusquedaCuentaContableActivoTotals() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontableactivototalSessionBean==null) {
				cuentacontableactivototalSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableactivototalSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableactivototalSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableactivototalSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableactivototalSessionBean.getisPaginaPopup();
			cuentacontableactivototalSessionBean.setisPaginaPopup(false);
			cuentacontableactivototalSessionBean.setEstaModoBusqueda(true);
			cuentacontableactivototalSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_activo_total(TO_REPLACE);");
			cuentacontableactivototalSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableactivototalSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroGraficoParaBusquedaCuentaContablePasivoTotals() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontablepasivototalSessionBean==null) {
				cuentacontablepasivototalSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablepasivototalSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablepasivototalSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablepasivototalSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablepasivototalSessionBean.getisPaginaPopup();
			cuentacontablepasivototalSessionBean.setisPaginaPopup(false);
			cuentacontablepasivototalSessionBean.setEstaModoBusqueda(true);
			cuentacontablepasivototalSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_pasivo_total(TO_REPLACE);");
			cuentacontablepasivototalSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablepasivototalSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroGraficoParaBusquedaCuentaContablePatrimonios() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontablepatrimonioSessionBean==null) {
				cuentacontablepatrimonioSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablepatrimonioSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablepatrimonioSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablepatrimonioSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablepatrimonioSessionBean.getisPaginaPopup();
			cuentacontablepatrimonioSessionBean.setisPaginaPopup(false);
			cuentacontablepatrimonioSessionBean.setEstaModoBusqueda(true);
			cuentacontablepatrimonioSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_patrimonio(TO_REPLACE);");
			cuentacontablepatrimonioSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablepatrimonioSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroGraficoParaBusquedaCuentaContablePatrimonioTotals() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontablepatrimoniototalSessionBean==null) {
				cuentacontablepatrimoniototalSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablepatrimoniototalSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablepatrimoniototalSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablepatrimoniototalSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablepatrimoniototalSessionBean.getisPaginaPopup();
			cuentacontablepatrimoniototalSessionBean.setisPaginaPopup(false);
			cuentacontablepatrimoniototalSessionBean.setEstaModoBusqueda(true);
			cuentacontablepatrimoniototalSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_patrimonio_total(TO_REPLACE);");
			cuentacontablepatrimoniototalSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablepatrimoniototalSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionParametroGraficoParaBusquedaCuentaContableVentas() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(parametrograficoSessionBean==null) {
				parametrograficoSessionBean=new ParametroGraficoSessionBean();
			}

			if(cuentacontableventaSessionBean==null) {
				cuentacontableventaSessionBean=new CuentaContableSessionBean();
			}

			cuentacontableventaSessionBean.setsPathNavegacionActual(parametrograficoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontableventaSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontableventaSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontableventaSessionBean.getisPaginaPopup();
			cuentacontableventaSessionBean.setisPaginaPopup(false);
			cuentacontableventaSessionBean.setEstaModoBusqueda(true);
			cuentacontableventaSessionBean.setsFuncionBusquedaRapida("window.opener.parametrograficoFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_venta(TO_REPLACE);");
			cuentacontableventaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontableventaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(ParametroGraficoConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionParametroGrafico(true);
			//cuentacontableSessionBean.setlidParametroGraficoActual(this.idParametroGraficoActual);

			parametrograficoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyParametroGrafico(true);
			parametrograficoSessionBean.setlIdParametroGraficoActualForeignKey(this.idParametroGraficoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//ParametroGraficoSessionBean parametrograficoSessionBean=new ParametroGraficoSessionBean();
		
		if(this.parametrograficoSessionBean==null) {
			this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
		}
		
		this.parametrograficoSessionBean.setsUltimaBusquedaParametroGrafico(this.getsAccionBusqueda());
		this.parametrograficoSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.parametrograficoSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableActivo")) {
			parametrograficoSessionBean.setid_cuenta_contable_activo(this.getid_cuenta_contable_activoFK_IdCuentaContableActivo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableActivoTotal")) {
			parametrograficoSessionBean.setid_cuenta_contable_activo_total(this.getid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCostoVenta")) {
			parametrograficoSessionBean.setid_cuenta_contable_costo_venta(this.getid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCuentasCobrar")) {
			parametrograficoSessionBean.setid_cuenta_contable_cuenta_cobrar(this.getid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableDisponibilad")) {
			parametrograficoSessionBean.setid_cuenta_contable_disponibilidad(this.getid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableInventario")) {
			parametrograficoSessionBean.setid_cuenta_contable_inventario(this.getid_cuenta_contable_inventarioFK_IdCuentaContableInventario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableInventarioFin")) {
			parametrograficoSessionBean.setid_cuenta_contable_inventario_fin(this.getid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableInventarioIni")) {
			parametrograficoSessionBean.setid_cuenta_contable_inventario_ini(this.getid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContablePasivo")) {
			parametrograficoSessionBean.setid_cuenta_contable_pasivo(this.getid_cuenta_contable_pasivoFK_IdCuentaContablePasivo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContablePasivoTotal")) {
			parametrograficoSessionBean.setid_cuenta_contable_pasivo_total(this.getid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContablePatrimonio")) {
			parametrograficoSessionBean.setid_cuenta_contable_patrimonio(this.getid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContablePatrimonioTotal")) {
			parametrograficoSessionBean.setid_cuenta_contable_patrimonio_total(this.getid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableVenta")) {
			parametrograficoSessionBean.setid_cuenta_contable_venta(this.getid_cuenta_contable_ventaFK_IdCuentaContableVenta());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableVentaCredito")) {
			parametrograficoSessionBean.setid_cuenta_contable_venta_credito(this.getid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			parametrograficoSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//ParametroGraficoSessionBean parametrograficoSessionBean=new ParametroGraficoSessionBean();
		
		if(this.parametrograficoSessionBean==null) {
			this.parametrograficoSessionBean=new ParametroGraficoSessionBean();
		}
		
		if(this.parametrograficoSessionBean.getsUltimaBusquedaParametroGrafico()!=null&&!this.parametrograficoSessionBean.getsUltimaBusquedaParametroGrafico().equals("")) {
			this.setsAccionBusqueda(parametrograficoSessionBean.getsUltimaBusquedaParametroGrafico());
			this.setiNumeroPaginacion(parametrograficoSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(parametrograficoSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableActivo")) {
				this.setid_cuenta_contable_activoFK_IdCuentaContableActivo(parametrograficoSessionBean.getid_cuenta_contable_activo());
				parametrograficoSessionBean.setid_cuenta_contable_activo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableActivoTotal")) {
				this.setid_cuenta_contable_activo_totalFK_IdCuentaContableActivoTotal(parametrograficoSessionBean.getid_cuenta_contable_activo_total());
				parametrograficoSessionBean.setid_cuenta_contable_activo_total(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCostoVenta")) {
				this.setid_cuenta_contable_costo_ventaFK_IdCuentaContableCostoVenta(parametrograficoSessionBean.getid_cuenta_contable_costo_venta());
				parametrograficoSessionBean.setid_cuenta_contable_costo_venta(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCuentasCobrar")) {
				this.setid_cuenta_contable_cuenta_cobrarFK_IdCuentaContableCuentasCobrar(parametrograficoSessionBean.getid_cuenta_contable_cuenta_cobrar());
				parametrograficoSessionBean.setid_cuenta_contable_cuenta_cobrar(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableDisponibilad")) {
				this.setid_cuenta_contable_disponibilidadFK_IdCuentaContableDisponibilad(parametrograficoSessionBean.getid_cuenta_contable_disponibilidad());
				parametrograficoSessionBean.setid_cuenta_contable_disponibilidad(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableInventario")) {
				this.setid_cuenta_contable_inventarioFK_IdCuentaContableInventario(parametrograficoSessionBean.getid_cuenta_contable_inventario());
				parametrograficoSessionBean.setid_cuenta_contable_inventario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableInventarioFin")) {
				this.setid_cuenta_contable_inventario_finFK_IdCuentaContableInventarioFin(parametrograficoSessionBean.getid_cuenta_contable_inventario_fin());
				parametrograficoSessionBean.setid_cuenta_contable_inventario_fin(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableInventarioIni")) {
				this.setid_cuenta_contable_inventario_iniFK_IdCuentaContableInventarioIni(parametrograficoSessionBean.getid_cuenta_contable_inventario_ini());
				parametrograficoSessionBean.setid_cuenta_contable_inventario_ini(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContablePasivo")) {
				this.setid_cuenta_contable_pasivoFK_IdCuentaContablePasivo(parametrograficoSessionBean.getid_cuenta_contable_pasivo());
				parametrograficoSessionBean.setid_cuenta_contable_pasivo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContablePasivoTotal")) {
				this.setid_cuenta_contable_pasivo_totalFK_IdCuentaContablePasivoTotal(parametrograficoSessionBean.getid_cuenta_contable_pasivo_total());
				parametrograficoSessionBean.setid_cuenta_contable_pasivo_total(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContablePatrimonio")) {
				this.setid_cuenta_contable_patrimonioFK_IdCuentaContablePatrimonio(parametrograficoSessionBean.getid_cuenta_contable_patrimonio());
				parametrograficoSessionBean.setid_cuenta_contable_patrimonio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContablePatrimonioTotal")) {
				this.setid_cuenta_contable_patrimonio_totalFK_IdCuentaContablePatrimonioTotal(parametrograficoSessionBean.getid_cuenta_contable_patrimonio_total());
				parametrograficoSessionBean.setid_cuenta_contable_patrimonio_total(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableVenta")) {
				this.setid_cuenta_contable_ventaFK_IdCuentaContableVenta(parametrograficoSessionBean.getid_cuenta_contable_venta());
				parametrograficoSessionBean.setid_cuenta_contable_venta(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableVentaCredito")) {
				this.setid_cuenta_contable_venta_creditoFK_IdCuentaContableVentaCredito(parametrograficoSessionBean.getid_cuenta_contable_venta_credito());
				parametrograficoSessionBean.setid_cuenta_contable_venta_credito(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(parametrograficoSessionBean.getid_empresa());
				parametrograficoSessionBean.setid_empresa(-1L);
			}
		}
		
		this.parametrograficoSessionBean.setsUltimaBusquedaParametroGrafico("");
		this.parametrograficoSessionBean.setiNumeroPaginacion(ParametroGraficoConstantesFunciones.INUMEROPAGINACION);
		this.parametrograficoSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaParametroGrafico(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioParametroGrafico() {
		this.updateBorderResaltarBusquedasFormularioParametroGrafico();
		this.updateVisibilidadBusquedasFormularioParametroGrafico();
		this.updateHabilitarBusquedasFormularioParametroGrafico();
	}
	
	public void updateBorderResaltarBusquedasFormularioParametroGrafico() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasParametroGrafico.getComponents().length>0) {
	

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableActivoParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableActivoParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableActivoParametroGrafico);
			}
		}

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableActivoTotalParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableActivoTotalParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableActivoTotalParametroGrafico);
			}
		}

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableCostoVentaParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableCostoVentaParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableCostoVentaParametroGrafico);
			}
		}

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableCuentasCobrarParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableCuentasCobrarParametroGrafico);
			}
		}

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableDisponibiladParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableDisponibiladParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableDisponibiladParametroGrafico);
			}
		}

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableInventarioParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableInventarioParametroGrafico);
			}
		}

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableInventarioFinParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioFinParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableInventarioFinParametroGrafico);
			}
		}

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableInventarioIniParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioIniParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableInventarioIniParametroGrafico);
			}
		}

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContablePasivoParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePasivoParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContablePasivoParametroGrafico);
			}
		}

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContablePasivoTotalParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContablePasivoTotalParametroGrafico);
			}
		}

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContablePatrimonioParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePatrimonioParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContablePatrimonioParametroGrafico);
			}
		}

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContablePatrimonioTotalParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContablePatrimonioTotalParametroGrafico);
			}
		}

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableVentaParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableVentaParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableVentaParametroGrafico);
			}
		}

		if(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableVentaCreditoParametroGrafico!=null) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableVentaCreditoParametroGrafico);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioParametroGrafico() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasParametroGrafico.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableActivoParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableActivoParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableActivoParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableActivoTotalParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableActivoTotalParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableActivoTotalParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableCostoVentaParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableCostoVentaParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableCostoVentaParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableCuentasCobrarParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableCuentasCobrarParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableDisponibiladParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableDisponibiladParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableDisponibiladParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableInventarioParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableInventarioParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioFinParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableInventarioFinParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableInventarioFinParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioIniParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableInventarioIniParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableInventarioIniParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePasivoParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContablePasivoParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContablePasivoParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContablePasivoTotalParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContablePasivoTotalParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePatrimonioParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContablePatrimonioParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContablePatrimonioParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContablePatrimonioTotalParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContablePatrimonioTotalParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableVentaParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableVentaParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableVentaParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);
			jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableVentaCreditoParametroGrafico);
			if(!this.parametrograficoConstantesFunciones.mostrarFK_IdCuentaContableVentaCreditoParametroGrafico && index>-1) {
				this.jTabbedPaneBusquedasParametroGrafico.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioParametroGrafico() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasParametroGrafico.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableActivoParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableActivoParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableActivoParametroGrafico);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableActivoTotalParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableActivoTotalParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableActivoTotalParametroGrafico);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableCostoVentaParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableCostoVentaParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableCostoVentaParametroGrafico);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableCuentasCobrarParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableCuentasCobrarParametroGrafico);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableDisponibiladParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableDisponibiladParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableDisponibiladParametroGrafico);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableInventarioParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableInventarioParametroGrafico);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioFinParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableInventarioFinParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableInventarioFinParametroGrafico);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioIniParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableInventarioIniParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableInventarioIniParametroGrafico);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePasivoParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContablePasivoParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContablePasivoParametroGrafico);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContablePasivoTotalParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContablePasivoTotalParametroGrafico);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePatrimonioParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContablePatrimonioParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContablePatrimonioParametroGrafico);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContablePatrimonioTotalParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContablePatrimonioTotalParametroGrafico);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableVentaParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableVentaParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableVentaParametroGrafico);
			}

			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableVentaCreditoParametroGrafico);
				this.jTabbedPaneBusquedasParametroGrafico.setEnabledAt(index,this.parametrograficoConstantesFunciones.activarFK_IdCuentaContableVentaCreditoParametroGrafico);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaParametroGrafico(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdCuentaContableActivo")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableActivoParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContableActivoParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableActivoParametroGrafico);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableActivoTotal")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableActivoTotalParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContableActivoTotalParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableActivoTotalParametroGrafico);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableCostoVenta")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableCostoVentaParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContableCostoVentaParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableCostoVentaParametroGrafico);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableCuentasCobrar")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableCuentasCobrarParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContableCuentasCobrarParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableCuentasCobrarParametroGrafico);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableDisponibilad")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableDisponibiladParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContableDisponibiladParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableDisponibiladParametroGrafico);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableInventario")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContableInventarioParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableInventarioParametroGrafico);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableInventarioFin")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioFinParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContableInventarioFinParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableInventarioFinParametroGrafico);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableInventarioIni")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableInventarioIniParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContableInventarioIniParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableInventarioIniParametroGrafico);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContablePasivo")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePasivoParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContablePasivoParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContablePasivoParametroGrafico);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContablePasivoTotal")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePasivoTotalParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContablePasivoTotalParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContablePasivoTotalParametroGrafico);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContablePatrimonio")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePatrimonioParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContablePatrimonioParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContablePatrimonioParametroGrafico);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContablePatrimonioTotal")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContablePatrimonioTotalParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContablePatrimonioTotalParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContablePatrimonioTotalParametroGrafico);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableVenta")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableVentaParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContableVentaParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableVentaParametroGrafico);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableVentaCredito")) {
			index= this.jTabbedPaneBusquedasParametroGrafico.indexOfComponent(this.jPanelFK_IdCuentaContableVentaCreditoParametroGrafico);

			this.jTabbedPaneBusquedasParametroGrafico.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasParametroGrafico.getComponent(index);

			this.parametrograficoConstantesFunciones.setResaltarFK_IdCuentaContableVentaCreditoParametroGrafico(resaltar);

			jPanel.setBorder(this.parametrograficoConstantesFunciones.resaltarFK_IdCuentaContableVentaCreditoParametroGrafico);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarParametroGrafico.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioParametroGrafico() throws Exception {

		if(this.jInternalFrameDetalleFormParametroGrafico==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioParametroGrafico();
		this.updateVisibilidadResaltarControlesFormularioParametroGrafico();
		this.updateHabilitarResaltarControlesFormularioParametroGrafico();
		
	}
	
	public void updateBorderResaltarControlesFormularioParametroGrafico() throws Exception {
		if(this.jInternalFrameDetalleFormParametroGrafico==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.parametrograficoConstantesFunciones.resaltaridParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jLabelidParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltaridParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_empresaParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_empresaParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_activoParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_activoParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_pasivoParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_pasivoParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_inventarioParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_inventarioParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_disponibilidadParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_disponibilidadParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_costo_ventaParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_costo_ventaParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_inventario_iniParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_inventario_iniParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_inventario_finParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_inventario_finParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_cuenta_cobrarParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_cuenta_cobrarParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_venta_creditoParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_venta_creditoParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_activo_totalParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_activo_totalParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_pasivo_totalParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_pasivo_totalParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_patrimonioParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_patrimonioParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_patrimonio_totalParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_patrimonio_totalParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_ventaParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarid_cuenta_contable_ventaParametroGrafico);}
		if(this.parametrograficoConstantesFunciones.resaltarinventario_inicialParametroGrafico!=null && this.jInternalFrameDetalleFormParametroGrafico!=null) {this.jInternalFrameDetalleFormParametroGrafico.jTextFieldinventario_inicialParametroGrafico.setBorder(this.parametrograficoConstantesFunciones.resaltarinventario_inicialParametroGrafico);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioParametroGrafico() throws Exception {		
		if(this.jInternalFrameDetalleFormParametroGrafico==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
	
		//this.jInternalFrameDetalleFormParametroGrafico.jLabelidParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostraridParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelidParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostraridParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_empresaParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_empresaParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_empresaParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_activoParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_activoParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_activoParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_activoParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_pasivoParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_pasivoParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_pasivoParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_pasivoParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_inventarioParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_inventarioParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_inventarioParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_inventarioParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_disponibilidadParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_disponibilidadParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_disponibilidadParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_disponibilidadParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_costo_ventaParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_costo_ventaParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_costo_ventaParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_costo_ventaParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_inventario_iniParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_inventario_iniParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_inventario_iniParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_inventario_iniParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_inventario_finParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_inventario_finParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_inventario_finParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_inventario_finParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_cuenta_cobrarParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_cuenta_cobrarParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_cuenta_cobrarParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_cuenta_cobrarParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_venta_creditoParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_venta_creditoParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_venta_creditoParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_venta_creditoParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_activo_totalParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_activo_totalParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_activo_totalParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_activo_totalParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_pasivo_totalParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_pasivo_totalParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_pasivo_totalParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_pasivo_totalParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_patrimonioParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_patrimonioParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_patrimonioParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_patrimonioParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_patrimonio_totalParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_patrimonio_totalParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_patrimonio_totalParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_patrimonio_totalParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_ventaParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelid_cuenta_contable_ventaParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_ventaParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarid_cuenta_contable_ventaParametroGrafico);
		//this.jInternalFrameDetalleFormParametroGrafico.jTextFieldinventario_inicialParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarinventario_inicialParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jPanelinventario_inicialParametroGrafico.setVisible(this.parametrograficoConstantesFunciones.mostrarinventario_inicialParametroGrafico);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioParametroGrafico() throws Exception {
		if(this.jInternalFrameDetalleFormParametroGrafico==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormParametroGrafico!=null) {
	
		this.jInternalFrameDetalleFormParametroGrafico.jLabelidParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activaridParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_empresaParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_empresaParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activoParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_activoParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activoParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_activoParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivoParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_pasivoParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivoParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_pasivoParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventarioParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventarioParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventarioParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventarioParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_disponibilidadParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_disponibilidadParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_disponibilidadParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_disponibilidadParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_costo_ventaParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_costo_ventaParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_costo_ventaParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_costo_ventaParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_iniParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventario_iniParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_iniParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventario_iniParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_inventario_finParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventario_finParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_inventario_finParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_inventario_finParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_cuenta_cobrarParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_cuenta_cobrarParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_cuenta_cobrarParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_cuenta_cobrarParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_venta_creditoParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_venta_creditoParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_venta_creditoParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_venta_creditoParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_activo_totalParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_activo_totalParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_activo_totalParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_activo_totalParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_pasivo_totalParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_pasivo_totalParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_pasivo_totalParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_pasivo_totalParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonioParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_patrimonioParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonioParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_patrimonioParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_patrimonio_totalParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_patrimonio_totalParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_patrimonio_totalParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_patrimonio_totalParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jComboBoxid_cuenta_contable_ventaParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_ventaParametroGrafico);
			this.jInternalFrameDetalleFormParametroGrafico.jButtonid_cuenta_contable_ventaParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarid_cuenta_contable_ventaParametroGrafico);
		this.jInternalFrameDetalleFormParametroGrafico.jTextFieldinventario_inicialParametroGrafico.setEnabled(this.parametrograficoConstantesFunciones.activarinventario_inicialParametroGrafico);
		}
	}
	
		
}