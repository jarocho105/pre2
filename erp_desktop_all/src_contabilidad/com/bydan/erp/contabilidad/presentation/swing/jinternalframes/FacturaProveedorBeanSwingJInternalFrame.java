/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.contabilidad.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.contabilidad.util.FacturaProveedorConstantesFunciones;
import com.bydan.erp.contabilidad.util.FacturaProveedorParameterReturnGeneral;
//import com.bydan.erp.contabilidad.util.FacturaProveedorParameterGeneral;
//import com.bydan.erp.contabilidad.presentation.report.source.FacturaProveedorBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.contabilidad.resources.reportes.AuxiliarReportes;


import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.contabilidad.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;
import com.bydan.erp.tesoreria.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.nomina.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.contabilidad.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.nomina.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.tesoreria.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.nomina.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.nomina.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.nomina.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class FacturaProveedorBeanSwingJInternalFrame extends FacturaProveedorJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(FacturaProveedorBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<FacturaProveedor> facturaproveedorValidator = new ClassValidator<FacturaProveedor>(FacturaProveedor.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public FacturaProveedor facturaproveedor;	
	public FacturaProveedor facturaproveedorAux;
	public FacturaProveedor facturaproveedorAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public FacturaProveedor facturaproveedorTotales;
	public Long idFacturaProveedorActual;
	public Long iIdNuevoFacturaProveedor=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPeriodo="";

	public List<Periodo> periodosForeignKey;

	public List<Periodo> getperiodosForeignKey() {
		return periodosForeignKey;
	}

	public void setperiodosForeignKey(List<Periodo> periodosForeignKey) {
		this.periodosForeignKey = periodosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Periodo periodoForeignKey;

	public Periodo getperiodoForeignKey() {
		return periodoForeignKey;
	}

	public void setperiodoForeignKey(Periodo periodoForeignKey) {
		this.periodoForeignKey = periodoForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboModulo="";

	public List<Modulo> modulosForeignKey;

	public List<Modulo> getmodulosForeignKey() {
		return modulosForeignKey;
	}

	public void setmodulosForeignKey(List<Modulo> modulosForeignKey) {
		this.modulosForeignKey = modulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Modulo moduloForeignKey;

	public Modulo getmoduloForeignKey() {
		return moduloForeignKey;
	}

	public void setmoduloForeignKey(Modulo moduloForeignKey) {
		this.moduloForeignKey = moduloForeignKey;
	}

	public String sFinalQueryComboPlantillaFactura="";

	public List<PlantillaFactura> plantillafacturasForeignKey;

	public List<PlantillaFactura> getplantillafacturasForeignKey() {
		return plantillafacturasForeignKey;
	}

	public void setplantillafacturasForeignKey(List<PlantillaFactura> plantillafacturasForeignKey) {
		this.plantillafacturasForeignKey = plantillafacturasForeignKey;
	}

	//OBJETO FK ACTUAL
	public PlantillaFactura plantillafacturaForeignKey;

	public PlantillaFactura getplantillafacturaForeignKey() {
		return plantillafacturaForeignKey;
	}

	public void setplantillafacturaForeignKey(PlantillaFactura plantillafacturaForeignKey) {
		this.plantillafacturaForeignKey = plantillafacturaForeignKey;
	}

	public String sFinalQueryComboTipoDocumento="";

	public List<TipoDocumento> tipodocumentosForeignKey;

	public List<TipoDocumento> gettipodocumentosForeignKey() {
		return tipodocumentosForeignKey;
	}

	public void settipodocumentosForeignKey(List<TipoDocumento> tipodocumentosForeignKey) {
		this.tipodocumentosForeignKey = tipodocumentosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoDocumento tipodocumentoForeignKey;

	public TipoDocumento gettipodocumentoForeignKey() {
		return tipodocumentoForeignKey;
	}

	public void settipodocumentoForeignKey(TipoDocumento tipodocumentoForeignKey) {
		this.tipodocumentoForeignKey = tipodocumentoForeignKey;
	}

	public String sFinalQueryComboFactura="";

	public List<Factura> facturasForeignKey;

	public List<Factura> getfacturasForeignKey() {
		return facturasForeignKey;
	}

	public void setfacturasForeignKey(List<Factura> facturasForeignKey) {
		this.facturasForeignKey = facturasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Factura facturaForeignKey;

	public Factura getfacturaForeignKey() {
		return facturaForeignKey;
	}

	public void setfacturaForeignKey(Factura facturaForeignKey) {
		this.facturaForeignKey = facturaForeignKey;
	}

	public String sFinalQueryComboTransaccion="";

	public List<Transaccion> transaccionsForeignKey;

	public List<Transaccion> gettransaccionsForeignKey() {
		return transaccionsForeignKey;
	}

	public void settransaccionsForeignKey(List<Transaccion> transaccionsForeignKey) {
		this.transaccionsForeignKey = transaccionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Transaccion transaccionForeignKey;

	public Transaccion gettransaccionForeignKey() {
		return transaccionForeignKey;
	}

	public void settransaccionForeignKey(Transaccion transaccionForeignKey) {
		this.transaccionForeignKey = transaccionForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboEmpleadoSolicita="";

	public List<Empleado> empleadosolicitasForeignKey;

	public List<Empleado> getempleadosolicitasForeignKey() {
		return empleadosolicitasForeignKey;
	}

	public void setempleadosolicitasForeignKey(List<Empleado> empleadosolicitasForeignKey) {
		this.empleadosolicitasForeignKey = empleadosolicitasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadosolicitaForeignKey;

	public Empleado getempleadosolicitaForeignKey() {
		return empleadosolicitaForeignKey;
	}

	public void setempleadosolicitaForeignKey(Empleado empleadosolicitaForeignKey) {
		this.empleadosolicitaForeignKey = empleadosolicitaForeignKey;
	}

	public String sFinalQueryComboMoneda="";

	public List<Moneda> monedasForeignKey;

	public List<Moneda> getmonedasForeignKey() {
		return monedasForeignKey;
	}

	public void setmonedasForeignKey(List<Moneda> monedasForeignKey) {
		this.monedasForeignKey = monedasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Moneda monedaForeignKey;

	public Moneda getmonedaForeignKey() {
		return monedaForeignKey;
	}

	public void setmonedaForeignKey(Moneda monedaForeignKey) {
		this.monedaForeignKey = monedaForeignKey;
	}

	public String sFinalQueryComboEmpleado="";

	public List<Empleado> empleadosForeignKey;

	public List<Empleado> getempleadosForeignKey() {
		return empleadosForeignKey;
	}

	public void setempleadosForeignKey(List<Empleado> empleadosForeignKey) {
		this.empleadosForeignKey = empleadosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadoForeignKey;

	public Empleado getempleadoForeignKey() {
		return empleadoForeignKey;
	}

	public void setempleadoForeignKey(Empleado empleadoForeignKey) {
		this.empleadoForeignKey = empleadoForeignKey;
	}

	public String sFinalQueryComboTipoRetencionFuente1="";

	public List<TipoRetencion> tiporetencionfuente1sForeignKey;

	public List<TipoRetencion> gettiporetencionfuente1sForeignKey() {
		return tiporetencionfuente1sForeignKey;
	}

	public void settiporetencionfuente1sForeignKey(List<TipoRetencion> tiporetencionfuente1sForeignKey) {
		this.tiporetencionfuente1sForeignKey = tiporetencionfuente1sForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencion tiporetencionfuente1ForeignKey;

	public TipoRetencion gettiporetencionfuente1ForeignKey() {
		return tiporetencionfuente1ForeignKey;
	}

	public void settiporetencionfuente1ForeignKey(TipoRetencion tiporetencionfuente1ForeignKey) {
		this.tiporetencionfuente1ForeignKey = tiporetencionfuente1ForeignKey;
	}

	public String sFinalQueryComboTipoRetencionFuente2="";

	public List<TipoRetencion> tiporetencionfuente2sForeignKey;

	public List<TipoRetencion> gettiporetencionfuente2sForeignKey() {
		return tiporetencionfuente2sForeignKey;
	}

	public void settiporetencionfuente2sForeignKey(List<TipoRetencion> tiporetencionfuente2sForeignKey) {
		this.tiporetencionfuente2sForeignKey = tiporetencionfuente2sForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencion tiporetencionfuente2ForeignKey;

	public TipoRetencion gettiporetencionfuente2ForeignKey() {
		return tiporetencionfuente2ForeignKey;
	}

	public void settiporetencionfuente2ForeignKey(TipoRetencion tiporetencionfuente2ForeignKey) {
		this.tiporetencionfuente2ForeignKey = tiporetencionfuente2ForeignKey;
	}

	public String sFinalQueryComboTipoRetencionIva1="";

	public List<TipoRetencion> tiporetencioniva1sForeignKey;

	public List<TipoRetencion> gettiporetencioniva1sForeignKey() {
		return tiporetencioniva1sForeignKey;
	}

	public void settiporetencioniva1sForeignKey(List<TipoRetencion> tiporetencioniva1sForeignKey) {
		this.tiporetencioniva1sForeignKey = tiporetencioniva1sForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencion tiporetencioniva1ForeignKey;

	public TipoRetencion gettiporetencioniva1ForeignKey() {
		return tiporetencioniva1ForeignKey;
	}

	public void settiporetencioniva1ForeignKey(TipoRetencion tiporetencioniva1ForeignKey) {
		this.tiporetencioniva1ForeignKey = tiporetencioniva1ForeignKey;
	}

	public String sFinalQueryComboTipoRetencionIva2="";

	public List<TipoRetencion> tiporetencioniva2sForeignKey;

	public List<TipoRetencion> gettiporetencioniva2sForeignKey() {
		return tiporetencioniva2sForeignKey;
	}

	public void settiporetencioniva2sForeignKey(List<TipoRetencion> tiporetencioniva2sForeignKey) {
		this.tiporetencioniva2sForeignKey = tiporetencioniva2sForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencion tiporetencioniva2ForeignKey;

	public TipoRetencion gettiporetencioniva2ForeignKey() {
		return tiporetencioniva2ForeignKey;
	}

	public void settiporetencioniva2ForeignKey(TipoRetencion tiporetencioniva2ForeignKey) {
		this.tiporetencioniva2ForeignKey = tiporetencioniva2ForeignKey;
	}

	public String sFinalQueryComboTipoTributario="";

	public List<TipoTributario> tipotributariosForeignKey;

	public List<TipoTributario> gettipotributariosForeignKey() {
		return tipotributariosForeignKey;
	}

	public void settipotributariosForeignKey(List<TipoTributario> tipotributariosForeignKey) {
		this.tipotributariosForeignKey = tipotributariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoTributario tipotributarioForeignKey;

	public TipoTributario gettipotributarioForeignKey() {
		return tipotributarioForeignKey;
	}

	public void settipotributarioForeignKey(TipoTributario tipotributarioForeignKey) {
		this.tipotributarioForeignKey = tipotributarioForeignKey;
	}

	public String sFinalQueryComboCuentaContableCreditoFiscalBienes="";

	public List<CuentaContable> cuentacontablecreditofiscalbienessForeignKey;

	public List<CuentaContable> getcuentacontablecreditofiscalbienessForeignKey() {
		return cuentacontablecreditofiscalbienessForeignKey;
	}

	public void setcuentacontablecreditofiscalbienessForeignKey(List<CuentaContable> cuentacontablecreditofiscalbienessForeignKey) {
		this.cuentacontablecreditofiscalbienessForeignKey = cuentacontablecreditofiscalbienessForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecreditofiscalbienesForeignKey;

	public CuentaContable getcuentacontablecreditofiscalbienesForeignKey() {
		return cuentacontablecreditofiscalbienesForeignKey;
	}

	public void setcuentacontablecreditofiscalbienesForeignKey(CuentaContable cuentacontablecreditofiscalbienesForeignKey) {
		this.cuentacontablecreditofiscalbienesForeignKey = cuentacontablecreditofiscalbienesForeignKey;
	}

	public String sFinalQueryComboResponsableFondo="";

	public List<ResponsableFondo> responsablefondosForeignKey;

	public List<ResponsableFondo> getresponsablefondosForeignKey() {
		return responsablefondosForeignKey;
	}

	public void setresponsablefondosForeignKey(List<ResponsableFondo> responsablefondosForeignKey) {
		this.responsablefondosForeignKey = responsablefondosForeignKey;
	}

	//OBJETO FK ACTUAL
	public ResponsableFondo responsablefondoForeignKey;

	public ResponsableFondo getresponsablefondoForeignKey() {
		return responsablefondoForeignKey;
	}

	public void setresponsablefondoForeignKey(ResponsableFondo responsablefondoForeignKey) {
		this.responsablefondoForeignKey = responsablefondoForeignKey;
	}

	public String sFinalQueryComboCuentaContableCreditoFiscalServicios="";

	public List<CuentaContable> cuentacontablecreditofiscalserviciossForeignKey;

	public List<CuentaContable> getcuentacontablecreditofiscalserviciossForeignKey() {
		return cuentacontablecreditofiscalserviciossForeignKey;
	}

	public void setcuentacontablecreditofiscalserviciossForeignKey(List<CuentaContable> cuentacontablecreditofiscalserviciossForeignKey) {
		this.cuentacontablecreditofiscalserviciossForeignKey = cuentacontablecreditofiscalserviciossForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecreditofiscalserviciosForeignKey;

	public CuentaContable getcuentacontablecreditofiscalserviciosForeignKey() {
		return cuentacontablecreditofiscalserviciosForeignKey;
	}

	public void setcuentacontablecreditofiscalserviciosForeignKey(CuentaContable cuentacontablecreditofiscalserviciosForeignKey) {
		this.cuentacontablecreditofiscalserviciosForeignKey = cuentacontablecreditofiscalserviciosForeignKey;
	}

	public String sFinalQueryComboCuentaContableGasto="";

	public List<CuentaContable> cuentacontablegastosForeignKey;

	public List<CuentaContable> getcuentacontablegastosForeignKey() {
		return cuentacontablegastosForeignKey;
	}

	public void setcuentacontablegastosForeignKey(List<CuentaContable> cuentacontablegastosForeignKey) {
		this.cuentacontablegastosForeignKey = cuentacontablegastosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablegastoForeignKey;

	public CuentaContable getcuentacontablegastoForeignKey() {
		return cuentacontablegastoForeignKey;
	}

	public void setcuentacontablegastoForeignKey(CuentaContable cuentacontablegastoForeignKey) {
		this.cuentacontablegastoForeignKey = cuentacontablegastoForeignKey;
	}

	public String sFinalQueryComboCuentaContableGasto2="";

	public List<CuentaContable> cuentacontablegasto2sForeignKey;

	public List<CuentaContable> getcuentacontablegasto2sForeignKey() {
		return cuentacontablegasto2sForeignKey;
	}

	public void setcuentacontablegasto2sForeignKey(List<CuentaContable> cuentacontablegasto2sForeignKey) {
		this.cuentacontablegasto2sForeignKey = cuentacontablegasto2sForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablegasto2ForeignKey;

	public CuentaContable getcuentacontablegasto2ForeignKey() {
		return cuentacontablegasto2ForeignKey;
	}

	public void setcuentacontablegasto2ForeignKey(CuentaContable cuentacontablegasto2ForeignKey) {
		this.cuentacontablegasto2ForeignKey = cuentacontablegasto2ForeignKey;
	}

	public String sFinalQueryComboCuentaContableCreditoFin="";

	public List<CuentaContable> cuentacontablecreditofinsForeignKey;

	public List<CuentaContable> getcuentacontablecreditofinsForeignKey() {
		return cuentacontablecreditofinsForeignKey;
	}

	public void setcuentacontablecreditofinsForeignKey(List<CuentaContable> cuentacontablecreditofinsForeignKey) {
		this.cuentacontablecreditofinsForeignKey = cuentacontablecreditofinsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecreditofinForeignKey;

	public CuentaContable getcuentacontablecreditofinForeignKey() {
		return cuentacontablecreditofinForeignKey;
	}

	public void setcuentacontablecreditofinForeignKey(CuentaContable cuentacontablecreditofinForeignKey) {
		this.cuentacontablecreditofinForeignKey = cuentacontablecreditofinForeignKey;
	}

	public String sFinalQueryComboCuentaContableCreditoFin2="";

	public List<CuentaContable> cuentacontablecreditofin2sForeignKey;

	public List<CuentaContable> getcuentacontablecreditofin2sForeignKey() {
		return cuentacontablecreditofin2sForeignKey;
	}

	public void setcuentacontablecreditofin2sForeignKey(List<CuentaContable> cuentacontablecreditofin2sForeignKey) {
		this.cuentacontablecreditofin2sForeignKey = cuentacontablecreditofin2sForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecreditofin2ForeignKey;

	public CuentaContable getcuentacontablecreditofin2ForeignKey() {
		return cuentacontablecreditofin2ForeignKey;
	}

	public void setcuentacontablecreditofin2ForeignKey(CuentaContable cuentacontablecreditofin2ForeignKey) {
		this.cuentacontablecreditofin2ForeignKey = cuentacontablecreditofin2ForeignKey;
	}

	public String sFinalQueryComboCuentaContableCredito="";

	public List<CuentaContable> cuentacontablecreditosForeignKey;

	public List<CuentaContable> getcuentacontablecreditosForeignKey() {
		return cuentacontablecreditosForeignKey;
	}

	public void setcuentacontablecreditosForeignKey(List<CuentaContable> cuentacontablecreditosForeignKey) {
		this.cuentacontablecreditosForeignKey = cuentacontablecreditosForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecreditoForeignKey;

	public CuentaContable getcuentacontablecreditoForeignKey() {
		return cuentacontablecreditoForeignKey;
	}

	public void setcuentacontablecreditoForeignKey(CuentaContable cuentacontablecreditoForeignKey) {
		this.cuentacontablecreditoForeignKey = cuentacontablecreditoForeignKey;
	}

	public String sFinalQueryComboTipoMovimiento="";

	public List<TipoMovimiento> tipomovimientosForeignKey;

	public List<TipoMovimiento> gettipomovimientosForeignKey() {
		return tipomovimientosForeignKey;
	}

	public void settipomovimientosForeignKey(List<TipoMovimiento> tipomovimientosForeignKey) {
		this.tipomovimientosForeignKey = tipomovimientosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoMovimiento tipomovimientoForeignKey;

	public TipoMovimiento gettipomovimientoForeignKey() {
		return tipomovimientoForeignKey;
	}

	public void settipomovimientoForeignKey(TipoMovimiento tipomovimientoForeignKey) {
		this.tipomovimientoForeignKey = tipomovimientoForeignKey;
	}

	public String sFinalQueryComboTipoMovimientoModulo="";

	public List<TipoMovimientoModulo> tipomovimientomodulosForeignKey;

	public List<TipoMovimientoModulo> gettipomovimientomodulosForeignKey() {
		return tipomovimientomodulosForeignKey;
	}

	public void settipomovimientomodulosForeignKey(List<TipoMovimientoModulo> tipomovimientomodulosForeignKey) {
		this.tipomovimientomodulosForeignKey = tipomovimientomodulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoMovimientoModulo tipomovimientomoduloForeignKey;

	public TipoMovimientoModulo gettipomovimientomoduloForeignKey() {
		return tipomovimientomoduloForeignKey;
	}

	public void settipomovimientomoduloForeignKey(TipoMovimientoModulo tipomovimientomoduloForeignKey) {
		this.tipomovimientomoduloForeignKey = tipomovimientomoduloForeignKey;
	}

	public String sFinalQueryComboTipoTransaccionModulo="";

	public List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey;

	public List<TipoTransaccionModulo> gettipotransaccionmodulosForeignKey() {
		return tipotransaccionmodulosForeignKey;
	}

	public void settipotransaccionmodulosForeignKey(List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey) {
		this.tipotransaccionmodulosForeignKey = tipotransaccionmodulosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoTransaccionModulo tipotransaccionmoduloForeignKey;

	public TipoTransaccionModulo gettipotransaccionmoduloForeignKey() {
		return tipotransaccionmoduloForeignKey;
	}

	public void settipotransaccionmoduloForeignKey(TipoTransaccionModulo tipotransaccionmoduloForeignKey) {
		this.tipotransaccionmoduloForeignKey = tipotransaccionmoduloForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idPlantillaFacturaActual=0L;

	public Long getidPlantillaFacturaActual() {
		return idPlantillaFacturaActual;
	}

	public void setidPlantillaFacturaActual(Long idPlantillaFacturaActual) {
		this.idPlantillaFacturaActual= idPlantillaFacturaActual;
	}
	public Long idFacturaActual=0L;

	public Long getidFacturaActual() {
		return idFacturaActual;
	}

	public void setidFacturaActual(Long idFacturaActual) {
		this.idFacturaActual= idFacturaActual;
	}
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	public Long idEmpleadoSolicitaActual=0L;

	public Long getidEmpleadoSolicitaActual() {
		return idEmpleadoSolicitaActual;
	}

	public void setidEmpleadoSolicitaActual(Long idEmpleadoSolicitaActual) {
		this.idEmpleadoSolicitaActual= idEmpleadoSolicitaActual;
	}
	public Long idEmpleadoActual=0L;

	public Long getidEmpleadoActual() {
		return idEmpleadoActual;
	}

	public void setidEmpleadoActual(Long idEmpleadoActual) {
		this.idEmpleadoActual= idEmpleadoActual;
	}
	public Long idCuentaContableGastoActual=0L;

	public Long getidCuentaContableGastoActual() {
		return idCuentaContableGastoActual;
	}

	public void setidCuentaContableGastoActual(Long idCuentaContableGastoActual) {
		this.idCuentaContableGastoActual= idCuentaContableGastoActual;
	}
	public Long idCuentaContableCreditoFinActual=0L;

	public Long getidCuentaContableCreditoFinActual() {
		return idCuentaContableCreditoFinActual;
	}

	public void setidCuentaContableCreditoFinActual(Long idCuentaContableCreditoFinActual) {
		this.idCuentaContableCreditoFinActual= idCuentaContableCreditoFinActual;
	}
	public Long idCuentaContableCreditoFin2Actual=0L;

	public Long getidCuentaContableCreditoFin2Actual() {
		return idCuentaContableCreditoFin2Actual;
	}

	public void setidCuentaContableCreditoFin2Actual(Long idCuentaContableCreditoFin2Actual) {
		this.idCuentaContableCreditoFin2Actual= idCuentaContableCreditoFin2Actual;
	}
	public Long idCuentaContableCreditoActual=0L;

	public Long getidCuentaContableCreditoActual() {
		return idCuentaContableCreditoActual;
	}

	public void setidCuentaContableCreditoActual(Long idCuentaContableCreditoActual) {
		this.idCuentaContableCreditoActual= idCuentaContableCreditoActual;
	}
	
	

	public Boolean isTienePermisosDetalleFacturaProveedor=false;

	public Boolean getIsTienePermisosDetalleFacturaProveedor() {
		return isTienePermisosDetalleFacturaProveedor;
	}

	public void setIsTienePermisosDetalleFacturaProveedor(Boolean isTienePermisosDetalleFacturaProveedor) {
		this.isTienePermisosDetalleFacturaProveedor= isTienePermisosDetalleFacturaProveedor;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoFacturaProveedor;
	public Boolean isPermisoNuevoFacturaProveedor;
	public Boolean isPermisoActualizarFacturaProveedor;
	public Boolean isPermisoActualizarOriginalFacturaProveedor;
	public Boolean isPermisoEliminarFacturaProveedor;
	public Boolean isPermisoGuardarCambiosFacturaProveedor;
	public Boolean isPermisoConsultaFacturaProveedor;
	public Boolean isPermisoBusquedaFacturaProveedor;
	public Boolean isPermisoReporteFacturaProveedor;
	public Boolean isPermisoPaginacionMedioFacturaProveedor;
	public Boolean isPermisoPaginacionAltoFacturaProveedor;
	public Boolean isPermisoPaginacionTodoFacturaProveedor;
	public Boolean isPermisoCopiarFacturaProveedor;
	public Boolean isPermisoVerFormFacturaProveedor;
	public Boolean isPermisoDuplicarFacturaProveedor;
	public Boolean isPermisoOrdenFacturaProveedor;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public FacturaProveedorParameterReturnGeneral facturaproveedorReturnGeneral;
	public FacturaProveedorParameterReturnGeneral facturaproveedorParameterGeneral;
	
	

	public DetalleFacturaProveedorLogic detallefacturaproveedorLogic=null;

	public DetalleFacturaProveedorLogic getDetalleFacturaProveedorLogic() {
		return detallefacturaproveedorLogic;
	}

	public void setDetalleFacturaProveedorLogic(DetalleFacturaProveedorLogic detallefacturaproveedorLogic) {
		this.detallefacturaproveedorLogic = detallefacturaproveedorLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoFacturaProveedor=false;
	public Boolean esParaAccionDesdeFormularioFacturaProveedor=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected FacturaProveedorSessionBeanAdditional facturaproveedorSessionBeanAdditional=null;
	
	public FacturaProveedorSessionBeanAdditional getFacturaProveedorSessionBeanAdditional() {
		return this.facturaproveedorSessionBeanAdditional;
	}
	
	public void setFacturaProveedorSessionBeanAdditional(FacturaProveedorSessionBeanAdditional facturaproveedorSessionBeanAdditional) {
		try {
			this.facturaproveedorSessionBeanAdditional=facturaproveedorSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected FacturaProveedorBeanSwingJInternalFrameAdditional facturaproveedorBeanSwingJInternalFrameAdditional=null;
	//public class FacturaProveedorBeanSwingJInternalFrame
	
	public FacturaProveedorBeanSwingJInternalFrameAdditional getFacturaProveedorBeanSwingJInternalFrameAdditional() {
		return this.facturaproveedorBeanSwingJInternalFrameAdditional;
	}
	
	public void setFacturaProveedorBeanSwingJInternalFrameAdditional(FacturaProveedorBeanSwingJInternalFrameAdditional facturaproveedorBeanSwingJInternalFrameAdditional) {
		try {
			this.facturaproveedorBeanSwingJInternalFrameAdditional=facturaproveedorBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public FacturaProveedorLogic facturaproveedorLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public FacturaProveedor facturaproveedorBean;
	public FacturaProveedorConstantesFunciones facturaproveedorConstantesFunciones;
	//public FacturaProveedorParameterReturnGeneral facturaproveedorReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EjercicioLogic ejercicioLogic;
	public PeriodoLogic periodoLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public ModuloLogic moduloLogic;
	public PlantillaFacturaLogic plantillafacturaLogic;
	public TipoDocumentoLogic tipodocumentoLogic;
	public FacturaLogic facturaLogic;
	public TransaccionLogic transaccionLogic;
	public ClienteLogic clienteLogic;
	public EmpleadoLogic empleadosolicitaLogic;
	public MonedaLogic monedaLogic;
	public EmpleadoLogic empleadoLogic;
	public TipoRetencionLogic tiporetencionfuente1Logic;
	public TipoRetencionLogic tiporetencionfuente2Logic;
	public TipoRetencionLogic tiporetencioniva1Logic;
	public TipoRetencionLogic tiporetencioniva2Logic;
	public TipoTributarioLogic tipotributarioLogic;
	public CuentaContableLogic cuentacontablecreditofiscalbienesLogic;
	public ResponsableFondoLogic responsablefondoLogic;
	public CuentaContableLogic cuentacontablecreditofiscalserviciosLogic;
	public CuentaContableLogic cuentacontablegastoLogic;
	public CuentaContableLogic cuentacontablegasto2Logic;
	public CuentaContableLogic cuentacontablecreditofinLogic;
	public CuentaContableLogic cuentacontablecreditofin2Logic;
	public CuentaContableLogic cuentacontablecreditoLogic;
	public TipoMovimientoLogic tipomovimientoLogic;
	public TipoMovimientoModuloLogic tipomovimientomoduloLogic;
	public TipoTransaccionModuloLogic tipotransaccionmoduloLogic;
	
	//PARAMETROS
	
	
	//public List<FacturaProveedor> facturaproveedors;	
	//public List<FacturaProveedor> facturaproveedorsEliminados;
	//public List<FacturaProveedor> facturaproveedorsAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoFacturaProveedor=false;
	public Boolean isVisibilidadCeldaDuplicarFacturaProveedor=true;
	public Boolean isVisibilidadCeldaCopiarFacturaProveedor=true;
	public Boolean isVisibilidadCeldaVerFormFacturaProveedor=true;
	public Boolean isVisibilidadCeldaOrdenFacturaProveedor=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesFacturaProveedor=false;
	public Boolean isVisibilidadCeldaModificarFacturaProveedor=false;
	public Boolean isVisibilidadCeldaActualizarFacturaProveedor=false;
	public Boolean isVisibilidadCeldaEliminarFacturaProveedor=false;
	public Boolean isVisibilidadCeldaCancelarFacturaProveedor=false;
	public Boolean isVisibilidadCeldaGuardarFacturaProveedor=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosFacturaProveedor=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdCuentaContableCredito=false;
	public Boolean isVisibilidadFK_IdCuentaContableCreditoFin=false;
	public Boolean isVisibilidadFK_IdCuentaContableCreditoFin2=false;
	public Boolean isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=false;
	public Boolean isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=false;
	public Boolean isVisibilidadFK_IdCuentaContableGasto=false;
	public Boolean isVisibilidadFK_IdCuentaContableGasto2=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpleado=false;
	public Boolean isVisibilidadFK_IdEmpleadoSolicita=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdFactura=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdModulo=false;
	public Boolean isVisibilidadFK_IdMoneda=false;
	public Boolean isVisibilidadFK_IdPeriodo=false;
	public Boolean isVisibilidadFK_IdPlantillaFactura=false;
	public Boolean isVisibilidadFK_IdResponsableFondo=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoDocumento=false;
	public Boolean isVisibilidadFK_IdTipoMovimiento=false;
	public Boolean isVisibilidadFK_IdTipoMovimientoModulo=false;
	public Boolean isVisibilidadFK_IdTipoRetencionFuente1=false;
	public Boolean isVisibilidadFK_IdTipoRetencionFuente2=false;
	public Boolean isVisibilidadFK_IdTipoRetencionIva1=false;
	public Boolean isVisibilidadFK_IdTipoRetencionIva2=false;
	public Boolean isVisibilidadFK_IdTipoTransaccionModulo=false;
	public Boolean isVisibilidadFK_IdTipoTributario=false;
	public Boolean isVisibilidadFK_IdTransaccion=false;
	
	public Long getiIdNuevoFacturaProveedor() {
		return this.iIdNuevoFacturaProveedor;
	}

	public void setiIdNuevoFacturaProveedor(Long iIdNuevoFacturaProveedor) {
		this.iIdNuevoFacturaProveedor = iIdNuevoFacturaProveedor;
	}
	
	public Long getidFacturaProveedorActual() {
		return this.idFacturaProveedorActual;
	}

	public void setidFacturaProveedorActual(Long idFacturaProveedorActual) {
		this.idFacturaProveedorActual = idFacturaProveedorActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public FacturaProveedor getfacturaproveedor() {
		return this.facturaproveedor;
	}

	public void setfacturaproveedor(FacturaProveedor facturaproveedor) {
		this.facturaproveedor = facturaproveedor;
	}
	
	public FacturaProveedor getfacturaproveedorAux() {
		return this.facturaproveedorAux;
	}

	public void setfacturaproveedorAux(FacturaProveedor facturaproveedorAux) {
		this.facturaproveedorAux = facturaproveedorAux;
	}				
	
	public FacturaProveedor getfacturaproveedorAnterior() {
		return this.facturaproveedorAnterior;
	}

	public void setfacturaproveedorAnterior(FacturaProveedor facturaproveedorAnterior) {
		this.facturaproveedorAnterior = facturaproveedorAnterior;
	}	
	
	public FacturaProveedor getfacturaproveedorTotales() {
		return this.facturaproveedorTotales;
	}

	public void setfacturaproveedorTotales(FacturaProveedor facturaproveedorTotales) {
		this.facturaproveedorTotales = facturaproveedorTotales;
	}	
	
	public FacturaProveedor getfacturaproveedorBean() {
		return this.facturaproveedorBean;
	}

	public void setfacturaproveedorBean(FacturaProveedor facturaproveedorBean) {
		this.facturaproveedorBean = facturaproveedorBean;
	}	
	
	public FacturaProveedorParameterReturnGeneral getfacturaproveedorReturnGeneral() {
		return this.facturaproveedorReturnGeneral;
	}

	public void setfacturaproveedorReturnGeneral(FacturaProveedorParameterReturnGeneral facturaproveedorReturnGeneral) {
		this.facturaproveedorReturnGeneral = facturaproveedorReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_cuenta_contable_creditoFK_IdCuentaContableCredito=null;

	public Long getid_cuenta_contable_creditoFK_IdCuentaContableCredito() {
		return this.id_cuenta_contable_creditoFK_IdCuentaContableCredito;
	}

	public void setid_cuenta_contable_creditoFK_IdCuentaContableCredito(Long id_cuenta_contable_creditoFK_IdCuentaContableCredito) {
		this.id_cuenta_contable_creditoFK_IdCuentaContableCredito = id_cuenta_contable_creditoFK_IdCuentaContableCredito;
	}

	public Long id_cuenta_contable_credito_finFK_IdCuentaContableCreditoFin=null;

	public Long getid_cuenta_contable_credito_finFK_IdCuentaContableCreditoFin() {
		return this.id_cuenta_contable_credito_finFK_IdCuentaContableCreditoFin;
	}

	public void setid_cuenta_contable_credito_finFK_IdCuentaContableCreditoFin(Long id_cuenta_contable_credito_finFK_IdCuentaContableCreditoFin) {
		this.id_cuenta_contable_credito_finFK_IdCuentaContableCreditoFin = id_cuenta_contable_credito_finFK_IdCuentaContableCreditoFin;
	}

	public Long id_cuenta_contable_credito_fin2FK_IdCuentaContableCreditoFin2=null;

	public Long getid_cuenta_contable_credito_fin2FK_IdCuentaContableCreditoFin2() {
		return this.id_cuenta_contable_credito_fin2FK_IdCuentaContableCreditoFin2;
	}

	public void setid_cuenta_contable_credito_fin2FK_IdCuentaContableCreditoFin2(Long id_cuenta_contable_credito_fin2FK_IdCuentaContableCreditoFin2) {
		this.id_cuenta_contable_credito_fin2FK_IdCuentaContableCreditoFin2 = id_cuenta_contable_credito_fin2FK_IdCuentaContableCreditoFin2;
	}

	public Long id_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes=-1L;

	public Long getid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes() {
		return this.id_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes;
	}

	public void setid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes(Long id_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes) {
		this.id_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes = id_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes;
	}

	public Long id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios=-1L;

	public Long getid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios() {
		return this.id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios;
	}

	public void setid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios(Long id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios) {
		this.id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios = id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios;
	}

	public Long id_cuenta_contable_gastoFK_IdCuentaContableGasto=-1L;

	public Long getid_cuenta_contable_gastoFK_IdCuentaContableGasto() {
		return this.id_cuenta_contable_gastoFK_IdCuentaContableGasto;
	}

	public void setid_cuenta_contable_gastoFK_IdCuentaContableGasto(Long id_cuenta_contable_gastoFK_IdCuentaContableGasto) {
		this.id_cuenta_contable_gastoFK_IdCuentaContableGasto = id_cuenta_contable_gastoFK_IdCuentaContableGasto;
	}

	public Long id_cuenta_contable_gasto2FK_IdCuentaContableGasto2=-1L;

	public Long getid_cuenta_contable_gasto2FK_IdCuentaContableGasto2() {
		return this.id_cuenta_contable_gasto2FK_IdCuentaContableGasto2;
	}

	public void setid_cuenta_contable_gasto2FK_IdCuentaContableGasto2(Long id_cuenta_contable_gasto2FK_IdCuentaContableGasto2) {
		this.id_cuenta_contable_gasto2FK_IdCuentaContableGasto2 = id_cuenta_contable_gasto2FK_IdCuentaContableGasto2;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empleadoFK_IdEmpleado=-1L;

	public Long getid_empleadoFK_IdEmpleado() {
		return this.id_empleadoFK_IdEmpleado;
	}

	public void setid_empleadoFK_IdEmpleado(Long id_empleadoFK_IdEmpleado) {
		this.id_empleadoFK_IdEmpleado = id_empleadoFK_IdEmpleado;
	}

	public Long id_empleado_solicitaFK_IdEmpleadoSolicita=-1L;

	public Long getid_empleado_solicitaFK_IdEmpleadoSolicita() {
		return this.id_empleado_solicitaFK_IdEmpleadoSolicita;
	}

	public void setid_empleado_solicitaFK_IdEmpleadoSolicita(Long id_empleado_solicitaFK_IdEmpleadoSolicita) {
		this.id_empleado_solicitaFK_IdEmpleadoSolicita = id_empleado_solicitaFK_IdEmpleadoSolicita;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_facturaFK_IdFactura=-1L;

	public Long getid_facturaFK_IdFactura() {
		return this.id_facturaFK_IdFactura;
	}

	public void setid_facturaFK_IdFactura(Long id_facturaFK_IdFactura) {
		this.id_facturaFK_IdFactura = id_facturaFK_IdFactura;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_moduloFK_IdModulo=-1L;

	public Long getid_moduloFK_IdModulo() {
		return this.id_moduloFK_IdModulo;
	}

	public void setid_moduloFK_IdModulo(Long id_moduloFK_IdModulo) {
		this.id_moduloFK_IdModulo = id_moduloFK_IdModulo;
	}

	public Long id_monedaFK_IdMoneda=-1L;

	public Long getid_monedaFK_IdMoneda() {
		return this.id_monedaFK_IdMoneda;
	}

	public void setid_monedaFK_IdMoneda(Long id_monedaFK_IdMoneda) {
		this.id_monedaFK_IdMoneda = id_monedaFK_IdMoneda;
	}

	public Long id_periodoFK_IdPeriodo=-1L;

	public Long getid_periodoFK_IdPeriodo() {
		return this.id_periodoFK_IdPeriodo;
	}

	public void setid_periodoFK_IdPeriodo(Long id_periodoFK_IdPeriodo) {
		this.id_periodoFK_IdPeriodo = id_periodoFK_IdPeriodo;
	}

	public Long id_plantilla_facturaFK_IdPlantillaFactura=null;

	public Long getid_plantilla_facturaFK_IdPlantillaFactura() {
		return this.id_plantilla_facturaFK_IdPlantillaFactura;
	}

	public void setid_plantilla_facturaFK_IdPlantillaFactura(Long id_plantilla_facturaFK_IdPlantillaFactura) {
		this.id_plantilla_facturaFK_IdPlantillaFactura = id_plantilla_facturaFK_IdPlantillaFactura;
	}

	public Long id_responsable_fondoFK_IdResponsableFondo=-1L;

	public Long getid_responsable_fondoFK_IdResponsableFondo() {
		return this.id_responsable_fondoFK_IdResponsableFondo;
	}

	public void setid_responsable_fondoFK_IdResponsableFondo(Long id_responsable_fondoFK_IdResponsableFondo) {
		this.id_responsable_fondoFK_IdResponsableFondo = id_responsable_fondoFK_IdResponsableFondo;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_documentoFK_IdTipoDocumento=-1L;

	public Long getid_tipo_documentoFK_IdTipoDocumento() {
		return this.id_tipo_documentoFK_IdTipoDocumento;
	}

	public void setid_tipo_documentoFK_IdTipoDocumento(Long id_tipo_documentoFK_IdTipoDocumento) {
		this.id_tipo_documentoFK_IdTipoDocumento = id_tipo_documentoFK_IdTipoDocumento;
	}

	public Long id_tipo_movimientoFK_IdTipoMovimiento=null;

	public Long getid_tipo_movimientoFK_IdTipoMovimiento() {
		return this.id_tipo_movimientoFK_IdTipoMovimiento;
	}

	public void setid_tipo_movimientoFK_IdTipoMovimiento(Long id_tipo_movimientoFK_IdTipoMovimiento) {
		this.id_tipo_movimientoFK_IdTipoMovimiento = id_tipo_movimientoFK_IdTipoMovimiento;
	}

	public Long id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo=null;

	public Long getid_tipo_movimiento_moduloFK_IdTipoMovimientoModulo() {
		return this.id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo;
	}

	public void setid_tipo_movimiento_moduloFK_IdTipoMovimientoModulo(Long id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo) {
		this.id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo = id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo;
	}

	public Long id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1=-1L;

	public Long getid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1() {
		return this.id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1;
	}

	public void setid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1(Long id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1) {
		this.id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1 = id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1;
	}

	public Long id_tipo_retencion_fuente2FK_IdTipoRetencionFuente2=-1L;

	public Long getid_tipo_retencion_fuente2FK_IdTipoRetencionFuente2() {
		return this.id_tipo_retencion_fuente2FK_IdTipoRetencionFuente2;
	}

	public void setid_tipo_retencion_fuente2FK_IdTipoRetencionFuente2(Long id_tipo_retencion_fuente2FK_IdTipoRetencionFuente2) {
		this.id_tipo_retencion_fuente2FK_IdTipoRetencionFuente2 = id_tipo_retencion_fuente2FK_IdTipoRetencionFuente2;
	}

	public Long id_tipo_retencion_iva1FK_IdTipoRetencionIva1=-1L;

	public Long getid_tipo_retencion_iva1FK_IdTipoRetencionIva1() {
		return this.id_tipo_retencion_iva1FK_IdTipoRetencionIva1;
	}

	public void setid_tipo_retencion_iva1FK_IdTipoRetencionIva1(Long id_tipo_retencion_iva1FK_IdTipoRetencionIva1) {
		this.id_tipo_retencion_iva1FK_IdTipoRetencionIva1 = id_tipo_retencion_iva1FK_IdTipoRetencionIva1;
	}

	public Long id_tipo_retencion_iva2FK_IdTipoRetencionIva2=-1L;

	public Long getid_tipo_retencion_iva2FK_IdTipoRetencionIva2() {
		return this.id_tipo_retencion_iva2FK_IdTipoRetencionIva2;
	}

	public void setid_tipo_retencion_iva2FK_IdTipoRetencionIva2(Long id_tipo_retencion_iva2FK_IdTipoRetencionIva2) {
		this.id_tipo_retencion_iva2FK_IdTipoRetencionIva2 = id_tipo_retencion_iva2FK_IdTipoRetencionIva2;
	}

	public Long id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo=null;

	public Long getid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo() {
		return this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo;
	}

	public void setid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo(Long id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo) {
		this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo = id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo;
	}

	public Long id_tipo_tributarioFK_IdTipoTributario=-1L;

	public Long getid_tipo_tributarioFK_IdTipoTributario() {
		return this.id_tipo_tributarioFK_IdTipoTributario;
	}

	public void setid_tipo_tributarioFK_IdTipoTributario(Long id_tipo_tributarioFK_IdTipoTributario) {
		this.id_tipo_tributarioFK_IdTipoTributario = id_tipo_tributarioFK_IdTipoTributario;
	}

	public Long id_transaccionFK_IdTransaccion=-1L;

	public Long getid_transaccionFK_IdTransaccion() {
		return this.id_transaccionFK_IdTransaccion;
	}

	public void setid_transaccionFK_IdTransaccion(Long id_transaccionFK_IdTransaccion) {
		this.id_transaccionFK_IdTransaccion = id_transaccionFK_IdTransaccion;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public FacturaProveedorLogic getFacturaProveedorLogic()	{		
		return facturaproveedorLogic;
	}

	public void setFacturaProveedorLogic(FacturaProveedorLogic facturaproveedorLogic) {
		this.facturaproveedorLogic = facturaproveedorLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoFacturaProveedor() {
		return isEsNuevoFacturaProveedor;
	}

	public void setIsEsNuevoFacturaProveedor(Boolean isEsNuevoFacturaProveedor) {
		this.isEsNuevoFacturaProveedor = isEsNuevoFacturaProveedor;
	}

	public Boolean getEsParaAccionDesdeFormularioFacturaProveedor() {
		return esParaAccionDesdeFormularioFacturaProveedor;
	}
	
	public void setEsParaAccionDesdeFormularioFacturaProveedor(Boolean esParaAccionDesdeFormularioFacturaProveedor) {
		this.esParaAccionDesdeFormularioFacturaProveedor = esParaAccionDesdeFormularioFacturaProveedor;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPeriodosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.periodosForeignKey=new ArrayList<Periodo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PeriodoLogic periodoLogic=new PeriodoLogic();

			//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//periodoLogic.getPeriodoDataAccess().setIsForForeingKeyData(true);

					periodoLogic.getTodosPeriodosWithConnection(sFinalQuery,new Pagination());

					this.periodosForeignKey=periodoLogic.getPeriodos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPeriodo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					periodoLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidPeriodoActual());
					this.periodosForeignKey.add(periodoLogic.getPeriodo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			Anio anioNulo = new Anio();

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}

				this.aniosForeignKey.add(0, anioNulo);

				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.modulosForeignKey=new ArrayList<Modulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ModuloLogic moduloLogic=new ModuloLogic();

			//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//moduloLogic.getModuloDataAccess().setIsForForeingKeyData(true);

					moduloLogic.getTodosModulosWithConnection(sFinalQuery,new Pagination());

					this.modulosForeignKey=moduloLogic.getModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					moduloLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidModuloActual());
					this.modulosForeignKey.add(moduloLogic.getModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPlantillaFacturasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.plantillafacturasForeignKey=new ArrayList<PlantillaFactura>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PlantillaFacturaLogic plantillafacturaLogic=new PlantillaFacturaLogic();

			//plantillafacturaLogic.getPlantillaFacturaDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionPlantillaFactura()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//plantillafacturaLogic.getPlantillaFacturaDataAccess().setIsForForeingKeyData(true);

					plantillafacturaLogic.getTodosPlantillaFacturasWithConnection(sFinalQuery,new Pagination());

					this.plantillafacturasForeignKey=plantillafacturaLogic.getPlantillaFacturas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPlantillaFactura(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidPlantillaFacturaActual());
					this.plantillafacturasForeignKey.add(plantillafacturaLogic.getPlantillaFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoDocumentosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipodocumentosForeignKey=new ArrayList<TipoDocumento>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoDocumentoLogic tipodocumentoLogic=new TipoDocumentoLogic();

			//tipodocumentoLogic.getTipoDocumentoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoDocumento()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipodocumentoLogic.getTipoDocumentoDataAccess().setIsForForeingKeyData(true);

					tipodocumentoLogic.getTodosTipoDocumentosWithConnection(sFinalQuery,new Pagination());

					this.tipodocumentosForeignKey=tipodocumentoLogic.getTipoDocumentos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoDocumento(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipodocumentoLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidTipoDocumentoActual());
					this.tipodocumentosForeignKey.add(tipodocumentoLogic.getTipoDocumento());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFacturasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.facturasForeignKey=new ArrayList<Factura>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FacturaLogic facturaLogic=new FacturaLogic();

			//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//facturaLogic.getFacturaDataAccess().setIsForForeingKeyData(true);

					facturaLogic.getTodosFacturasWithConnection(sFinalQuery,new Pagination());

					this.facturasForeignKey=facturaLogic.getFacturas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFactura(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidFacturaActual());
					this.facturasForeignKey.add(facturaLogic.getFactura());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTransaccionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.transaccionsForeignKey=new ArrayList<Transaccion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TransaccionLogic transaccionLogic=new TransaccionLogic();

			//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//transaccionLogic.getTransaccionDataAccess().setIsForForeingKeyData(true);

					transaccionLogic.getTodosTransaccionsWithConnection(sFinalQuery,new Pagination());

					this.transaccionsForeignKey=transaccionLogic.getTransaccions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTransaccion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					transaccionLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidTransaccionActual());
					this.transaccionsForeignKey.add(transaccionLogic.getTransaccion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpleadoSolicitasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosolicitasForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpleadoSolicita()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empleadosolicitaLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosolicitasForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleadoSolicita(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidEmpleadoSolicitaActual());
					this.empleadosolicitasForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMonedasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.monedasForeignKey=new ArrayList<Moneda>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MonedaLogic monedaLogic=new MonedaLogic();

			//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//monedaLogic.getMonedaDataAccess().setIsForForeingKeyData(true);

					monedaLogic.getTodosMonedasWithConnection(sFinalQuery,new Pagination());

					this.monedasForeignKey=monedaLogic.getMonedas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMoneda(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					monedaLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidMonedaActual());
					this.monedasForeignKey.add(monedaLogic.getMoneda());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpleadosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleado(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidEmpleadoActual());
					this.empleadosForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionFuente1sForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencionfuente1sForeignKey=new ArrayList<TipoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencionLogic tiporetencionLogic=new TipoRetencionLogic();

			//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuente1()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencionfuente1Logic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

					tiporetencionLogic.getTodosTipoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.tiporetencionfuente1sForeignKey=tiporetencionLogic.getTipoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencionFuente1(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidTipoRetencionFuente1Actual());
					this.tiporetencionfuente1sForeignKey.add(tiporetencionLogic.getTipoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionFuente2sForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencionfuente2sForeignKey=new ArrayList<TipoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencionLogic tiporetencionLogic=new TipoRetencionLogic();

			//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuente2()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencionfuente2Logic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

					tiporetencionLogic.getTodosTipoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.tiporetencionfuente2sForeignKey=tiporetencionLogic.getTipoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencionFuente2(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidTipoRetencionFuente2Actual());
					this.tiporetencionfuente2sForeignKey.add(tiporetencionLogic.getTipoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionIva1sForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencioniva1sForeignKey=new ArrayList<TipoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencionLogic tiporetencionLogic=new TipoRetencionLogic();

			//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIva1()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencioniva1Logic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

					tiporetencionLogic.getTodosTipoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.tiporetencioniva1sForeignKey=tiporetencionLogic.getTipoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencionIva1(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidTipoRetencionIva1Actual());
					this.tiporetencioniva1sForeignKey.add(tiporetencionLogic.getTipoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionIva2sForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencioniva2sForeignKey=new ArrayList<TipoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencionLogic tiporetencionLogic=new TipoRetencionLogic();

			//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIva2()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencioniva2Logic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

					tiporetencionLogic.getTodosTipoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.tiporetencioniva2sForeignKey=tiporetencionLogic.getTipoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencionIva2(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidTipoRetencionIva2Actual());
					this.tiporetencioniva2sForeignKey.add(tiporetencionLogic.getTipoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoTributariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipotributariosForeignKey=new ArrayList<TipoTributario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoTributarioLogic tipotributarioLogic=new TipoTributarioLogic();

			//tipotributarioLogic.getTipoTributarioDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoTributario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipotributarioLogic.getTipoTributarioDataAccess().setIsForForeingKeyData(true);

					tipotributarioLogic.getTodosTipoTributariosWithConnection(sFinalQuery,new Pagination());

					this.tipotributariosForeignKey=tipotributarioLogic.getTipoTributarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoTributario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipotributarioLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidTipoTributarioActual());
					this.tipotributariosForeignKey.add(tipotributarioLogic.getTipoTributario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCreditoFiscalBienessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecreditofiscalbienessForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFiscalBienes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecreditofiscalbienesLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecreditofiscalbienessForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCreditoFiscalBienes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidCuentaContableCreditoFiscalBienesActual());
					this.cuentacontablecreditofiscalbienessForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosResponsableFondosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.responsablefondosForeignKey=new ArrayList<ResponsableFondo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ResponsableFondoLogic responsablefondoLogic=new ResponsableFondoLogic();

			//responsablefondoLogic.getResponsableFondoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionResponsableFondo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//responsablefondoLogic.getResponsableFondoDataAccess().setIsForForeingKeyData(true);

					responsablefondoLogic.getTodosResponsableFondosWithConnection(sFinalQuery,new Pagination());

					this.responsablefondosForeignKey=responsablefondoLogic.getResponsableFondos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaResponsableFondo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					responsablefondoLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidResponsableFondoActual());
					this.responsablefondosForeignKey.add(responsablefondoLogic.getResponsableFondo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCreditoFiscalServiciossForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecreditofiscalserviciossForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFiscalServicios()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecreditofiscalserviciosLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecreditofiscalserviciossForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCreditoFiscalServicios(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidCuentaContableCreditoFiscalServiciosActual());
					this.cuentacontablecreditofiscalserviciossForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableGastosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablegastosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableGasto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablegastoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablegastosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableGasto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidCuentaContableGastoActual());
					this.cuentacontablegastosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableGasto2sForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablegasto2sForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableGasto2()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablegasto2Logic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablegasto2sForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableGasto2(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidCuentaContableGasto2Actual());
					this.cuentacontablegasto2sForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCreditoFinsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecreditofinsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFin()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecreditofinLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecreditofinsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCreditoFin(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidCuentaContableCreditoFinActual());
					this.cuentacontablecreditofinsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCreditoFin2sForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecreditofin2sForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFin2()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecreditofin2Logic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecreditofin2sForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCreditoFin2(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidCuentaContableCreditoFin2Actual());
					this.cuentacontablecreditofin2sForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableCreditosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecreditoLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecreditosForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableCredito(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidCuentaContableCreditoActual());
					this.cuentacontablecreditosForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoMovimientosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipomovimientosForeignKey=new ArrayList<TipoMovimiento>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoMovimientoLogic tipomovimientoLogic=new TipoMovimientoLogic();

			//tipomovimientoLogic.getTipoMovimientoDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimiento()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipomovimientoLogic.getTipoMovimientoDataAccess().setIsForForeingKeyData(true);

					tipomovimientoLogic.getTodosTipoMovimientosWithConnection(sFinalQuery,new Pagination());

					this.tipomovimientosForeignKey=tipomovimientoLogic.getTipoMovimientos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoMovimiento(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipomovimientoLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidTipoMovimientoActual());
					this.tipomovimientosForeignKey.add(tipomovimientoLogic.getTipoMovimiento());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoMovimientoModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipomovimientomodulosForeignKey=new ArrayList<TipoMovimientoModulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoMovimientoModuloLogic tipomovimientomoduloLogic=new TipoMovimientoModuloLogic();

			//tipomovimientomoduloLogic.getTipoMovimientoModuloDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimientoModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipomovimientomoduloLogic.getTipoMovimientoModuloDataAccess().setIsForForeingKeyData(true);

					tipomovimientomoduloLogic.getTodosTipoMovimientoModulosWithConnection(sFinalQuery,new Pagination());

					this.tipomovimientomodulosForeignKey=tipomovimientomoduloLogic.getTipoMovimientoModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoMovimientoModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipomovimientomoduloLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidTipoMovimientoModuloActual());
					this.tipomovimientomodulosForeignKey.add(tipomovimientomoduloLogic.getTipoMovimientoModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoTransaccionModulosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoTransaccionModuloLogic tipotransaccionmoduloLogic=new TipoTransaccionModuloLogic();

			//tipotransaccionmoduloLogic.getTipoTransaccionModuloDataAccess().setIsForForeingKeyData(true);

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipotransaccionmoduloLogic.getTipoTransaccionModuloDataAccess().setIsForForeingKeyData(true);

					tipotransaccionmoduloLogic.getTodosTipoTransaccionModulosWithConnection(sFinalQuery,new Pagination());

					this.tipotransaccionmodulosForeignKey=tipotransaccionmoduloLogic.getTipoTransaccionModulos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoTransaccionModulo(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipotransaccionmoduloLogic.getEntityWithConnection(facturaproveedorSessionBean.getlidTipoTransaccionModuloActual());
					this.tipotransaccionmodulosForeignKey.add(tipotransaccionmoduloLogic.getTipoTransaccionModulo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaFacturaProveedor.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaFacturaProveedorGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaFacturaProveedorGenerico!=null && jComboBoxid_empresaFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_empresaFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalFacturaProveedor.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalFacturaProveedorGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalFacturaProveedorGenerico!=null && jComboBoxid_sucursalFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_sucursalFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioFacturaProveedor.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioFacturaProveedorGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioFacturaProveedorGenerico!=null && jComboBoxid_ejercicioFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPeriodoForeignKey(Long idPeriodoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(periodoTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setPeriodo(periodoTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.setSelectedItem(periodoTemp);
					}
				} else {
					//jComboBoxid_periodoFacturaProveedor.setSelectedItem(periodoTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPeriodoForeignKeyDescripcion(Long idPeriodoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}


			sDescripcion=PeriodoConstantesFunciones.getPeriodoDescripcion(periodoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPeriodoForeignKeyGenerico(Long idPeriodoSeleccionado,JComboBox jComboBoxid_periodoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Periodo  periodoTemp=null;

			for(Periodo periodoAux:periodosForeignKey) {
				if(periodoAux.getId()!=null && periodoAux.getId().equals(idPeriodoSeleccionado)) {
					periodoTemp=periodoAux;
					break;
				}
			}

			if(periodoTemp!=null) {
				jComboBoxid_periodoFacturaProveedorGenerico.setSelectedItem(periodoTemp);
			} else {
				if(jComboBoxid_periodoFacturaProveedorGenerico!=null && jComboBoxid_periodoFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_periodoFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioFacturaProveedor.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioFacturaProveedorGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioFacturaProveedorGenerico!=null && jComboBoxid_anioFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_anioFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesFacturaProveedor.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesFacturaProveedorGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesFacturaProveedorGenerico!=null && jComboBoxid_mesFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_mesFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualModuloForeignKey(Long idModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(moduloTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setModulo(moduloTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.setSelectedItem(moduloTemp);
					}
				} else {
					//jComboBoxid_moduloFacturaProveedor.setSelectedItem(moduloTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualModuloForeignKeyDescripcion(Long idModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}


			sDescripcion=ModuloConstantesFunciones.getModuloDescripcion(moduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualModuloForeignKeyGenerico(Long idModuloSeleccionado,JComboBox jComboBoxid_moduloFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Modulo  moduloTemp=null;

			for(Modulo moduloAux:modulosForeignKey) {
				if(moduloAux.getId()!=null && moduloAux.getId().equals(idModuloSeleccionado)) {
					moduloTemp=moduloAux;
					break;
				}
			}

			if(moduloTemp!=null) {
				jComboBoxid_moduloFacturaProveedorGenerico.setSelectedItem(moduloTemp);
			} else {
				if(jComboBoxid_moduloFacturaProveedorGenerico!=null && jComboBoxid_moduloFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_moduloFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPlantillaFacturaForeignKey(Long idPlantillaFacturaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			PlantillaFactura  plantillafacturaTemp=null;

			for(PlantillaFactura plantillafacturaAux:plantillafacturasForeignKey) {
				if(plantillafacturaAux.getId()!=null && plantillafacturaAux.getId().equals(idPlantillaFacturaSeleccionado)) {
					plantillafacturaTemp=plantillafacturaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(plantillafacturaTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setPlantillaFactura(plantillafacturaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.setSelectedItem(plantillafacturaTemp);
					}
				} else {
					//jComboBoxid_plantilla_facturaFacturaProveedor.setSelectedItem(plantillafacturaTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdPlantillaFactura") || sFormularioTipoBusqueda.equals("Todos")){
					if(plantillafacturaTemp!=null && jComboBoxid_plantilla_facturaFK_IdPlantillaFacturaFacturaProveedor!=null) {
						jComboBoxid_plantilla_facturaFK_IdPlantillaFacturaFacturaProveedor.setSelectedItem(plantillafacturaTemp);
					} else {
						if(jComboBoxid_plantilla_facturaFK_IdPlantillaFacturaFacturaProveedor!=null) {
							//jComboBoxid_plantilla_facturaFK_IdPlantillaFacturaFacturaProveedor.setSelectedItem(plantillafacturaTemp);
							if(jComboBoxid_plantilla_facturaFK_IdPlantillaFacturaFacturaProveedor.getItemCount()>0) {
								jComboBoxid_plantilla_facturaFK_IdPlantillaFacturaFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPlantillaFacturaForeignKeyDescripcion(Long idPlantillaFacturaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			PlantillaFactura  plantillafacturaTemp=null;

			for(PlantillaFactura plantillafacturaAux:plantillafacturasForeignKey) {
				if(plantillafacturaAux.getId()!=null && plantillafacturaAux.getId().equals(idPlantillaFacturaSeleccionado)) {
					plantillafacturaTemp=plantillafacturaAux;
					break;
				}
			}


			sDescripcion=PlantillaFacturaConstantesFunciones.getPlantillaFacturaDescripcion(plantillafacturaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPlantillaFacturaForeignKeyGenerico(Long idPlantillaFacturaSeleccionado,JComboBox jComboBoxid_plantilla_facturaFacturaProveedorGenerico)throws Exception
	{
		try
		{
			PlantillaFactura  plantillafacturaTemp=null;

			for(PlantillaFactura plantillafacturaAux:plantillafacturasForeignKey) {
				if(plantillafacturaAux.getId()!=null && plantillafacturaAux.getId().equals(idPlantillaFacturaSeleccionado)) {
					plantillafacturaTemp=plantillafacturaAux;
					break;
				}
			}

			if(plantillafacturaTemp!=null) {
				jComboBoxid_plantilla_facturaFacturaProveedorGenerico.setSelectedItem(plantillafacturaTemp);
			} else {
				if(jComboBoxid_plantilla_facturaFacturaProveedorGenerico!=null && jComboBoxid_plantilla_facturaFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_plantilla_facturaFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoDocumentoForeignKey(Long idTipoDocumentoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoDocumento  tipodocumentoTemp=null;

			for(TipoDocumento tipodocumentoAux:tipodocumentosForeignKey) {
				if(tipodocumentoAux.getId()!=null && tipodocumentoAux.getId().equals(idTipoDocumentoSeleccionado)) {
					tipodocumentoTemp=tipodocumentoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipodocumentoTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setTipoDocumento(tipodocumentoTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.setSelectedItem(tipodocumentoTemp);
					}
				} else {
					//jComboBoxid_tipo_documentoFacturaProveedor.setSelectedItem(tipodocumentoTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoDocumento") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipodocumentoTemp!=null && jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedor!=null) {
						jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedor.setSelectedItem(tipodocumentoTemp);
					} else {
						if(jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedor!=null) {
							//jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedor.setSelectedItem(tipodocumentoTemp);
							if(jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedor.getItemCount()>0) {
								jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoDocumentoForeignKeyDescripcion(Long idTipoDocumentoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoDocumento  tipodocumentoTemp=null;

			for(TipoDocumento tipodocumentoAux:tipodocumentosForeignKey) {
				if(tipodocumentoAux.getId()!=null && tipodocumentoAux.getId().equals(idTipoDocumentoSeleccionado)) {
					tipodocumentoTemp=tipodocumentoAux;
					break;
				}
			}


			sDescripcion=TipoDocumentoConstantesFunciones.getTipoDocumentoDescripcion(tipodocumentoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoDocumentoForeignKeyGenerico(Long idTipoDocumentoSeleccionado,JComboBox jComboBoxid_tipo_documentoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoDocumento  tipodocumentoTemp=null;

			for(TipoDocumento tipodocumentoAux:tipodocumentosForeignKey) {
				if(tipodocumentoAux.getId()!=null && tipodocumentoAux.getId().equals(idTipoDocumentoSeleccionado)) {
					tipodocumentoTemp=tipodocumentoAux;
					break;
				}
			}

			if(tipodocumentoTemp!=null) {
				jComboBoxid_tipo_documentoFacturaProveedorGenerico.setSelectedItem(tipodocumentoTemp);
			} else {
				if(jComboBoxid_tipo_documentoFacturaProveedorGenerico!=null && jComboBoxid_tipo_documentoFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_tipo_documentoFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFacturaForeignKey(Long idFacturaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(facturaTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setFactura(facturaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.setSelectedItem(facturaTemp);
					}
				} else {
					//jComboBoxid_facturaFacturaProveedor.setSelectedItem(facturaTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFacturaForeignKeyDescripcion(Long idFacturaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}


			sDescripcion=FacturaConstantesFunciones.getFacturaDescripcion(facturaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFacturaForeignKeyGenerico(Long idFacturaSeleccionado,JComboBox jComboBoxid_facturaFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Factura  facturaTemp=null;

			for(Factura facturaAux:facturasForeignKey) {
				if(facturaAux.getId()!=null && facturaAux.getId().equals(idFacturaSeleccionado)) {
					facturaTemp=facturaAux;
					break;
				}
			}

			if(facturaTemp!=null) {
				jComboBoxid_facturaFacturaProveedorGenerico.setSelectedItem(facturaTemp);
			} else {
				if(jComboBoxid_facturaFacturaProveedorGenerico!=null && jComboBoxid_facturaFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_facturaFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTransaccionForeignKey(Long idTransaccionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(transaccionTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setTransaccion(transaccionTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.setSelectedItem(transaccionTemp);
					}
				} else {
					//jComboBoxid_transaccionFacturaProveedor.setSelectedItem(transaccionTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTransaccion") || sFormularioTipoBusqueda.equals("Todos")){
					if(transaccionTemp!=null && jComboBoxid_transaccionFK_IdTransaccionFacturaProveedor!=null) {
						jComboBoxid_transaccionFK_IdTransaccionFacturaProveedor.setSelectedItem(transaccionTemp);
					} else {
						if(jComboBoxid_transaccionFK_IdTransaccionFacturaProveedor!=null) {
							//jComboBoxid_transaccionFK_IdTransaccionFacturaProveedor.setSelectedItem(transaccionTemp);
							if(jComboBoxid_transaccionFK_IdTransaccionFacturaProveedor.getItemCount()>0) {
								jComboBoxid_transaccionFK_IdTransaccionFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTransaccionForeignKeyDescripcion(Long idTransaccionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}


			sDescripcion=TransaccionConstantesFunciones.getTransaccionDescripcion(transaccionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTransaccionForeignKeyGenerico(Long idTransaccionSeleccionado,JComboBox jComboBoxid_transaccionFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionTemp=null;

			for(Transaccion transaccionAux:transaccionsForeignKey) {
				if(transaccionAux.getId()!=null && transaccionAux.getId().equals(idTransaccionSeleccionado)) {
					transaccionTemp=transaccionAux;
					break;
				}
			}

			if(transaccionTemp!=null) {
				jComboBoxid_transaccionFacturaProveedorGenerico.setSelectedItem(transaccionTemp);
			} else {
				if(jComboBoxid_transaccionFacturaProveedorGenerico!=null && jComboBoxid_transaccionFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_transaccionFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteFacturaProveedor.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteFacturaProveedor!=null) {
						jComboBoxid_clienteFK_IdClienteFacturaProveedor.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteFacturaProveedor!=null) {
							//jComboBoxid_clienteFK_IdClienteFacturaProveedor.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteFacturaProveedor.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteFacturaProveedorGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteFacturaProveedorGenerico!=null && jComboBoxid_clienteFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_clienteFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpleadoSolicitaForeignKey(Long idEmpleadoSolicitaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadosolicitaTemp=null;

			for(Empleado empleadosolicitaAux:empleadosolicitasForeignKey) {
				if(empleadosolicitaAux.getId()!=null && empleadosolicitaAux.getId().equals(idEmpleadoSolicitaSeleccionado)) {
					empleadosolicitaTemp=empleadosolicitaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadosolicitaTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setEmpleadoSolicita(empleadosolicitaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.setSelectedItem(empleadosolicitaTemp);
					}
				} else {
					//jComboBoxid_empleado_solicitaFacturaProveedor.setSelectedItem(empleadosolicitaTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoSolicitaForeignKeyDescripcion(Long idEmpleadoSolicitaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadosolicitaTemp=null;

			for(Empleado empleadosolicitaAux:empleadosolicitasForeignKey) {
				if(empleadosolicitaAux.getId()!=null && empleadosolicitaAux.getId().equals(idEmpleadoSolicitaSeleccionado)) {
					empleadosolicitaTemp=empleadosolicitaAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadosolicitaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoSolicitaForeignKeyGenerico(Long idEmpleadoSolicitaSeleccionado,JComboBox jComboBoxid_empleado_solicitaFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Empleado  empleadosolicitaTemp=null;

			for(Empleado empleadosolicitaAux:empleadosolicitasForeignKey) {
				if(empleadosolicitaAux.getId()!=null && empleadosolicitaAux.getId().equals(idEmpleadoSolicitaSeleccionado)) {
					empleadosolicitaTemp=empleadosolicitaAux;
					break;
				}
			}

			if(empleadosolicitaTemp!=null) {
				jComboBoxid_empleado_solicitaFacturaProveedorGenerico.setSelectedItem(empleadosolicitaTemp);
			} else {
				if(jComboBoxid_empleado_solicitaFacturaProveedorGenerico!=null && jComboBoxid_empleado_solicitaFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_empleado_solicitaFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMonedaForeignKey(Long idMonedaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(monedaTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setMoneda(monedaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.setSelectedItem(monedaTemp);
					}
				} else {
					//jComboBoxid_monedaFacturaProveedor.setSelectedItem(monedaTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMonedaForeignKeyDescripcion(Long idMonedaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}


			sDescripcion=MonedaConstantesFunciones.getMonedaDescripcion(monedaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMonedaForeignKeyGenerico(Long idMonedaSeleccionado,JComboBox jComboBoxid_monedaFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Moneda  monedaTemp=null;

			for(Moneda monedaAux:monedasForeignKey) {
				if(monedaAux.getId()!=null && monedaAux.getId().equals(idMonedaSeleccionado)) {
					monedaTemp=monedaAux;
					break;
				}
			}

			if(monedaTemp!=null) {
				jComboBoxid_monedaFacturaProveedorGenerico.setSelectedItem(monedaTemp);
			} else {
				if(jComboBoxid_monedaFacturaProveedorGenerico!=null && jComboBoxid_monedaFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_monedaFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpleadoForeignKey(Long idEmpleadoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadoTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setEmpleado(empleadoTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.setSelectedItem(empleadoTemp);
					}
				} else {
					//jComboBoxid_empleadoFacturaProveedor.setSelectedItem(empleadoTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){
					if(empleadoTemp!=null && jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedor!=null) {
						jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedor.setSelectedItem(empleadoTemp);
					} else {
						if(jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedor!=null) {
							//jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedor.setSelectedItem(empleadoTemp);
							if(jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedor.getItemCount()>0) {
								jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoForeignKeyDescripcion(Long idEmpleadoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoForeignKeyGenerico(Long idEmpleadoSeleccionado,JComboBox jComboBoxid_empleadoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(empleadoTemp!=null) {
				jComboBoxid_empleadoFacturaProveedorGenerico.setSelectedItem(empleadoTemp);
			} else {
				if(jComboBoxid_empleadoFacturaProveedorGenerico!=null && jComboBoxid_empleadoFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_empleadoFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionFuente1ForeignKey(Long idTipoRetencionFuente1Seleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionfuente1Temp=null;

			for(TipoRetencion tiporetencionfuente1Aux:tiporetencionfuente1sForeignKey) {
				if(tiporetencionfuente1Aux.getId()!=null && tiporetencionfuente1Aux.getId().equals(idTipoRetencionFuente1Seleccionado)) {
					tiporetencionfuente1Temp=tiporetencionfuente1Aux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencionfuente1Temp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setTipoRetencionFuente1(tiporetencionfuente1Temp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.setSelectedItem(tiporetencionfuente1Temp);
					}
				} else {
					//jComboBoxid_tipo_retencion_fuente1FacturaProveedor.setSelectedItem(tiporetencionfuente1Temp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionFuente1") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiporetencionfuente1Temp!=null && jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedor!=null) {
						jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedor.setSelectedItem(tiporetencionfuente1Temp);
					} else {
						if(jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedor!=null) {
							//jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedor.setSelectedItem(tiporetencionfuente1Temp);
							if(jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedor.getItemCount()>0) {
								jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionFuente1ForeignKeyDescripcion(Long idTipoRetencionFuente1Seleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencion  tiporetencionfuente1Temp=null;

			for(TipoRetencion tiporetencionfuente1Aux:tiporetencionfuente1sForeignKey) {
				if(tiporetencionfuente1Aux.getId()!=null && tiporetencionfuente1Aux.getId().equals(idTipoRetencionFuente1Seleccionado)) {
					tiporetencionfuente1Temp=tiporetencionfuente1Aux;
					break;
				}
			}


			sDescripcion=TipoRetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencionfuente1Temp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionFuente1ForeignKeyGenerico(Long idTipoRetencionFuente1Seleccionado,JComboBox jComboBoxid_tipo_retencion_fuente1FacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionfuente1Temp=null;

			for(TipoRetencion tiporetencionfuente1Aux:tiporetencionfuente1sForeignKey) {
				if(tiporetencionfuente1Aux.getId()!=null && tiporetencionfuente1Aux.getId().equals(idTipoRetencionFuente1Seleccionado)) {
					tiporetencionfuente1Temp=tiporetencionfuente1Aux;
					break;
				}
			}

			if(tiporetencionfuente1Temp!=null) {
				jComboBoxid_tipo_retencion_fuente1FacturaProveedorGenerico.setSelectedItem(tiporetencionfuente1Temp);
			} else {
				if(jComboBoxid_tipo_retencion_fuente1FacturaProveedorGenerico!=null && jComboBoxid_tipo_retencion_fuente1FacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencion_fuente1FacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionFuente2ForeignKey(Long idTipoRetencionFuente2Seleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionfuente2Temp=null;

			for(TipoRetencion tiporetencionfuente2Aux:tiporetencionfuente2sForeignKey) {
				if(tiporetencionfuente2Aux.getId()!=null && tiporetencionfuente2Aux.getId().equals(idTipoRetencionFuente2Seleccionado)) {
					tiporetencionfuente2Temp=tiporetencionfuente2Aux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencionfuente2Temp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setTipoRetencionFuente2(tiporetencionfuente2Temp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.setSelectedItem(tiporetencionfuente2Temp);
					}
				} else {
					//jComboBoxid_tipo_retencion_fuente2FacturaProveedor.setSelectedItem(tiporetencionfuente2Temp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionFuente2ForeignKeyDescripcion(Long idTipoRetencionFuente2Seleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencion  tiporetencionfuente2Temp=null;

			for(TipoRetencion tiporetencionfuente2Aux:tiporetencionfuente2sForeignKey) {
				if(tiporetencionfuente2Aux.getId()!=null && tiporetencionfuente2Aux.getId().equals(idTipoRetencionFuente2Seleccionado)) {
					tiporetencionfuente2Temp=tiporetencionfuente2Aux;
					break;
				}
			}


			sDescripcion=TipoRetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencionfuente2Temp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionFuente2ForeignKeyGenerico(Long idTipoRetencionFuente2Seleccionado,JComboBox jComboBoxid_tipo_retencion_fuente2FacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionfuente2Temp=null;

			for(TipoRetencion tiporetencionfuente2Aux:tiporetencionfuente2sForeignKey) {
				if(tiporetencionfuente2Aux.getId()!=null && tiporetencionfuente2Aux.getId().equals(idTipoRetencionFuente2Seleccionado)) {
					tiporetencionfuente2Temp=tiporetencionfuente2Aux;
					break;
				}
			}

			if(tiporetencionfuente2Temp!=null) {
				jComboBoxid_tipo_retencion_fuente2FacturaProveedorGenerico.setSelectedItem(tiporetencionfuente2Temp);
			} else {
				if(jComboBoxid_tipo_retencion_fuente2FacturaProveedorGenerico!=null && jComboBoxid_tipo_retencion_fuente2FacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencion_fuente2FacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionIva1ForeignKey(Long idTipoRetencionIva1Seleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencioniva1Temp=null;

			for(TipoRetencion tiporetencioniva1Aux:tiporetencioniva1sForeignKey) {
				if(tiporetencioniva1Aux.getId()!=null && tiporetencioniva1Aux.getId().equals(idTipoRetencionIva1Seleccionado)) {
					tiporetencioniva1Temp=tiporetencioniva1Aux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencioniva1Temp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setTipoRetencionIva1(tiporetencioniva1Temp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.setSelectedItem(tiporetencioniva1Temp);
					}
				} else {
					//jComboBoxid_tipo_retencion_iva1FacturaProveedor.setSelectedItem(tiporetencioniva1Temp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionIva1") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiporetencioniva1Temp!=null && jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedor!=null) {
						jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedor.setSelectedItem(tiporetencioniva1Temp);
					} else {
						if(jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedor!=null) {
							//jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedor.setSelectedItem(tiporetencioniva1Temp);
							if(jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedor.getItemCount()>0) {
								jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionIva1ForeignKeyDescripcion(Long idTipoRetencionIva1Seleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencion  tiporetencioniva1Temp=null;

			for(TipoRetencion tiporetencioniva1Aux:tiporetencioniva1sForeignKey) {
				if(tiporetencioniva1Aux.getId()!=null && tiporetencioniva1Aux.getId().equals(idTipoRetencionIva1Seleccionado)) {
					tiporetencioniva1Temp=tiporetencioniva1Aux;
					break;
				}
			}


			sDescripcion=TipoRetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencioniva1Temp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionIva1ForeignKeyGenerico(Long idTipoRetencionIva1Seleccionado,JComboBox jComboBoxid_tipo_retencion_iva1FacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencioniva1Temp=null;

			for(TipoRetencion tiporetencioniva1Aux:tiporetencioniva1sForeignKey) {
				if(tiporetencioniva1Aux.getId()!=null && tiporetencioniva1Aux.getId().equals(idTipoRetencionIva1Seleccionado)) {
					tiporetencioniva1Temp=tiporetencioniva1Aux;
					break;
				}
			}

			if(tiporetencioniva1Temp!=null) {
				jComboBoxid_tipo_retencion_iva1FacturaProveedorGenerico.setSelectedItem(tiporetencioniva1Temp);
			} else {
				if(jComboBoxid_tipo_retencion_iva1FacturaProveedorGenerico!=null && jComboBoxid_tipo_retencion_iva1FacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencion_iva1FacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionIva2ForeignKey(Long idTipoRetencionIva2Seleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencioniva2Temp=null;

			for(TipoRetencion tiporetencioniva2Aux:tiporetencioniva2sForeignKey) {
				if(tiporetencioniva2Aux.getId()!=null && tiporetencioniva2Aux.getId().equals(idTipoRetencionIva2Seleccionado)) {
					tiporetencioniva2Temp=tiporetencioniva2Aux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencioniva2Temp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setTipoRetencionIva2(tiporetencioniva2Temp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.setSelectedItem(tiporetencioniva2Temp);
					}
				} else {
					//jComboBoxid_tipo_retencion_iva2FacturaProveedor.setSelectedItem(tiporetencioniva2Temp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionIva2ForeignKeyDescripcion(Long idTipoRetencionIva2Seleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencion  tiporetencioniva2Temp=null;

			for(TipoRetencion tiporetencioniva2Aux:tiporetencioniva2sForeignKey) {
				if(tiporetencioniva2Aux.getId()!=null && tiporetencioniva2Aux.getId().equals(idTipoRetencionIva2Seleccionado)) {
					tiporetencioniva2Temp=tiporetencioniva2Aux;
					break;
				}
			}


			sDescripcion=TipoRetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencioniva2Temp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionIva2ForeignKeyGenerico(Long idTipoRetencionIva2Seleccionado,JComboBox jComboBoxid_tipo_retencion_iva2FacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencioniva2Temp=null;

			for(TipoRetencion tiporetencioniva2Aux:tiporetencioniva2sForeignKey) {
				if(tiporetencioniva2Aux.getId()!=null && tiporetencioniva2Aux.getId().equals(idTipoRetencionIva2Seleccionado)) {
					tiporetencioniva2Temp=tiporetencioniva2Aux;
					break;
				}
			}

			if(tiporetencioniva2Temp!=null) {
				jComboBoxid_tipo_retencion_iva2FacturaProveedorGenerico.setSelectedItem(tiporetencioniva2Temp);
			} else {
				if(jComboBoxid_tipo_retencion_iva2FacturaProveedorGenerico!=null && jComboBoxid_tipo_retencion_iva2FacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencion_iva2FacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoTributarioForeignKey(Long idTipoTributarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoTributario  tipotributarioTemp=null;

			for(TipoTributario tipotributarioAux:tipotributariosForeignKey) {
				if(tipotributarioAux.getId()!=null && tipotributarioAux.getId().equals(idTipoTributarioSeleccionado)) {
					tipotributarioTemp=tipotributarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipotributarioTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setTipoTributario(tipotributarioTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.setSelectedItem(tipotributarioTemp);
					}
				} else {
					//jComboBoxid_tipo_tributarioFacturaProveedor.setSelectedItem(tipotributarioTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoTributario") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipotributarioTemp!=null && jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedor!=null) {
						jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedor.setSelectedItem(tipotributarioTemp);
					} else {
						if(jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedor!=null) {
							//jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedor.setSelectedItem(tipotributarioTemp);
							if(jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedor.getItemCount()>0) {
								jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoTributarioForeignKeyDescripcion(Long idTipoTributarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoTributario  tipotributarioTemp=null;

			for(TipoTributario tipotributarioAux:tipotributariosForeignKey) {
				if(tipotributarioAux.getId()!=null && tipotributarioAux.getId().equals(idTipoTributarioSeleccionado)) {
					tipotributarioTemp=tipotributarioAux;
					break;
				}
			}


			sDescripcion=TipoTributarioConstantesFunciones.getTipoTributarioDescripcion(tipotributarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoTributarioForeignKeyGenerico(Long idTipoTributarioSeleccionado,JComboBox jComboBoxid_tipo_tributarioFacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoTributario  tipotributarioTemp=null;

			for(TipoTributario tipotributarioAux:tipotributariosForeignKey) {
				if(tipotributarioAux.getId()!=null && tipotributarioAux.getId().equals(idTipoTributarioSeleccionado)) {
					tipotributarioTemp=tipotributarioAux;
					break;
				}
			}

			if(tipotributarioTemp!=null) {
				jComboBoxid_tipo_tributarioFacturaProveedorGenerico.setSelectedItem(tipotributarioTemp);
			} else {
				if(jComboBoxid_tipo_tributarioFacturaProveedorGenerico!=null && jComboBoxid_tipo_tributarioFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_tipo_tributarioFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCreditoFiscalBienesForeignKey(Long idCuentaContableCreditoFiscalBienesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditofiscalbienesTemp=null;

			for(CuentaContable cuentacontablecreditofiscalbienesAux:cuentacontablecreditofiscalbienessForeignKey) {
				if(cuentacontablecreditofiscalbienesAux.getId()!=null && cuentacontablecreditofiscalbienesAux.getId().equals(idCuentaContableCreditoFiscalBienesSeleccionado)) {
					cuentacontablecreditofiscalbienesTemp=cuentacontablecreditofiscalbienesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecreditofiscalbienesTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setCuentaContableCreditoFiscalBienes(cuentacontablecreditofiscalbienesTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.setSelectedItem(cuentacontablecreditofiscalbienesTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.setSelectedItem(cuentacontablecreditofiscalbienesTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCreditoFiscalBienes") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablecreditofiscalbienesTemp!=null && jComboBoxid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor!=null) {
						jComboBoxid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor.setSelectedItem(cuentacontablecreditofiscalbienesTemp);
					} else {
						if(jComboBoxid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor!=null) {
							//jComboBoxid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor.setSelectedItem(cuentacontablecreditofiscalbienesTemp);
							if(jComboBoxid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor.getItemCount()>0) {
								jComboBoxid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCreditoFiscalBienesForeignKeyDescripcion(Long idCuentaContableCreditoFiscalBienesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecreditofiscalbienesTemp=null;

			for(CuentaContable cuentacontablecreditofiscalbienesAux:cuentacontablecreditofiscalbienessForeignKey) {
				if(cuentacontablecreditofiscalbienesAux.getId()!=null && cuentacontablecreditofiscalbienesAux.getId().equals(idCuentaContableCreditoFiscalBienesSeleccionado)) {
					cuentacontablecreditofiscalbienesTemp=cuentacontablecreditofiscalbienesAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecreditofiscalbienesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCreditoFiscalBienesForeignKeyGenerico(Long idCuentaContableCreditoFiscalBienesSeleccionado,JComboBox jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditofiscalbienesTemp=null;

			for(CuentaContable cuentacontablecreditofiscalbienesAux:cuentacontablecreditofiscalbienessForeignKey) {
				if(cuentacontablecreditofiscalbienesAux.getId()!=null && cuentacontablecreditofiscalbienesAux.getId().equals(idCuentaContableCreditoFiscalBienesSeleccionado)) {
					cuentacontablecreditofiscalbienesTemp=cuentacontablecreditofiscalbienesAux;
					break;
				}
			}

			if(cuentacontablecreditofiscalbienesTemp!=null) {
				jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedorGenerico.setSelectedItem(cuentacontablecreditofiscalbienesTemp);
			} else {
				if(jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedorGenerico!=null && jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualResponsableFondoForeignKey(Long idResponsableFondoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			ResponsableFondo  responsablefondoTemp=null;

			for(ResponsableFondo responsablefondoAux:responsablefondosForeignKey) {
				if(responsablefondoAux.getId()!=null && responsablefondoAux.getId().equals(idResponsableFondoSeleccionado)) {
					responsablefondoTemp=responsablefondoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(responsablefondoTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setResponsableFondo(responsablefondoTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.setSelectedItem(responsablefondoTemp);
					}
				} else {
					//jComboBoxid_responsable_fondoFacturaProveedor.setSelectedItem(responsablefondoTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdResponsableFondo") || sFormularioTipoBusqueda.equals("Todos")){
					if(responsablefondoTemp!=null && jComboBoxid_responsable_fondoFK_IdResponsableFondoFacturaProveedor!=null) {
						jComboBoxid_responsable_fondoFK_IdResponsableFondoFacturaProveedor.setSelectedItem(responsablefondoTemp);
					} else {
						if(jComboBoxid_responsable_fondoFK_IdResponsableFondoFacturaProveedor!=null) {
							//jComboBoxid_responsable_fondoFK_IdResponsableFondoFacturaProveedor.setSelectedItem(responsablefondoTemp);
							if(jComboBoxid_responsable_fondoFK_IdResponsableFondoFacturaProveedor.getItemCount()>0) {
								jComboBoxid_responsable_fondoFK_IdResponsableFondoFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualResponsableFondoForeignKeyDescripcion(Long idResponsableFondoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			ResponsableFondo  responsablefondoTemp=null;

			for(ResponsableFondo responsablefondoAux:responsablefondosForeignKey) {
				if(responsablefondoAux.getId()!=null && responsablefondoAux.getId().equals(idResponsableFondoSeleccionado)) {
					responsablefondoTemp=responsablefondoAux;
					break;
				}
			}


			sDescripcion=ResponsableFondoConstantesFunciones.getResponsableFondoDescripcion(responsablefondoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualResponsableFondoForeignKeyGenerico(Long idResponsableFondoSeleccionado,JComboBox jComboBoxid_responsable_fondoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			ResponsableFondo  responsablefondoTemp=null;

			for(ResponsableFondo responsablefondoAux:responsablefondosForeignKey) {
				if(responsablefondoAux.getId()!=null && responsablefondoAux.getId().equals(idResponsableFondoSeleccionado)) {
					responsablefondoTemp=responsablefondoAux;
					break;
				}
			}

			if(responsablefondoTemp!=null) {
				jComboBoxid_responsable_fondoFacturaProveedorGenerico.setSelectedItem(responsablefondoTemp);
			} else {
				if(jComboBoxid_responsable_fondoFacturaProveedorGenerico!=null && jComboBoxid_responsable_fondoFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_responsable_fondoFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCreditoFiscalServiciosForeignKey(Long idCuentaContableCreditoFiscalServiciosSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditofiscalserviciosTemp=null;

			for(CuentaContable cuentacontablecreditofiscalserviciosAux:cuentacontablecreditofiscalserviciossForeignKey) {
				if(cuentacontablecreditofiscalserviciosAux.getId()!=null && cuentacontablecreditofiscalserviciosAux.getId().equals(idCuentaContableCreditoFiscalServiciosSeleccionado)) {
					cuentacontablecreditofiscalserviciosTemp=cuentacontablecreditofiscalserviciosAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecreditofiscalserviciosTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setCuentaContableCreditoFiscalServicios(cuentacontablecreditofiscalserviciosTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.setSelectedItem(cuentacontablecreditofiscalserviciosTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.setSelectedItem(cuentacontablecreditofiscalserviciosTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCreditoFiscalServicios") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablecreditofiscalserviciosTemp!=null && jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor!=null) {
						jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor.setSelectedItem(cuentacontablecreditofiscalserviciosTemp);
					} else {
						if(jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor!=null) {
							//jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor.setSelectedItem(cuentacontablecreditofiscalserviciosTemp);
							if(jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor.getItemCount()>0) {
								jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCreditoFiscalServiciosForeignKeyDescripcion(Long idCuentaContableCreditoFiscalServiciosSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecreditofiscalserviciosTemp=null;

			for(CuentaContable cuentacontablecreditofiscalserviciosAux:cuentacontablecreditofiscalserviciossForeignKey) {
				if(cuentacontablecreditofiscalserviciosAux.getId()!=null && cuentacontablecreditofiscalserviciosAux.getId().equals(idCuentaContableCreditoFiscalServiciosSeleccionado)) {
					cuentacontablecreditofiscalserviciosTemp=cuentacontablecreditofiscalserviciosAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecreditofiscalserviciosTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCreditoFiscalServiciosForeignKeyGenerico(Long idCuentaContableCreditoFiscalServiciosSeleccionado,JComboBox jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditofiscalserviciosTemp=null;

			for(CuentaContable cuentacontablecreditofiscalserviciosAux:cuentacontablecreditofiscalserviciossForeignKey) {
				if(cuentacontablecreditofiscalserviciosAux.getId()!=null && cuentacontablecreditofiscalserviciosAux.getId().equals(idCuentaContableCreditoFiscalServiciosSeleccionado)) {
					cuentacontablecreditofiscalserviciosTemp=cuentacontablecreditofiscalserviciosAux;
					break;
				}
			}

			if(cuentacontablecreditofiscalserviciosTemp!=null) {
				jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorGenerico.setSelectedItem(cuentacontablecreditofiscalserviciosTemp);
			} else {
				if(jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorGenerico!=null && jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableGastoForeignKey(Long idCuentaContableGastoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablegastoTemp=null;

			for(CuentaContable cuentacontablegastoAux:cuentacontablegastosForeignKey) {
				if(cuentacontablegastoAux.getId()!=null && cuentacontablegastoAux.getId().equals(idCuentaContableGastoSeleccionado)) {
					cuentacontablegastoTemp=cuentacontablegastoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablegastoTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setCuentaContableGasto(cuentacontablegastoTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.setSelectedItem(cuentacontablegastoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_gastoFacturaProveedor.setSelectedItem(cuentacontablegastoTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableGastoForeignKeyDescripcion(Long idCuentaContableGastoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablegastoTemp=null;

			for(CuentaContable cuentacontablegastoAux:cuentacontablegastosForeignKey) {
				if(cuentacontablegastoAux.getId()!=null && cuentacontablegastoAux.getId().equals(idCuentaContableGastoSeleccionado)) {
					cuentacontablegastoTemp=cuentacontablegastoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablegastoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableGastoForeignKeyGenerico(Long idCuentaContableGastoSeleccionado,JComboBox jComboBoxid_cuenta_contable_gastoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablegastoTemp=null;

			for(CuentaContable cuentacontablegastoAux:cuentacontablegastosForeignKey) {
				if(cuentacontablegastoAux.getId()!=null && cuentacontablegastoAux.getId().equals(idCuentaContableGastoSeleccionado)) {
					cuentacontablegastoTemp=cuentacontablegastoAux;
					break;
				}
			}

			if(cuentacontablegastoTemp!=null) {
				jComboBoxid_cuenta_contable_gastoFacturaProveedorGenerico.setSelectedItem(cuentacontablegastoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_gastoFacturaProveedorGenerico!=null && jComboBoxid_cuenta_contable_gastoFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_gastoFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableGasto2ForeignKey(Long idCuentaContableGasto2Seleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablegasto2Temp=null;

			for(CuentaContable cuentacontablegasto2Aux:cuentacontablegasto2sForeignKey) {
				if(cuentacontablegasto2Aux.getId()!=null && cuentacontablegasto2Aux.getId().equals(idCuentaContableGasto2Seleccionado)) {
					cuentacontablegasto2Temp=cuentacontablegasto2Aux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablegasto2Temp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setCuentaContableGasto2(cuentacontablegasto2Temp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.setSelectedItem(cuentacontablegasto2Temp);
					}
				} else {
					//jComboBoxid_cuenta_contable_gasto2FacturaProveedor.setSelectedItem(cuentacontablegasto2Temp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableGasto2") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablegasto2Temp!=null && jComboBoxid_cuenta_contable_gasto2FK_IdCuentaContableGasto2FacturaProveedor!=null) {
						jComboBoxid_cuenta_contable_gasto2FK_IdCuentaContableGasto2FacturaProveedor.setSelectedItem(cuentacontablegasto2Temp);
					} else {
						if(jComboBoxid_cuenta_contable_gasto2FK_IdCuentaContableGasto2FacturaProveedor!=null) {
							//jComboBoxid_cuenta_contable_gasto2FK_IdCuentaContableGasto2FacturaProveedor.setSelectedItem(cuentacontablegasto2Temp);
							if(jComboBoxid_cuenta_contable_gasto2FK_IdCuentaContableGasto2FacturaProveedor.getItemCount()>0) {
								jComboBoxid_cuenta_contable_gasto2FK_IdCuentaContableGasto2FacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableGasto2ForeignKeyDescripcion(Long idCuentaContableGasto2Seleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablegasto2Temp=null;

			for(CuentaContable cuentacontablegasto2Aux:cuentacontablegasto2sForeignKey) {
				if(cuentacontablegasto2Aux.getId()!=null && cuentacontablegasto2Aux.getId().equals(idCuentaContableGasto2Seleccionado)) {
					cuentacontablegasto2Temp=cuentacontablegasto2Aux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablegasto2Temp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableGasto2ForeignKeyGenerico(Long idCuentaContableGasto2Seleccionado,JComboBox jComboBoxid_cuenta_contable_gasto2FacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablegasto2Temp=null;

			for(CuentaContable cuentacontablegasto2Aux:cuentacontablegasto2sForeignKey) {
				if(cuentacontablegasto2Aux.getId()!=null && cuentacontablegasto2Aux.getId().equals(idCuentaContableGasto2Seleccionado)) {
					cuentacontablegasto2Temp=cuentacontablegasto2Aux;
					break;
				}
			}

			if(cuentacontablegasto2Temp!=null) {
				jComboBoxid_cuenta_contable_gasto2FacturaProveedorGenerico.setSelectedItem(cuentacontablegasto2Temp);
			} else {
				if(jComboBoxid_cuenta_contable_gasto2FacturaProveedorGenerico!=null && jComboBoxid_cuenta_contable_gasto2FacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_gasto2FacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCreditoFinForeignKey(Long idCuentaContableCreditoFinSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditofinTemp=null;

			for(CuentaContable cuentacontablecreditofinAux:cuentacontablecreditofinsForeignKey) {
				if(cuentacontablecreditofinAux.getId()!=null && cuentacontablecreditofinAux.getId().equals(idCuentaContableCreditoFinSeleccionado)) {
					cuentacontablecreditofinTemp=cuentacontablecreditofinAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecreditofinTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setCuentaContableCreditoFin(cuentacontablecreditofinTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.setSelectedItem(cuentacontablecreditofinTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_credito_finFacturaProveedor.setSelectedItem(cuentacontablecreditofinTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCreditoFinForeignKeyDescripcion(Long idCuentaContableCreditoFinSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecreditofinTemp=null;

			for(CuentaContable cuentacontablecreditofinAux:cuentacontablecreditofinsForeignKey) {
				if(cuentacontablecreditofinAux.getId()!=null && cuentacontablecreditofinAux.getId().equals(idCuentaContableCreditoFinSeleccionado)) {
					cuentacontablecreditofinTemp=cuentacontablecreditofinAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecreditofinTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCreditoFinForeignKeyGenerico(Long idCuentaContableCreditoFinSeleccionado,JComboBox jComboBoxid_cuenta_contable_credito_finFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditofinTemp=null;

			for(CuentaContable cuentacontablecreditofinAux:cuentacontablecreditofinsForeignKey) {
				if(cuentacontablecreditofinAux.getId()!=null && cuentacontablecreditofinAux.getId().equals(idCuentaContableCreditoFinSeleccionado)) {
					cuentacontablecreditofinTemp=cuentacontablecreditofinAux;
					break;
				}
			}

			if(cuentacontablecreditofinTemp!=null) {
				jComboBoxid_cuenta_contable_credito_finFacturaProveedorGenerico.setSelectedItem(cuentacontablecreditofinTemp);
			} else {
				if(jComboBoxid_cuenta_contable_credito_finFacturaProveedorGenerico!=null && jComboBoxid_cuenta_contable_credito_finFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_credito_finFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCreditoFin2ForeignKey(Long idCuentaContableCreditoFin2Seleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditofin2Temp=null;

			for(CuentaContable cuentacontablecreditofin2Aux:cuentacontablecreditofin2sForeignKey) {
				if(cuentacontablecreditofin2Aux.getId()!=null && cuentacontablecreditofin2Aux.getId().equals(idCuentaContableCreditoFin2Seleccionado)) {
					cuentacontablecreditofin2Temp=cuentacontablecreditofin2Aux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecreditofin2Temp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setCuentaContableCreditoFin2(cuentacontablecreditofin2Temp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.setSelectedItem(cuentacontablecreditofin2Temp);
					}
				} else {
					//jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.setSelectedItem(cuentacontablecreditofin2Temp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCreditoFin2ForeignKeyDescripcion(Long idCuentaContableCreditoFin2Seleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecreditofin2Temp=null;

			for(CuentaContable cuentacontablecreditofin2Aux:cuentacontablecreditofin2sForeignKey) {
				if(cuentacontablecreditofin2Aux.getId()!=null && cuentacontablecreditofin2Aux.getId().equals(idCuentaContableCreditoFin2Seleccionado)) {
					cuentacontablecreditofin2Temp=cuentacontablecreditofin2Aux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecreditofin2Temp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCreditoFin2ForeignKeyGenerico(Long idCuentaContableCreditoFin2Seleccionado,JComboBox jComboBoxid_cuenta_contable_credito_fin2FacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditofin2Temp=null;

			for(CuentaContable cuentacontablecreditofin2Aux:cuentacontablecreditofin2sForeignKey) {
				if(cuentacontablecreditofin2Aux.getId()!=null && cuentacontablecreditofin2Aux.getId().equals(idCuentaContableCreditoFin2Seleccionado)) {
					cuentacontablecreditofin2Temp=cuentacontablecreditofin2Aux;
					break;
				}
			}

			if(cuentacontablecreditofin2Temp!=null) {
				jComboBoxid_cuenta_contable_credito_fin2FacturaProveedorGenerico.setSelectedItem(cuentacontablecreditofin2Temp);
			} else {
				if(jComboBoxid_cuenta_contable_credito_fin2FacturaProveedorGenerico!=null && jComboBoxid_cuenta_contable_credito_fin2FacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_credito_fin2FacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableCreditoForeignKey(Long idCuentaContableCreditoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecreditoTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setCuentaContableCredito(cuentacontablecreditoTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.setSelectedItem(cuentacontablecreditoTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_creditoFacturaProveedor.setSelectedItem(cuentacontablecreditoTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableCreditoForeignKeyDescripcion(Long idCuentaContableCreditoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecreditoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableCreditoForeignKeyGenerico(Long idCuentaContableCreditoSeleccionado,JComboBox jComboBoxid_cuenta_contable_creditoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecreditoTemp=null;

			for(CuentaContable cuentacontablecreditoAux:cuentacontablecreditosForeignKey) {
				if(cuentacontablecreditoAux.getId()!=null && cuentacontablecreditoAux.getId().equals(idCuentaContableCreditoSeleccionado)) {
					cuentacontablecreditoTemp=cuentacontablecreditoAux;
					break;
				}
			}

			if(cuentacontablecreditoTemp!=null) {
				jComboBoxid_cuenta_contable_creditoFacturaProveedorGenerico.setSelectedItem(cuentacontablecreditoTemp);
			} else {
				if(jComboBoxid_cuenta_contable_creditoFacturaProveedorGenerico!=null && jComboBoxid_cuenta_contable_creditoFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_creditoFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoMovimientoForeignKey(Long idTipoMovimientoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoMovimiento  tipomovimientoTemp=null;

			for(TipoMovimiento tipomovimientoAux:tipomovimientosForeignKey) {
				if(tipomovimientoAux.getId()!=null && tipomovimientoAux.getId().equals(idTipoMovimientoSeleccionado)) {
					tipomovimientoTemp=tipomovimientoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipomovimientoTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setTipoMovimiento(tipomovimientoTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.setSelectedItem(tipomovimientoTemp);
					}
				} else {
					//jComboBoxid_tipo_movimientoFacturaProveedor.setSelectedItem(tipomovimientoTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoMovimientoForeignKeyDescripcion(Long idTipoMovimientoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoMovimiento  tipomovimientoTemp=null;

			for(TipoMovimiento tipomovimientoAux:tipomovimientosForeignKey) {
				if(tipomovimientoAux.getId()!=null && tipomovimientoAux.getId().equals(idTipoMovimientoSeleccionado)) {
					tipomovimientoTemp=tipomovimientoAux;
					break;
				}
			}


			sDescripcion=TipoMovimientoConstantesFunciones.getTipoMovimientoDescripcion(tipomovimientoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoMovimientoForeignKeyGenerico(Long idTipoMovimientoSeleccionado,JComboBox jComboBoxid_tipo_movimientoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoMovimiento  tipomovimientoTemp=null;

			for(TipoMovimiento tipomovimientoAux:tipomovimientosForeignKey) {
				if(tipomovimientoAux.getId()!=null && tipomovimientoAux.getId().equals(idTipoMovimientoSeleccionado)) {
					tipomovimientoTemp=tipomovimientoAux;
					break;
				}
			}

			if(tipomovimientoTemp!=null) {
				jComboBoxid_tipo_movimientoFacturaProveedorGenerico.setSelectedItem(tipomovimientoTemp);
			} else {
				if(jComboBoxid_tipo_movimientoFacturaProveedorGenerico!=null && jComboBoxid_tipo_movimientoFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_tipo_movimientoFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoMovimientoModuloForeignKey(Long idTipoMovimientoModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoMovimientoModulo  tipomovimientomoduloTemp=null;

			for(TipoMovimientoModulo tipomovimientomoduloAux:tipomovimientomodulosForeignKey) {
				if(tipomovimientomoduloAux.getId()!=null && tipomovimientomoduloAux.getId().equals(idTipoMovimientoModuloSeleccionado)) {
					tipomovimientomoduloTemp=tipomovimientomoduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipomovimientomoduloTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setTipoMovimientoModulo(tipomovimientomoduloTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.setSelectedItem(tipomovimientomoduloTemp);
					}
				} else {
					//jComboBoxid_tipo_movimiento_moduloFacturaProveedor.setSelectedItem(tipomovimientomoduloTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoMovimientoModulo") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipomovimientomoduloTemp!=null && jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedor!=null) {
						jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedor.setSelectedItem(tipomovimientomoduloTemp);
					} else {
						if(jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedor!=null) {
							//jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedor.setSelectedItem(tipomovimientomoduloTemp);
							if(jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedor.getItemCount()>0) {
								jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoMovimientoModuloForeignKeyDescripcion(Long idTipoMovimientoModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoMovimientoModulo  tipomovimientomoduloTemp=null;

			for(TipoMovimientoModulo tipomovimientomoduloAux:tipomovimientomodulosForeignKey) {
				if(tipomovimientomoduloAux.getId()!=null && tipomovimientomoduloAux.getId().equals(idTipoMovimientoModuloSeleccionado)) {
					tipomovimientomoduloTemp=tipomovimientomoduloAux;
					break;
				}
			}


			sDescripcion=TipoMovimientoModuloConstantesFunciones.getTipoMovimientoModuloDescripcion(tipomovimientomoduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoMovimientoModuloForeignKeyGenerico(Long idTipoMovimientoModuloSeleccionado,JComboBox jComboBoxid_tipo_movimiento_moduloFacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoMovimientoModulo  tipomovimientomoduloTemp=null;

			for(TipoMovimientoModulo tipomovimientomoduloAux:tipomovimientomodulosForeignKey) {
				if(tipomovimientomoduloAux.getId()!=null && tipomovimientomoduloAux.getId().equals(idTipoMovimientoModuloSeleccionado)) {
					tipomovimientomoduloTemp=tipomovimientomoduloAux;
					break;
				}
			}

			if(tipomovimientomoduloTemp!=null) {
				jComboBoxid_tipo_movimiento_moduloFacturaProveedorGenerico.setSelectedItem(tipomovimientomoduloTemp);
			} else {
				if(jComboBoxid_tipo_movimiento_moduloFacturaProveedorGenerico!=null && jComboBoxid_tipo_movimiento_moduloFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_tipo_movimiento_moduloFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoTransaccionModuloForeignKey(Long idTipoTransaccionModuloSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipotransaccionmoduloTemp!=null) {

					if(this.facturaproveedor!=null) {
						this.facturaproveedor.setTipoTransaccionModulo(tipotransaccionmoduloTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.setSelectedItem(tipotransaccionmoduloTemp);
					}
				} else {
					//jComboBoxid_tipo_transaccion_moduloFacturaProveedor.setSelectedItem(tipotransaccionmoduloTemp);
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoTransaccionModulo") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipotransaccionmoduloTemp!=null && jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor!=null) {
						jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.setSelectedItem(tipotransaccionmoduloTemp);
					} else {
						if(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor!=null) {
							//jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.setSelectedItem(tipotransaccionmoduloTemp);
							if(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.getItemCount()>0) {
								jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoTransaccionModuloForeignKeyDescripcion(Long idTipoTransaccionModuloSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}


			sDescripcion=TipoTransaccionModuloConstantesFunciones.getTipoTransaccionModuloDescripcion(tipotransaccionmoduloTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoTransaccionModuloForeignKeyGenerico(Long idTipoTransaccionModuloSeleccionado,JComboBox jComboBoxid_tipo_transaccion_moduloFacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloTemp=null;

			for(TipoTransaccionModulo tipotransaccionmoduloAux:tipotransaccionmodulosForeignKey) {
				if(tipotransaccionmoduloAux.getId()!=null && tipotransaccionmoduloAux.getId().equals(idTipoTransaccionModuloSeleccionado)) {
					tipotransaccionmoduloTemp=tipotransaccionmoduloAux;
					break;
				}
			}

			if(tipotransaccionmoduloTemp!=null) {
				jComboBoxid_tipo_transaccion_moduloFacturaProveedorGenerico.setSelectedItem(tipotransaccionmoduloTemp);
			} else {
				if(jComboBoxid_tipo_transaccion_moduloFacturaProveedorGenerico!=null && jComboBoxid_tipo_transaccion_moduloFacturaProveedorGenerico.getItemCount()>0) {
					jComboBoxid_tipo_transaccion_moduloFacturaProveedorGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_empresaFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaFacturaProveedorGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaFacturaProveedorGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				facturaproveedor.setid_empresa(empresaAux.getId());
				facturaproveedor.setempresa_descripcion(FacturaProveedorConstantesFunciones.getEmpresaDescripcion(empresaAux));
				facturaproveedor.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_sucursalFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalFacturaProveedorGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalFacturaProveedorGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				facturaproveedor.setid_sucursal(sucursalAux.getId());
				facturaproveedor.setsucursal_descripcion(FacturaProveedorConstantesFunciones.getSucursalDescripcion(sucursalAux));
				facturaproveedor.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_ejercicioFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioFacturaProveedorGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioFacturaProveedorGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				facturaproveedor.setid_ejercicio(ejercicioAux.getId());
				facturaproveedor.setejercicio_descripcion(FacturaProveedorConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				facturaproveedor.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPeriodoForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_periodoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Periodo  periodoAux=new Periodo();

			if(jComboBoxid_periodoFacturaProveedorGenerico==null) {
				periodoAux=(Periodo)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.getSelectedItem();
			} else {
				periodoAux=(Periodo)jComboBoxid_periodoFacturaProveedorGenerico.getSelectedItem();
			}

			if(periodoAux!=null && periodoAux.getId()!=null) {
				if(periodoAux.getid_estado_periodo().equals(0L)) {
					throw new Exception("Periodo INACTIVO, NO PUEDE GUARDAR LA INFORMACION CONSULTE CON EL ADMINISTRADOR");
				}

				facturaproveedor.setid_periodo(periodoAux.getId());
				facturaproveedor.setperiodo_descripcion(FacturaProveedorConstantesFunciones.getPeriodoDescripcion(periodoAux));
				facturaproveedor.setPeriodo(periodoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_anioFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioFacturaProveedorGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioFacturaProveedorGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				facturaproveedor.setid_anio(anioAux.getId());
				facturaproveedor.setanio_descripcion(FacturaProveedorConstantesFunciones.getAnioDescripcion(anioAux));
				facturaproveedor.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_mesFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesFacturaProveedorGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesFacturaProveedorGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				facturaproveedor.setid_mes(mesAux.getId());
				facturaproveedor.setmes_descripcion(FacturaProveedorConstantesFunciones.getMesDescripcion(mesAux));
				facturaproveedor.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarModuloForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_moduloFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Modulo  moduloAux=new Modulo();

			if(jComboBoxid_moduloFacturaProveedorGenerico==null) {
				moduloAux=(Modulo)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.getSelectedItem();
			} else {
				moduloAux=(Modulo)jComboBoxid_moduloFacturaProveedorGenerico.getSelectedItem();
			}

			if(moduloAux!=null && moduloAux.getId()!=null) {
				facturaproveedor.setid_modulo(moduloAux.getId());
				facturaproveedor.setmodulo_descripcion(FacturaProveedorConstantesFunciones.getModuloDescripcion(moduloAux));
				facturaproveedor.setModulo(moduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPlantillaFacturaForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_plantilla_facturaFacturaProveedorGenerico)throws Exception
	{
		try
		{
			PlantillaFactura  plantillafacturaAux=new PlantillaFactura();

			if(jComboBoxid_plantilla_facturaFacturaProveedorGenerico==null) {
				plantillafacturaAux=(PlantillaFactura)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.getSelectedItem();
			} else {
				plantillafacturaAux=(PlantillaFactura)jComboBoxid_plantilla_facturaFacturaProveedorGenerico.getSelectedItem();
			}

			if(plantillafacturaAux!=null) {
				facturaproveedor.setid_plantilla_factura(plantillafacturaAux.getId());
				facturaproveedor.setplantillafactura_descripcion(FacturaProveedorConstantesFunciones.getPlantillaFacturaDescripcion(plantillafacturaAux));
				facturaproveedor.setPlantillaFactura(plantillafacturaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoDocumentoForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_tipo_documentoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoDocumento  tipodocumentoAux=new TipoDocumento();

			if(jComboBoxid_tipo_documentoFacturaProveedorGenerico==null) {
				tipodocumentoAux=(TipoDocumento)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.getSelectedItem();
			} else {
				tipodocumentoAux=(TipoDocumento)jComboBoxid_tipo_documentoFacturaProveedorGenerico.getSelectedItem();
			}

			if(tipodocumentoAux!=null && tipodocumentoAux.getId()!=null) {
				facturaproveedor.setid_tipo_documento(tipodocumentoAux.getId());
				facturaproveedor.settipodocumento_descripcion(FacturaProveedorConstantesFunciones.getTipoDocumentoDescripcion(tipodocumentoAux));
				facturaproveedor.setTipoDocumento(tipodocumentoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFacturaForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_facturaFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Factura  facturaAux=new Factura();

			if(jComboBoxid_facturaFacturaProveedorGenerico==null) {
				facturaAux=(Factura)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.getSelectedItem();
			} else {
				facturaAux=(Factura)jComboBoxid_facturaFacturaProveedorGenerico.getSelectedItem();
			}

			if(facturaAux!=null && facturaAux.getId()!=null) {
				facturaproveedor.setid_factura(facturaAux.getId());
				facturaproveedor.setfactura_descripcion(FacturaProveedorConstantesFunciones.getFacturaDescripcion(facturaAux));
				facturaproveedor.setFactura(facturaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTransaccionForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_transaccionFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Transaccion  transaccionAux=new Transaccion();

			if(jComboBoxid_transaccionFacturaProveedorGenerico==null) {
				transaccionAux=(Transaccion)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.getSelectedItem();
			} else {
				transaccionAux=(Transaccion)jComboBoxid_transaccionFacturaProveedorGenerico.getSelectedItem();
			}

			if(transaccionAux!=null && transaccionAux.getId()!=null) {
				facturaproveedor.setid_transaccion(transaccionAux.getId());
				facturaproveedor.settransaccion_descripcion(FacturaProveedorConstantesFunciones.getTransaccionDescripcion(transaccionAux));
				facturaproveedor.setTransaccion(transaccionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_clienteFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteFacturaProveedorGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteFacturaProveedorGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				facturaproveedor.setid_cliente(clienteAux.getId());
				facturaproveedor.setcliente_descripcion(FacturaProveedorConstantesFunciones.getClienteDescripcion(clienteAux));
				facturaproveedor.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoSolicitaForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_empleado_solicitaFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleado_solicitaFacturaProveedorGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleado_solicitaFacturaProveedorGenerico.getSelectedItem();
			}

			if(empleadoAux!=null && empleadoAux.getId()!=null) {
				facturaproveedor.setid_empleado_solicita(empleadoAux.getId());
				facturaproveedor.setempleadosolicita_descripcion(FacturaProveedorConstantesFunciones.getEmpleadoSolicitaDescripcion(empleadoAux));
				facturaproveedor.setEmpleadoSolicita(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMonedaForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_monedaFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Moneda  monedaAux=new Moneda();

			if(jComboBoxid_monedaFacturaProveedorGenerico==null) {
				monedaAux=(Moneda)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.getSelectedItem();
			} else {
				monedaAux=(Moneda)jComboBoxid_monedaFacturaProveedorGenerico.getSelectedItem();
			}

			if(monedaAux!=null && monedaAux.getId()!=null) {
				facturaproveedor.setid_moneda(monedaAux.getId());
				facturaproveedor.setmoneda_descripcion(FacturaProveedorConstantesFunciones.getMonedaDescripcion(monedaAux));
				facturaproveedor.setMoneda(monedaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_empleadoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleadoFacturaProveedorGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleadoFacturaProveedorGenerico.getSelectedItem();
			}

			if(empleadoAux!=null && empleadoAux.getId()!=null) {
				facturaproveedor.setid_empleado(empleadoAux.getId());
				facturaproveedor.setempleado_descripcion(FacturaProveedorConstantesFunciones.getEmpleadoDescripcion(empleadoAux));
				facturaproveedor.setEmpleado(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionFuente1ForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_tipo_retencion_fuente1FacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionAux=new TipoRetencion();

			if(jComboBoxid_tipo_retencion_fuente1FacturaProveedorGenerico==null) {
				tiporetencionAux=(TipoRetencion)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.getSelectedItem();
			} else {
				tiporetencionAux=(TipoRetencion)jComboBoxid_tipo_retencion_fuente1FacturaProveedorGenerico.getSelectedItem();
			}

			if(tiporetencionAux!=null && tiporetencionAux.getId()!=null) {
				facturaproveedor.setid_tipo_retencion_fuente1(tiporetencionAux.getId());
				facturaproveedor.settiporetencionfuente1_descripcion(FacturaProveedorConstantesFunciones.getTipoRetencionFuente1Descripcion(tiporetencionAux));
				facturaproveedor.setTipoRetencionFuente1(tiporetencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionFuente2ForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_tipo_retencion_fuente2FacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionAux=new TipoRetencion();

			if(jComboBoxid_tipo_retencion_fuente2FacturaProveedorGenerico==null) {
				tiporetencionAux=(TipoRetencion)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.getSelectedItem();
			} else {
				tiporetencionAux=(TipoRetencion)jComboBoxid_tipo_retencion_fuente2FacturaProveedorGenerico.getSelectedItem();
			}

			if(tiporetencionAux!=null && tiporetencionAux.getId()!=null) {
				facturaproveedor.setid_tipo_retencion_fuente2(tiporetencionAux.getId());
				facturaproveedor.settiporetencionfuente2_descripcion(FacturaProveedorConstantesFunciones.getTipoRetencionFuente2Descripcion(tiporetencionAux));
				facturaproveedor.setTipoRetencionFuente2(tiporetencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionIva1ForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_tipo_retencion_iva1FacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionAux=new TipoRetencion();

			if(jComboBoxid_tipo_retencion_iva1FacturaProveedorGenerico==null) {
				tiporetencionAux=(TipoRetencion)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.getSelectedItem();
			} else {
				tiporetencionAux=(TipoRetencion)jComboBoxid_tipo_retencion_iva1FacturaProveedorGenerico.getSelectedItem();
			}

			if(tiporetencionAux!=null && tiporetencionAux.getId()!=null) {
				facturaproveedor.setid_tipo_retencion_iva1(tiporetencionAux.getId());
				facturaproveedor.settiporetencioniva1_descripcion(FacturaProveedorConstantesFunciones.getTipoRetencionIva1Descripcion(tiporetencionAux));
				facturaproveedor.setTipoRetencionIva1(tiporetencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionIva2ForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_tipo_retencion_iva2FacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionAux=new TipoRetencion();

			if(jComboBoxid_tipo_retencion_iva2FacturaProveedorGenerico==null) {
				tiporetencionAux=(TipoRetencion)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.getSelectedItem();
			} else {
				tiporetencionAux=(TipoRetencion)jComboBoxid_tipo_retencion_iva2FacturaProveedorGenerico.getSelectedItem();
			}

			if(tiporetencionAux!=null && tiporetencionAux.getId()!=null) {
				facturaproveedor.setid_tipo_retencion_iva2(tiporetencionAux.getId());
				facturaproveedor.settiporetencioniva2_descripcion(FacturaProveedorConstantesFunciones.getTipoRetencionIva2Descripcion(tiporetencionAux));
				facturaproveedor.setTipoRetencionIva2(tiporetencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoTributarioForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_tipo_tributarioFacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoTributario  tipotributarioAux=new TipoTributario();

			if(jComboBoxid_tipo_tributarioFacturaProveedorGenerico==null) {
				tipotributarioAux=(TipoTributario)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.getSelectedItem();
			} else {
				tipotributarioAux=(TipoTributario)jComboBoxid_tipo_tributarioFacturaProveedorGenerico.getSelectedItem();
			}

			if(tipotributarioAux!=null && tipotributarioAux.getId()!=null) {
				facturaproveedor.setid_tipo_tributario(tipotributarioAux.getId());
				facturaproveedor.settipotributario_descripcion(FacturaProveedorConstantesFunciones.getTipoTributarioDescripcion(tipotributarioAux));
				facturaproveedor.setTipoTributario(tipotributarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCreditoFiscalBienesForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedorGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedorGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				facturaproveedor.setid_cuenta_contable_credito_fiscal_bienes(cuentacontableAux.getId());
				facturaproveedor.setcuentacontablecreditofiscalbienes_descripcion(FacturaProveedorConstantesFunciones.getCuentaContableCreditoFiscalBienesDescripcion(cuentacontableAux));
				facturaproveedor.setCuentaContableCreditoFiscalBienes(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarResponsableFondoForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_responsable_fondoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			ResponsableFondo  responsablefondoAux=new ResponsableFondo();

			if(jComboBoxid_responsable_fondoFacturaProveedorGenerico==null) {
				responsablefondoAux=(ResponsableFondo)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.getSelectedItem();
			} else {
				responsablefondoAux=(ResponsableFondo)jComboBoxid_responsable_fondoFacturaProveedorGenerico.getSelectedItem();
			}

			if(responsablefondoAux!=null && responsablefondoAux.getId()!=null) {
				facturaproveedor.setid_responsable_fondo(responsablefondoAux.getId());
				facturaproveedor.setresponsablefondo_descripcion(FacturaProveedorConstantesFunciones.getResponsableFondoDescripcion(responsablefondoAux));
				facturaproveedor.setResponsableFondo(responsablefondoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCreditoFiscalServiciosForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				facturaproveedor.setid_cuenta_contable_credito_fiscal_servicios(cuentacontableAux.getId());
				facturaproveedor.setcuentacontablecreditofiscalservicios_descripcion(FacturaProveedorConstantesFunciones.getCuentaContableCreditoFiscalServiciosDescripcion(cuentacontableAux));
				facturaproveedor.setCuentaContableCreditoFiscalServicios(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableGastoForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_cuenta_contable_gastoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_gastoFacturaProveedorGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_gastoFacturaProveedorGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				facturaproveedor.setid_cuenta_contable_gasto(cuentacontableAux.getId());
				facturaproveedor.setcuentacontablegasto_descripcion(FacturaProveedorConstantesFunciones.getCuentaContableGastoDescripcion(cuentacontableAux));
				facturaproveedor.setCuentaContableGasto(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableGasto2ForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_cuenta_contable_gasto2FacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_gasto2FacturaProveedorGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_gasto2FacturaProveedorGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				facturaproveedor.setid_cuenta_contable_gasto2(cuentacontableAux.getId());
				facturaproveedor.setcuentacontablegasto2_descripcion(FacturaProveedorConstantesFunciones.getCuentaContableGasto2Descripcion(cuentacontableAux));
				facturaproveedor.setCuentaContableGasto2(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCreditoFinForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_cuenta_contable_credito_finFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_credito_finFacturaProveedorGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_credito_finFacturaProveedorGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				facturaproveedor.setid_cuenta_contable_credito_fin(cuentacontableAux.getId());
				facturaproveedor.setcuentacontablecreditofin_descripcion(FacturaProveedorConstantesFunciones.getCuentaContableCreditoFinDescripcion(cuentacontableAux));
				facturaproveedor.setCuentaContableCreditoFin(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCreditoFin2ForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_cuenta_contable_credito_fin2FacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_credito_fin2FacturaProveedorGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_credito_fin2FacturaProveedorGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				facturaproveedor.setid_cuenta_contable_credito_fin2(cuentacontableAux.getId());
				facturaproveedor.setcuentacontablecreditofin2_descripcion(FacturaProveedorConstantesFunciones.getCuentaContableCreditoFin2Descripcion(cuentacontableAux));
				facturaproveedor.setCuentaContableCreditoFin2(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableCreditoForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_cuenta_contable_creditoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_creditoFacturaProveedorGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_creditoFacturaProveedorGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null) {
				facturaproveedor.setid_cuenta_contable_credito(cuentacontableAux.getId());
				facturaproveedor.setcuentacontablecredito_descripcion(FacturaProveedorConstantesFunciones.getCuentaContableCreditoDescripcion(cuentacontableAux));
				facturaproveedor.setCuentaContableCredito(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoMovimientoForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_tipo_movimientoFacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoMovimiento  tipomovimientoAux=new TipoMovimiento();

			if(jComboBoxid_tipo_movimientoFacturaProveedorGenerico==null) {
				tipomovimientoAux=(TipoMovimiento)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.getSelectedItem();
			} else {
				tipomovimientoAux=(TipoMovimiento)jComboBoxid_tipo_movimientoFacturaProveedorGenerico.getSelectedItem();
			}

			if(tipomovimientoAux!=null) {
				facturaproveedor.setid_tipo_movimiento(tipomovimientoAux.getId());
				facturaproveedor.settipomovimiento_descripcion(FacturaProveedorConstantesFunciones.getTipoMovimientoDescripcion(tipomovimientoAux));
				facturaproveedor.setTipoMovimiento(tipomovimientoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoMovimientoModuloForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_tipo_movimiento_moduloFacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoMovimientoModulo  tipomovimientomoduloAux=new TipoMovimientoModulo();

			if(jComboBoxid_tipo_movimiento_moduloFacturaProveedorGenerico==null) {
				tipomovimientomoduloAux=(TipoMovimientoModulo)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.getSelectedItem();
			} else {
				tipomovimientomoduloAux=(TipoMovimientoModulo)jComboBoxid_tipo_movimiento_moduloFacturaProveedorGenerico.getSelectedItem();
			}

			if(tipomovimientomoduloAux!=null) {
				facturaproveedor.setid_tipo_movimiento_modulo(tipomovimientomoduloAux.getId());
				facturaproveedor.settipomovimientomodulo_descripcion(FacturaProveedorConstantesFunciones.getTipoMovimientoModuloDescripcion(tipomovimientomoduloAux));
				facturaproveedor.setTipoMovimientoModulo(tipomovimientomoduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoTransaccionModuloForeignKey(FacturaProveedor facturaproveedor,JComboBox jComboBoxid_tipo_transaccion_moduloFacturaProveedorGenerico)throws Exception
	{
		try
		{
			TipoTransaccionModulo  tipotransaccionmoduloAux=new TipoTransaccionModulo();

			if(jComboBoxid_tipo_transaccion_moduloFacturaProveedorGenerico==null) {
				tipotransaccionmoduloAux=(TipoTransaccionModulo)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.getSelectedItem();
			} else {
				tipotransaccionmoduloAux=(TipoTransaccionModulo)jComboBoxid_tipo_transaccion_moduloFacturaProveedorGenerico.getSelectedItem();
			}

			if(tipotransaccionmoduloAux!=null) {
				facturaproveedor.setid_tipo_transaccion_modulo(tipotransaccionmoduloAux.getId());
				facturaproveedor.settipotransaccionmodulo_descripcion(FacturaProveedorConstantesFunciones.getTipoTransaccionModuloDescripcion(tipotransaccionmoduloAux));
				facturaproveedor.setTipoTransaccionModulo(tipotransaccionmoduloAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePeriodosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPeriodo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.removeAllItems();

							for(Periodo periodo:this.periodosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.addItem(periodo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.removeAllItems();

							for(Modulo modulo:this.modulosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.addItem(modulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePlantillaFacturasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPlantillaFactura=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.removeAllItems();

							for(PlantillaFactura plantillafactura:this.plantillafacturasForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.addItem(plantillafactura);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdPlantillaFactura") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_plantilla_facturaFK_IdPlantillaFacturaFacturaProveedor.removeAllItems();

							for(PlantillaFactura plantillafactura:this.plantillafacturasForeignKey) {
								this.jComboBoxid_plantilla_facturaFK_IdPlantillaFacturaFacturaProveedor.addItem(plantillafactura);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoDocumentosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoDocumento=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.removeAllItems();

							for(TipoDocumento tipodocumento:this.tipodocumentosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.addItem(tipodocumento);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoDocumento") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedor.removeAllItems();

							for(TipoDocumento tipodocumento:this.tipodocumentosForeignKey) {
								this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedor.addItem(tipodocumento);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFacturasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFactura=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.removeAllItems();

							for(Factura factura:this.facturasForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.addItem(factura);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTransaccionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTransaccion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.removeAllItems();

							for(Transaccion transaccion:this.transaccionsForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.addItem(transaccion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTransaccion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_transaccionFK_IdTransaccionFacturaProveedor.removeAllItems();

							for(Transaccion transaccion:this.transaccionsForeignKey) {
								this.jComboBoxid_transaccionFK_IdTransaccionFacturaProveedor.addItem(transaccion);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteFacturaProveedor.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteFacturaProveedor.addItem(cliente);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadoSolicitasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.removeAllItems();

							for(Empleado empleadosolicita:this.empleadosolicitasForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.addItem(empleadosolicita);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMonedasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMoneda=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.removeAllItems();

							for(Moneda moneda:this.monedasForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.addItem(moneda);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.addItem(empleado);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedor.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedor.addItem(empleado);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionFuente1sForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.removeAllItems();

							for(TipoRetencion tiporetencionfuente1:this.tiporetencionfuente1sForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.addItem(tiporetencionfuente1);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionFuente1") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedor.removeAllItems();

							for(TipoRetencion tiporetencionfuente1:this.tiporetencionfuente1sForeignKey) {
								this.jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedor.addItem(tiporetencionfuente1);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionFuente2sForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.removeAllItems();

							for(TipoRetencion tiporetencionfuente2:this.tiporetencionfuente2sForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.addItem(tiporetencionfuente2);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionIva1sForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.removeAllItems();

							for(TipoRetencion tiporetencioniva1:this.tiporetencioniva1sForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.addItem(tiporetencioniva1);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionIva1") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedor.removeAllItems();

							for(TipoRetencion tiporetencioniva1:this.tiporetencioniva1sForeignKey) {
								this.jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedor.addItem(tiporetencioniva1);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionIva2sForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.removeAllItems();

							for(TipoRetencion tiporetencioniva2:this.tiporetencioniva2sForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.addItem(tiporetencioniva2);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoTributariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoTributario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.removeAllItems();

							for(TipoTributario tipotributario:this.tipotributariosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.addItem(tipotributario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoTributario") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedor.removeAllItems();

							for(TipoTributario tipotributario:this.tipotributariosForeignKey) {
								this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedor.addItem(tipotributario);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCreditoFiscalBienessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.removeAllItems();

							for(CuentaContable cuentacontablecreditofiscalbienes:this.cuentacontablecreditofiscalbienessForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.addItem(cuentacontablecreditofiscalbienes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCreditoFiscalBienes") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor.removeAllItems();

							for(CuentaContable cuentacontablecreditofiscalbienes:this.cuentacontablecreditofiscalbienessForeignKey) {
								this.jComboBoxid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor.addItem(cuentacontablecreditofiscalbienes);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameResponsableFondosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingResponsableFondo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.removeAllItems();

							for(ResponsableFondo responsablefondo:this.responsablefondosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.addItem(responsablefondo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdResponsableFondo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_responsable_fondoFK_IdResponsableFondoFacturaProveedor.removeAllItems();

							for(ResponsableFondo responsablefondo:this.responsablefondosForeignKey) {
								this.jComboBoxid_responsable_fondoFK_IdResponsableFondoFacturaProveedor.addItem(responsablefondo);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCreditoFiscalServiciossForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.removeAllItems();

							for(CuentaContable cuentacontablecreditofiscalservicios:this.cuentacontablecreditofiscalserviciossForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.addItem(cuentacontablecreditofiscalservicios);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableCreditoFiscalServicios") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor.removeAllItems();

							for(CuentaContable cuentacontablecreditofiscalservicios:this.cuentacontablecreditofiscalserviciossForeignKey) {
								this.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor.addItem(cuentacontablecreditofiscalservicios);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableGastosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.removeAllItems();

							for(CuentaContable cuentacontablegasto:this.cuentacontablegastosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.addItem(cuentacontablegasto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableGasto2sForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.removeAllItems();

							for(CuentaContable cuentacontablegasto2:this.cuentacontablegasto2sForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.addItem(cuentacontablegasto2);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableGasto2") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_gasto2FK_IdCuentaContableGasto2FacturaProveedor.removeAllItems();

							for(CuentaContable cuentacontablegasto2:this.cuentacontablegasto2sForeignKey) {
								this.jComboBoxid_cuenta_contable_gasto2FK_IdCuentaContableGasto2FacturaProveedor.addItem(cuentacontablegasto2);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCreditoFinsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.removeAllItems();

							for(CuentaContable cuentacontablecreditofin:this.cuentacontablecreditofinsForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.addItem(cuentacontablecreditofin);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCreditoFin2sForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.removeAllItems();

							for(CuentaContable cuentacontablecreditofin2:this.cuentacontablecreditofin2sForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.addItem(cuentacontablecreditofin2);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableCreditosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.removeAllItems();

							for(CuentaContable cuentacontablecredito:this.cuentacontablecreditosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.addItem(cuentacontablecredito);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoMovimientosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoMovimiento=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.removeAllItems();

							for(TipoMovimiento tipomovimiento:this.tipomovimientosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.addItem(tipomovimiento);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoMovimientoModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoMovimientoModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.removeAllItems();

							for(TipoMovimientoModulo tipomovimientomodulo:this.tipomovimientomodulosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.addItem(tipomovimientomodulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoMovimientoModulo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedor.removeAllItems();

							for(TipoMovimientoModulo tipomovimientomodulo:this.tipomovimientomodulosForeignKey) {
								this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedor.addItem(tipomovimientomodulo);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoTransaccionModulosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoTransaccionModulo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.removeAllItems();

							for(TipoTransaccionModulo tipotransaccionmodulo:this.tipotransaccionmodulosForeignKey) {
								this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.addItem(tipotransaccionmodulo);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { 
					}

					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoTransaccionModulo") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.removeAllItems();

							for(TipoTransaccionModulo tipotransaccionmodulo:this.tipotransaccionmodulosForeignKey) {
								this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.addItem(tipotransaccionmodulo);
							}
						}

						if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePeriodoForeignKey(Periodo periodo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.setSelectedItem(periodo);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameModuloForeignKey(Modulo modulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.setSelectedItem(modulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePlantillaFacturaForeignKey(PlantillaFactura plantillafactura,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.setSelectedItem(plantillafactura);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_plantilla_facturaFK_IdPlantillaFacturaFacturaProveedor.setSelectedItem(plantillafactura);
						} else {
							this.jComboBoxid_plantilla_facturaFK_IdPlantillaFacturaFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoDocumentoForeignKey(TipoDocumento tipodocumento,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.setSelectedItem(tipodocumento);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedor.setSelectedItem(tipodocumento);
						} else {
							this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFacturaForeignKey(Factura factura,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.setSelectedItem(factura);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTransaccionForeignKey(Transaccion transaccion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.setSelectedItem(transaccion);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_transaccionFK_IdTransaccionFacturaProveedor.setSelectedItem(transaccion);
						} else {
							this.jComboBoxid_transaccionFK_IdTransaccionFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteFacturaProveedor.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpleadoSolicitaForeignKey(Empleado empleadosolicita,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.setSelectedItem(empleadosolicita);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMonedaForeignKey(Moneda moneda,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.setSelectedItem(moneda);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpleadoForeignKey(Empleado empleado,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.setSelectedItem(empleado);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedor.setSelectedItem(empleado);
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionFuente1ForeignKey(TipoRetencion tiporetencionfuente1,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.setSelectedItem(tiporetencionfuente1);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedor.setSelectedItem(tiporetencionfuente1);
						} else {
							this.jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionFuente2ForeignKey(TipoRetencion tiporetencionfuente2,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.setSelectedItem(tiporetencionfuente2);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionIva1ForeignKey(TipoRetencion tiporetencioniva1,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.setSelectedItem(tiporetencioniva1);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedor.setSelectedItem(tiporetencioniva1);
						} else {
							this.jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionIva2ForeignKey(TipoRetencion tiporetencioniva2,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.setSelectedItem(tiporetencioniva2);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoTributarioForeignKey(TipoTributario tipotributario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.setSelectedItem(tipotributario);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedor.setSelectedItem(tipotributario);
						} else {
							this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCreditoFiscalBienesForeignKey(CuentaContable cuentacontablecreditofiscalbienes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.setSelectedItem(cuentacontablecreditofiscalbienes);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor.setSelectedItem(cuentacontablecreditofiscalbienes);
						} else {
							this.jComboBoxid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameResponsableFondoForeignKey(ResponsableFondo responsablefondo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.setSelectedItem(responsablefondo);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_responsable_fondoFK_IdResponsableFondoFacturaProveedor.setSelectedItem(responsablefondo);
						} else {
							this.jComboBoxid_responsable_fondoFK_IdResponsableFondoFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCreditoFiscalServiciosForeignKey(CuentaContable cuentacontablecreditofiscalservicios,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.setSelectedItem(cuentacontablecreditofiscalservicios);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor.setSelectedItem(cuentacontablecreditofiscalservicios);
						} else {
							this.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableGastoForeignKey(CuentaContable cuentacontablegasto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.setSelectedItem(cuentacontablegasto);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableGasto2ForeignKey(CuentaContable cuentacontablegasto2,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.setSelectedItem(cuentacontablegasto2);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_gasto2FK_IdCuentaContableGasto2FacturaProveedor.setSelectedItem(cuentacontablegasto2);
						} else {
							this.jComboBoxid_cuenta_contable_gasto2FK_IdCuentaContableGasto2FacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCreditoFinForeignKey(CuentaContable cuentacontablecreditofin,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.setSelectedItem(cuentacontablecreditofin);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCreditoFin2ForeignKey(CuentaContable cuentacontablecreditofin2,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.setSelectedItem(cuentacontablecreditofin2);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableCreditoForeignKey(CuentaContable cuentacontablecredito,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.setSelectedItem(cuentacontablecredito);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoMovimientoForeignKey(TipoMovimiento tipomovimiento,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.setSelectedItem(tipomovimiento);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoMovimientoModuloForeignKey(TipoMovimientoModulo tipomovimientomodulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.setSelectedItem(tipomovimientomodulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedor.setSelectedItem(tipomovimientomodulo);
						} else {
							this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoTransaccionModuloForeignKey(TipoTransaccionModulo tipotransaccionmodulo,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.setSelectedItem(tipotransaccionmodulo);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.setSelectedItem(tipotransaccionmodulo);
						} else {
							this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesFacturaProveedor() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			FacturaProveedorConstantesFunciones.refrescarForeignKeysDescripcionesFacturaProveedor(this.facturaproveedorLogic.getFacturaProveedors());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			FacturaProveedorConstantesFunciones.refrescarForeignKeysDescripcionesFacturaProveedor(this.facturaproveedors);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Periodo.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(Modulo.class));
		classes.add(new Classe(PlantillaFactura.class));
		classes.add(new Classe(TipoDocumento.class));
		classes.add(new Classe(Factura.class));
		classes.add(new Classe(Transaccion.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(Empleado.class));
		classes.add(new Classe(Moneda.class));
		classes.add(new Classe(TipoRetencion.class));
		classes.add(new Classe(TipoTributario.class));
		classes.add(new Classe(CuentaContable.class));
		classes.add(new Classe(ResponsableFondo.class));
		classes.add(new Classe(TipoMovimiento.class));
		classes.add(new Classe(TipoMovimientoModulo.class));
		classes.add(new Classe(TipoTransaccionModulo.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//facturaproveedorLogic.setFacturaProveedors(this.facturaproveedors);
			facturaproveedorLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public FacturaProveedorParameterReturnGeneral getFacturaProveedorParameterGeneral() {
		return this.facturaproveedorParameterGeneral;
	}
	
	public void setFacturaProveedorParameterGeneral(FacturaProveedorParameterReturnGeneral facturaproveedorParameterGeneral) {
		this.facturaproveedorParameterGeneral = facturaproveedorParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoFacturaProveedor() {
		return isPermisoTodoFacturaProveedor;
	}

	public void setIsPermisoTodoFacturaProveedor(Boolean isPermisoTodoFacturaProveedor) {
		this.isPermisoTodoFacturaProveedor = isPermisoTodoFacturaProveedor;
	}

	public Boolean getIsPermisoNuevoFacturaProveedor() {
		return isPermisoNuevoFacturaProveedor;
	}

	public void setIsPermisoNuevoFacturaProveedor(Boolean isPermisoNuevoFacturaProveedor) {
		this.isPermisoNuevoFacturaProveedor = isPermisoNuevoFacturaProveedor;
	}

	public Boolean getIsPermisoActualizarFacturaProveedor() {
		return isPermisoActualizarFacturaProveedor;
	}

	public void setIsPermisoActualizarFacturaProveedor(Boolean isPermisoActualizarFacturaProveedor) {
		this.isPermisoActualizarFacturaProveedor = isPermisoActualizarFacturaProveedor;
	}

	public Boolean getIsPermisoEliminarFacturaProveedor() {
		return isPermisoEliminarFacturaProveedor;
	}

	public void setIsPermisoEliminarFacturaProveedor(Boolean isPermisoEliminarFacturaProveedor) {
		this.isPermisoEliminarFacturaProveedor = isPermisoEliminarFacturaProveedor;
	}

	public Boolean getIsPermisoGuardarCambiosFacturaProveedor() {
		return isPermisoGuardarCambiosFacturaProveedor;
	}

	public void setIsPermisoGuardarCambiosFacturaProveedor(Boolean isPermisoGuardarCambiosFacturaProveedor) {
		this.isPermisoGuardarCambiosFacturaProveedor = isPermisoGuardarCambiosFacturaProveedor;
	}
	
	public Boolean getIsPermisoConsultaFacturaProveedor() {
		return isPermisoConsultaFacturaProveedor;
	}

	public void setIsPermisoConsultaFacturaProveedor(Boolean isPermisoConsultaFacturaProveedor) {
		this.isPermisoConsultaFacturaProveedor = isPermisoConsultaFacturaProveedor;
	}

	public Boolean getIsPermisoBusquedaFacturaProveedor() {
		return isPermisoBusquedaFacturaProveedor;
	}

	public void setIsPermisoBusquedaFacturaProveedor(Boolean isPermisoBusquedaFacturaProveedor) {
		this.isPermisoBusquedaFacturaProveedor = isPermisoBusquedaFacturaProveedor;
	}

	public Boolean getIsPermisoReporteFacturaProveedor() {
		return isPermisoReporteFacturaProveedor;
	}

	public void setIsPermisoReporteFacturaProveedor(Boolean isPermisoReporteFacturaProveedor) {
		this.isPermisoReporteFacturaProveedor = isPermisoReporteFacturaProveedor;
	}
	
	public Boolean getIsPermisoPaginacionMedioFacturaProveedor() {
		return isPermisoPaginacionMedioFacturaProveedor;
	}

	public void setIsPermisoPaginacionMedioFacturaProveedor(Boolean isPermisoPaginacionMedioFacturaProveedor) {
		this.isPermisoPaginacionMedioFacturaProveedor = isPermisoPaginacionMedioFacturaProveedor;
	}
	
	public Boolean getIsPermisoPaginacionTodoFacturaProveedor() {
		return isPermisoPaginacionTodoFacturaProveedor;
	}

	public void setIsPermisoPaginacionTodoFacturaProveedor(Boolean isPermisoPaginacionTodoFacturaProveedor) {
		this.isPermisoPaginacionTodoFacturaProveedor = isPermisoPaginacionTodoFacturaProveedor;
	}
	
	public Boolean getIsPermisoPaginacionAltoFacturaProveedor() {
		return isPermisoPaginacionAltoFacturaProveedor;
	}

	public void setIsPermisoPaginacionAltoFacturaProveedor(Boolean isPermisoPaginacionAltoFacturaProveedor) {
		this.isPermisoPaginacionAltoFacturaProveedor = isPermisoPaginacionAltoFacturaProveedor;
	}
	
	public Boolean getIsPermisoCopiarFacturaProveedor() {
		return isPermisoCopiarFacturaProveedor;
	}

	public void setIsPermisoCopiarFacturaProveedor(Boolean isPermisoCopiarFacturaProveedor) {
		this.isPermisoCopiarFacturaProveedor = isPermisoCopiarFacturaProveedor;
	}
	
	public Boolean getIsPermisoVerFormFacturaProveedor() {
		return isPermisoVerFormFacturaProveedor;
	}

	public void setIsPermisoVerFormFacturaProveedor(Boolean isPermisoVerFormFacturaProveedor) {
		this.isPermisoVerFormFacturaProveedor = isPermisoVerFormFacturaProveedor;
	}
	
	public Boolean getIsPermisoDuplicarFacturaProveedor() {
		return isPermisoDuplicarFacturaProveedor;
	}

	public void setIsPermisoDuplicarFacturaProveedor(Boolean isPermisoDuplicarFacturaProveedor) {
		this.isPermisoDuplicarFacturaProveedor = isPermisoDuplicarFacturaProveedor;
	}
	
	public Boolean getIsPermisoOrdenFacturaProveedor() {
		return isPermisoOrdenFacturaProveedor;
	}

	public void setIsPermisoOrdenFacturaProveedor(Boolean isPermisoOrdenFacturaProveedor) {
		this.isPermisoOrdenFacturaProveedor = isPermisoOrdenFacturaProveedor;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoFacturaProveedor() {
		return isVisibilidadCeldaNuevoFacturaProveedor;
	}

	public void setIsVisibilidadCeldaNuevoFacturaProveedor(Boolean isVisibilidadCeldaNuevoFacturaProveedor) {
		this.isVisibilidadCeldaNuevoFacturaProveedor = isVisibilidadCeldaNuevoFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarFacturaProveedor() {
		return isVisibilidadCeldaDuplicarFacturaProveedor;
	}

	public void setIsVisibilidadCeldaDuplicarFacturaProveedor(Boolean isVisibilidadCeldaDuplicarFacturaProveedor) {
		this.isVisibilidadCeldaDuplicarFacturaProveedor = isVisibilidadCeldaDuplicarFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarFacturaProveedor() {
		return isVisibilidadCeldaCopiarFacturaProveedor;
	}

	public void setIsVisibilidadCeldaCopiarFacturaProveedor(Boolean isVisibilidadCeldaCopiarFacturaProveedor) {
		this.isVisibilidadCeldaCopiarFacturaProveedor = isVisibilidadCeldaCopiarFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormFacturaProveedor() {
		return isVisibilidadCeldaVerFormFacturaProveedor;
	}

	public void setIsVisibilidadCeldaVerFormFacturaProveedor(Boolean isVisibilidadCeldaVerFormFacturaProveedor) {
		this.isVisibilidadCeldaVerFormFacturaProveedor = isVisibilidadCeldaVerFormFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenFacturaProveedor() {
		return isVisibilidadCeldaOrdenFacturaProveedor;
	}

	public void setIsVisibilidadCeldaOrdenFacturaProveedor(Boolean isVisibilidadCeldaOrdenFacturaProveedor) {
		this.isVisibilidadCeldaOrdenFacturaProveedor = isVisibilidadCeldaOrdenFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesFacturaProveedor() {
		return isVisibilidadCeldaNuevoRelacionesFacturaProveedor;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesFacturaProveedor(Boolean isVisibilidadCeldaNuevoRelacionesFacturaProveedor) {
		this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor = isVisibilidadCeldaNuevoRelacionesFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaModificarFacturaProveedor() {
		return isVisibilidadCeldaModificarFacturaProveedor;
	}

	public void setIsVisibilidadCeldaModificarFacturaProveedor(Boolean isVisibilidadCeldaModificarFacturaProveedor) {
		this.isVisibilidadCeldaModificarFacturaProveedor = isVisibilidadCeldaModificarFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarFacturaProveedor() {
		return isVisibilidadCeldaActualizarFacturaProveedor;
	}

	public void setIsVisibilidadCeldaActualizarFacturaProveedor(Boolean isVisibilidadCeldaActualizarFacturaProveedor) {
		this.isVisibilidadCeldaActualizarFacturaProveedor = isVisibilidadCeldaActualizarFacturaProveedor;
	}

	public Boolean getIsVisibilidadCeldaEliminarFacturaProveedor() {
		return isVisibilidadCeldaEliminarFacturaProveedor;
	}

	public void setIsVisibilidadCeldaEliminarFacturaProveedor(Boolean isVisibilidadCeldaEliminarFacturaProveedor) {
		this.isVisibilidadCeldaEliminarFacturaProveedor = isVisibilidadCeldaEliminarFacturaProveedor;
	}

	public Boolean getIsVisibilidadCeldaCancelarFacturaProveedor() {
		return isVisibilidadCeldaCancelarFacturaProveedor;
	}

	public void setIsVisibilidadCeldaCancelarFacturaProveedor(Boolean isVisibilidadCeldaCancelarFacturaProveedor) {
		this.isVisibilidadCeldaCancelarFacturaProveedor = isVisibilidadCeldaCancelarFacturaProveedor;
	}

	public Boolean getIsVisibilidadCeldaGuardarFacturaProveedor() {
		return isVisibilidadCeldaGuardarFacturaProveedor;
	}

	public void setIsVisibilidadCeldaGuardarFacturaProveedor(Boolean isVisibilidadCeldaGuardarFacturaProveedor) {
		this.isVisibilidadCeldaGuardarFacturaProveedor = isVisibilidadCeldaGuardarFacturaProveedor;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosFacturaProveedor() {
		return isVisibilidadCeldaGuardarCambiosFacturaProveedor;
	}

	public void setIsVisibilidadCeldaGuardarCambiosFacturaProveedor(Boolean isVisibilidadCeldaGuardarCambiosFacturaProveedor) {
		this.isVisibilidadCeldaGuardarCambiosFacturaProveedor = isVisibilidadCeldaGuardarCambiosFacturaProveedor;
	}
		
	public FacturaProveedorSessionBean getfacturaproveedorSessionBean() {
		return this.facturaproveedorSessionBean;
	}
	
	public void setfacturaproveedorSessionBean(FacturaProveedorSessionBean facturaproveedorSessionBean) {
		this.facturaproveedorSessionBean=facturaproveedorSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCredito() {
		return this.isVisibilidadFK_IdCuentaContableCredito;
	}

	public void setisVisibilidadFK_IdCuentaContableCredito(Boolean isVisibilidadFK_IdCuentaContableCredito) {
		this.isVisibilidadFK_IdCuentaContableCredito=isVisibilidadFK_IdCuentaContableCredito;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCreditoFin() {
		return this.isVisibilidadFK_IdCuentaContableCreditoFin;
	}

	public void setisVisibilidadFK_IdCuentaContableCreditoFin(Boolean isVisibilidadFK_IdCuentaContableCreditoFin) {
		this.isVisibilidadFK_IdCuentaContableCreditoFin=isVisibilidadFK_IdCuentaContableCreditoFin;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCreditoFin2() {
		return this.isVisibilidadFK_IdCuentaContableCreditoFin2;
	}

	public void setisVisibilidadFK_IdCuentaContableCreditoFin2(Boolean isVisibilidadFK_IdCuentaContableCreditoFin2) {
		this.isVisibilidadFK_IdCuentaContableCreditoFin2=isVisibilidadFK_IdCuentaContableCreditoFin2;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCreditoFiscalBienes() {
		return this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes;
	}

	public void setisVisibilidadFK_IdCuentaContableCreditoFiscalBienes(Boolean isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {
		this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isVisibilidadFK_IdCuentaContableCreditoFiscalBienes;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableCreditoFiscalServicios() {
		return this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios;
	}

	public void setisVisibilidadFK_IdCuentaContableCreditoFiscalServicios(Boolean isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {
		this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isVisibilidadFK_IdCuentaContableCreditoFiscalServicios;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableGasto() {
		return this.isVisibilidadFK_IdCuentaContableGasto;
	}

	public void setisVisibilidadFK_IdCuentaContableGasto(Boolean isVisibilidadFK_IdCuentaContableGasto) {
		this.isVisibilidadFK_IdCuentaContableGasto=isVisibilidadFK_IdCuentaContableGasto;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableGasto2() {
		return this.isVisibilidadFK_IdCuentaContableGasto2;
	}

	public void setisVisibilidadFK_IdCuentaContableGasto2(Boolean isVisibilidadFK_IdCuentaContableGasto2) {
		this.isVisibilidadFK_IdCuentaContableGasto2=isVisibilidadFK_IdCuentaContableGasto2;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpleado() {
		return this.isVisibilidadFK_IdEmpleado;
	}

	public void setisVisibilidadFK_IdEmpleado(Boolean isVisibilidadFK_IdEmpleado) {
		this.isVisibilidadFK_IdEmpleado=isVisibilidadFK_IdEmpleado;
	}

	public Boolean getisVisibilidadFK_IdEmpleadoSolicita() {
		return this.isVisibilidadFK_IdEmpleadoSolicita;
	}

	public void setisVisibilidadFK_IdEmpleadoSolicita(Boolean isVisibilidadFK_IdEmpleadoSolicita) {
		this.isVisibilidadFK_IdEmpleadoSolicita=isVisibilidadFK_IdEmpleadoSolicita;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdFactura() {
		return this.isVisibilidadFK_IdFactura;
	}

	public void setisVisibilidadFK_IdFactura(Boolean isVisibilidadFK_IdFactura) {
		this.isVisibilidadFK_IdFactura=isVisibilidadFK_IdFactura;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdModulo() {
		return this.isVisibilidadFK_IdModulo;
	}

	public void setisVisibilidadFK_IdModulo(Boolean isVisibilidadFK_IdModulo) {
		this.isVisibilidadFK_IdModulo=isVisibilidadFK_IdModulo;
	}

	public Boolean getisVisibilidadFK_IdMoneda() {
		return this.isVisibilidadFK_IdMoneda;
	}

	public void setisVisibilidadFK_IdMoneda(Boolean isVisibilidadFK_IdMoneda) {
		this.isVisibilidadFK_IdMoneda=isVisibilidadFK_IdMoneda;
	}

	public Boolean getisVisibilidadFK_IdPeriodo() {
		return this.isVisibilidadFK_IdPeriodo;
	}

	public void setisVisibilidadFK_IdPeriodo(Boolean isVisibilidadFK_IdPeriodo) {
		this.isVisibilidadFK_IdPeriodo=isVisibilidadFK_IdPeriodo;
	}

	public Boolean getisVisibilidadFK_IdPlantillaFactura() {
		return this.isVisibilidadFK_IdPlantillaFactura;
	}

	public void setisVisibilidadFK_IdPlantillaFactura(Boolean isVisibilidadFK_IdPlantillaFactura) {
		this.isVisibilidadFK_IdPlantillaFactura=isVisibilidadFK_IdPlantillaFactura;
	}

	public Boolean getisVisibilidadFK_IdResponsableFondo() {
		return this.isVisibilidadFK_IdResponsableFondo;
	}

	public void setisVisibilidadFK_IdResponsableFondo(Boolean isVisibilidadFK_IdResponsableFondo) {
		this.isVisibilidadFK_IdResponsableFondo=isVisibilidadFK_IdResponsableFondo;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoDocumento() {
		return this.isVisibilidadFK_IdTipoDocumento;
	}

	public void setisVisibilidadFK_IdTipoDocumento(Boolean isVisibilidadFK_IdTipoDocumento) {
		this.isVisibilidadFK_IdTipoDocumento=isVisibilidadFK_IdTipoDocumento;
	}

	public Boolean getisVisibilidadFK_IdTipoMovimiento() {
		return this.isVisibilidadFK_IdTipoMovimiento;
	}

	public void setisVisibilidadFK_IdTipoMovimiento(Boolean isVisibilidadFK_IdTipoMovimiento) {
		this.isVisibilidadFK_IdTipoMovimiento=isVisibilidadFK_IdTipoMovimiento;
	}

	public Boolean getisVisibilidadFK_IdTipoMovimientoModulo() {
		return this.isVisibilidadFK_IdTipoMovimientoModulo;
	}

	public void setisVisibilidadFK_IdTipoMovimientoModulo(Boolean isVisibilidadFK_IdTipoMovimientoModulo) {
		this.isVisibilidadFK_IdTipoMovimientoModulo=isVisibilidadFK_IdTipoMovimientoModulo;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencionFuente1() {
		return this.isVisibilidadFK_IdTipoRetencionFuente1;
	}

	public void setisVisibilidadFK_IdTipoRetencionFuente1(Boolean isVisibilidadFK_IdTipoRetencionFuente1) {
		this.isVisibilidadFK_IdTipoRetencionFuente1=isVisibilidadFK_IdTipoRetencionFuente1;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencionFuente2() {
		return this.isVisibilidadFK_IdTipoRetencionFuente2;
	}

	public void setisVisibilidadFK_IdTipoRetencionFuente2(Boolean isVisibilidadFK_IdTipoRetencionFuente2) {
		this.isVisibilidadFK_IdTipoRetencionFuente2=isVisibilidadFK_IdTipoRetencionFuente2;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencionIva1() {
		return this.isVisibilidadFK_IdTipoRetencionIva1;
	}

	public void setisVisibilidadFK_IdTipoRetencionIva1(Boolean isVisibilidadFK_IdTipoRetencionIva1) {
		this.isVisibilidadFK_IdTipoRetencionIva1=isVisibilidadFK_IdTipoRetencionIva1;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencionIva2() {
		return this.isVisibilidadFK_IdTipoRetencionIva2;
	}

	public void setisVisibilidadFK_IdTipoRetencionIva2(Boolean isVisibilidadFK_IdTipoRetencionIva2) {
		this.isVisibilidadFK_IdTipoRetencionIva2=isVisibilidadFK_IdTipoRetencionIva2;
	}

	public Boolean getisVisibilidadFK_IdTipoTransaccionModulo() {
		return this.isVisibilidadFK_IdTipoTransaccionModulo;
	}

	public void setisVisibilidadFK_IdTipoTransaccionModulo(Boolean isVisibilidadFK_IdTipoTransaccionModulo) {
		this.isVisibilidadFK_IdTipoTransaccionModulo=isVisibilidadFK_IdTipoTransaccionModulo;
	}

	public Boolean getisVisibilidadFK_IdTipoTributario() {
		return this.isVisibilidadFK_IdTipoTributario;
	}

	public void setisVisibilidadFK_IdTipoTributario(Boolean isVisibilidadFK_IdTipoTributario) {
		this.isVisibilidadFK_IdTipoTributario=isVisibilidadFK_IdTipoTributario;
	}

	public Boolean getisVisibilidadFK_IdTransaccion() {
		return this.isVisibilidadFK_IdTransaccion;
	}

	public void setisVisibilidadFK_IdTransaccion(Boolean isVisibilidadFK_IdTransaccion) {
		this.isVisibilidadFK_IdTransaccion=isVisibilidadFK_IdTransaccion;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(FacturaProveedor facturaproveedor)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(facturaproveedor,null);
				this.setActualParaGuardarSucursalForeignKey(facturaproveedor,null);
				this.setActualParaGuardarEjercicioForeignKey(facturaproveedor,null);
				this.setActualParaGuardarPeriodoForeignKey(facturaproveedor,null);
				this.setActualParaGuardarAnioForeignKey(facturaproveedor,null);
				this.setActualParaGuardarMesForeignKey(facturaproveedor,null);
				this.setActualParaGuardarModuloForeignKey(facturaproveedor,null);
				this.setActualParaGuardarPlantillaFacturaForeignKey(facturaproveedor,null);
				this.setActualParaGuardarTipoDocumentoForeignKey(facturaproveedor,null);
				this.setActualParaGuardarFacturaForeignKey(facturaproveedor,null);
				this.setActualParaGuardarTransaccionForeignKey(facturaproveedor,null);
				this.setActualParaGuardarClienteForeignKey(facturaproveedor,null);
				this.setActualParaGuardarEmpleadoSolicitaForeignKey(facturaproveedor,null);
				this.setActualParaGuardarMonedaForeignKey(facturaproveedor,null);
				this.setActualParaGuardarEmpleadoForeignKey(facturaproveedor,null);
				this.setActualParaGuardarTipoRetencionFuente1ForeignKey(facturaproveedor,null);
				this.setActualParaGuardarTipoRetencionFuente2ForeignKey(facturaproveedor,null);
				this.setActualParaGuardarTipoRetencionIva1ForeignKey(facturaproveedor,null);
				this.setActualParaGuardarTipoRetencionIva2ForeignKey(facturaproveedor,null);
				this.setActualParaGuardarTipoTributarioForeignKey(facturaproveedor,null);
				this.setActualParaGuardarCuentaContableCreditoFiscalBienesForeignKey(facturaproveedor,null);
				this.setActualParaGuardarResponsableFondoForeignKey(facturaproveedor,null);
				this.setActualParaGuardarCuentaContableCreditoFiscalServiciosForeignKey(facturaproveedor,null);
				this.setActualParaGuardarCuentaContableGastoForeignKey(facturaproveedor,null);
				this.setActualParaGuardarCuentaContableGasto2ForeignKey(facturaproveedor,null);
				this.setActualParaGuardarCuentaContableCreditoFinForeignKey(facturaproveedor,null);
				this.setActualParaGuardarCuentaContableCreditoFin2ForeignKey(facturaproveedor,null);
				this.setActualParaGuardarCuentaContableCreditoForeignKey(facturaproveedor,null);
				this.setActualParaGuardarTipoMovimientoForeignKey(facturaproveedor,null);
				this.setActualParaGuardarTipoMovimientoModuloForeignKey(facturaproveedor,null);
				this.setActualParaGuardarTipoTransaccionModuloForeignKey(facturaproveedor,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(FacturaProveedor facturaproveedor,FacturaProveedor facturaproveedorAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalFacturaProveedor(facturaproveedor);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		facturaproveedorAux.setId(facturaproveedor.getId());
		facturaproveedorAux.setVersionRow(facturaproveedor.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessFacturaProveedor();
		
			int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = facturaproveedorValidator.getInvalidValues(this.facturaproveedor);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			facturaproveedorLogic.setDatosCliente(datosCliente);
			facturaproveedorLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				facturaproveedorAux=new  FacturaProveedor();
				
				facturaproveedorAux.setIsNew(true);
				facturaproveedorAux.setIsChanged(true);
				
				facturaproveedorAux.setFacturaProveedorOriginal(this.facturaproveedor);
				
				facturaproveedorAux.setId(this.facturaproveedor.getId());	
				facturaproveedorAux.setVersionRow(this.facturaproveedor.getVersionRow());	
				facturaproveedorAux.setid_empresa(this.facturaproveedor.getid_empresa());	
				facturaproveedorAux.setid_sucursal(this.facturaproveedor.getid_sucursal());	
				facturaproveedorAux.setid_ejercicio(this.facturaproveedor.getid_ejercicio());	
				facturaproveedorAux.setid_periodo(this.facturaproveedor.getid_periodo());	
				
				if(this.facturaproveedor.getid_anio()!=null && this.facturaproveedor.getid_anio()>0L) {
					facturaproveedorAux.setid_anio(this.facturaproveedor.getid_anio());
				} else {
					facturaproveedorAux.setid_anio(null);
				}	
				facturaproveedorAux.setid_mes(this.facturaproveedor.getid_mes());	
				facturaproveedorAux.setid_modulo(this.facturaproveedor.getid_modulo());	
				facturaproveedorAux.setid_plantilla_factura(this.facturaproveedor.getid_plantilla_factura());	
				facturaproveedorAux.setid_tipo_documento(this.facturaproveedor.getid_tipo_documento());	
				facturaproveedorAux.setplazo(this.facturaproveedor.getplazo());	
				facturaproveedorAux.setid_factura(this.facturaproveedor.getid_factura());	
				facturaproveedorAux.setnumero_factura(this.facturaproveedor.getnumero_factura());	
				facturaproveedorAux.setid_transaccion(this.facturaproveedor.getid_transaccion());	
				facturaproveedorAux.setfecha_emision(this.facturaproveedor.getfecha_emision());	
				facturaproveedorAux.setid_cliente(this.facturaproveedor.getid_cliente());	
				facturaproveedorAux.setruc(this.facturaproveedor.getruc());	
				facturaproveedorAux.setid_empleado_solicita(this.facturaproveedor.getid_empleado_solicita());	
				facturaproveedorAux.setfecha_vence(this.facturaproveedor.getfecha_vence());	
				facturaproveedorAux.setid_moneda(this.facturaproveedor.getid_moneda());	
				facturaproveedorAux.setid_empleado(this.facturaproveedor.getid_empleado());	
				facturaproveedorAux.setcon_activos(this.facturaproveedor.getcon_activos());	
				facturaproveedorAux.setcon_rise(this.facturaproveedor.getcon_rise());	
				facturaproveedorAux.setcon_sitios(this.facturaproveedor.getcon_sitios());	
				facturaproveedorAux.setdetalle(this.facturaproveedor.getdetalle());	
				facturaproveedorAux.setvalor_bienes12(this.facturaproveedor.getvalor_bienes12());	
				facturaproveedorAux.setvalor_servicios12(this.facturaproveedor.getvalor_servicios12());	
				facturaproveedorAux.settotal_valor12(this.facturaproveedor.gettotal_valor12());	
				facturaproveedorAux.setvalor_bienes0(this.facturaproveedor.getvalor_bienes0());	
				facturaproveedorAux.setvalor_servicios0(this.facturaproveedor.getvalor_servicios0());	
				facturaproveedorAux.settotal_valor0(this.facturaproveedor.gettotal_valor0());	
				facturaproveedorAux.setbienes_ice(this.facturaproveedor.getbienes_ice());	
				facturaproveedorAux.setservicios_ice(this.facturaproveedor.getservicios_ice());	
				facturaproveedorAux.settotal_ice(this.facturaproveedor.gettotal_ice());	
				facturaproveedorAux.setbienes_iva(this.facturaproveedor.getbienes_iva());	
				facturaproveedorAux.setservicios_iva(this.facturaproveedor.getservicios_iva());	
				facturaproveedorAux.settotal_iva(this.facturaproveedor.gettotal_iva());	
				facturaproveedorAux.setiva_porcentaje(this.facturaproveedor.getiva_porcentaje());	
				facturaproveedorAux.settotal(this.facturaproveedor.gettotal());	
				facturaproveedorAux.setcon_monto_objeto_iva(this.facturaproveedor.getcon_monto_objeto_iva());	
				facturaproveedorAux.setnumero_retencion(this.facturaproveedor.getnumero_retencion());	
				facturaproveedorAux.setnumero_serie(this.facturaproveedor.getnumero_serie());	
				facturaproveedorAux.setnumero_autorizacion(this.facturaproveedor.getnumero_autorizacion());	
				facturaproveedorAux.setfecha_validez(this.facturaproveedor.getfecha_validez());	
				facturaproveedorAux.setid_tipo_retencion_fuente1(this.facturaproveedor.getid_tipo_retencion_fuente1());	
				facturaproveedorAux.setret_fuente1_porcentaje(this.facturaproveedor.getret_fuente1_porcentaje());	
				facturaproveedorAux.setret_fuente1_base(this.facturaproveedor.getret_fuente1_base());	
				facturaproveedorAux.setret_fuente1_retenido(this.facturaproveedor.getret_fuente1_retenido());	
				facturaproveedorAux.setid_tipo_retencion_fuente2(this.facturaproveedor.getid_tipo_retencion_fuente2());	
				facturaproveedorAux.setret_fuente2_porcentaje(this.facturaproveedor.getret_fuente2_porcentaje());	
				facturaproveedorAux.setret_fuente2_base(this.facturaproveedor.getret_fuente2_base());	
				facturaproveedorAux.setret_fuente2_retenido(this.facturaproveedor.getret_fuente2_retenido());	
				facturaproveedorAux.setid_tipo_retencion_iva1(this.facturaproveedor.getid_tipo_retencion_iva1());	
				facturaproveedorAux.setret_iva_bien_porcentaje(this.facturaproveedor.getret_iva_bien_porcentaje());	
				facturaproveedorAux.setret_iva_bien_base(this.facturaproveedor.getret_iva_bien_base());	
				facturaproveedorAux.setret_iva_bien_retenido(this.facturaproveedor.getret_iva_bien_retenido());	
				facturaproveedorAux.setid_tipo_retencion_iva2(this.facturaproveedor.getid_tipo_retencion_iva2());	
				facturaproveedorAux.setret_iva_servicio_porcentaje(this.facturaproveedor.getret_iva_servicio_porcentaje());	
				facturaproveedorAux.setret_iva_servicio_base(this.facturaproveedor.getret_iva_servicio_base());	
				facturaproveedorAux.setret_iva_servicio_retenido(this.facturaproveedor.getret_iva_servicio_retenido());	
				facturaproveedorAux.setanexo_numero_autorizacion(this.facturaproveedor.getanexo_numero_autorizacion());	
				facturaproveedorAux.setanexo_numeso_serie(this.facturaproveedor.getanexo_numeso_serie());	
				facturaproveedorAux.setanexo_fecha_validez(this.facturaproveedor.getanexo_fecha_validez());	
				facturaproveedorAux.setid_tipo_tributario(this.facturaproveedor.getid_tipo_tributario());	
				facturaproveedorAux.setanexo_factura_inicio(this.facturaproveedor.getanexo_factura_inicio());	
				facturaproveedorAux.setanexo_factura_fin(this.facturaproveedor.getanexo_factura_fin());	
				facturaproveedorAux.setid_cuenta_contable_credito_fiscal_bienes(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_bienes());	
				facturaproveedorAux.setid_responsable_fondo(this.facturaproveedor.getid_responsable_fondo());	
				facturaproveedorAux.setid_cuenta_contable_credito_fiscal_servicios(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_servicios());	
				facturaproveedorAux.setsecuencial(this.facturaproveedor.getsecuencial());	
				facturaproveedorAux.setid_cuenta_contable_gasto(this.facturaproveedor.getid_cuenta_contable_gasto());	
				facturaproveedorAux.setgasto_valor(this.facturaproveedor.getgasto_valor());	
				facturaproveedorAux.setid_cuenta_contable_gasto2(this.facturaproveedor.getid_cuenta_contable_gasto2());	
				facturaproveedorAux.setgasto_valor2(this.facturaproveedor.getgasto_valor2());	
				facturaproveedorAux.setgasto_nombre(this.facturaproveedor.getgasto_nombre());	
				facturaproveedorAux.setgasto_nombre2(this.facturaproveedor.getgasto_nombre2());	
				facturaproveedorAux.setid_cuenta_contable_credito_fin(this.facturaproveedor.getid_cuenta_contable_credito_fin());	
				facturaproveedorAux.setid_cuenta_contable_credito_fin2(this.facturaproveedor.getid_cuenta_contable_credito_fin2());	
				facturaproveedorAux.setid_cuenta_contable_credito(this.facturaproveedor.getid_cuenta_contable_credito());	
				facturaproveedorAux.setdescripcion(this.facturaproveedor.getdescripcion());	
				facturaproveedorAux.setid_tipo_movimiento(this.facturaproveedor.getid_tipo_movimiento());	
				facturaproveedorAux.setid_tipo_movimiento_modulo(this.facturaproveedor.getid_tipo_movimiento_modulo());	
				facturaproveedorAux.setid_tipo_transaccion_modulo(this.facturaproveedor.getid_tipo_transaccion_modulo());	
				facturaproveedorAux.setnumero_mayor(this.facturaproveedor.getnumero_mayor());	
				facturaproveedorAux.setcodigo_asiento(this.facturaproveedor.getcodigo_asiento());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.facturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.facturaproveedorSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(facturaproveedorAux,facturaproveedorLogic.getFacturaProveedors());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturaproveedorAux,facturaproveedors);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.facturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.facturaproveedorSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.saveFacturaProveedors();//WithConnection
						//facturaproveedorLogic.getSetVersionRowFacturaProveedors();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.facturaproveedor,facturaproveedorAux);
					
					this.refrescarForeignKeysDescripcionesFacturaProveedor();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.facturaproveedorSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorsEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedors.addAll(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorsEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								facturaproveedorLogic.saveFacturaProveedorRelaciones(facturaproveedorAux,this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.getDetalleFacturaProveedors());//WithConnection
								//facturaproveedorLogic.getSetVersionRowFacturaProveedors();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.facturaproveedor,facturaproveedorAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedors= new ArrayList<DetalleFacturaProveedor>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.quitarFilaTotales();}
							facturaproveedorAux.setDetalleFacturaProveedors(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.getDetalleFacturaProveedors());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.facturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
									|| this.facturaproveedorSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(facturaproveedorAux,facturaproveedorLogic.getFacturaProveedors());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(facturaproveedorAux,facturaproveedors);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.facturaproveedor,facturaproveedorAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				facturaproveedorAux=new  FacturaProveedor();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado() 
					|| (this.facturaproveedorSessionBean.getEsGuardarRelacionado() && this.facturaproveedor.getId()>=0)) {
						
					facturaproveedorAux.setIsNew(false);
				}
				
				facturaproveedorAux.setIsDeleted(false);
			
				facturaproveedorAux.setId(this.facturaproveedor.getId());	
				facturaproveedorAux.setVersionRow(this.facturaproveedor.getVersionRow());	
				facturaproveedorAux.setid_empresa(this.facturaproveedor.getid_empresa());	
				facturaproveedorAux.setid_sucursal(this.facturaproveedor.getid_sucursal());	
				facturaproveedorAux.setid_ejercicio(this.facturaproveedor.getid_ejercicio());	
				facturaproveedorAux.setid_periodo(this.facturaproveedor.getid_periodo());	
				
				if(this.facturaproveedor.getid_anio()!=null && this.facturaproveedor.getid_anio()>0L) {
					facturaproveedorAux.setid_anio(this.facturaproveedor.getid_anio());
				} else {
					facturaproveedorAux.setid_anio(null);
				}	
				facturaproveedorAux.setid_mes(this.facturaproveedor.getid_mes());	
				facturaproveedorAux.setid_modulo(this.facturaproveedor.getid_modulo());	
				facturaproveedorAux.setid_plantilla_factura(this.facturaproveedor.getid_plantilla_factura());	
				facturaproveedorAux.setid_tipo_documento(this.facturaproveedor.getid_tipo_documento());	
				facturaproveedorAux.setplazo(this.facturaproveedor.getplazo());	
				facturaproveedorAux.setid_factura(this.facturaproveedor.getid_factura());	
				facturaproveedorAux.setnumero_factura(this.facturaproveedor.getnumero_factura());	
				facturaproveedorAux.setid_transaccion(this.facturaproveedor.getid_transaccion());	
				facturaproveedorAux.setfecha_emision(this.facturaproveedor.getfecha_emision());	
				facturaproveedorAux.setid_cliente(this.facturaproveedor.getid_cliente());	
				facturaproveedorAux.setruc(this.facturaproveedor.getruc());	
				facturaproveedorAux.setid_empleado_solicita(this.facturaproveedor.getid_empleado_solicita());	
				facturaproveedorAux.setfecha_vence(this.facturaproveedor.getfecha_vence());	
				facturaproveedorAux.setid_moneda(this.facturaproveedor.getid_moneda());	
				facturaproveedorAux.setid_empleado(this.facturaproveedor.getid_empleado());	
				facturaproveedorAux.setcon_activos(this.facturaproveedor.getcon_activos());	
				facturaproveedorAux.setcon_rise(this.facturaproveedor.getcon_rise());	
				facturaproveedorAux.setcon_sitios(this.facturaproveedor.getcon_sitios());	
				facturaproveedorAux.setdetalle(this.facturaproveedor.getdetalle());	
				facturaproveedorAux.setvalor_bienes12(this.facturaproveedor.getvalor_bienes12());	
				facturaproveedorAux.setvalor_servicios12(this.facturaproveedor.getvalor_servicios12());	
				facturaproveedorAux.settotal_valor12(this.facturaproveedor.gettotal_valor12());	
				facturaproveedorAux.setvalor_bienes0(this.facturaproveedor.getvalor_bienes0());	
				facturaproveedorAux.setvalor_servicios0(this.facturaproveedor.getvalor_servicios0());	
				facturaproveedorAux.settotal_valor0(this.facturaproveedor.gettotal_valor0());	
				facturaproveedorAux.setbienes_ice(this.facturaproveedor.getbienes_ice());	
				facturaproveedorAux.setservicios_ice(this.facturaproveedor.getservicios_ice());	
				facturaproveedorAux.settotal_ice(this.facturaproveedor.gettotal_ice());	
				facturaproveedorAux.setbienes_iva(this.facturaproveedor.getbienes_iva());	
				facturaproveedorAux.setservicios_iva(this.facturaproveedor.getservicios_iva());	
				facturaproveedorAux.settotal_iva(this.facturaproveedor.gettotal_iva());	
				facturaproveedorAux.setiva_porcentaje(this.facturaproveedor.getiva_porcentaje());	
				facturaproveedorAux.settotal(this.facturaproveedor.gettotal());	
				facturaproveedorAux.setcon_monto_objeto_iva(this.facturaproveedor.getcon_monto_objeto_iva());	
				facturaproveedorAux.setnumero_retencion(this.facturaproveedor.getnumero_retencion());	
				facturaproveedorAux.setnumero_serie(this.facturaproveedor.getnumero_serie());	
				facturaproveedorAux.setnumero_autorizacion(this.facturaproveedor.getnumero_autorizacion());	
				facturaproveedorAux.setfecha_validez(this.facturaproveedor.getfecha_validez());	
				facturaproveedorAux.setid_tipo_retencion_fuente1(this.facturaproveedor.getid_tipo_retencion_fuente1());	
				facturaproveedorAux.setret_fuente1_porcentaje(this.facturaproveedor.getret_fuente1_porcentaje());	
				facturaproveedorAux.setret_fuente1_base(this.facturaproveedor.getret_fuente1_base());	
				facturaproveedorAux.setret_fuente1_retenido(this.facturaproveedor.getret_fuente1_retenido());	
				facturaproveedorAux.setid_tipo_retencion_fuente2(this.facturaproveedor.getid_tipo_retencion_fuente2());	
				facturaproveedorAux.setret_fuente2_porcentaje(this.facturaproveedor.getret_fuente2_porcentaje());	
				facturaproveedorAux.setret_fuente2_base(this.facturaproveedor.getret_fuente2_base());	
				facturaproveedorAux.setret_fuente2_retenido(this.facturaproveedor.getret_fuente2_retenido());	
				facturaproveedorAux.setid_tipo_retencion_iva1(this.facturaproveedor.getid_tipo_retencion_iva1());	
				facturaproveedorAux.setret_iva_bien_porcentaje(this.facturaproveedor.getret_iva_bien_porcentaje());	
				facturaproveedorAux.setret_iva_bien_base(this.facturaproveedor.getret_iva_bien_base());	
				facturaproveedorAux.setret_iva_bien_retenido(this.facturaproveedor.getret_iva_bien_retenido());	
				facturaproveedorAux.setid_tipo_retencion_iva2(this.facturaproveedor.getid_tipo_retencion_iva2());	
				facturaproveedorAux.setret_iva_servicio_porcentaje(this.facturaproveedor.getret_iva_servicio_porcentaje());	
				facturaproveedorAux.setret_iva_servicio_base(this.facturaproveedor.getret_iva_servicio_base());	
				facturaproveedorAux.setret_iva_servicio_retenido(this.facturaproveedor.getret_iva_servicio_retenido());	
				facturaproveedorAux.setanexo_numero_autorizacion(this.facturaproveedor.getanexo_numero_autorizacion());	
				facturaproveedorAux.setanexo_numeso_serie(this.facturaproveedor.getanexo_numeso_serie());	
				facturaproveedorAux.setanexo_fecha_validez(this.facturaproveedor.getanexo_fecha_validez());	
				facturaproveedorAux.setid_tipo_tributario(this.facturaproveedor.getid_tipo_tributario());	
				facturaproveedorAux.setanexo_factura_inicio(this.facturaproveedor.getanexo_factura_inicio());	
				facturaproveedorAux.setanexo_factura_fin(this.facturaproveedor.getanexo_factura_fin());	
				facturaproveedorAux.setid_cuenta_contable_credito_fiscal_bienes(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_bienes());	
				facturaproveedorAux.setid_responsable_fondo(this.facturaproveedor.getid_responsable_fondo());	
				facturaproveedorAux.setid_cuenta_contable_credito_fiscal_servicios(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_servicios());	
				facturaproveedorAux.setsecuencial(this.facturaproveedor.getsecuencial());	
				facturaproveedorAux.setid_cuenta_contable_gasto(this.facturaproveedor.getid_cuenta_contable_gasto());	
				facturaproveedorAux.setgasto_valor(this.facturaproveedor.getgasto_valor());	
				facturaproveedorAux.setid_cuenta_contable_gasto2(this.facturaproveedor.getid_cuenta_contable_gasto2());	
				facturaproveedorAux.setgasto_valor2(this.facturaproveedor.getgasto_valor2());	
				facturaproveedorAux.setgasto_nombre(this.facturaproveedor.getgasto_nombre());	
				facturaproveedorAux.setgasto_nombre2(this.facturaproveedor.getgasto_nombre2());	
				facturaproveedorAux.setid_cuenta_contable_credito_fin(this.facturaproveedor.getid_cuenta_contable_credito_fin());	
				facturaproveedorAux.setid_cuenta_contable_credito_fin2(this.facturaproveedor.getid_cuenta_contable_credito_fin2());	
				facturaproveedorAux.setid_cuenta_contable_credito(this.facturaproveedor.getid_cuenta_contable_credito());	
				facturaproveedorAux.setdescripcion(this.facturaproveedor.getdescripcion());	
				facturaproveedorAux.setid_tipo_movimiento(this.facturaproveedor.getid_tipo_movimiento());	
				facturaproveedorAux.setid_tipo_movimiento_modulo(this.facturaproveedor.getid_tipo_movimiento_modulo());	
				facturaproveedorAux.setid_tipo_transaccion_modulo(this.facturaproveedor.getid_tipo_transaccion_modulo());	
				facturaproveedorAux.setnumero_mayor(this.facturaproveedor.getnumero_mayor());	
				facturaproveedorAux.setcodigo_asiento(this.facturaproveedor.getcodigo_asiento());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(facturaproveedorAux,facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturaproveedorAux,facturaproveedors);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.facturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.facturaproveedorSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.saveFacturaProveedors();//WithConnection
						//facturaproveedorLogic.getSetVersionRowFacturaProveedors();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.facturaproveedor,facturaproveedorAux);
					
					this.refrescarForeignKeysDescripcionesFacturaProveedor();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.facturaproveedorSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorsEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedors.addAll(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorsEliminados);
						}
						//ARCHITECTURE
						
						if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								facturaproveedorLogic.saveFacturaProveedorRelaciones(facturaproveedorAux,this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.getDetalleFacturaProveedors());//WithConnection
								//facturaproveedorLogic.getSetVersionRowFacturaProveedors();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.facturaproveedor,facturaproveedorAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedors= new ArrayList<DetalleFacturaProveedor>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.quitarFilaTotales();}
							facturaproveedorAux.setDetalleFacturaProveedors(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.getDetalleFacturaProveedors());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.facturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
									|| this.facturaproveedorSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(facturaproveedorAux,facturaproveedorLogic.getFacturaProveedors());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(facturaproveedorAux,facturaproveedors);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.facturaproveedor,facturaproveedorAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				facturaproveedorAux=new  FacturaProveedor();
				
				facturaproveedorAux.setIsNew(false);
				facturaproveedorAux.setIsChanged(false);
				
				facturaproveedorAux.setIsDeleted(true);
				
				facturaproveedorAux.setId(this.facturaproveedor.getId());	
				facturaproveedorAux.setVersionRow(this.facturaproveedor.getVersionRow());	
				facturaproveedorAux.setid_empresa(this.facturaproveedor.getid_empresa());	
				facturaproveedorAux.setid_sucursal(this.facturaproveedor.getid_sucursal());	
				facturaproveedorAux.setid_ejercicio(this.facturaproveedor.getid_ejercicio());	
				facturaproveedorAux.setid_periodo(this.facturaproveedor.getid_periodo());	
				
				if(this.facturaproveedor.getid_anio()!=null && this.facturaproveedor.getid_anio()>0L) {
					facturaproveedorAux.setid_anio(this.facturaproveedor.getid_anio());
				} else {
					facturaproveedorAux.setid_anio(null);
				}	
				facturaproveedorAux.setid_mes(this.facturaproveedor.getid_mes());	
				facturaproveedorAux.setid_modulo(this.facturaproveedor.getid_modulo());	
				facturaproveedorAux.setid_plantilla_factura(this.facturaproveedor.getid_plantilla_factura());	
				facturaproveedorAux.setid_tipo_documento(this.facturaproveedor.getid_tipo_documento());	
				facturaproveedorAux.setplazo(this.facturaproveedor.getplazo());	
				facturaproveedorAux.setid_factura(this.facturaproveedor.getid_factura());	
				facturaproveedorAux.setnumero_factura(this.facturaproveedor.getnumero_factura());	
				facturaproveedorAux.setid_transaccion(this.facturaproveedor.getid_transaccion());	
				facturaproveedorAux.setfecha_emision(this.facturaproveedor.getfecha_emision());	
				facturaproveedorAux.setid_cliente(this.facturaproveedor.getid_cliente());	
				facturaproveedorAux.setruc(this.facturaproveedor.getruc());	
				facturaproveedorAux.setid_empleado_solicita(this.facturaproveedor.getid_empleado_solicita());	
				facturaproveedorAux.setfecha_vence(this.facturaproveedor.getfecha_vence());	
				facturaproveedorAux.setid_moneda(this.facturaproveedor.getid_moneda());	
				facturaproveedorAux.setid_empleado(this.facturaproveedor.getid_empleado());	
				facturaproveedorAux.setcon_activos(this.facturaproveedor.getcon_activos());	
				facturaproveedorAux.setcon_rise(this.facturaproveedor.getcon_rise());	
				facturaproveedorAux.setcon_sitios(this.facturaproveedor.getcon_sitios());	
				facturaproveedorAux.setdetalle(this.facturaproveedor.getdetalle());	
				facturaproveedorAux.setvalor_bienes12(this.facturaproveedor.getvalor_bienes12());	
				facturaproveedorAux.setvalor_servicios12(this.facturaproveedor.getvalor_servicios12());	
				facturaproveedorAux.settotal_valor12(this.facturaproveedor.gettotal_valor12());	
				facturaproveedorAux.setvalor_bienes0(this.facturaproveedor.getvalor_bienes0());	
				facturaproveedorAux.setvalor_servicios0(this.facturaproveedor.getvalor_servicios0());	
				facturaproveedorAux.settotal_valor0(this.facturaproveedor.gettotal_valor0());	
				facturaproveedorAux.setbienes_ice(this.facturaproveedor.getbienes_ice());	
				facturaproveedorAux.setservicios_ice(this.facturaproveedor.getservicios_ice());	
				facturaproveedorAux.settotal_ice(this.facturaproveedor.gettotal_ice());	
				facturaproveedorAux.setbienes_iva(this.facturaproveedor.getbienes_iva());	
				facturaproveedorAux.setservicios_iva(this.facturaproveedor.getservicios_iva());	
				facturaproveedorAux.settotal_iva(this.facturaproveedor.gettotal_iva());	
				facturaproveedorAux.setiva_porcentaje(this.facturaproveedor.getiva_porcentaje());	
				facturaproveedorAux.settotal(this.facturaproveedor.gettotal());	
				facturaproveedorAux.setcon_monto_objeto_iva(this.facturaproveedor.getcon_monto_objeto_iva());	
				facturaproveedorAux.setnumero_retencion(this.facturaproveedor.getnumero_retencion());	
				facturaproveedorAux.setnumero_serie(this.facturaproveedor.getnumero_serie());	
				facturaproveedorAux.setnumero_autorizacion(this.facturaproveedor.getnumero_autorizacion());	
				facturaproveedorAux.setfecha_validez(this.facturaproveedor.getfecha_validez());	
				facturaproveedorAux.setid_tipo_retencion_fuente1(this.facturaproveedor.getid_tipo_retencion_fuente1());	
				facturaproveedorAux.setret_fuente1_porcentaje(this.facturaproveedor.getret_fuente1_porcentaje());	
				facturaproveedorAux.setret_fuente1_base(this.facturaproveedor.getret_fuente1_base());	
				facturaproveedorAux.setret_fuente1_retenido(this.facturaproveedor.getret_fuente1_retenido());	
				facturaproveedorAux.setid_tipo_retencion_fuente2(this.facturaproveedor.getid_tipo_retencion_fuente2());	
				facturaproveedorAux.setret_fuente2_porcentaje(this.facturaproveedor.getret_fuente2_porcentaje());	
				facturaproveedorAux.setret_fuente2_base(this.facturaproveedor.getret_fuente2_base());	
				facturaproveedorAux.setret_fuente2_retenido(this.facturaproveedor.getret_fuente2_retenido());	
				facturaproveedorAux.setid_tipo_retencion_iva1(this.facturaproveedor.getid_tipo_retencion_iva1());	
				facturaproveedorAux.setret_iva_bien_porcentaje(this.facturaproveedor.getret_iva_bien_porcentaje());	
				facturaproveedorAux.setret_iva_bien_base(this.facturaproveedor.getret_iva_bien_base());	
				facturaproveedorAux.setret_iva_bien_retenido(this.facturaproveedor.getret_iva_bien_retenido());	
				facturaproveedorAux.setid_tipo_retencion_iva2(this.facturaproveedor.getid_tipo_retencion_iva2());	
				facturaproveedorAux.setret_iva_servicio_porcentaje(this.facturaproveedor.getret_iva_servicio_porcentaje());	
				facturaproveedorAux.setret_iva_servicio_base(this.facturaproveedor.getret_iva_servicio_base());	
				facturaproveedorAux.setret_iva_servicio_retenido(this.facturaproveedor.getret_iva_servicio_retenido());	
				facturaproveedorAux.setanexo_numero_autorizacion(this.facturaproveedor.getanexo_numero_autorizacion());	
				facturaproveedorAux.setanexo_numeso_serie(this.facturaproveedor.getanexo_numeso_serie());	
				facturaproveedorAux.setanexo_fecha_validez(this.facturaproveedor.getanexo_fecha_validez());	
				facturaproveedorAux.setid_tipo_tributario(this.facturaproveedor.getid_tipo_tributario());	
				facturaproveedorAux.setanexo_factura_inicio(this.facturaproveedor.getanexo_factura_inicio());	
				facturaproveedorAux.setanexo_factura_fin(this.facturaproveedor.getanexo_factura_fin());	
				facturaproveedorAux.setid_cuenta_contable_credito_fiscal_bienes(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_bienes());	
				facturaproveedorAux.setid_responsable_fondo(this.facturaproveedor.getid_responsable_fondo());	
				facturaproveedorAux.setid_cuenta_contable_credito_fiscal_servicios(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_servicios());	
				facturaproveedorAux.setsecuencial(this.facturaproveedor.getsecuencial());	
				facturaproveedorAux.setid_cuenta_contable_gasto(this.facturaproveedor.getid_cuenta_contable_gasto());	
				facturaproveedorAux.setgasto_valor(this.facturaproveedor.getgasto_valor());	
				facturaproveedorAux.setid_cuenta_contable_gasto2(this.facturaproveedor.getid_cuenta_contable_gasto2());	
				facturaproveedorAux.setgasto_valor2(this.facturaproveedor.getgasto_valor2());	
				facturaproveedorAux.setgasto_nombre(this.facturaproveedor.getgasto_nombre());	
				facturaproveedorAux.setgasto_nombre2(this.facturaproveedor.getgasto_nombre2());	
				facturaproveedorAux.setid_cuenta_contable_credito_fin(this.facturaproveedor.getid_cuenta_contable_credito_fin());	
				facturaproveedorAux.setid_cuenta_contable_credito_fin2(this.facturaproveedor.getid_cuenta_contable_credito_fin2());	
				facturaproveedorAux.setid_cuenta_contable_credito(this.facturaproveedor.getid_cuenta_contable_credito());	
				facturaproveedorAux.setdescripcion(this.facturaproveedor.getdescripcion());	
				facturaproveedorAux.setid_tipo_movimiento(this.facturaproveedor.getid_tipo_movimiento());	
				facturaproveedorAux.setid_tipo_movimiento_modulo(this.facturaproveedor.getid_tipo_movimiento_modulo());	
				facturaproveedorAux.setid_tipo_transaccion_modulo(this.facturaproveedor.getid_tipo_transaccion_modulo());	
				facturaproveedorAux.setnumero_mayor(this.facturaproveedor.getnumero_mayor());	
				facturaproveedorAux.setcodigo_asiento(this.facturaproveedor.getcodigo_asiento());	
				
				if(this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.facturaproveedorAux.getId()>=0) {	
						this.facturaproveedorsEliminados.add(facturaproveedorAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(facturaproveedorAux,facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturaproveedorAux,facturaproveedors);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.facturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.facturaproveedorSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.saveFacturaProveedors();//WithConnection
						//facturaproveedorLogic.getSetVersionRowFacturaProveedors();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.facturaproveedorSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.getDetalleFacturaProveedors().addAll(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorsEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedors.addAll(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorsEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								facturaproveedorLogic.saveFacturaProveedorRelaciones(facturaproveedorAux,this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.getDetalleFacturaProveedors());//WithConnection
								//facturaproveedorLogic.getSetVersionRowFacturaProveedors();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.setDetalleFacturaProveedors(new ArrayList<DetalleFacturaProveedor>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedors= new ArrayList<DetalleFacturaProveedor>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.quitarFilaTotales();}
							facturaproveedorAux.setDetalleFacturaProveedors(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.getDetalleFacturaProveedors());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.facturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
								|| this.facturaproveedorSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(facturaproveedorAux,facturaproveedorLogic.getFacturaProveedors());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(facturaproveedorAux,facturaproveedors);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getFacturaProveedors().addAll(this.facturaproveedorsEliminados);
					
					facturaproveedorLogic.saveFacturaProveedors();//WithConnection
					//facturaproveedorLogic.getSetVersionRowFacturaProveedors();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesFacturaProveedor();
				
				this.facturaproveedorsEliminados= new ArrayList<FacturaProveedor>();		
			}
			
			if(this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Factura Proveedor GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.facturaproveedor=facturaproveedorAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessFacturaProveedor();
      	}
		
	}	
	
	public void actualizarRelaciones(FacturaProveedor facturaproveedorLocal) throws Exception {
		
		if(this.facturaproveedorSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				facturaproveedorLocal.setDetalleFacturaProveedors(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.getDetalleFacturaProveedors());
			
			} else {
			
				facturaproveedorLocal.setDetalleFacturaProveedors(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedors);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(FacturaProveedor facturaproveedorLocal) throws Exception {	
		if(this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				facturaproveedorLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				facturaproveedorLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				facturaproveedorLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PeriodoDetalleFormJInternalFrame.class)) {
				PeriodoBeanSwingJInternalFrame periodoBeanSwingJInternalFrameLocal=(PeriodoBeanSwingJInternalFrame) ((PeriodoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				periodoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPeriodo(periodoBeanSwingJInternalFrameLocal.getperiodo(),true);
				periodoBeanSwingJInternalFrameLocal.actualizarLista(periodoBeanSwingJInternalFrameLocal.periodo,this.periodosForeignKey);

				periodoBeanSwingJInternalFrameLocal.actualizarRelaciones(periodoBeanSwingJInternalFrameLocal.periodo);

				facturaproveedorLocal.setPeriodo(periodoBeanSwingJInternalFrameLocal.periodo);

				this.addItemDefectoCombosForeignKeyPeriodo();
				this.cargarCombosFramePeriodosForeignKey("Formulario");
				this.setActualPeriodoForeignKey(periodoBeanSwingJInternalFrameLocal.periodo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				facturaproveedorLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				facturaproveedorLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ModuloDetalleFormJInternalFrame.class)) {
				ModuloBeanSwingJInternalFrame moduloBeanSwingJInternalFrameLocal=(ModuloBeanSwingJInternalFrame) ((ModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				moduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoModulo(moduloBeanSwingJInternalFrameLocal.getmodulo(),true);
				moduloBeanSwingJInternalFrameLocal.actualizarLista(moduloBeanSwingJInternalFrameLocal.modulo,this.modulosForeignKey);

				moduloBeanSwingJInternalFrameLocal.actualizarRelaciones(moduloBeanSwingJInternalFrameLocal.modulo);

				facturaproveedorLocal.setModulo(moduloBeanSwingJInternalFrameLocal.modulo);

				this.addItemDefectoCombosForeignKeyModulo();
				this.cargarCombosFrameModulosForeignKey("Formulario");
				this.setActualModuloForeignKey(moduloBeanSwingJInternalFrameLocal.modulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PlantillaFacturaDetalleFormJInternalFrame.class)) {
				PlantillaFacturaBeanSwingJInternalFrame plantillafacturaBeanSwingJInternalFrameLocal=(PlantillaFacturaBeanSwingJInternalFrame) ((PlantillaFacturaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				plantillafacturaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPlantillaFactura(plantillafacturaBeanSwingJInternalFrameLocal.getplantillafactura(),true);
				plantillafacturaBeanSwingJInternalFrameLocal.actualizarLista(plantillafacturaBeanSwingJInternalFrameLocal.plantillafactura,this.plantillafacturasForeignKey);

				plantillafacturaBeanSwingJInternalFrameLocal.actualizarRelaciones(plantillafacturaBeanSwingJInternalFrameLocal.plantillafactura);

				facturaproveedorLocal.setPlantillaFactura(plantillafacturaBeanSwingJInternalFrameLocal.plantillafactura);

				this.addItemDefectoCombosForeignKeyPlantillaFactura();
				this.cargarCombosFramePlantillaFacturasForeignKey("Formulario");
				this.setActualPlantillaFacturaForeignKey(plantillafacturaBeanSwingJInternalFrameLocal.plantillafactura.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoDocumentoDetalleFormJInternalFrame.class)) {
				TipoDocumentoBeanSwingJInternalFrame tipodocumentoBeanSwingJInternalFrameLocal=(TipoDocumentoBeanSwingJInternalFrame) ((TipoDocumentoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipodocumentoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoDocumento(tipodocumentoBeanSwingJInternalFrameLocal.gettipodocumento(),true);
				tipodocumentoBeanSwingJInternalFrameLocal.actualizarLista(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento,this.tipodocumentosForeignKey);

				tipodocumentoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento);

				facturaproveedorLocal.setTipoDocumento(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento);

				this.addItemDefectoCombosForeignKeyTipoDocumento();
				this.cargarCombosFrameTipoDocumentosForeignKey("Formulario");
				this.setActualTipoDocumentoForeignKey(tipodocumentoBeanSwingJInternalFrameLocal.tipodocumento.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FacturaDetalleFormJInternalFrame.class)) {
				FacturaBeanSwingJInternalFrame facturaBeanSwingJInternalFrameLocal=(FacturaBeanSwingJInternalFrame) ((FacturaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				facturaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFactura(facturaBeanSwingJInternalFrameLocal.getfactura(),true);
				facturaBeanSwingJInternalFrameLocal.actualizarLista(facturaBeanSwingJInternalFrameLocal.factura,this.facturasForeignKey);

				facturaBeanSwingJInternalFrameLocal.actualizarRelaciones(facturaBeanSwingJInternalFrameLocal.factura);

				facturaproveedorLocal.setFactura(facturaBeanSwingJInternalFrameLocal.factura);

				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey("Formulario");
				this.setActualFacturaForeignKey(facturaBeanSwingJInternalFrameLocal.factura.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TransaccionDetalleFormJInternalFrame.class)) {
				TransaccionBeanSwingJInternalFrame transaccionBeanSwingJInternalFrameLocal=(TransaccionBeanSwingJInternalFrame) ((TransaccionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				transaccionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTransaccion(transaccionBeanSwingJInternalFrameLocal.gettransaccion(),true);
				transaccionBeanSwingJInternalFrameLocal.actualizarLista(transaccionBeanSwingJInternalFrameLocal.transaccion,this.transaccionsForeignKey);

				transaccionBeanSwingJInternalFrameLocal.actualizarRelaciones(transaccionBeanSwingJInternalFrameLocal.transaccion);

				facturaproveedorLocal.setTransaccion(transaccionBeanSwingJInternalFrameLocal.transaccion);

				this.addItemDefectoCombosForeignKeyTransaccion();
				this.cargarCombosFrameTransaccionsForeignKey("Formulario");
				this.setActualTransaccionForeignKey(transaccionBeanSwingJInternalFrameLocal.transaccion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				facturaproveedorLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadosolicitaBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadosolicitaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadosolicitaBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadosolicitaBeanSwingJInternalFrameLocal.actualizarLista(empleadosolicitaBeanSwingJInternalFrameLocal.empleado,this.empleadosolicitasForeignKey);

				empleadosolicitaBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadosolicitaBeanSwingJInternalFrameLocal.empleado);

				facturaproveedorLocal.setEmpleadoSolicita(empleadosolicitaBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleadoSolicita();
				this.cargarCombosFrameEmpleadoSolicitasForeignKey("Formulario");
				this.setActualEmpleadoSolicitaForeignKey(empleadosolicitaBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MonedaDetalleFormJInternalFrame.class)) {
				MonedaBeanSwingJInternalFrame monedaBeanSwingJInternalFrameLocal=(MonedaBeanSwingJInternalFrame) ((MonedaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				monedaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMoneda(monedaBeanSwingJInternalFrameLocal.getmoneda(),true);
				monedaBeanSwingJInternalFrameLocal.actualizarLista(monedaBeanSwingJInternalFrameLocal.moneda,this.monedasForeignKey);

				monedaBeanSwingJInternalFrameLocal.actualizarRelaciones(monedaBeanSwingJInternalFrameLocal.moneda);

				facturaproveedorLocal.setMoneda(monedaBeanSwingJInternalFrameLocal.moneda);

				this.addItemDefectoCombosForeignKeyMoneda();
				this.cargarCombosFrameMonedasForeignKey("Formulario");
				this.setActualMonedaForeignKey(monedaBeanSwingJInternalFrameLocal.moneda.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadoBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadoBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadoBeanSwingJInternalFrameLocal.actualizarLista(empleadoBeanSwingJInternalFrameLocal.empleado,this.empleadosForeignKey);

				empleadoBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadoBeanSwingJInternalFrameLocal.empleado);

				facturaproveedorLocal.setEmpleado(empleadoBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey("Formulario");
				this.setActualEmpleadoForeignKey(empleadoBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionDetalleFormJInternalFrame.class)) {
				TipoRetencionBeanSwingJInternalFrame tiporetencionfuente1BeanSwingJInternalFrameLocal=(TipoRetencionBeanSwingJInternalFrame) ((TipoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencionfuente1BeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencion(tiporetencionfuente1BeanSwingJInternalFrameLocal.gettiporetencion(),true);
				tiporetencionfuente1BeanSwingJInternalFrameLocal.actualizarLista(tiporetencionfuente1BeanSwingJInternalFrameLocal.tiporetencion,this.tiporetencionfuente1sForeignKey);

				tiporetencionfuente1BeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencionfuente1BeanSwingJInternalFrameLocal.tiporetencion);

				facturaproveedorLocal.setTipoRetencionFuente1(tiporetencionfuente1BeanSwingJInternalFrameLocal.tiporetencion);

				this.addItemDefectoCombosForeignKeyTipoRetencionFuente1();
				this.cargarCombosFrameTipoRetencionFuente1sForeignKey("Formulario");
				this.setActualTipoRetencionFuente1ForeignKey(tiporetencionfuente1BeanSwingJInternalFrameLocal.tiporetencion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionDetalleFormJInternalFrame.class)) {
				TipoRetencionBeanSwingJInternalFrame tiporetencionfuente2BeanSwingJInternalFrameLocal=(TipoRetencionBeanSwingJInternalFrame) ((TipoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencionfuente2BeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencion(tiporetencionfuente2BeanSwingJInternalFrameLocal.gettiporetencion(),true);
				tiporetencionfuente2BeanSwingJInternalFrameLocal.actualizarLista(tiporetencionfuente2BeanSwingJInternalFrameLocal.tiporetencion,this.tiporetencionfuente2sForeignKey);

				tiporetencionfuente2BeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencionfuente2BeanSwingJInternalFrameLocal.tiporetencion);

				facturaproveedorLocal.setTipoRetencionFuente2(tiporetencionfuente2BeanSwingJInternalFrameLocal.tiporetencion);

				this.addItemDefectoCombosForeignKeyTipoRetencionFuente2();
				this.cargarCombosFrameTipoRetencionFuente2sForeignKey("Formulario");
				this.setActualTipoRetencionFuente2ForeignKey(tiporetencionfuente2BeanSwingJInternalFrameLocal.tiporetencion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionDetalleFormJInternalFrame.class)) {
				TipoRetencionBeanSwingJInternalFrame tiporetencioniva1BeanSwingJInternalFrameLocal=(TipoRetencionBeanSwingJInternalFrame) ((TipoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencioniva1BeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencion(tiporetencioniva1BeanSwingJInternalFrameLocal.gettiporetencion(),true);
				tiporetencioniva1BeanSwingJInternalFrameLocal.actualizarLista(tiporetencioniva1BeanSwingJInternalFrameLocal.tiporetencion,this.tiporetencioniva1sForeignKey);

				tiporetencioniva1BeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencioniva1BeanSwingJInternalFrameLocal.tiporetencion);

				facturaproveedorLocal.setTipoRetencionIva1(tiporetencioniva1BeanSwingJInternalFrameLocal.tiporetencion);

				this.addItemDefectoCombosForeignKeyTipoRetencionIva1();
				this.cargarCombosFrameTipoRetencionIva1sForeignKey("Formulario");
				this.setActualTipoRetencionIva1ForeignKey(tiporetencioniva1BeanSwingJInternalFrameLocal.tiporetencion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionDetalleFormJInternalFrame.class)) {
				TipoRetencionBeanSwingJInternalFrame tiporetencioniva2BeanSwingJInternalFrameLocal=(TipoRetencionBeanSwingJInternalFrame) ((TipoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencioniva2BeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencion(tiporetencioniva2BeanSwingJInternalFrameLocal.gettiporetencion(),true);
				tiporetencioniva2BeanSwingJInternalFrameLocal.actualizarLista(tiporetencioniva2BeanSwingJInternalFrameLocal.tiporetencion,this.tiporetencioniva2sForeignKey);

				tiporetencioniva2BeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencioniva2BeanSwingJInternalFrameLocal.tiporetencion);

				facturaproveedorLocal.setTipoRetencionIva2(tiporetencioniva2BeanSwingJInternalFrameLocal.tiporetencion);

				this.addItemDefectoCombosForeignKeyTipoRetencionIva2();
				this.cargarCombosFrameTipoRetencionIva2sForeignKey("Formulario");
				this.setActualTipoRetencionIva2ForeignKey(tiporetencioniva2BeanSwingJInternalFrameLocal.tiporetencion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoTributarioDetalleFormJInternalFrame.class)) {
				TipoTributarioBeanSwingJInternalFrame tipotributarioBeanSwingJInternalFrameLocal=(TipoTributarioBeanSwingJInternalFrame) ((TipoTributarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipotributarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoTributario(tipotributarioBeanSwingJInternalFrameLocal.gettipotributario(),true);
				tipotributarioBeanSwingJInternalFrameLocal.actualizarLista(tipotributarioBeanSwingJInternalFrameLocal.tipotributario,this.tipotributariosForeignKey);

				tipotributarioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipotributarioBeanSwingJInternalFrameLocal.tipotributario);

				facturaproveedorLocal.setTipoTributario(tipotributarioBeanSwingJInternalFrameLocal.tipotributario);

				this.addItemDefectoCombosForeignKeyTipoTributario();
				this.cargarCombosFrameTipoTributariosForeignKey("Formulario");
				this.setActualTipoTributarioForeignKey(tipotributarioBeanSwingJInternalFrameLocal.tipotributario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecreditofiscalbienesBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecreditofiscalbienesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecreditofiscalbienesBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecreditofiscalbienesBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecreditofiscalbienesBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecreditofiscalbienessForeignKey);

				cuentacontablecreditofiscalbienesBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecreditofiscalbienesBeanSwingJInternalFrameLocal.cuentacontable);

				facturaproveedorLocal.setCuentaContableCreditoFiscalBienes(cuentacontablecreditofiscalbienesBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalBienes();
				this.cargarCombosFrameCuentaContableCreditoFiscalBienessForeignKey("Formulario");
				this.setActualCuentaContableCreditoFiscalBienesForeignKey(cuentacontablecreditofiscalbienesBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ResponsableFondoDetalleFormJInternalFrame.class)) {
				ResponsableFondoBeanSwingJInternalFrame responsablefondoBeanSwingJInternalFrameLocal=(ResponsableFondoBeanSwingJInternalFrame) ((ResponsableFondoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				responsablefondoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoResponsableFondo(responsablefondoBeanSwingJInternalFrameLocal.getresponsablefondo(),true);
				responsablefondoBeanSwingJInternalFrameLocal.actualizarLista(responsablefondoBeanSwingJInternalFrameLocal.responsablefondo,this.responsablefondosForeignKey);

				responsablefondoBeanSwingJInternalFrameLocal.actualizarRelaciones(responsablefondoBeanSwingJInternalFrameLocal.responsablefondo);

				facturaproveedorLocal.setResponsableFondo(responsablefondoBeanSwingJInternalFrameLocal.responsablefondo);

				this.addItemDefectoCombosForeignKeyResponsableFondo();
				this.cargarCombosFrameResponsableFondosForeignKey("Formulario");
				this.setActualResponsableFondoForeignKey(responsablefondoBeanSwingJInternalFrameLocal.responsablefondo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecreditofiscalserviciossForeignKey);

				cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.cuentacontable);

				facturaproveedorLocal.setCuentaContableCreditoFiscalServicios(cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalServicios();
				this.cargarCombosFrameCuentaContableCreditoFiscalServiciossForeignKey("Formulario");
				this.setActualCuentaContableCreditoFiscalServiciosForeignKey(cuentacontablecreditofiscalserviciosBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablegastoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablegastoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablegastoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablegastoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablegastoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablegastosForeignKey);

				cuentacontablegastoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablegastoBeanSwingJInternalFrameLocal.cuentacontable);

				facturaproveedorLocal.setCuentaContableGasto(cuentacontablegastoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableGasto();
				this.cargarCombosFrameCuentaContableGastosForeignKey("Formulario");
				this.setActualCuentaContableGastoForeignKey(cuentacontablegastoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablegasto2BeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablegasto2BeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablegasto2BeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablegasto2BeanSwingJInternalFrameLocal.actualizarLista(cuentacontablegasto2BeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablegasto2sForeignKey);

				cuentacontablegasto2BeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablegasto2BeanSwingJInternalFrameLocal.cuentacontable);

				facturaproveedorLocal.setCuentaContableGasto2(cuentacontablegasto2BeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableGasto2();
				this.cargarCombosFrameCuentaContableGasto2sForeignKey("Formulario");
				this.setActualCuentaContableGasto2ForeignKey(cuentacontablegasto2BeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecreditofinBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecreditofinBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecreditofinBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecreditofinBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecreditofinBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecreditofinsForeignKey);

				cuentacontablecreditofinBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecreditofinBeanSwingJInternalFrameLocal.cuentacontable);

				facturaproveedorLocal.setCuentaContableCreditoFin(cuentacontablecreditofinBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCreditoFin();
				this.cargarCombosFrameCuentaContableCreditoFinsForeignKey("Formulario");
				this.setActualCuentaContableCreditoFinForeignKey(cuentacontablecreditofinBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecreditofin2BeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecreditofin2BeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecreditofin2BeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecreditofin2BeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecreditofin2BeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecreditofin2sForeignKey);

				cuentacontablecreditofin2BeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecreditofin2BeanSwingJInternalFrameLocal.cuentacontable);

				facturaproveedorLocal.setCuentaContableCreditoFin2(cuentacontablecreditofin2BeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCreditoFin2();
				this.cargarCombosFrameCuentaContableCreditoFin2sForeignKey("Formulario");
				this.setActualCuentaContableCreditoFin2ForeignKey(cuentacontablecreditofin2BeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecreditoBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecreditoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecreditoBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecreditoBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecreditosForeignKey);

				cuentacontablecreditoBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable);

				facturaproveedorLocal.setCuentaContableCredito(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableCredito();
				this.cargarCombosFrameCuentaContableCreditosForeignKey("Formulario");
				this.setActualCuentaContableCreditoForeignKey(cuentacontablecreditoBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoMovimientoDetalleFormJInternalFrame.class)) {
				TipoMovimientoBeanSwingJInternalFrame tipomovimientoBeanSwingJInternalFrameLocal=(TipoMovimientoBeanSwingJInternalFrame) ((TipoMovimientoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipomovimientoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoMovimiento(tipomovimientoBeanSwingJInternalFrameLocal.gettipomovimiento(),true);
				tipomovimientoBeanSwingJInternalFrameLocal.actualizarLista(tipomovimientoBeanSwingJInternalFrameLocal.tipomovimiento,this.tipomovimientosForeignKey);

				tipomovimientoBeanSwingJInternalFrameLocal.actualizarRelaciones(tipomovimientoBeanSwingJInternalFrameLocal.tipomovimiento);

				facturaproveedorLocal.setTipoMovimiento(tipomovimientoBeanSwingJInternalFrameLocal.tipomovimiento);

				this.addItemDefectoCombosForeignKeyTipoMovimiento();
				this.cargarCombosFrameTipoMovimientosForeignKey("Formulario");
				this.setActualTipoMovimientoForeignKey(tipomovimientoBeanSwingJInternalFrameLocal.tipomovimiento.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoMovimientoModuloDetalleFormJInternalFrame.class)) {
				TipoMovimientoModuloBeanSwingJInternalFrame tipomovimientomoduloBeanSwingJInternalFrameLocal=(TipoMovimientoModuloBeanSwingJInternalFrame) ((TipoMovimientoModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipomovimientomoduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoMovimientoModulo(tipomovimientomoduloBeanSwingJInternalFrameLocal.gettipomovimientomodulo(),true);
				tipomovimientomoduloBeanSwingJInternalFrameLocal.actualizarLista(tipomovimientomoduloBeanSwingJInternalFrameLocal.tipomovimientomodulo,this.tipomovimientomodulosForeignKey);

				tipomovimientomoduloBeanSwingJInternalFrameLocal.actualizarRelaciones(tipomovimientomoduloBeanSwingJInternalFrameLocal.tipomovimientomodulo);

				facturaproveedorLocal.setTipoMovimientoModulo(tipomovimientomoduloBeanSwingJInternalFrameLocal.tipomovimientomodulo);

				this.addItemDefectoCombosForeignKeyTipoMovimientoModulo();
				this.cargarCombosFrameTipoMovimientoModulosForeignKey("Formulario");
				this.setActualTipoMovimientoModuloForeignKey(tipomovimientomoduloBeanSwingJInternalFrameLocal.tipomovimientomodulo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoTransaccionModuloDetalleFormJInternalFrame.class)) {
				TipoTransaccionModuloBeanSwingJInternalFrame tipotransaccionmoduloBeanSwingJInternalFrameLocal=(TipoTransaccionModuloBeanSwingJInternalFrame) ((TipoTransaccionModuloDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipotransaccionmoduloBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoTransaccionModulo(tipotransaccionmoduloBeanSwingJInternalFrameLocal.gettipotransaccionmodulo(),true);
				tipotransaccionmoduloBeanSwingJInternalFrameLocal.actualizarLista(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo,this.tipotransaccionmodulosForeignKey);

				tipotransaccionmoduloBeanSwingJInternalFrameLocal.actualizarRelaciones(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo);

				facturaproveedorLocal.setTipoTransaccionModulo(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo);

				this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
				this.cargarCombosFrameTipoTransaccionModulosForeignKey("Formulario");
				this.setActualTipoTransaccionModuloForeignKey(tipotransaccionmoduloBeanSwingJInternalFrameLocal.tipotransaccionmodulo.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarFacturaProveedorActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = facturaproveedorValidator.getInvalidValues(this.facturaproveedor);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(FacturaProveedor facturaproveedor,List<FacturaProveedor> facturaproveedors) throws Exception {
		try	{		
			FacturaProveedorConstantesFunciones.actualizarLista(facturaproveedor,facturaproveedors,this.facturaproveedorSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(FacturaProveedor facturaproveedor,List<FacturaProveedor> facturaproveedors) throws Exception {
		try	{			
			FacturaProveedorConstantesFunciones.actualizarSelectedLista(facturaproveedor,facturaproveedors);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<FacturaProveedor> facturaproveedorsLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				facturaproveedorsLocal=this.facturaproveedorLogic.getFacturaProveedors();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				facturaproveedorsLocal=this.facturaproveedors;
			}
			//ARCHITECTURE
		
			for(FacturaProveedor facturaproveedorLocal:facturaproveedorsLocal) {
				if(this.permiteMantenimiento(facturaproveedorLocal) && facturaproveedorLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+FacturaProveedorConstantesFunciones.getFacturaProveedorLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_empresaFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_sucursalFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_ejercicioFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDPERIODO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_periodoFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_anioFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_mesFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_moduloFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDPLANTILLAFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_plantilla_facturaFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDTIPODOCUMENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_documentoFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.PLAZO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelplazoFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_facturaFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.NUMEROFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_facturaFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDTRANSACCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_transaccionFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.FECHAEMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelfecha_emisionFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_clienteFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.RUC)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelrucFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDEMPLEADOSOLICITA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_empleado_solicitaFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.FECHAVENCE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelfecha_venceFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDMONEDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_monedaFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDEMPLEADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_empleadoFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.CONACTIVOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcon_activosFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.CONRISE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcon_riseFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.CONSITIOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcon_sitiosFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.DETALLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeldetalleFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.VALORBIENES12)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelvalor_bienes12FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.VALORSERVICIOS12)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelvalor_servicios12FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.TOTALVALOR12)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotal_valor12FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.VALORBIENES0)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelvalor_bienes0FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.VALORSERVICIOS0)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelvalor_servicios0FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.TOTALVALOR0)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotal_valor0FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.BIENESICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelbienes_iceFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.SERVICIOSICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelservicios_iceFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.TOTALICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotal_iceFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.BIENESIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelbienes_ivaFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.SERVICIOSIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelservicios_ivaFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.TOTALIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotal_ivaFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IVAPORCENTAJE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeliva_porcentajeFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.TOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotalFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.CONMONTOOBJETOIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcon_monto_objeto_ivaFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.NUMERORETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_retencionFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.NUMEROSERIE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_serieFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.NUMEROAUTORIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_autorizacionFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.FECHAVALIDEZ)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelfecha_validezFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDTIPORETENCIONFUENTE1)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_retencion_fuente1FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.RETFUENTE1PORCENTAJE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente1_porcentajeFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.RETFUENTE1BASE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente1_baseFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.RETFUENTE1RETENIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente1_retenidoFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDTIPORETENCIONFUENTE2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_retencion_fuente2FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.RETFUENTE2PORCENTAJE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente2_porcentajeFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.RETFUENTE2BASE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente2_baseFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.RETFUENTE2RETENIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente2_retenidoFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDTIPORETENCIONIVA1)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_retencion_iva1FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.RETIVABIENPORCENTAJE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_bien_porcentajeFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.RETIVABIENBASE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_bien_baseFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.RETIVABIENRETENIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_bien_retenidoFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDTIPORETENCIONIVA2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_retencion_iva2FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.RETIVASERVICIOPORCENTAJE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_servicio_porcentajeFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.RETIVASERVICIOBASE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_servicio_baseFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.RETIVASERVICIORETENIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_servicio_retenidoFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.ANEXONUMEROAUTORIZACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_numero_autorizacionFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.ANEXONUMESOSERIE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_numeso_serieFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.ANEXOFECHAVALIDEZ)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_fecha_validezFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDTIPOTRIBUTARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_tributarioFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.ANEXOFACTURAINICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_factura_inicioFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.ANEXOFACTURAFIN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_factura_finFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDCUENTACONTABLECREDITOFISCALBIENES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_credito_fiscal_bienesFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDRESPONSABLEFONDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_responsable_fondoFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDCUENTACONTABLECREDITOFISCALSERVICIOS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.SECUENCIAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelsecuencialFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDCUENTACONTABLEGASTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_gastoFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.GASTOVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelgasto_valorFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDCUENTACONTABLEGASTO2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_gasto2FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.GASTOVALOR2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelgasto_valor2FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.GASTONOMBRE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelgasto_nombreFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.GASTONOMBRE2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelgasto_nombre2FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDCUENTACONTABLECREDITOFIN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_credito_finFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDCUENTACONTABLECREDITOFIN2)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_credito_fin2FacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDCUENTACONTABLECREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_creditoFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeldescripcionFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDTIPOMOVIMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_movimientoFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDTIPOMOVIMIENTOMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_movimiento_moduloFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.IDTIPOTRANSACCIONMODULO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_transaccion_moduloFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.NUMEROMAYOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_mayorFacturaProveedor,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaProveedorConstantesFunciones.CODIGOASIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcodigo_asientoFacturaProveedor,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_empresaFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_sucursalFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_ejercicioFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_periodoFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_anioFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_mesFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_moduloFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_plantilla_facturaFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_documentoFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelplazoFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_facturaFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_facturaFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_transaccionFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelfecha_emisionFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_clienteFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelrucFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_empleado_solicitaFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelfecha_venceFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_monedaFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_empleadoFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcon_activosFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcon_riseFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcon_sitiosFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabeldetalleFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelvalor_bienes12FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelvalor_servicios12FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotal_valor12FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelvalor_bienes0FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelvalor_servicios0FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotal_valor0FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelbienes_iceFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelservicios_iceFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotal_iceFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelbienes_ivaFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelservicios_ivaFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotal_ivaFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabeliva_porcentajeFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotalFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcon_monto_objeto_ivaFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_retencionFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_serieFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_autorizacionFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelfecha_validezFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_retencion_fuente1FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente1_porcentajeFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente1_baseFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente1_retenidoFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_retencion_fuente2FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente2_porcentajeFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente2_baseFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente2_retenidoFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_retencion_iva1FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_bien_porcentajeFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_bien_baseFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_bien_retenidoFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_retencion_iva2FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_servicio_porcentajeFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_servicio_baseFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_servicio_retenidoFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_numero_autorizacionFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_numeso_serieFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_fecha_validezFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_tributarioFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_factura_inicioFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_factura_finFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_credito_fiscal_bienesFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_responsable_fondoFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelsecuencialFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_gastoFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelgasto_valorFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_gasto2FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelgasto_valor2FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelgasto_nombreFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelgasto_nombre2FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_credito_finFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_credito_fin2FacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_cuenta_contable_creditoFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabeldescripcionFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_movimientoFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_movimiento_moduloFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelid_tipo_transaccion_moduloFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_mayorFacturaProveedor,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcodigo_asientoFacturaProveedor,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("DetalleFacturaProveedor")) {
			if(this.facturaproveedor==null) {
				this.facturaproveedor= new FacturaProveedor();
			}

			if(this.facturaproveedorSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoFacturaProveedor
				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.getdetallefacturaproveedor().setFacturaProveedor(this.facturaproveedor);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoFacturaProveedor--;	
		
		
		this.facturaproveedorAux=new FacturaProveedor();
		
		this.facturaproveedorAux.setId(this.iIdNuevoFacturaProveedor);
		this.facturaproveedorAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.facturaproveedorLogic.getFacturaProveedors().add(this.facturaproveedorAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.facturaproveedors.add(this.facturaproveedorAux);
		}
		//ARCHITECTURE
		
		this.facturaproveedor=this.facturaproveedorAux;
		
		if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioFacturaProveedor(this.facturaproveedor);
			this.setVariablesObjetoActualToFormularioForeignKeyFacturaProveedor(this.facturaproveedor);
		}
				
		//this.setDefaultControlesFacturaProveedor();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyFacturaProveedor();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyFacturaProveedor();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyFacturaProveedor();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualFacturaProveedor(this.facturaproveedorBean,this.facturaproveedor,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(FacturaProveedorConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.facturaproveedorSessionBean.getConGuardarRelaciones()) {
			classes=FacturaProveedorConstantesFunciones.getClassesRelationshipsOfFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.facturaproveedorReturnGeneral=facturaproveedorLogic.procesarEventosFacturaProveedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.facturaproveedorLogic.getFacturaProveedors(),this.facturaproveedor,this.facturaproveedorParameterGeneral,this.isEsNuevoFacturaProveedor,classes);//this.facturaproveedorLogic.getFacturaProveedor()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanFacturaProveedor(this.facturaproveedorReturnGeneral,this.facturaproveedorBean,false);
		
		if(this.facturaproveedorReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyFacturaProveedor(this.facturaproveedorReturnGeneral.getFacturaProveedor());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioFacturaProveedor(this.facturaproveedorReturnGeneral.getFacturaProveedor());
		}
		
		if(this.facturaproveedorReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioFacturaProveedor(this.facturaproveedorReturnGeneral.getFacturaProveedor(),classes);//this.facturaproveedorBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyFacturaProveedor();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyFacturaProveedor();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			FacturaProveedorBeanSwingJInternalFrameAdditional.RecargarFormFacturaProveedor(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingFacturaProveedor(false);
						
			if(facturaproveedorSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorSessionBean.getEsGuardarRelacionado() && DetalleFacturaProveedorJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleFacturaProveedorActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualFacturaProveedor();
			}
			
			this.actualizarVisualTableDatosFacturaProveedor();
			
			this.jTableDatosFacturaProveedor.setRowSelectionInterval(this.getIndiceNuevoFacturaProveedor(), this.getIndiceNuevoFacturaProveedor());
			
			this.seleccionarFilaTablaFacturaProveedorActual();
						
			this.actualizarEstadoCeldasBotonesFacturaProveedor("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesFacturaProveedor(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldplazoFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarplazoFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_facturaFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarnumero_facturaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_emisionFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarfecha_emisionFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldrucFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarrucFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_venceFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarfecha_venceFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_activosFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarcon_activosFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_riseFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarcon_riseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_sitiosFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarcon_sitiosFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextAreadetalleFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activardetalleFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes12FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarvalor_bienes12FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios12FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarvalor_servicios12FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor12FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activartotal_valor12FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes0FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarvalor_bienes0FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios0FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarvalor_servicios0FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor0FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activartotal_valor0FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_iceFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarbienes_iceFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_iceFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarservicios_iceFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_iceFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activartotal_iceFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_ivaFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarbienes_ivaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_ivaFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarservicios_ivaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_ivaFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activartotal_ivaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldiva_porcentajeFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activariva_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotalFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activartotalFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_monto_objeto_ivaFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarcon_monto_objeto_ivaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_retencionFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarnumero_retencionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_serieFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarnumero_serieFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_autorizacionFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarnumero_autorizacionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_validezFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarfecha_validezFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_porcentajeFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarret_fuente1_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_baseFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarret_fuente1_baseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_retenidoFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarret_fuente1_retenidoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_porcentajeFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarret_fuente2_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_baseFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarret_fuente2_baseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_retenidoFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarret_fuente2_retenidoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_porcentajeFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarret_iva_bien_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_baseFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarret_iva_bien_baseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_retenidoFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarret_iva_bien_retenidoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_porcentajeFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarret_iva_servicio_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_baseFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarret_iva_servicio_baseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_retenidoFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarret_iva_servicio_retenidoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numero_autorizacionFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activaranexo_numero_autorizacionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numeso_serieFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activaranexo_numeso_serieFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jDateChooseranexo_fecha_validezFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activaranexo_fecha_validezFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_inicioFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activaranexo_factura_inicioFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_finFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activaranexo_factura_finFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldsecuencialFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarsecuencialFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valorFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activargasto_valorFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valor2FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activargasto_valor2FacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_nombreFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activargasto_nombreFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_nombre2FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activargasto_nombre2FacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jTextAreadescripcionFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activardescripcionFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_mayorFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarnumero_mayorFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldcodigo_asientoFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarcodigo_asientoFacturaProveedor);	
		//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_empresaFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_sucursalFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_ejercicioFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_periodoFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_anioFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_mesFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_moduloFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_plantilla_facturaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_tipo_documentoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_facturaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_transaccionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_clienteFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_empleado_solicitaFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_monedaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_empleadoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_fuente1FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_fuente2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_iva1FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_iva2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_tipo_tributarioFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_responsable_fondoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_gastoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_gasto2FacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_finFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_fin2FacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_creditoFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_tipo_movimientoFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_tipo_movimiento_moduloFacturaProveedor);//
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.setEnabled(isHabilitar && this.facturaproveedorConstantesFunciones.activarid_tipo_transaccion_moduloFacturaProveedor);
	};
	
	public void setDefaultControlesFacturaProveedor() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoFacturaProveedor(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.facturaproveedorSessionBean.setConGuardarRelaciones(true);			
			this.facturaproveedorSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormFacturaProveedor.jTabbedPaneRelacionesFacturaProveedor.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.facturaproveedorSessionBean.setConGuardarRelaciones(false);			
			this.facturaproveedorSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormFacturaProveedor.jTabbedPaneRelacionesFacturaProveedor.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoFacturaProveedor() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaProveedor facturaproveedorAux:this.facturaproveedorLogic.getFacturaProveedors()) {
				if(facturaproveedorAux.getId().equals(this.iIdNuevoFacturaProveedor)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaProveedor facturaproveedorAux:this.facturaproveedors) {
				if(facturaproveedorAux.getId().equals(this.iIdNuevoFacturaProveedor)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualFacturaProveedor(FacturaProveedor facturaproveedor,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaProveedor facturaproveedorAux:this.facturaproveedorLogic.getFacturaProveedors()) {
				if(facturaproveedorAux.getId().equals(facturaproveedor.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaProveedor facturaproveedorAux:this.facturaproveedors) {
				if(facturaproveedorAux.getId().equals(facturaproveedor.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalFacturaProveedor(FacturaProveedor facturaproveedorOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaProveedor facturaproveedorAux:this.facturaproveedorLogic.getFacturaProveedors()) {
				if(facturaproveedorAux.getFacturaProveedorOriginal().getId().equals(facturaproveedorOriginal.getId())) {
					existe=true;
					facturaproveedorOriginal.setId(facturaproveedorAux.getId());
					facturaproveedorOriginal.setVersionRow(facturaproveedorAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaProveedor facturaproveedorAux:this.facturaproveedors) {
				if(facturaproveedorAux.getFacturaProveedorOriginal().getId().equals(facturaproveedorOriginal.getId())) {
					existe=true;
					facturaproveedorOriginal.setId(facturaproveedorAux.getId());
					facturaproveedorOriginal.setVersionRow(facturaproveedorAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosFacturaProveedor(Boolean esParaCancelar) throws Exception {
		facturaproveedorsAux=new ArrayList<FacturaProveedor>();
		facturaproveedorAux=new FacturaProveedor();
		
		if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(FacturaProveedor facturaproveedorAux:this.facturaproveedorLogic.getFacturaProveedors()) {
					if(facturaproveedorAux.getId()<0) {
						facturaproveedorsAux.add(facturaproveedorAux);
					}		
				}
				this.iIdNuevoFacturaProveedor=0L;
				this.facturaproveedorLogic.getFacturaProveedors().removeAll(facturaproveedorsAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(FacturaProveedor facturaproveedorAux:this.facturaproveedors) {
					if(facturaproveedorAux.getId()<0) {
						facturaproveedorsAux.add(facturaproveedorAux);
					}		
				}
				this.iIdNuevoFacturaProveedor=0L;
				this.facturaproveedors.removeAll(facturaproveedorsAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoFacturaProveedor 
					&& this.facturaproveedorLogic.getFacturaProveedors().size()>0
					) {
					facturaproveedorAux=this.facturaproveedorLogic.getFacturaProveedors().get(this.facturaproveedorLogic.getFacturaProveedors().size() - 1);
				
					if(facturaproveedorAux.getId()<0) {
						this.facturaproveedorLogic.getFacturaProveedors().remove(facturaproveedorAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoFacturaProveedor && this.facturaproveedors.size()>0) {
					facturaproveedorAux=this.facturaproveedors.get(this.facturaproveedors.size() - 1);
				
					if(facturaproveedorAux.getId()<0) {
						this.facturaproveedors.remove(facturaproveedorAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoFacturaProveedor(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(facturaproveedor.getId()<0) {
				this.facturaproveedorLogic.getFacturaProveedors().remove(this.facturaproveedor);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(facturaproveedor.getId()<0) {
				this.facturaproveedors.remove(this.facturaproveedor);
			}
		}			
	}
	
	public void setEstadosInicialesFacturaProveedor(List<FacturaProveedor> facturaproveedorsAux) throws Exception {
		FacturaProveedorConstantesFunciones.setEstadosInicialesFacturaProveedor(facturaproveedorsAux);
	}
	
	public void setEstadosInicialesFacturaProveedor(FacturaProveedor facturaproveedorAux) throws Exception {
		FacturaProveedorConstantesFunciones.setEstadosInicialesFacturaProveedor(facturaproveedorAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarFacturaProveedorActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesFacturaProveedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarFacturaProveedorActual()) {
				if(!this.isEsNuevoFacturaProveedor) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesFacturaProveedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoFacturaProveedor=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarFacturaProveedorActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Factura Proveedor ?", "MANTENIMIENTO DE Factura Proveedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesFacturaProveedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(FacturaProveedor facturaproveedor) throws Exception {
		FacturaProveedorConstantesFunciones.seleccionarAsignar(this.facturaproveedor,facturaproveedor);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarFacturaProveedor=this.isPermisoActualizarOriginalFacturaProveedor;
			
			
			this.seleccionarAsignar(facturaproveedor);
			
			

			idPlantillaFacturaActual=facturaproveedor.getid_plantilla_factura();
			this.seleccionarPlantillaFacturaActual();

			idFacturaActual=facturaproveedor.getid_factura();
			this.seleccionarFacturaActual();

			idClienteActual=facturaproveedor.getid_cliente();
			this.seleccionarClienteActual();

			idEmpleadoSolicitaActual=facturaproveedor.getid_empleado_solicita();
			this.seleccionarEmpleadoSolicitaActual();

			idEmpleadoActual=facturaproveedor.getid_empleado();
			this.seleccionarEmpleadoActual();

			idCuentaContableGastoActual=facturaproveedor.getid_cuenta_contable_gasto();
			this.seleccionarCuentaContableGastoActual();

			idCuentaContableCreditoFinActual=facturaproveedor.getid_cuenta_contable_credito_fin();
			this.seleccionarCuentaContableCreditoFinActual();

			idCuentaContableCreditoFin2Actual=facturaproveedor.getid_cuenta_contable_credito_fin2();
			this.seleccionarCuentaContableCreditoFin2Actual();

			idCuentaContableCreditoActual=facturaproveedor.getid_cuenta_contable_credito();
			this.seleccionarCuentaContableCreditoActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			FacturaProveedorConstantesFunciones.quitarEspaciosFacturaProveedor(this.facturaproveedor,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesFacturaProveedor("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.facturaproveedorSessionBean.setsFuncionBusquedaRapida(this.facturaproveedorSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarPlantillaFacturaActual() throws Exception {
		try	{
			PlantillaFactura plantillafacturaAux=new PlantillaFactura();

			if(this.idPlantillaFacturaActual != null && this.idPlantillaFacturaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					plantillafacturaLogic.getEntityWithConnection(this.idPlantillaFacturaActual);
					plantillafacturaAux= plantillafacturaLogic.getPlantillaFactura();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				plantillafacturasForeignKey=new ArrayList<PlantillaFactura>();
				plantillafacturasForeignKey.add(plantillafacturaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarFacturaActual() throws Exception {
		try	{
			Factura facturaAux=new Factura();

			if(this.idFacturaActual != null && this.idFacturaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaLogic.getEntityWithConnection(this.idFacturaActual);
					facturaAux= facturaLogic.getFactura();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				facturasForeignKey=new ArrayList<Factura>();
				facturasForeignKey.add(facturaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarEmpleadoSolicitaActual() throws Exception {
		try	{
			Empleado empleadosolicitaAux=new Empleado();

			if(this.idEmpleadoSolicitaActual != null && this.idEmpleadoSolicitaActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadosolicitaLogic.getEntityWithConnection(this.idEmpleadoSolicitaActual);
					empleadosolicitaAux= empleadosolicitaLogic.getEmpleado();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				empleadosolicitasForeignKey=new ArrayList<Empleado>();
				empleadosolicitasForeignKey.add(empleadosolicitaAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarEmpleadoActual() throws Exception {
		try	{
			Empleado empleadoAux=new Empleado();

			if(this.idEmpleadoActual != null && this.idEmpleadoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(this.idEmpleadoActual);
					empleadoAux= empleadoLogic.getEmpleado();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				empleadosForeignKey=new ArrayList<Empleado>();
				empleadosForeignKey.add(empleadoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableGastoActual() throws Exception {
		try	{
			CuentaContable cuentacontablegastoAux=new CuentaContable();

			if(this.idCuentaContableGastoActual != null && this.idCuentaContableGastoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablegastoLogic.getEntityWithConnection(this.idCuentaContableGastoActual);
					cuentacontablegastoAux= cuentacontablegastoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablegastosForeignKey=new ArrayList<CuentaContable>();
				cuentacontablegastosForeignKey.add(cuentacontablegastoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCreditoFinActual() throws Exception {
		try	{
			CuentaContable cuentacontablecreditofinAux=new CuentaContable();

			if(this.idCuentaContableCreditoFinActual != null && this.idCuentaContableCreditoFinActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecreditofinLogic.getEntityWithConnection(this.idCuentaContableCreditoFinActual);
					cuentacontablecreditofinAux= cuentacontablecreditofinLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecreditofinsForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecreditofinsForeignKey.add(cuentacontablecreditofinAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCreditoFin2Actual() throws Exception {
		try	{
			CuentaContable cuentacontablecreditofin2Aux=new CuentaContable();

			if(this.idCuentaContableCreditoFin2Actual != null && this.idCuentaContableCreditoFin2Actual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecreditofin2Logic.getEntityWithConnection(this.idCuentaContableCreditoFin2Actual);
					cuentacontablecreditofin2Aux= cuentacontablecreditofin2Logic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecreditofin2sForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecreditofin2sForeignKey.add(cuentacontablecreditofin2Aux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarCuentaContableCreditoActual() throws Exception {
		try	{
			CuentaContable cuentacontablecreditoAux=new CuentaContable();

			if(this.idCuentaContableCreditoActual != null && this.idCuentaContableCreditoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontablecreditoLogic.getEntityWithConnection(this.idCuentaContableCreditoActual);
					cuentacontablecreditoAux= cuentacontablecreditoLogic.getCuentaContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();
				cuentacontablecreditosForeignKey.add(cuentacontablecreditoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoFacturaProveedor) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosFacturaProveedor(esParaCancelar);				
				this.cancelarNuevoFacturaProveedor(esParaCancelar);								
			}
			
			this.facturaproveedor=new FacturaProveedor();
			
			this.inicializarFacturaProveedor();
			
			this.actualizarEstadoCeldasBotonesFacturaProveedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarFacturaProveedor() throws Exception {
		try {
			FacturaProveedorConstantesFunciones.inicializarFacturaProveedor(this.facturaproveedor);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.facturaproveedorLogic.getFacturaProveedors().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteFacturaProveedors(String sAccionBusqueda,List<FacturaProveedor> facturaproveedorsParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="FacturaProveedor"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="FacturaProveedorMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("FacturaProveedorMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="FacturaProveedor"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Factura Proveedors");		
		parameters.put("busquedapor", FacturaProveedorConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(DetalleFacturaProveedor.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					FacturaProveedorLogic facturaproveedorLogicAuxiliar=new FacturaProveedorLogic();
					facturaproveedorLogicAuxiliar.setDatosCliente(facturaproveedorLogic.getDatosCliente());				
					facturaproveedorLogicAuxiliar.setFacturaProveedors(facturaproveedorsParaReportes);
					
					facturaproveedorLogicAuxiliar.cargarRelacionesLoteForeignKeyFacturaProveedorWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					facturaproveedorsParaReportes=facturaproveedorLogicAuxiliar.getFacturaProveedors();
					
					//facturaproveedorLogic.getNewConnexionToDeep();
					
					//for (FacturaProveedor facturaproveedor:facturaproveedorsParaReportes) {
					//	facturaproveedorLogic.deepLoad(facturaproveedor, false, DeepLoadType.INCLUDE, classes);
					//}						
					//facturaproveedorLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//facturaproveedorLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileDetalleFacturaProveedor = AuxiliarReportes.class.getResourceAsStream("DetalleFacturaProveedorDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detallefacturaproveedor", reportFileDetalleFacturaProveedor);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceFacturaProveedor=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			FacturaProveedorConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			FacturaProveedorConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceFacturaProveedor=new JRBeanArrayDataSource(FacturaProveedorJInternalFrame.TraerFacturaProveedorBeans(facturaproveedorsParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceFacturaProveedor);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+FacturaProveedorConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+FacturaProveedorConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(FacturaProveedorBean.TraerFacturaProveedorBeans(facturaproveedorsParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteFacturaProveedors(sAccionBusqueda,sTipoArchivoReporte,facturaproveedorsParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalFacturaProveedors(sAccionBusqueda,sTipoArchivoReporte,facturaproveedorsParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoFacturaProveedorActionPerformed(null);
					//this.generarExcelReporteFacturaProveedors(sAccionBusqueda,sTipoArchivoReporte,facturaproveedorsParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalFacturaProveedors(sAccionBusqueda,sTipoArchivoReporte,facturaproveedorsParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesFacturaProveedors(sAccionBusqueda,sTipoArchivoReporte,facturaproveedorsParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesFacturaProveedors(sAccionBusqueda,sTipoArchivoReporte,facturaproveedorsParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteFacturaProveedors(String sAccionBusqueda,String sTipoArchivoReporte,List<FacturaProveedor> facturaproveedorsParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedor";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("FacturaProveedors");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderFacturaProveedor("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(FacturaProveedor facturaproveedor : facturaproveedorsParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			FacturaProveedorConstantesFunciones.generarExcelReporteDataFacturaProveedor("NORMAL",row,workbook,facturaproveedor,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderFacturaProveedor(String sTipo,Row row,Workbook workbook) {
		
		FacturaProveedorConstantesFunciones.generarExcelReporteHeaderFacturaProveedor(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalFacturaProveedors(String sAccionBusqueda,String sTipoArchivoReporte,List<FacturaProveedor> facturaproveedorsParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedor_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("FacturaProveedors");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(FacturaProveedor facturaproveedor : facturaproveedorsParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(FacturaProveedorConstantesFunciones.getFacturaProveedorDescripcion(facturaproveedor));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDPERIODO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDPERIODO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getperiodo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getplantillafactura_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettipodocumento_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_PLAZO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_PLAZO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getplazo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getfactura_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getnumero_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettransaccion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getfecha_emision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_RUC))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RUC);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getruc());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getempleadosolicita_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getfecha_vence());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDMONEDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDMONEDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getmoneda_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getempleado_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(facturaproveedor.getcon_activos()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_CONRISE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CONRISE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(facturaproveedor.getcon_rise()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_CONSITIOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CONSITIOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(facturaproveedor.getcon_sitios()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_DETALLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_DETALLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getdetalle());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getvalor_bienes12());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getvalor_servicios12());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettotal_valor12());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getvalor_bienes0());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getvalor_servicios0());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettotal_valor0());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_BIENESICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_BIENESICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getbienes_ice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getservicios_ice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_TOTALICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTALICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettotal_ice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_BIENESIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_BIENESIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getbienes_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getservicios_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_TOTALIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTALIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettotal_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getiva_porcentaje());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_TOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettotal());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(facturaproveedor.getcon_monto_objeto_iva()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getnumero_retencion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getnumero_serie());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getnumero_autorizacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getfecha_validez());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettiporetencionfuente1_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getret_fuente1_porcentaje());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getret_fuente1_base());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getret_fuente1_retenido());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettiporetencionfuente2_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getret_fuente2_porcentaje());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getret_fuente2_base());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getret_fuente2_retenido());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettiporetencioniva1_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getret_iva_bien_porcentaje());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getret_iva_bien_base());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getret_iva_bien_retenido());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettiporetencioniva2_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getret_iva_servicio_porcentaje());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getret_iva_servicio_base());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getret_iva_servicio_retenido());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getanexo_numero_autorizacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getanexo_numeso_serie());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getanexo_fecha_validez());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettipotributario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getanexo_factura_inicio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getanexo_factura_fin());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getcuentacontablecreditofiscalbienes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getresponsablefondo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getcuentacontablecreditofiscalservicios_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getsecuencial());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getcuentacontablegasto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getgasto_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getcuentacontablegasto2_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getgasto_valor2());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getgasto_nombre());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getgasto_nombre2());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getcuentacontablecreditofin_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN2))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN2);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getcuentacontablecreditofin2_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getcuentacontablecredito_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettipomovimiento_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettipomovimientomodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.gettipotransaccionmodulo_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_NUMEROMAYOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMEROMAYOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getnumero_mayor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaProveedorConstantesFunciones.LABEL_CODIGOASIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CODIGOASIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturaproveedor.getcodigo_asiento());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesFacturaProveedors(String sAccionBusqueda,String sTipoArchivoReporte,List<FacturaProveedor> facturaproveedorsParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<FacturaProveedor> facturaproveedorsRespaldo=null;
		
		classes=FacturaProveedorConstantesFunciones.getClassesRelationshipsOfFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.facturaproveedorLogic.setDatosCliente(this.datosCliente);
		this.facturaproveedorLogic.setDatosDeep(this.datosDeep);
		this.facturaproveedorLogic.setIsConDeep(true);
		
		facturaproveedorsRespaldo=this.facturaproveedorLogic.getFacturaProveedors();
		
		this.facturaproveedorLogic.setFacturaProveedors(facturaproveedorsParaReportes);	
		this.facturaproveedorLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		facturaproveedorsParaReportes=this.facturaproveedorLogic.getFacturaProveedors();
		this.facturaproveedorLogic.setFacturaProveedors(facturaproveedorsRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedor_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("FacturaProveedors");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderFacturaProveedor("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(FacturaProveedor facturaproveedor : facturaproveedorsParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderFacturaProveedor("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			FacturaProveedorConstantesFunciones.generarExcelReporteDataFacturaProveedor("NORMAL",row,workbook,facturaproveedor,cellStyleDataAux);
		
			
			


				//DetalleFacturaProveedor
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetalleFacturaProveedorConstantesFunciones.SCLASSWEBTITULO))) {

				if(facturaproveedor.getDetalleFacturaProveedors()!=null && facturaproveedor.getDetalleFacturaProveedors().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetalleFacturaProveedorConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetalleFacturaProveedorConstantesFunciones.generarExcelReporteHeaderDetalleFacturaProveedor("RELACIONADO",row,workbook);
				}

				if(facturaproveedor.getDetalleFacturaProveedors()!=null) {
					i2=0;
					for(DetalleFacturaProveedor detallefacturaproveedor : facturaproveedor.getDetalleFacturaProveedors()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetalleFacturaProveedorConstantesFunciones.generarExcelReporteDataDetalleFacturaProveedor("RELACIONADO",row,workbook,detallefacturaproveedor,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(FacturaProveedorConstantesFunciones.getFacturaProveedorDescripcion(facturaproveedor));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoFacturaProveedor.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaProveedor.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessFacturaProveedor() throws Exception {		
		this.startProcessFacturaProveedor(true);
	}
	
	public void startProcessFacturaProveedor(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasFacturaProveedor ,this.jPanelParametrosReportesFacturaProveedor, this.jScrollPanelDatosFacturaProveedor,this.jPanelPaginacionFacturaProveedor, this.jScrollPanelDatosEdicionFacturaProveedor, this.jPanelAccionesFacturaProveedor,this.jPanelAccionesFormularioFacturaProveedor,this.jmenuBarFacturaProveedor,this.jmenuBarDetalleFacturaProveedor,this.jTtoolBarFacturaProveedor,this.jTtoolBarDetalleFacturaProveedor);		
		
		final JTabbedPane jTabbedPaneBusquedasFacturaProveedor=this.jTabbedPaneBusquedasFacturaProveedor; 
		
		final JPanel jPanelParametrosReportesFacturaProveedor=this.jPanelParametrosReportesFacturaProveedor;
		//final JScrollPane jScrollPanelDatosFacturaProveedor=this.jScrollPanelDatosFacturaProveedor;
		final JTable jTableDatosFacturaProveedor=this.jTableDatosFacturaProveedor;		
		final JPanel jPanelPaginacionFacturaProveedor=this.jPanelPaginacionFacturaProveedor;
		//final JScrollPane jScrollPanelDatosEdicionFacturaProveedor=this.jScrollPanelDatosEdicionFacturaProveedor;
		final JPanel jPanelAccionesFacturaProveedor=this.jPanelAccionesFacturaProveedor;
		
		JPanel jPanelCamposAuxiliarFacturaProveedor=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarFacturaProveedor=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
			jPanelCamposAuxiliarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jPanelCamposFacturaProveedor;
			jPanelAccionesFormularioAuxiliarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jPanelAccionesFormularioFacturaProveedor;
		}
		
		final JPanel jPanelCamposFacturaProveedor=jPanelCamposAuxiliarFacturaProveedor;
		final JPanel jPanelAccionesFormularioFacturaProveedor=jPanelAccionesFormularioAuxiliarFacturaProveedor;
		
		
		final JMenuBar jmenuBarFacturaProveedor=this.jmenuBarFacturaProveedor;
		final JToolBar jTtoolBarFacturaProveedor=this.jTtoolBarFacturaProveedor;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarFacturaProveedor=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarFacturaProveedor=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
			jmenuBarDetalleAuxiliarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jmenuBarDetalleFacturaProveedor;
			jTtoolBarDetalleAuxiliarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jTtoolBarDetalleFacturaProveedor;
		}
		
		final JMenuBar jmenuBarDetalleFacturaProveedor=jmenuBarDetalleAuxiliarFacturaProveedor;
		final JToolBar jTtoolBarDetalleFacturaProveedor=jTtoolBarDetalleAuxiliarFacturaProveedor;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasFacturaProveedor;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesFacturaProveedor;
			processRunnable.jTableDatos=jTableDatosFacturaProveedor;
			processRunnable.jPanelCampos=jPanelCamposFacturaProveedor;
			processRunnable.jPanelPaginacion=jPanelPaginacionFacturaProveedor;
			processRunnable.jPanelAcciones=jPanelAccionesFacturaProveedor;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioFacturaProveedor;
			
			
			processRunnable.jmenuBar=jmenuBarFacturaProveedor;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleFacturaProveedor;
			processRunnable.jTtoolBar=jTtoolBarFacturaProveedor;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleFacturaProveedor;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasFacturaProveedor ,jPanelParametrosReportesFacturaProveedor,jTableDatosFacturaProveedor, /*jScrollPanelDatosFacturaProveedor,*/jPanelCamposFacturaProveedor,jPanelPaginacionFacturaProveedor, /*jScrollPanelDatosEdicionFacturaProveedor,*/ jPanelAccionesFacturaProveedor,jPanelAccionesFormularioFacturaProveedor,jmenuBarFacturaProveedor,jmenuBarDetalleFacturaProveedor,jTtoolBarFacturaProveedor,jTtoolBarDetalleFacturaProveedor);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasFacturaProveedor ,jPanelParametrosReportesFacturaProveedor, jScrollPanelDatosFacturaProveedor,jPanelPaginacionFacturaProveedor, jScrollPanelDatosEdicionFacturaProveedor, jPanelAccionesFacturaProveedor,jPanelAccionesFormularioFacturaProveedor,jmenuBarFacturaProveedor,jmenuBarDetalleFacturaProveedor,jTtoolBarFacturaProveedor,jTtoolBarDetalleFacturaProveedor);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessFacturaProveedor() {// throws Exception 
		this.finishProcessFacturaProveedor(true);
	}
	
	public void finishProcessFacturaProveedor(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasFacturaProveedor ,this.jPanelParametrosReportesFacturaProveedor, this.jScrollPanelDatosFacturaProveedor,this.jPanelPaginacionFacturaProveedor, this.jScrollPanelDatosEdicionFacturaProveedor, this.jPanelAccionesFacturaProveedor,this.jPanelAccionesFormularioFacturaProveedor,this.jmenuBarFacturaProveedor,this.jmenuBarDetalleFacturaProveedor,this.jTtoolBarFacturaProveedor,this.jTtoolBarDetalleFacturaProveedor);		
		
		final JTabbedPane jTabbedPaneBusquedasFacturaProveedor=this.jTabbedPaneBusquedasFacturaProveedor; 
		
		final JPanel jPanelParametrosReportesFacturaProveedor=this.jPanelParametrosReportesFacturaProveedor;
		//final JScrollPane jScrollPanelDatosFacturaProveedor=this.jScrollPanelDatosFacturaProveedor;
		final JTable jTableDatosFacturaProveedor=this.jTableDatosFacturaProveedor;		
		final JPanel jPanelPaginacionFacturaProveedor=this.jPanelPaginacionFacturaProveedor;
		//final JScrollPane jScrollPanelDatosEdicionFacturaProveedor=this.jScrollPanelDatosEdicionFacturaProveedor;
		final JPanel jPanelAccionesFacturaProveedor=this.jPanelAccionesFacturaProveedor;
		
		JPanel jPanelCamposAuxiliarFacturaProveedor=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarFacturaProveedor=new JPanel();
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
			jPanelCamposAuxiliarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jPanelCamposFacturaProveedor;
			jPanelAccionesFormularioAuxiliarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jPanelAccionesFormularioFacturaProveedor;
		}
		
		final JPanel jPanelCamposFacturaProveedor=jPanelCamposAuxiliarFacturaProveedor;
		final JPanel jPanelAccionesFormularioFacturaProveedor=jPanelAccionesFormularioAuxiliarFacturaProveedor;
		
		
		final JMenuBar jmenuBarFacturaProveedor=this.jmenuBarFacturaProveedor;		
		final JToolBar jTtoolBarFacturaProveedor=this.jTtoolBarFacturaProveedor;
				
		JMenuBar jmenuBarDetalleAuxiliarFacturaProveedor=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarFacturaProveedor=new JToolBar();
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
			jmenuBarDetalleAuxiliarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jmenuBarDetalleFacturaProveedor;
			jTtoolBarDetalleAuxiliarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jTtoolBarDetalleFacturaProveedor;		
		}
		
		final JMenuBar jmenuBarDetalleFacturaProveedor=jmenuBarDetalleAuxiliarFacturaProveedor;
		final JToolBar jTtoolBarDetalleFacturaProveedor=jTtoolBarDetalleAuxiliarFacturaProveedor;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasFacturaProveedor;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesFacturaProveedor;
			processRunnable.jTableDatos=jTableDatosFacturaProveedor;
			processRunnable.jPanelCampos=jPanelCamposFacturaProveedor;
			processRunnable.jPanelPaginacion=jPanelPaginacionFacturaProveedor;
			processRunnable.jPanelAcciones=jPanelAccionesFacturaProveedor;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioFacturaProveedor;
			
			
			processRunnable.jmenuBar=jmenuBarFacturaProveedor;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleFacturaProveedor;
			processRunnable.jTtoolBar=jTtoolBarFacturaProveedor;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleFacturaProveedor;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasFacturaProveedor ,jPanelParametrosReportesFacturaProveedor, jTableDatosFacturaProveedor,/*jScrollPanelDatosFacturaProveedor,*/jPanelCamposFacturaProveedor,jPanelPaginacionFacturaProveedor, /*jScrollPanelDatosEdicionFacturaProveedor,*/ jPanelAccionesFacturaProveedor,jPanelAccionesFormularioFacturaProveedor,jmenuBarFacturaProveedor,jmenuBarDetalleFacturaProveedor,jTtoolBarFacturaProveedor,jTtoolBarDetalleFacturaProveedor));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesFacturaProveedor(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarFacturaProveedor(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuFacturaProveedor(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarFacturaProveedor(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarFacturaProveedor,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleFacturaProveedor,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuFacturaProveedor(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarFacturaProveedor,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleFacturaProveedor,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.facturaproveedorConstantesFunciones.getsFinalQueryFacturaProveedor();
		String  finalQueryPaginacionTodos=this.facturaproveedorConstantesFunciones.getsFinalQueryFacturaProveedor();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=FacturaProveedorConstantesFunciones.getArrayColumnasGlobalesNoFacturaProveedor(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=FacturaProveedorConstantesFunciones.getArrayColumnasGlobalesFacturaProveedor(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			//SE CAMBIA FUNCIONALIDAD DE MODULO POR ALGUNO PRIORITARIO
			Modulo moduloActualAux=new Modulo();
			
			moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,!esBusqueda,esBusqueda,arrColumnasGlobales,FacturaProveedorConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.facturaproveedorsEliminados= new ArrayList<FacturaProveedor>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessFacturaProveedor();
		
				///*FacturaProveedorSessionBean*/this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			
			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=FacturaProveedorConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=FacturaProveedorConstantesFunciones.getClassesForeignKeysOfFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/facturaproveedor."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			facturaproveedorsAux= new ArrayList<FacturaProveedor>();
			
				
			facturaproveedorLogic.setDatosCliente(this.datosCliente);
			facturaproveedorLogic.setDatosDeep(this.datosDeep);
			facturaproveedorLogic.setIsConDeep(true);
			
			
			facturaproveedorLogic.getFacturaProveedorDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					facturaproveedorLogic.getTodosFacturaProveedors(finalQueryGlobal,pagination);
					
					//facturaproveedorLogic.getTodosFacturaProveedorsWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(facturaproveedorLogic.getFacturaProveedors()==null|| facturaproveedorLogic.getFacturaProveedors().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							facturaproveedorsAux= new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux= new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							facturaproveedorLogic.getTodosFacturaProveedors(finalQueryGlobal+"",this.pagination);												
							
							//facturaproveedorLogic.getTodosFacturaProveedorsWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteFacturaProveedors("Todos",facturaproveedorLogic.getFacturaProveedors() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());					
							facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idFacturaProveedor=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idFacturaProveedor=this.idActual;
				
				} else if(this.idFacturaProveedorActual!=null && this.idFacturaProveedorActual!=0L) {
					idFacturaProveedor=idFacturaProveedorActual;
				}
				
					
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndicePorId(idFacturaProveedor);
				
				this.facturaproveedors=new ArrayList<FacturaProveedor>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					facturaproveedorLogic.getEntity(idFacturaProveedor);
					
					//facturaproveedorLogic.getEntityWithConnection(idFacturaProveedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
					facturaproveedorLogic.getFacturaProveedors().add(facturaproveedorLogic.getFacturaProveedor());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedors=new ArrayList<FacturaProveedor>();
					this.facturaproveedors.add(facturaproveedor);
				}
				
				if(facturaproveedorLogic.getFacturaProveedor()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdCliente",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdCliente",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableCreditoFiscalBienes")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalBienes(id_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdCuentaContableCreditoFiscalBienes(finalQueryGlobal,pagination,id_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalBienes(id_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalBienes(id_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdCuentaContableCreditoFiscalBienes(finalQueryGlobal,pagination,id_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalBienes(id_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalBienes(id_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdCuentaContableCreditoFiscalBienes",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdCuentaContableCreditoFiscalBienes",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableCreditoFiscalServicios")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalServicios(id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdCuentaContableCreditoFiscalServicios(finalQueryGlobal,pagination,id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalServicios(id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalServicios(id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdCuentaContableCreditoFiscalServicios(finalQueryGlobal,pagination,id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalServicios(id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableCreditoFiscalServicios(id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdCuentaContableCreditoFiscalServicios",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdCuentaContableCreditoFiscalServicios",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableGasto2")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableGasto2(id_cuenta_contable_gasto2FK_IdCuentaContableGasto2);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdCuentaContableGasto2(finalQueryGlobal,pagination,id_cuenta_contable_gasto2FK_IdCuentaContableGasto2);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableGasto2(id_cuenta_contable_gasto2FK_IdCuentaContableGasto2);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableGasto2(id_cuenta_contable_gasto2FK_IdCuentaContableGasto2);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdCuentaContableGasto2(finalQueryGlobal,pagination,id_cuenta_contable_gasto2FK_IdCuentaContableGasto2);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableGasto2(id_cuenta_contable_gasto2FK_IdCuentaContableGasto2);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdCuentaContableGasto2(id_cuenta_contable_gasto2FK_IdCuentaContableGasto2);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdCuentaContableGasto2",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdCuentaContableGasto2",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdEjercicio",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdEjercicio",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpleado")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdEmpleado",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdEmpleado",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdEmpresa",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdEmpresa",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdModulo")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdModulo(finalQueryGlobal,pagination,id_moduloFK_IdModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdModulo(id_moduloFK_IdModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdModulo",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdModulo",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPeriodo")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdPeriodo(finalQueryGlobal,pagination,id_periodoFK_IdPeriodo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPeriodo(id_periodoFK_IdPeriodo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdPeriodo",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdPeriodo",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPlantillaFactura")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPlantillaFactura(id_plantilla_facturaFK_IdPlantillaFactura);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdPlantillaFactura(finalQueryGlobal,pagination,id_plantilla_facturaFK_IdPlantillaFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPlantillaFactura(id_plantilla_facturaFK_IdPlantillaFactura);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPlantillaFactura(id_plantilla_facturaFK_IdPlantillaFactura);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdPlantillaFactura(finalQueryGlobal,pagination,id_plantilla_facturaFK_IdPlantillaFactura);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPlantillaFactura(id_plantilla_facturaFK_IdPlantillaFactura);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdPlantillaFactura(id_plantilla_facturaFK_IdPlantillaFactura);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdPlantillaFactura",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdPlantillaFactura",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdResponsableFondo")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdResponsableFondo(id_responsable_fondoFK_IdResponsableFondo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdResponsableFondo(finalQueryGlobal,pagination,id_responsable_fondoFK_IdResponsableFondo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdResponsableFondo(id_responsable_fondoFK_IdResponsableFondo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdResponsableFondo(id_responsable_fondoFK_IdResponsableFondo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdResponsableFondo(finalQueryGlobal,pagination,id_responsable_fondoFK_IdResponsableFondo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdResponsableFondo(id_responsable_fondoFK_IdResponsableFondo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdResponsableFondo(id_responsable_fondoFK_IdResponsableFondo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdResponsableFondo",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdResponsableFondo",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdSucursal",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdSucursal",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoDocumento")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoDocumento(finalQueryGlobal,pagination,id_tipo_documentoFK_IdTipoDocumento);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdTipoDocumento(finalQueryGlobal,pagination,id_tipo_documentoFK_IdTipoDocumento);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoDocumento(id_tipo_documentoFK_IdTipoDocumento);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdTipoDocumento",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdTipoDocumento",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoMovimientoModulo")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoMovimientoModulo(finalQueryGlobal,pagination,id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdTipoMovimientoModulo(finalQueryGlobal,pagination,id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoMovimientoModulo(id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdTipoMovimientoModulo",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdTipoMovimientoModulo",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoRetencionFuente1")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuente1(id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoRetencionFuente1(finalQueryGlobal,pagination,id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuente1(id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuente1(id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdTipoRetencionFuente1(finalQueryGlobal,pagination,id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuente1(id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionFuente1(id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdTipoRetencionFuente1",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdTipoRetencionFuente1",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoRetencionIva1")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva1(id_tipo_retencion_iva1FK_IdTipoRetencionIva1);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoRetencionIva1(finalQueryGlobal,pagination,id_tipo_retencion_iva1FK_IdTipoRetencionIva1);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva1(id_tipo_retencion_iva1FK_IdTipoRetencionIva1);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva1(id_tipo_retencion_iva1FK_IdTipoRetencionIva1);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdTipoRetencionIva1(finalQueryGlobal,pagination,id_tipo_retencion_iva1FK_IdTipoRetencionIva1);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva1(id_tipo_retencion_iva1FK_IdTipoRetencionIva1);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva1(id_tipo_retencion_iva1FK_IdTipoRetencionIva1);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdTipoRetencionIva1",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdTipoRetencionIva1",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoTransaccionModulo")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoTransaccionModulo(finalQueryGlobal,pagination,id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdTipoTransaccionModulo(finalQueryGlobal,pagination,id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoTransaccionModulo(id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdTipoTransaccionModulo",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdTipoTransaccionModulo",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoTributario")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoTributario(finalQueryGlobal,pagination,id_tipo_tributarioFK_IdTipoTributario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdTipoTributario(finalQueryGlobal,pagination,id_tipo_tributarioFK_IdTipoTributario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTipoTributario(id_tipo_tributarioFK_IdTipoTributario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdTipoTributario",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdTipoTributario",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTransaccion")) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturaproveedorLogic.getFacturaProveedorsFK_IdTransaccion(finalQueryGlobal,pagination,id_transaccionFK_IdTransaccion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturaproveedorLogic.getFacturaProveedors()==null||facturaproveedorLogic.getFacturaProveedors().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturaproveedors==null|| facturaproveedors.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorsAux=new ArrayList<FacturaProveedor>();
						facturaproveedorsAux.addAll(facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorsAux=new ArrayList<FacturaProveedor>();
							facturaproveedorsAux.addAll(facturaproveedors);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturaproveedorLogic.getFacturaProveedorsFK_IdTransaccion(finalQueryGlobal,pagination,id_transaccionFK_IdTransaccion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaProveedorConstantesFunciones.getDetalleIndiceFK_IdTransaccion(id_transaccionFK_IdTransaccion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaProveedors("FK_IdTransaccion",facturaproveedorLogic.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaProveedors("FK_IdTransaccion",facturaproveedors);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorLogic.setFacturaProveedors(new ArrayList<FacturaProveedor>());
						facturaproveedorLogic.getFacturaProveedors().addAll(facturaproveedorsAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedors=new ArrayList<FacturaProveedor>();
							facturaproveedors.addAll(facturaproveedorsAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesFacturaProveedor();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessFacturaProveedor();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=facturaproveedorLogic.getFacturaProveedors().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=facturaproveedors.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=facturaproveedorLogic.getFacturaProveedors().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=facturaproveedors.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(FacturaProveedor facturaproveedor) {
		Boolean permite=true;
		
		if(this.facturaproveedor.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=FacturaProveedorConstantesFunciones.getOrderByListaFacturaProveedor();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=FacturaProveedorConstantesFunciones.getOrderByListaFacturaProveedor();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaProveedor facturaproveedor:facturaproveedorLogic.getFacturaProveedors()) {
				if(facturaproveedor.getsType().equals(Constantes2.S_TOTALES)) {
					facturaproveedorTotales=facturaproveedor;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaProveedor facturaproveedor:this.facturaproveedors) {
				if(facturaproveedor.getsType().equals(Constantes2.S_TOTALES)) {
					facturaproveedorTotales=facturaproveedor;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.facturaproveedorAux=new FacturaProveedor();
			this.facturaproveedorAux.setsType(Constantes2.S_TOTALES);
			this.facturaproveedorAux.setIsNew(false);
			this.facturaproveedorAux.setIsChanged(false);
			this.facturaproveedorAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				FacturaProveedorConstantesFunciones.TotalizarValoresFilaFacturaProveedor(this.facturaproveedorLogic.getFacturaProveedors(),this.facturaproveedorAux);
				
				this.facturaproveedorLogic.getFacturaProveedors().add(this.facturaproveedorAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				FacturaProveedorConstantesFunciones.TotalizarValoresFilaFacturaProveedor(this.facturaproveedors,this.facturaproveedorAux);
				
				this.facturaproveedors.add(this.facturaproveedorAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		facturaproveedorTotales=new FacturaProveedor();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.facturaproveedorLogic.getFacturaProveedors().remove(facturaproveedorTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.facturaproveedors.remove(facturaproveedorTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		facturaproveedorTotales=new FacturaProveedor();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaProveedor facturaproveedor:facturaproveedorLogic.getFacturaProveedors()) {
				if(facturaproveedor.getsType().equals(Constantes2.S_TOTALES)) {
					facturaproveedorTotales=facturaproveedor;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				FacturaProveedorConstantesFunciones.TotalizarValoresFilaFacturaProveedor(this.facturaproveedorLogic.getFacturaProveedors(),facturaproveedorTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaProveedor facturaproveedor:this.facturaproveedors) {
				if(facturaproveedor.getsType().equals(Constantes2.S_TOTALES)) {
					facturaproveedorTotales=facturaproveedor;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				FacturaProveedorConstantesFunciones.TotalizarValoresFilaFacturaProveedor(this.facturaproveedors,facturaproveedorTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getFacturaProveedorsFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableCredito()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCredito";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableCreditoFin()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCreditoFin";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableCreditoFin2()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCreditoFin2";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableCreditoFiscalBienes()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCreditoFiscalBienes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableCreditoFiscalServicios()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableCreditoFiscalServicios";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableGasto()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableGasto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableGasto2()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableGasto2";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdEmpleado()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleado";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdEmpleadoSolicita()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleadoSolicita";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdFactura()throws Exception {
		try {
			sAccionBusqueda="FK_IdFactura";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdMoneda()throws Exception {
		try {
			sAccionBusqueda="FK_IdMoneda";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdPeriodo()throws Exception {
		try {
			sAccionBusqueda="FK_IdPeriodo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdPlantillaFactura()throws Exception {
		try {
			sAccionBusqueda="FK_IdPlantillaFactura";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdResponsableFondo()throws Exception {
		try {
			sAccionBusqueda="FK_IdResponsableFondo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdTipoDocumento()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoDocumento";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdTipoMovimiento()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoMovimiento";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdTipoMovimientoModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoMovimientoModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdTipoRetencionFuente1()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoRetencionFuente1";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdTipoRetencionFuente2()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoRetencionFuente2";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdTipoRetencionIva1()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoRetencionIva1";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdTipoRetencionIva2()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoRetencionIva2";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdTipoTransaccionModulo()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoTransaccionModulo";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdTipoTributario()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoTributario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaProveedorsFK_IdTransaccion()throws Exception {
		try {
			sAccionBusqueda="FK_IdTransaccion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getFacturaProveedorsFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableCredito(String sFinalQuery,Long id_cuenta_contable_credito)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdCuentaContableCredito(sFinalQuery,this.pagination,id_cuenta_contable_credito);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableCreditoFin(String sFinalQuery,Long id_cuenta_contable_credito_fin)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdCuentaContableCreditoFin(sFinalQuery,this.pagination,id_cuenta_contable_credito_fin);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableCreditoFin2(String sFinalQuery,Long id_cuenta_contable_credito_fin2)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdCuentaContableCreditoFin2(sFinalQuery,this.pagination,id_cuenta_contable_credito_fin2);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableCreditoFiscalBienes(String sFinalQuery,Long id_cuenta_contable_credito_fiscal_bienes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdCuentaContableCreditoFiscalBienes(sFinalQuery,this.pagination,id_cuenta_contable_credito_fiscal_bienes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableCreditoFiscalServicios(String sFinalQuery,Long id_cuenta_contable_credito_fiscal_servicios)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdCuentaContableCreditoFiscalServicios(sFinalQuery,this.pagination,id_cuenta_contable_credito_fiscal_servicios);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableGasto(String sFinalQuery,Long id_cuenta_contable_gasto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdCuentaContableGasto(sFinalQuery,this.pagination,id_cuenta_contable_gasto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdCuentaContableGasto2(String sFinalQuery,Long id_cuenta_contable_gasto2)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdCuentaContableGasto2(sFinalQuery,this.pagination,id_cuenta_contable_gasto2);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdEmpleado(String sFinalQuery,Long id_empleado)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdEmpleado(sFinalQuery,this.pagination,id_empleado);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdEmpleadoSolicita(String sFinalQuery,Long id_empleado_solicita)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdEmpleadoSolicita(sFinalQuery,this.pagination,id_empleado_solicita);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdFactura(String sFinalQuery,Long id_factura)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdFactura(sFinalQuery,this.pagination,id_factura);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdModulo(String sFinalQuery,Long id_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdModulo(sFinalQuery,this.pagination,id_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdMoneda(String sFinalQuery,Long id_moneda)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdMoneda(sFinalQuery,this.pagination,id_moneda);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdPeriodo(String sFinalQuery,Long id_periodo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdPeriodo(sFinalQuery,this.pagination,id_periodo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdPlantillaFactura(String sFinalQuery,Long id_plantilla_factura)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdPlantillaFactura(sFinalQuery,this.pagination,id_plantilla_factura);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdResponsableFondo(String sFinalQuery,Long id_responsable_fondo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdResponsableFondo(sFinalQuery,this.pagination,id_responsable_fondo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdTipoDocumento(String sFinalQuery,Long id_tipo_documento)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoDocumento(sFinalQuery,this.pagination,id_tipo_documento);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdTipoMovimiento(String sFinalQuery,Long id_tipo_movimiento)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoMovimiento(sFinalQuery,this.pagination,id_tipo_movimiento);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdTipoMovimientoModulo(String sFinalQuery,Long id_tipo_movimiento_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoMovimientoModulo(sFinalQuery,this.pagination,id_tipo_movimiento_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdTipoRetencionFuente1(String sFinalQuery,Long id_tipo_retencion_fuente1)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoRetencionFuente1(sFinalQuery,this.pagination,id_tipo_retencion_fuente1);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdTipoRetencionFuente2(String sFinalQuery,Long id_tipo_retencion_fuente2)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoRetencionFuente2(sFinalQuery,this.pagination,id_tipo_retencion_fuente2);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdTipoRetencionIva1(String sFinalQuery,Long id_tipo_retencion_iva1)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoRetencionIva1(sFinalQuery,this.pagination,id_tipo_retencion_iva1);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdTipoRetencionIva2(String sFinalQuery,Long id_tipo_retencion_iva2)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoRetencionIva2(sFinalQuery,this.pagination,id_tipo_retencion_iva2);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdTipoTransaccionModulo(String sFinalQuery,Long id_tipo_transaccion_modulo)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoTransaccionModulo(sFinalQuery,this.pagination,id_tipo_transaccion_modulo);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdTipoTributario(String sFinalQuery,Long id_tipo_tributario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdTipoTributario(sFinalQuery,this.pagination,id_tipo_tributario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaProveedorsFK_IdTransaccion(String sFinalQuery,Long id_transaccion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLogic.getFacturaProveedorsFK_IdTransaccion(sFinalQuery,this.pagination,id_transaccion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosFacturaProveedor() {
		this.isPermisoTodoFacturaProveedor=false;
		this.isPermisoNuevoFacturaProveedor=false;
		this.isPermisoActualizarFacturaProveedor=false;
		this.isPermisoActualizarOriginalFacturaProveedor=false;
		this.isPermisoEliminarFacturaProveedor=false;
		this.isPermisoGuardarCambiosFacturaProveedor=false;
		this.isPermisoConsultaFacturaProveedor=false;
		this.isPermisoBusquedaFacturaProveedor=false;
		this.isPermisoReporteFacturaProveedor=false;		
		this.isPermisoOrdenFacturaProveedor=false;		
		this.isPermisoPaginacionMedioFacturaProveedor=false;		
		this.isPermisoPaginacionAltoFacturaProveedor=false;
		this.isPermisoPaginacionTodoFacturaProveedor=false;
		this.isPermisoCopiarFacturaProveedor=false;		
		this.isPermisoVerFormFacturaProveedor=false;		
		this.isPermisoDuplicarFacturaProveedor=false;		
		this.isPermisoOrdenFacturaProveedor=false;		
	}
	
	public void setPermisosUsuarioFacturaProveedor(Boolean isPermiso) {
		this.isPermisoTodoFacturaProveedor=isPermiso;
		this.isPermisoNuevoFacturaProveedor=isPermiso;
		this.isPermisoActualizarFacturaProveedor=isPermiso;
		this.isPermisoActualizarOriginalFacturaProveedor=isPermiso;
		this.isPermisoEliminarFacturaProveedor=isPermiso;
		this.isPermisoGuardarCambiosFacturaProveedor=isPermiso;
		this.isPermisoConsultaFacturaProveedor=isPermiso;
		this.isPermisoBusquedaFacturaProveedor=isPermiso;
		this.isPermisoReporteFacturaProveedor=isPermiso;
		this.isPermisoOrdenFacturaProveedor=isPermiso;		
		this.isPermisoPaginacionMedioFacturaProveedor=isPermiso;		
		this.isPermisoPaginacionAltoFacturaProveedor=isPermiso;		
		this.isPermisoPaginacionTodoFacturaProveedor=isPermiso;		
		this.isPermisoCopiarFacturaProveedor=isPermiso;		
		this.isPermisoVerFormFacturaProveedor=isPermiso;		
		this.isPermisoDuplicarFacturaProveedor=isPermiso;
		this.isPermisoOrdenFacturaProveedor=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioFacturaProveedor(Boolean isPermiso) {
		//this.isPermisoTodoFacturaProveedor=isPermiso;
		this.isPermisoNuevoFacturaProveedor=isPermiso;
		this.isPermisoActualizarFacturaProveedor=isPermiso;
		this.isPermisoActualizarOriginalFacturaProveedor=isPermiso;
		this.isPermisoEliminarFacturaProveedor=isPermiso;
		this.isPermisoGuardarCambiosFacturaProveedor=isPermiso;
		//this.isPermisoConsultaFacturaProveedor=isPermiso;
		//this.isPermisoBusquedaFacturaProveedor=isPermiso;
		//this.isPermisoReporteFacturaProveedor=isPermiso;
		//this.isPermisoOrdenFacturaProveedor=isPermiso;		
		//this.isPermisoPaginacionMedioFacturaProveedor=isPermiso;		
		//this.isPermisoPaginacionAltoFacturaProveedor=isPermiso;		
		//this.isPermisoPaginacionTodoFacturaProveedor=isPermiso;		
		//this.isPermisoCopiarFacturaProveedor=isPermiso;		
		//this.isPermisoDuplicarFacturaProveedor=isPermiso;
		//this.isPermisoOrdenFacturaProveedor=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioFacturaProveedorClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(DetalleFacturaProveedorConstantesFunciones.SNOMBREOPCION);
		
		if(FacturaProveedorJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosDetalleFacturaProveedor=false;
		this.isTienePermisosDetalleFacturaProveedor=this.verificarGetPermisosUsuarioOpcionFacturaProveedorClaseRelacionada(this.opcionsRelacionadas,DetalleFacturaProveedorConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebFacturaProveedor(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioFacturaProveedorClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosDetalleFacturaProveedor=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioFacturaProveedorClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionFacturaProveedorClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioFacturaProveedorClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosDetalleFacturaProveedor && this.jInternalFrameDetalleFormFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormFacturaProveedor.jTabbedPaneRelacionesFacturaProveedor.remove(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioFacturaProveedor() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(FacturaProveedorJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, FacturaProveedorConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoFacturaProveedor=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarFacturaProveedor=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalFacturaProveedor=this.isPermisoActualizarFacturaProveedor;
			this.isPermisoEliminarFacturaProveedor=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosFacturaProveedor=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaFacturaProveedor=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaFacturaProveedor=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoFacturaProveedor=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteFacturaProveedor=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenFacturaProveedor=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioFacturaProveedor=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoFacturaProveedor=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoFacturaProveedor=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarFacturaProveedor=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormFacturaProveedor=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarFacturaProveedor=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenFacturaProveedor=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosFacturaProveedor.setToolTipText(this.jTableDatosFacturaProveedor.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioFacturaProveedor(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioFacturaProveedor(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(FacturaProveedorJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(FacturaProveedorJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioFacturaProveedor() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosDetalleFacturaProveedor && this.facturaproveedorConstantesFunciones.mostrarDetalleFacturaProveedorFacturaProveedor && !FacturaProveedorConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Detalle Factura Proveedor");
			reporte.setsDescripcion("Detalle Factura Proveedor");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyFacturaProveedorListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.periodosForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.modulosForeignKey=new ArrayList();
				this.plantillafacturasForeignKey=new ArrayList();
				this.tipodocumentosForeignKey=new ArrayList();
				this.facturasForeignKey=new ArrayList();
				this.transaccionsForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.empleadosolicitasForeignKey=new ArrayList();
				this.monedasForeignKey=new ArrayList();
				this.empleadosForeignKey=new ArrayList();
				this.tiporetencionfuente1sForeignKey=new ArrayList();
				this.tiporetencionfuente2sForeignKey=new ArrayList();
				this.tiporetencioniva1sForeignKey=new ArrayList();
				this.tiporetencioniva2sForeignKey=new ArrayList();
				this.tipotributariosForeignKey=new ArrayList();
				this.cuentacontablecreditofiscalbienessForeignKey=new ArrayList();
				this.responsablefondosForeignKey=new ArrayList();
				this.cuentacontablecreditofiscalserviciossForeignKey=new ArrayList();
				this.cuentacontablegastosForeignKey=new ArrayList();
				this.cuentacontablegasto2sForeignKey=new ArrayList();
				this.cuentacontablecreditofinsForeignKey=new ArrayList();
				this.cuentacontablecreditofin2sForeignKey=new ArrayList();
				this.cuentacontablecreditosForeignKey=new ArrayList();
				this.tipomovimientosForeignKey=new ArrayList();
				this.tipomovimientomodulosForeignKey=new ArrayList();
				this.tipotransaccionmodulosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyFacturaProveedorListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(FacturaProveedorJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyFacturaProveedorListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPeriodoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPlantillaFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoDocumentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTransaccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpleadoSolicitaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMonedaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionFuente1Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionFuente2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionIva1Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionIva2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoTributarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCreditoFiscalBienesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyResponsableFondoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCreditoFiscalServiciosListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableGastoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableGasto2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCreditoFinListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCreditoFin2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoMovimientoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoMovimientoModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoTransaccionModuloListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPeriodoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PeriodoConstantesFunciones.SFINALQUERY;

				this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPlantillaFacturaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.plantillafacturasForeignKey==null||this.plantillafacturasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PlantillaFacturaConstantesFunciones.getArrayColumnasGlobalesPlantillaFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PlantillaFacturaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PlantillaFacturaConstantesFunciones.SFINALQUERY;

				this.cargarCombosPlantillaFacturasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoDocumentoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipodocumentosForeignKey==null||this.tipodocumentosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoDocumentoConstantesFunciones.getArrayColumnasGlobalesTipoDocumento(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoDocumentoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoDocumentoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoDocumentosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFacturaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FacturaConstantesFunciones.SFINALQUERY;

				this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.transaccionsForeignKey==null||this.transaccionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TransaccionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTransaccionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoSolicitaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosolicitasForeignKey==null||this.empleadosolicitasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadoSolicitasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMonedaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MonedaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionFuente1Listas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencionfuente1sForeignKey==null||this.tiporetencionfuente1sForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionFuente1sForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionFuente2Listas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencionfuente2sForeignKey==null||this.tiporetencionfuente2sForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionFuente2sForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionIva1Listas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencioniva1sForeignKey==null||this.tiporetencioniva1sForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionIva1sForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionIva2Listas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencioniva2sForeignKey==null||this.tiporetencioniva2sForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionIva2sForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTributarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipotributariosForeignKey==null||this.tipotributariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoTributarioConstantesFunciones.getArrayColumnasGlobalesTipoTributario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoTributarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoTributarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoTributariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoFiscalBienesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecreditofiscalbienessForeignKey==null||this.cuentacontablecreditofiscalbienessForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCreditoFiscalBienessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyResponsableFondoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.responsablefondosForeignKey==null||this.responsablefondosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ResponsableFondoConstantesFunciones.getArrayColumnasGlobalesResponsableFondo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ResponsableFondoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ResponsableFondoConstantesFunciones.SFINALQUERY;

				this.cargarCombosResponsableFondosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoFiscalServiciosListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecreditofiscalserviciossForeignKey==null||this.cuentacontablecreditofiscalserviciossForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCreditoFiscalServiciossForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableGastoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablegastosForeignKey==null||this.cuentacontablegastosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableGastosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableGasto2Listas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablegasto2sForeignKey==null||this.cuentacontablegasto2sForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableGasto2sForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoFinListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecreditofinsForeignKey==null||this.cuentacontablecreditofinsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCreditoFinsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoFin2Listas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecreditofin2sForeignKey==null||this.cuentacontablecreditofin2sForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCreditoFin2sForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecreditosForeignKey==null||this.cuentacontablecreditosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableCreditosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoMovimientoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipomovimientosForeignKey==null||this.tipomovimientosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoMovimientoConstantesFunciones.getArrayColumnasGlobalesTipoMovimiento(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoMovimientoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoMovimientoConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoMovimientosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoMovimientoModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipomovimientomodulosForeignKey==null||this.tipomovimientomodulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoMovimientoModuloConstantesFunciones.getArrayColumnasGlobalesTipoMovimientoModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoMovimientoModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoMovimientoModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoMovimientoModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTransaccionModuloListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipotransaccionmodulosForeignKey==null||this.tipotransaccionmodulosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoTransaccionModuloConstantesFunciones.getArrayColumnasGlobalesTipoTransaccionModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoTransaccionModuloConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoTransaccionModuloConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoTransaccionModulosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyFacturaProveedorListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			FacturaProveedorParameterReturnGeneral facturaproveedorReturnGeneral=new FacturaProveedorParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_empresaFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_empresaFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_sucursalFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_sucursalFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_ejercicioFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_ejercicioFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPeriodo="";

				if(((this.periodosForeignKey==null||this.periodosForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_periodoFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_periodoFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PeriodoConstantesFunciones.getArrayColumnasGlobalesPeriodo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPeriodo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PeriodoConstantesFunciones.TABLENAME);

						finalQueryGlobalPeriodo=Funciones.GetFinalQueryAppend(finalQueryGlobalPeriodo, "");
						finalQueryGlobalPeriodo+=PeriodoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPeriodosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPeriodo=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidPeriodoActual();
					}
				} else {
					finalQueryGlobalPeriodo="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_anioFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_anioFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_mesFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_mesFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalModulo="";

				if(((this.modulosForeignKey==null||this.modulosForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_moduloFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_moduloFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ModuloConstantesFunciones.getArrayColumnasGlobalesModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

						finalQueryGlobalModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,ModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalModulo, "");
						finalQueryGlobalModulo+=ModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalModulo=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidModuloActual();
					}
				} else {
					finalQueryGlobalModulo="NONE";
				}


				String finalQueryGlobalPlantillaFactura="";

				if(((this.plantillafacturasForeignKey==null||this.plantillafacturasForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_plantilla_facturaFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_plantilla_facturaFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionPlantillaFactura()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PlantillaFacturaConstantesFunciones.getArrayColumnasGlobalesPlantillaFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPlantillaFactura=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PlantillaFacturaConstantesFunciones.TABLENAME);

						finalQueryGlobalPlantillaFactura=Funciones.GetFinalQueryAppend(finalQueryGlobalPlantillaFactura, "");
						finalQueryGlobalPlantillaFactura+=PlantillaFacturaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPlantillaFacturasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPlantillaFactura=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidPlantillaFacturaActual();
					}
				} else {
					finalQueryGlobalPlantillaFactura="NONE";
				}


				String finalQueryGlobalTipoDocumento="";

				if(((this.tipodocumentosForeignKey==null||this.tipodocumentosForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_tipo_documentoFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_tipo_documentoFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoDocumento()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoDocumentoConstantesFunciones.getArrayColumnasGlobalesTipoDocumento(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoDocumento=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoDocumentoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoDocumento=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoDocumento, "");
						finalQueryGlobalTipoDocumento+=TipoDocumentoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoDocumentosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoDocumento=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidTipoDocumentoActual();
					}
				} else {
					finalQueryGlobalTipoDocumento="NONE";
				}


				String finalQueryGlobalFactura="";

				if(((this.facturasForeignKey==null||this.facturasForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_facturaFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_facturaFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FacturaConstantesFunciones.getArrayColumnasGlobalesFactura(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFactura=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FacturaConstantesFunciones.TABLENAME);

						finalQueryGlobalFactura=Funciones.GetFinalQueryAppend(finalQueryGlobalFactura, "");
						finalQueryGlobalFactura+=FacturaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFacturasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFactura=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidFacturaActual();
					}
				} else {
					finalQueryGlobalFactura="NONE";
				}


				String finalQueryGlobalTransaccion="";

				if(((this.transaccionsForeignKey==null||this.transaccionsForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_transaccionFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_transaccionFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TransaccionConstantesFunciones.getArrayColumnasGlobalesTransaccion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTransaccion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TransaccionConstantesFunciones.TABLENAME);

						finalQueryGlobalTransaccion=Funciones.GetFinalQueryAppend(finalQueryGlobalTransaccion, "");
						finalQueryGlobalTransaccion+=TransaccionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTransaccionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTransaccion=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidTransaccionActual();
					}
				} else {
					finalQueryGlobalTransaccion="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_clienteFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_clienteFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalEmpleadoSolicita="";

				if(((this.empleadosolicitasForeignKey==null||this.empleadosolicitasForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_empleado_solicitaFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_empleado_solicitaFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpleadoSolicita()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleadoSolicita=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleadoSolicita=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleadoSolicita, "");
						finalQueryGlobalEmpleadoSolicita+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadoSolicitasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleadoSolicita=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidEmpleadoSolicitaActual();
					}
				} else {
					finalQueryGlobalEmpleadoSolicita="NONE";
				}


				String finalQueryGlobalMoneda="";

				if(((this.monedasForeignKey==null||this.monedasForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_monedaFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_monedaFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MonedaConstantesFunciones.getArrayColumnasGlobalesMoneda(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMoneda=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MonedaConstantesFunciones.TABLENAME);

						finalQueryGlobalMoneda=Funciones.GetFinalQueryAppend(finalQueryGlobalMoneda, "");
						finalQueryGlobalMoneda+=MonedaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMonedasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMoneda=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidMonedaActual();
					}
				} else {
					finalQueryGlobalMoneda="NONE";
				}


				String finalQueryGlobalEmpleado="";

				if(((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_empleadoFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_empleadoFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleado=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleado=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleado, "");
						finalQueryGlobalEmpleado+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleado=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidEmpleadoActual();
					}
				} else {
					finalQueryGlobalEmpleado="NONE";
				}


				String finalQueryGlobalTipoRetencionFuente1="";

				if(((this.tiporetencionfuente1sForeignKey==null||this.tiporetencionfuente1sForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_tipo_retencion_fuente1FacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_tipo_retencion_fuente1FacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuente1()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencionFuente1=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencionFuente1=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencionFuente1, "");
						finalQueryGlobalTipoRetencionFuente1+=TipoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionFuente1sForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencionFuente1=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidTipoRetencionFuente1Actual();
					}
				} else {
					finalQueryGlobalTipoRetencionFuente1="NONE";
				}


				String finalQueryGlobalTipoRetencionFuente2="";

				if(((this.tiporetencionfuente2sForeignKey==null||this.tiporetencionfuente2sForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_tipo_retencion_fuente2FacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_tipo_retencion_fuente2FacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuente2()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencionFuente2=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencionFuente2=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencionFuente2, "");
						finalQueryGlobalTipoRetencionFuente2+=TipoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionFuente2sForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencionFuente2=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidTipoRetencionFuente2Actual();
					}
				} else {
					finalQueryGlobalTipoRetencionFuente2="NONE";
				}


				String finalQueryGlobalTipoRetencionIva1="";

				if(((this.tiporetencioniva1sForeignKey==null||this.tiporetencioniva1sForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_tipo_retencion_iva1FacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_tipo_retencion_iva1FacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIva1()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencionIva1=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencionIva1=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencionIva1, "");
						finalQueryGlobalTipoRetencionIva1+=TipoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionIva1sForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencionIva1=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidTipoRetencionIva1Actual();
					}
				} else {
					finalQueryGlobalTipoRetencionIva1="NONE";
				}


				String finalQueryGlobalTipoRetencionIva2="";

				if(((this.tiporetencioniva2sForeignKey==null||this.tiporetencioniva2sForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_tipo_retencion_iva2FacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_tipo_retencion_iva2FacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIva2()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencionIva2=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencionIva2=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencionIva2, "");
						finalQueryGlobalTipoRetencionIva2+=TipoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionIva2sForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencionIva2=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidTipoRetencionIva2Actual();
					}
				} else {
					finalQueryGlobalTipoRetencionIva2="NONE";
				}


				String finalQueryGlobalTipoTributario="";

				if(((this.tipotributariosForeignKey==null||this.tipotributariosForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_tipo_tributarioFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_tipo_tributarioFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoTributario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoTributarioConstantesFunciones.getArrayColumnasGlobalesTipoTributario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoTributario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoTributarioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoTributario=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoTributario, "");
						finalQueryGlobalTipoTributario+=TipoTributarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoTributariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoTributario=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidTipoTributarioActual();
					}
				} else {
					finalQueryGlobalTipoTributario="NONE";
				}


				String finalQueryGlobalCuentaContableCreditoFiscalBienes="";

				if(((this.cuentacontablecreditofiscalbienessForeignKey==null||this.cuentacontablecreditofiscalbienessForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFiscalBienes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCreditoFiscalBienes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCreditoFiscalBienes=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCreditoFiscalBienes, "");
						finalQueryGlobalCuentaContableCreditoFiscalBienes+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCreditoFiscalBienessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCreditoFiscalBienes=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidCuentaContableCreditoFiscalBienesActual();
					}
				} else {
					finalQueryGlobalCuentaContableCreditoFiscalBienes="NONE";
				}


				String finalQueryGlobalResponsableFondo="";

				if(((this.responsablefondosForeignKey==null||this.responsablefondosForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_responsable_fondoFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_responsable_fondoFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionResponsableFondo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ResponsableFondoConstantesFunciones.getArrayColumnasGlobalesResponsableFondo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalResponsableFondo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ResponsableFondoConstantesFunciones.TABLENAME);

						finalQueryGlobalResponsableFondo=Funciones.GetFinalQueryAppend(finalQueryGlobalResponsableFondo, "");
						finalQueryGlobalResponsableFondo+=ResponsableFondoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosResponsableFondosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalResponsableFondo=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidResponsableFondoActual();
					}
				} else {
					finalQueryGlobalResponsableFondo="NONE";
				}


				String finalQueryGlobalCuentaContableCreditoFiscalServicios="";

				if(((this.cuentacontablecreditofiscalserviciossForeignKey==null||this.cuentacontablecreditofiscalserviciossForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFiscalServicios()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCreditoFiscalServicios=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCreditoFiscalServicios=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCreditoFiscalServicios, "");
						finalQueryGlobalCuentaContableCreditoFiscalServicios+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCreditoFiscalServiciossForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCreditoFiscalServicios=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidCuentaContableCreditoFiscalServiciosActual();
					}
				} else {
					finalQueryGlobalCuentaContableCreditoFiscalServicios="NONE";
				}


				String finalQueryGlobalCuentaContableGasto="";

				if(((this.cuentacontablegastosForeignKey==null||this.cuentacontablegastosForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_gastoFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_gastoFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableGasto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableGasto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableGasto=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableGasto, "");
						finalQueryGlobalCuentaContableGasto+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableGastosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableGasto=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidCuentaContableGastoActual();
					}
				} else {
					finalQueryGlobalCuentaContableGasto="NONE";
				}


				String finalQueryGlobalCuentaContableGasto2="";

				if(((this.cuentacontablegasto2sForeignKey==null||this.cuentacontablegasto2sForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_gasto2FacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_gasto2FacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableGasto2()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableGasto2=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableGasto2=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableGasto2, "");
						finalQueryGlobalCuentaContableGasto2+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableGasto2sForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableGasto2=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidCuentaContableGasto2Actual();
					}
				} else {
					finalQueryGlobalCuentaContableGasto2="NONE";
				}


				String finalQueryGlobalCuentaContableCreditoFin="";

				if(((this.cuentacontablecreditofinsForeignKey==null||this.cuentacontablecreditofinsForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_finFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_finFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFin()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCreditoFin=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCreditoFin=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCreditoFin, "");
						finalQueryGlobalCuentaContableCreditoFin+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCreditoFinsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCreditoFin=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidCuentaContableCreditoFinActual();
					}
				} else {
					finalQueryGlobalCuentaContableCreditoFin="NONE";
				}


				String finalQueryGlobalCuentaContableCreditoFin2="";

				if(((this.cuentacontablecreditofin2sForeignKey==null||this.cuentacontablecreditofin2sForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_fin2FacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_fin2FacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFin2()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCreditoFin2=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCreditoFin2=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCreditoFin2, "");
						finalQueryGlobalCuentaContableCreditoFin2+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCreditoFin2sForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCreditoFin2=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidCuentaContableCreditoFin2Actual();
					}
				} else {
					finalQueryGlobalCuentaContableCreditoFin2="NONE";
				}


				String finalQueryGlobalCuentaContableCredito="";

				if(((this.cuentacontablecreditosForeignKey==null||this.cuentacontablecreditosForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_creditoFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_creditoFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableCredito=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableCredito=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableCredito, "");
						finalQueryGlobalCuentaContableCredito+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableCreditosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableCredito=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidCuentaContableCreditoActual();
					}
				} else {
					finalQueryGlobalCuentaContableCredito="NONE";
				}


				String finalQueryGlobalTipoMovimiento="";

				if(((this.tipomovimientosForeignKey==null||this.tipomovimientosForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_tipo_movimientoFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_tipo_movimientoFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimiento()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoMovimientoConstantesFunciones.getArrayColumnasGlobalesTipoMovimiento(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoMovimiento=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoMovimientoConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoMovimiento=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoMovimiento, "");
						finalQueryGlobalTipoMovimiento+=TipoMovimientoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoMovimientosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoMovimiento=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidTipoMovimientoActual();
					}
				} else {
					finalQueryGlobalTipoMovimiento="NONE";
				}


				String finalQueryGlobalTipoMovimientoModulo="";

				if(((this.tipomovimientomodulosForeignKey==null||this.tipomovimientomodulosForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_tipo_movimiento_moduloFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_tipo_movimiento_moduloFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimientoModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoMovimientoModuloConstantesFunciones.getArrayColumnasGlobalesTipoMovimientoModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

						finalQueryGlobalTipoMovimientoModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoMovimientoModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoMovimientoModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoMovimientoModulo, "");
						finalQueryGlobalTipoMovimientoModulo+=TipoMovimientoModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoMovimientoModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoMovimientoModulo=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidTipoMovimientoModuloActual();
					}
				} else {
					finalQueryGlobalTipoMovimientoModulo="NONE";
				}


				String finalQueryGlobalTipoTransaccionModulo="";

				if(((this.tipotransaccionmodulosForeignKey==null||this.tipotransaccionmodulosForeignKey.size()<=0) && this.facturaproveedorConstantesFunciones.cargarid_tipo_transaccion_moduloFacturaProveedor)
					 || (this.esRecargarFks && this.facturaproveedorConstantesFunciones.cargarid_tipo_transaccion_moduloFacturaProveedor)) {

					if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoTransaccionModuloConstantesFunciones.getArrayColumnasGlobalesTipoTransaccionModulo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						moduloActualAux.setId(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR);

						finalQueryGlobalTipoTransaccionModulo=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,moduloActualAux,true,false,arrColumnasGlobales,TipoTransaccionModuloConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoTransaccionModulo=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoTransaccionModulo, "");
						finalQueryGlobalTipoTransaccionModulo+=TipoTransaccionModuloConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoTransaccionModulosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoTransaccionModulo=" WHERE " + ConstantesSql.ID + "="+facturaproveedorSessionBean.getlidTipoTransaccionModuloActual();
					}
				} else {
					finalQueryGlobalTipoTransaccionModulo="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				facturaproveedorReturnGeneral=facturaproveedorLogic.cargarCombosLoteForeignKeyFacturaProveedor(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEjercicio,finalQueryGlobalPeriodo,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalModulo,finalQueryGlobalPlantillaFactura,finalQueryGlobalTipoDocumento,finalQueryGlobalFactura,finalQueryGlobalTransaccion,finalQueryGlobalCliente,finalQueryGlobalEmpleadoSolicita,finalQueryGlobalMoneda,finalQueryGlobalEmpleado,finalQueryGlobalTipoRetencionFuente1,finalQueryGlobalTipoRetencionFuente2,finalQueryGlobalTipoRetencionIva1,finalQueryGlobalTipoRetencionIva2,finalQueryGlobalTipoTributario,finalQueryGlobalCuentaContableCreditoFiscalBienes,finalQueryGlobalResponsableFondo,finalQueryGlobalCuentaContableCreditoFiscalServicios,finalQueryGlobalCuentaContableGasto,finalQueryGlobalCuentaContableGasto2,finalQueryGlobalCuentaContableCreditoFin,finalQueryGlobalCuentaContableCreditoFin2,finalQueryGlobalCuentaContableCredito,finalQueryGlobalTipoMovimiento,finalQueryGlobalTipoMovimientoModulo,finalQueryGlobalTipoTransaccionModulo);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=facturaproveedorReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=facturaproveedorReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=facturaproveedorReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPeriodo.equals("NONE")) {
				this.periodosForeignKey=facturaproveedorReturnGeneral.getperiodosForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=facturaproveedorReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=facturaproveedorReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalModulo.equals("NONE")) {
				this.modulosForeignKey=facturaproveedorReturnGeneral.getmodulosForeignKey();
			}

			if(!finalQueryGlobalPlantillaFactura.equals("NONE")) {
				this.plantillafacturasForeignKey=facturaproveedorReturnGeneral.getplantillafacturasForeignKey();
			}

			if(!finalQueryGlobalTipoDocumento.equals("NONE")) {
				this.tipodocumentosForeignKey=facturaproveedorReturnGeneral.gettipodocumentosForeignKey();
			}

			if(!finalQueryGlobalFactura.equals("NONE")) {
				this.facturasForeignKey=facturaproveedorReturnGeneral.getfacturasForeignKey();
			}

			if(!finalQueryGlobalTransaccion.equals("NONE")) {
				this.transaccionsForeignKey=facturaproveedorReturnGeneral.gettransaccionsForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=facturaproveedorReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalEmpleadoSolicita.equals("NONE")) {
				this.empleadosolicitasForeignKey=facturaproveedorReturnGeneral.getempleadosolicitasForeignKey();
			}

			if(!finalQueryGlobalMoneda.equals("NONE")) {
				this.monedasForeignKey=facturaproveedorReturnGeneral.getmonedasForeignKey();
			}

			if(!finalQueryGlobalEmpleado.equals("NONE")) {
				this.empleadosForeignKey=facturaproveedorReturnGeneral.getempleadosForeignKey();
			}

			if(!finalQueryGlobalTipoRetencionFuente1.equals("NONE")) {
				this.tiporetencionfuente1sForeignKey=facturaproveedorReturnGeneral.gettiporetencionfuente1sForeignKey();
			}

			if(!finalQueryGlobalTipoRetencionFuente2.equals("NONE")) {
				this.tiporetencionfuente2sForeignKey=facturaproveedorReturnGeneral.gettiporetencionfuente2sForeignKey();
			}

			if(!finalQueryGlobalTipoRetencionIva1.equals("NONE")) {
				this.tiporetencioniva1sForeignKey=facturaproveedorReturnGeneral.gettiporetencioniva1sForeignKey();
			}

			if(!finalQueryGlobalTipoRetencionIva2.equals("NONE")) {
				this.tiporetencioniva2sForeignKey=facturaproveedorReturnGeneral.gettiporetencioniva2sForeignKey();
			}

			if(!finalQueryGlobalTipoTributario.equals("NONE")) {
				this.tipotributariosForeignKey=facturaproveedorReturnGeneral.gettipotributariosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCreditoFiscalBienes.equals("NONE")) {
				this.cuentacontablecreditofiscalbienessForeignKey=facturaproveedorReturnGeneral.getcuentacontablecreditofiscalbienessForeignKey();
			}

			if(!finalQueryGlobalResponsableFondo.equals("NONE")) {
				this.responsablefondosForeignKey=facturaproveedorReturnGeneral.getresponsablefondosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCreditoFiscalServicios.equals("NONE")) {
				this.cuentacontablecreditofiscalserviciossForeignKey=facturaproveedorReturnGeneral.getcuentacontablecreditofiscalserviciossForeignKey();
			}

			if(!finalQueryGlobalCuentaContableGasto.equals("NONE")) {
				this.cuentacontablegastosForeignKey=facturaproveedorReturnGeneral.getcuentacontablegastosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableGasto2.equals("NONE")) {
				this.cuentacontablegasto2sForeignKey=facturaproveedorReturnGeneral.getcuentacontablegasto2sForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCreditoFin.equals("NONE")) {
				this.cuentacontablecreditofinsForeignKey=facturaproveedorReturnGeneral.getcuentacontablecreditofinsForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCreditoFin2.equals("NONE")) {
				this.cuentacontablecreditofin2sForeignKey=facturaproveedorReturnGeneral.getcuentacontablecreditofin2sForeignKey();
			}

			if(!finalQueryGlobalCuentaContableCredito.equals("NONE")) {
				this.cuentacontablecreditosForeignKey=facturaproveedorReturnGeneral.getcuentacontablecreditosForeignKey();
			}

			if(!finalQueryGlobalTipoMovimiento.equals("NONE")) {
				this.tipomovimientosForeignKey=facturaproveedorReturnGeneral.gettipomovimientosForeignKey();
			}

			if(!finalQueryGlobalTipoMovimientoModulo.equals("NONE")) {
				this.tipomovimientomodulosForeignKey=facturaproveedorReturnGeneral.gettipomovimientomodulosForeignKey();
			}

			if(!finalQueryGlobalTipoTransaccionModulo.equals("NONE")) {
				this.tipotransaccionmodulosForeignKey=facturaproveedorReturnGeneral.gettipotransaccionmodulosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyFacturaProveedor()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPeriodo();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyModulo();
			this.addItemDefectoCombosForeignKeyPlantillaFactura();
			this.addItemDefectoCombosForeignKeyTipoDocumento();
			this.addItemDefectoCombosForeignKeyFactura();
			this.addItemDefectoCombosForeignKeyTransaccion();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyEmpleadoSolicita();
			this.addItemDefectoCombosForeignKeyMoneda();
			this.addItemDefectoCombosForeignKeyEmpleado();
			this.addItemDefectoCombosForeignKeyTipoRetencionFuente1();
			this.addItemDefectoCombosForeignKeyTipoRetencionFuente2();
			this.addItemDefectoCombosForeignKeyTipoRetencionIva1();
			this.addItemDefectoCombosForeignKeyTipoRetencionIva2();
			this.addItemDefectoCombosForeignKeyTipoTributario();
			this.addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalBienes();
			this.addItemDefectoCombosForeignKeyResponsableFondo();
			this.addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalServicios();
			this.addItemDefectoCombosForeignKeyCuentaContableGasto();
			this.addItemDefectoCombosForeignKeyCuentaContableGasto2();
			this.addItemDefectoCombosForeignKeyCuentaContableCreditoFin();
			this.addItemDefectoCombosForeignKeyCuentaContableCreditoFin2();
			this.addItemDefectoCombosForeignKeyCuentaContableCredito();
			this.addItemDefectoCombosForeignKeyTipoMovimiento();
			this.addItemDefectoCombosForeignKeyTipoMovimientoModulo();
			this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPeriodo()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionPeriodo()) {
				Periodo periodo=new Periodo();
				PeriodoConstantesFunciones.setPeriodoDescripcion(periodo,Constantes.SMENSAJE_ESCOJA_OPCION);
				periodo.setId(null);

				if(!PeriodoConstantesFunciones.ExisteEnLista(this.periodosForeignKey,periodo,true)) {

					this.periodosForeignKey.add(0,periodo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyModulo()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionModulo()) {
				Modulo modulo=new Modulo();
				ModuloConstantesFunciones.setModuloDescripcion(modulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				modulo.setId(null);

				if(!ModuloConstantesFunciones.ExisteEnLista(this.modulosForeignKey,modulo,true)) {

					this.modulosForeignKey.add(0,modulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPlantillaFactura()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionPlantillaFactura()) {
				PlantillaFactura plantillafactura=new PlantillaFactura();
				PlantillaFacturaConstantesFunciones.setPlantillaFacturaDescripcion(plantillafactura,Constantes.SMENSAJE_ESCOJA_OPCION);
				plantillafactura.setId(null);

				if(!PlantillaFacturaConstantesFunciones.ExisteEnLista(this.plantillafacturasForeignKey,plantillafactura,true)) {

					this.plantillafacturasForeignKey.add(0,plantillafactura);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoDocumento()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoDocumento()) {
				TipoDocumento tipodocumento=new TipoDocumento();
				TipoDocumentoConstantesFunciones.setTipoDocumentoDescripcion(tipodocumento,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipodocumento.setId(null);

				if(!TipoDocumentoConstantesFunciones.ExisteEnLista(this.tipodocumentosForeignKey,tipodocumento,true)) {

					this.tipodocumentosForeignKey.add(0,tipodocumento);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFactura()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionFactura()) {
				Factura factura=new Factura();
				FacturaConstantesFunciones.setFacturaDescripcion(factura,Constantes.SMENSAJE_ESCOJA_OPCION);
				factura.setId(null);

				if(!FacturaConstantesFunciones.ExisteEnLista(this.facturasForeignKey,factura,true)) {

					this.facturasForeignKey.add(0,factura);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTransaccion()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTransaccion()) {
				Transaccion transaccion=new Transaccion();
				TransaccionConstantesFunciones.setTransaccionDescripcion(transaccion,Constantes.SMENSAJE_ESCOJA_OPCION);
				transaccion.setId(null);

				if(!TransaccionConstantesFunciones.ExisteEnLista(this.transaccionsForeignKey,transaccion,true)) {

					this.transaccionsForeignKey.add(0,transaccion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpleadoSolicita()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpleadoSolicita()) {
				Empleado empleadosolicita=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleadosolicita,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleadosolicita.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosolicitasForeignKey,empleadosolicita,true)) {

					this.empleadosolicitasForeignKey.add(0,empleadosolicita);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMoneda()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionMoneda()) {
				Moneda moneda=new Moneda();
				MonedaConstantesFunciones.setMonedaDescripcion(moneda,Constantes.SMENSAJE_ESCOJA_OPCION);
				moneda.setId(null);

				if(!MonedaConstantesFunciones.ExisteEnLista(this.monedasForeignKey,moneda,true)) {

					this.monedasForeignKey.add(0,moneda);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpleado()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				Empleado empleado=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleado,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleado.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosForeignKey,empleado,true)) {

					this.empleadosForeignKey.add(0,empleado);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencionFuente1()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuente1()) {
				TipoRetencion tiporetencionfuente1=new TipoRetencion();
				TipoRetencionConstantesFunciones.setTipoRetencionDescripcion(tiporetencionfuente1,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencionfuente1.setId(null);

				if(!TipoRetencionConstantesFunciones.ExisteEnLista(this.tiporetencionfuente1sForeignKey,tiporetencionfuente1,true)) {

					this.tiporetencionfuente1sForeignKey.add(0,tiporetencionfuente1);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencionFuente2()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionFuente2()) {
				TipoRetencion tiporetencionfuente2=new TipoRetencion();
				TipoRetencionConstantesFunciones.setTipoRetencionDescripcion(tiporetencionfuente2,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencionfuente2.setId(null);

				if(!TipoRetencionConstantesFunciones.ExisteEnLista(this.tiporetencionfuente2sForeignKey,tiporetencionfuente2,true)) {

					this.tiporetencionfuente2sForeignKey.add(0,tiporetencionfuente2);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencionIva1()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIva1()) {
				TipoRetencion tiporetencioniva1=new TipoRetencion();
				TipoRetencionConstantesFunciones.setTipoRetencionDescripcion(tiporetencioniva1,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencioniva1.setId(null);

				if(!TipoRetencionConstantesFunciones.ExisteEnLista(this.tiporetencioniva1sForeignKey,tiporetencioniva1,true)) {

					this.tiporetencioniva1sForeignKey.add(0,tiporetencioniva1);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencionIva2()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIva2()) {
				TipoRetencion tiporetencioniva2=new TipoRetencion();
				TipoRetencionConstantesFunciones.setTipoRetencionDescripcion(tiporetencioniva2,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencioniva2.setId(null);

				if(!TipoRetencionConstantesFunciones.ExisteEnLista(this.tiporetencioniva2sForeignKey,tiporetencioniva2,true)) {

					this.tiporetencioniva2sForeignKey.add(0,tiporetencioniva2);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoTributario()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoTributario()) {
				TipoTributario tipotributario=new TipoTributario();
				TipoTributarioConstantesFunciones.setTipoTributarioDescripcion(tipotributario,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipotributario.setId(null);

				if(!TipoTributarioConstantesFunciones.ExisteEnLista(this.tipotributariosForeignKey,tipotributario,true)) {

					this.tipotributariosForeignKey.add(0,tipotributario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalBienes()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFiscalBienes()) {
				CuentaContable cuentacontablecreditofiscalbienes=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecreditofiscalbienes,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecreditofiscalbienes.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecreditofiscalbienessForeignKey,cuentacontablecreditofiscalbienes,true)) {

					this.cuentacontablecreditofiscalbienessForeignKey.add(0,cuentacontablecreditofiscalbienes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyResponsableFondo()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionResponsableFondo()) {
				ResponsableFondo responsablefondo=new ResponsableFondo();
				ResponsableFondoConstantesFunciones.setResponsableFondoDescripcion(responsablefondo,Constantes.SMENSAJE_ESCOJA_OPCION);
				responsablefondo.setId(null);

				if(!ResponsableFondoConstantesFunciones.ExisteEnLista(this.responsablefondosForeignKey,responsablefondo,true)) {

					this.responsablefondosForeignKey.add(0,responsablefondo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalServicios()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFiscalServicios()) {
				CuentaContable cuentacontablecreditofiscalservicios=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecreditofiscalservicios,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecreditofiscalservicios.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecreditofiscalserviciossForeignKey,cuentacontablecreditofiscalservicios,true)) {

					this.cuentacontablecreditofiscalserviciossForeignKey.add(0,cuentacontablecreditofiscalservicios);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableGasto()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableGasto()) {
				CuentaContable cuentacontablegasto=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablegasto,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablegasto.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablegastosForeignKey,cuentacontablegasto,true)) {

					this.cuentacontablegastosForeignKey.add(0,cuentacontablegasto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableGasto2()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableGasto2()) {
				CuentaContable cuentacontablegasto2=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablegasto2,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablegasto2.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablegasto2sForeignKey,cuentacontablegasto2,true)) {

					this.cuentacontablegasto2sForeignKey.add(0,cuentacontablegasto2);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCreditoFin()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFin()) {
				CuentaContable cuentacontablecreditofin=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecreditofin,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecreditofin.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecreditofinsForeignKey,cuentacontablecreditofin,true)) {

					this.cuentacontablecreditofinsForeignKey.add(0,cuentacontablecreditofin);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCreditoFin2()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCreditoFin2()) {
				CuentaContable cuentacontablecreditofin2=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecreditofin2,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecreditofin2.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecreditofin2sForeignKey,cuentacontablecreditofin2,true)) {

					this.cuentacontablecreditofin2sForeignKey.add(0,cuentacontablecreditofin2);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableCredito()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableCredito()) {
				CuentaContable cuentacontablecredito=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecredito,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecredito.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecreditosForeignKey,cuentacontablecredito,true)) {

					this.cuentacontablecreditosForeignKey.add(0,cuentacontablecredito);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoMovimiento()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimiento()) {
				TipoMovimiento tipomovimiento=new TipoMovimiento();
				TipoMovimientoConstantesFunciones.setTipoMovimientoDescripcion(tipomovimiento,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipomovimiento.setId(null);

				if(!TipoMovimientoConstantesFunciones.ExisteEnLista(this.tipomovimientosForeignKey,tipomovimiento,true)) {

					this.tipomovimientosForeignKey.add(0,tipomovimiento);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoMovimientoModulo()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoMovimientoModulo()) {
				TipoMovimientoModulo tipomovimientomodulo=new TipoMovimientoModulo();
				TipoMovimientoModuloConstantesFunciones.setTipoMovimientoModuloDescripcion(tipomovimientomodulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipomovimientomodulo.setId(null);

				if(!TipoMovimientoModuloConstantesFunciones.ExisteEnLista(this.tipomovimientomodulosForeignKey,tipomovimientomodulo,true)) {

					this.tipomovimientomodulosForeignKey.add(0,tipomovimientomodulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoTransaccionModulo()throws Exception {
		try {

			if(!this.facturaproveedorSessionBean.getisBusquedaDesdeForeignKeySesionTipoTransaccionModulo()) {
				TipoTransaccionModulo tipotransaccionmodulo=new TipoTransaccionModulo();
				TipoTransaccionModuloConstantesFunciones.setTipoTransaccionModuloDescripcion(tipotransaccionmodulo,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipotransaccionmodulo.setId(null);

				if(!TipoTransaccionModuloConstantesFunciones.ExisteEnLista(this.tipotransaccionmodulosForeignKey,tipotransaccionmodulo,true)) {

					this.tipotransaccionmodulosForeignKey.add(0,tipotransaccionmodulo);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyFacturaProveedor()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyTipoTransaccionModulo("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyFacturaProveedor(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyTipoTransaccionModulo(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyTipoTransaccionModulo(JComboBox jComboBoxTipoTransaccionModuloGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			TipoTransaccionModulo tipotransaccionmoduloLocal=(TipoTransaccionModulo)jComboBoxTipoTransaccionModuloGenerico.getSelectedItem();

			if(tipotransaccionmoduloLocal!=null  && tipotransaccionmoduloLocal.getId()!=null  && tipotransaccionmoduloLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_tipo_transaccion_modulo="+tipotransaccionmoduloLocal.getId();
			}
			//REDEFINE

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboTransaccion=sFinalQueryCombo;

			this.transaccionsForeignKey=new ArrayList<Transaccion>();
			this.cargarCombosForeignKeyTransaccion(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyTipoTransaccionModulo(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.addItemListener(new ComboBoxItemListener(this,"id_tipo_transaccion_moduloFacturaProveedor"));
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.addFocusListener(new ComboBoxFocusListener(this,"id_tipo_transaccion_moduloFacturaProveedor"));
					}
				} else {
					if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.addActionListener(new ComboBoxActionListener(this,"id_tipo_transaccion_moduloFacturaProveedor"));
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.addFocusListener(new ComboBoxFocusListener(this,"id_tipo_transaccion_moduloFacturaProveedor"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor"));

						this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor"));

					} else {
						this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor"));

						this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyFacturaProveedor()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualPeriodoForeignKey(this.parametroGeneralUsuario.getid_periodo(),false,"Formulario");
				this.setActualModuloForeignKey(ModuloConstantesFuncionesAdditional.LID_MODULO_CUENTAS_POR_COBRAR,false,"Formulario");
				this.setActualMonedaForeignKey(this.parametroGeneralUsuario.getid_moneda(),false,"Formulario");
			
			
				this.facturaproveedor.setfecha_emision(this.parametroGeneralUsuario.getfecha_sistema());
				this.facturaproveedor.setfecha_vence(this.parametroGeneralUsuario.getfecha_sistema());
				this.facturaproveedor.setfecha_validez(this.parametroGeneralUsuario.getfecha_sistema());
				this.facturaproveedor.setanexo_fecha_validez(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyFacturaProveedor();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyFacturaProveedor(FacturaProveedor facturaproveedor)throws Exception {	
		try {
			
			this.setActualPlantillaFacturaForeignKey(facturaproveedor.getid_plantilla_factura(),false,"Formulario");
			this.setActualTipoDocumentoForeignKey(facturaproveedor.getid_tipo_documento(),false,"Formulario");
			this.setActualFacturaForeignKey(facturaproveedor.getid_factura(),false,"Formulario");
			this.setActualTransaccionForeignKey(facturaproveedor.getid_transaccion(),false,"Formulario");
			this.setActualClienteForeignKey(facturaproveedor.getid_cliente(),false,"Formulario");
			this.setActualEmpleadoSolicitaForeignKey(facturaproveedor.getid_empleado_solicita(),false,"Formulario");
			this.setActualEmpleadoForeignKey(facturaproveedor.getid_empleado(),false,"Formulario");
			this.setActualTipoRetencionFuente1ForeignKey(facturaproveedor.getid_tipo_retencion_fuente1(),false,"Formulario");
			this.setActualTipoRetencionFuente2ForeignKey(facturaproveedor.getid_tipo_retencion_fuente2(),false,"Formulario");
			this.setActualTipoRetencionIva1ForeignKey(facturaproveedor.getid_tipo_retencion_iva1(),false,"Formulario");
			this.setActualTipoRetencionIva2ForeignKey(facturaproveedor.getid_tipo_retencion_iva2(),false,"Formulario");
			this.setActualTipoTributarioForeignKey(facturaproveedor.getid_tipo_tributario(),false,"Formulario");
			this.setActualCuentaContableCreditoFiscalBienesForeignKey(facturaproveedor.getid_cuenta_contable_credito_fiscal_bienes(),false,"Formulario");
			this.setActualResponsableFondoForeignKey(facturaproveedor.getid_responsable_fondo(),false,"Formulario");
			this.setActualCuentaContableCreditoFiscalServiciosForeignKey(facturaproveedor.getid_cuenta_contable_credito_fiscal_servicios(),false,"Formulario");
			this.setActualCuentaContableGastoForeignKey(facturaproveedor.getid_cuenta_contable_gasto(),false,"Formulario");
			this.setActualCuentaContableGasto2ForeignKey(facturaproveedor.getid_cuenta_contable_gasto2(),false,"Formulario");
			this.setActualCuentaContableCreditoFinForeignKey(facturaproveedor.getid_cuenta_contable_credito_fin(),false,"Formulario");
			this.setActualCuentaContableCreditoFin2ForeignKey(facturaproveedor.getid_cuenta_contable_credito_fin2(),false,"Formulario");
			this.setActualCuentaContableCreditoForeignKey(facturaproveedor.getid_cuenta_contable_credito(),false,"Formulario");
			this.setActualTipoMovimientoForeignKey(facturaproveedor.getid_tipo_movimiento(),false,"Formulario");
			this.setActualTipoMovimientoModuloForeignKey(facturaproveedor.getid_tipo_movimiento_modulo(),false,"Formulario");
			this.setActualTipoTransaccionModuloForeignKey(facturaproveedor.getid_tipo_transaccion_modulo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyFacturaProveedor(FacturaProveedor facturaproveedor,String sTipoEvento)throws Exception {	
		try {
			
			

				if(facturaproveedor.getPlantillaFactura()!=null && !sTipoEvento.equals("id_plantilla_facturaFacturaProveedor")) { //sTipoEvento Evita Bucle Infinito

					this.plantillafacturasForeignKey=new ArrayList<PlantillaFactura>();
					this.plantillafacturasForeignKey.add(facturaproveedor.getPlantillaFactura());

					this.addItemDefectoCombosForeignKeyPlantillaFactura();
					this.cargarCombosFramePlantillaFacturasForeignKey("Todos");
				}

				if(facturaproveedor.getFactura()!=null && !sTipoEvento.equals("id_facturaFacturaProveedor")) { //sTipoEvento Evita Bucle Infinito

					this.facturasForeignKey=new ArrayList<Factura>();
					this.facturasForeignKey.add(facturaproveedor.getFactura());

					this.addItemDefectoCombosForeignKeyFactura();
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				if(facturaproveedor.getCliente()!=null && !sTipoEvento.equals("id_clienteFacturaProveedor")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(facturaproveedor.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				if(facturaproveedor.getEmpleadoSolicita()!=null && !sTipoEvento.equals("id_empleado_solicitaFacturaProveedor")) { //sTipoEvento Evita Bucle Infinito

					this.empleadosolicitasForeignKey=new ArrayList<Empleado>();
					this.empleadosolicitasForeignKey.add(facturaproveedor.getEmpleadoSolicita());

					this.addItemDefectoCombosForeignKeyEmpleadoSolicita();
					this.cargarCombosFrameEmpleadoSolicitasForeignKey("Todos");
				}

				if(facturaproveedor.getEmpleado()!=null && !sTipoEvento.equals("id_empleadoFacturaProveedor")) { //sTipoEvento Evita Bucle Infinito

					this.empleadosForeignKey=new ArrayList<Empleado>();
					this.empleadosForeignKey.add(facturaproveedor.getEmpleado());

					this.addItemDefectoCombosForeignKeyEmpleado();
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				if(facturaproveedor.getCuentaContableGasto()!=null && !sTipoEvento.equals("id_cuenta_contable_gastoFacturaProveedor")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablegastosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablegastosForeignKey.add(facturaproveedor.getCuentaContableGasto());

					this.addItemDefectoCombosForeignKeyCuentaContableGasto();
					this.cargarCombosFrameCuentaContableGastosForeignKey("Todos");
				}

				if(facturaproveedor.getCuentaContableCreditoFin()!=null && !sTipoEvento.equals("id_cuenta_contable_credito_finFacturaProveedor")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecreditofinsForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecreditofinsForeignKey.add(facturaproveedor.getCuentaContableCreditoFin());

					this.addItemDefectoCombosForeignKeyCuentaContableCreditoFin();
					this.cargarCombosFrameCuentaContableCreditoFinsForeignKey("Todos");
				}

				if(facturaproveedor.getCuentaContableCreditoFin2()!=null && !sTipoEvento.equals("id_cuenta_contable_credito_fin2FacturaProveedor")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecreditofin2sForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecreditofin2sForeignKey.add(facturaproveedor.getCuentaContableCreditoFin2());

					this.addItemDefectoCombosForeignKeyCuentaContableCreditoFin2();
					this.cargarCombosFrameCuentaContableCreditoFin2sForeignKey("Todos");
				}

				if(facturaproveedor.getCuentaContableCredito()!=null && !sTipoEvento.equals("id_cuenta_contable_creditoFacturaProveedor")) { //sTipoEvento Evita Bucle Infinito

					this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();
					this.cuentacontablecreditosForeignKey.add(facturaproveedor.getCuentaContableCredito());

					this.addItemDefectoCombosForeignKeyCuentaContableCredito();
					this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyFacturaProveedor()throws Exception {	
		try {
			
			this.setActualPlantillaFacturaForeignKey(this.facturaproveedorConstantesFunciones.getid_plantilla_factura(),false,"Formulario");
			this.setActualTipoDocumentoForeignKey(this.facturaproveedorConstantesFunciones.getid_tipo_documento(),false,"Formulario");
			this.setActualFacturaForeignKey(this.facturaproveedorConstantesFunciones.getid_factura(),false,"Formulario");
			this.setActualTransaccionForeignKey(this.facturaproveedorConstantesFunciones.getid_transaccion(),false,"Formulario");
			this.setActualClienteForeignKey(this.facturaproveedorConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualEmpleadoSolicitaForeignKey(this.facturaproveedorConstantesFunciones.getid_empleado_solicita(),false,"Formulario");
			this.setActualEmpleadoForeignKey(this.facturaproveedorConstantesFunciones.getid_empleado(),false,"Formulario");
			this.setActualTipoRetencionFuente1ForeignKey(this.facturaproveedorConstantesFunciones.getid_tipo_retencion_fuente1(),false,"Formulario");
			this.setActualTipoRetencionFuente2ForeignKey(this.facturaproveedorConstantesFunciones.getid_tipo_retencion_fuente2(),false,"Formulario");
			this.setActualTipoRetencionIva1ForeignKey(this.facturaproveedorConstantesFunciones.getid_tipo_retencion_iva1(),false,"Formulario");
			this.setActualTipoRetencionIva2ForeignKey(this.facturaproveedorConstantesFunciones.getid_tipo_retencion_iva2(),false,"Formulario");
			this.setActualTipoTributarioForeignKey(this.facturaproveedorConstantesFunciones.getid_tipo_tributario(),false,"Formulario");
			this.setActualCuentaContableCreditoFiscalBienesForeignKey(this.facturaproveedorConstantesFunciones.getid_cuenta_contable_credito_fiscal_bienes(),false,"Formulario");
			this.setActualResponsableFondoForeignKey(this.facturaproveedorConstantesFunciones.getid_responsable_fondo(),false,"Formulario");
			this.setActualCuentaContableCreditoFiscalServiciosForeignKey(this.facturaproveedorConstantesFunciones.getid_cuenta_contable_credito_fiscal_servicios(),false,"Formulario");
			this.setActualCuentaContableGastoForeignKey(this.facturaproveedorConstantesFunciones.getid_cuenta_contable_gasto(),false,"Formulario");
			this.setActualCuentaContableGasto2ForeignKey(this.facturaproveedorConstantesFunciones.getid_cuenta_contable_gasto2(),false,"Formulario");
			this.setActualCuentaContableCreditoFinForeignKey(this.facturaproveedorConstantesFunciones.getid_cuenta_contable_credito_fin(),false,"Formulario");
			this.setActualCuentaContableCreditoFin2ForeignKey(this.facturaproveedorConstantesFunciones.getid_cuenta_contable_credito_fin2(),false,"Formulario");
			this.setActualCuentaContableCreditoForeignKey(this.facturaproveedorConstantesFunciones.getid_cuenta_contable_credito(),false,"Formulario");
			this.setActualTipoMovimientoForeignKey(this.facturaproveedorConstantesFunciones.getid_tipo_movimiento(),false,"Formulario");
			this.setActualTipoMovimientoModuloForeignKey(this.facturaproveedorConstantesFunciones.getid_tipo_movimiento_modulo(),false,"Formulario");
			this.setActualTipoTransaccionModuloForeignKey(this.facturaproveedorConstantesFunciones.getid_tipo_transaccion_modulo(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyFacturaProveedor()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
					Periodo periodoActual=(Periodo)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.getSelectedItem();
					this.setActualMesForeignKey(periodoActual.getid_mes(),false,"Formulario");
				}
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyFacturaProveedor()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyFacturaProveedor()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroFacturaProveedor()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyFacturaProveedor()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePeriodosForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameModulosForeignKey("Todos");
			this.cargarCombosFramePlantillaFacturasForeignKey("Todos");
			this.cargarCombosFrameTipoDocumentosForeignKey("Todos");
			this.cargarCombosFrameFacturasForeignKey("Todos");
			this.cargarCombosFrameTransaccionsForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameEmpleadoSolicitasForeignKey("Todos");
			this.cargarCombosFrameMonedasForeignKey("Todos");
			this.cargarCombosFrameEmpleadosForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionFuente1sForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionFuente2sForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionIva1sForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionIva2sForeignKey("Todos");
			this.cargarCombosFrameTipoTributariosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCreditoFiscalBienessForeignKey("Todos");
			this.cargarCombosFrameResponsableFondosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCreditoFiscalServiciossForeignKey("Todos");
			this.cargarCombosFrameCuentaContableGastosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableGasto2sForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCreditoFinsForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCreditoFin2sForeignKey("Todos");
			this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
			this.cargarCombosFrameTipoMovimientosForeignKey("Todos");
			this.cargarCombosFrameTipoMovimientoModulosForeignKey("Todos");
			this.cargarCombosFrameTipoTransaccionModulosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyFacturaProveedor(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePeriodosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePlantillaFacturasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoDocumentosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTransaccionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpleadoSolicitasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMonedasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionFuente1sForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionFuente2sForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionIva1sForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionIva2sForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoTributariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCreditoFiscalBienessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameResponsableFondosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCreditoFiscalServiciossForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableGastosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableGasto2sForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCreditoFinsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCreditoFin2sForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableCreditosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoMovimientosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoMovimientoModulosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoTransaccionModulosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyFacturaProveedor()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	





























































	public void recargarFormFacturaProveedorTipoTransaccionModulo(JComboBox<?> jComboBoxGenericoTipoTransaccionModulo,String sFormularioTipoBusqueda) throws Exception {

	}
	
	

	public FacturaProveedorBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public FacturaProveedorBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public FacturaProveedorBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.facturaproveedorSessionBean=new FacturaProveedorSessionBean(); 
		this.facturaproveedorConstantesFunciones=new FacturaProveedorConstantesFunciones(); 
		this.facturaproveedorBean=new FacturaProveedor();//(this.facturaproveedorConstantesFunciones); 		
		this.facturaproveedorReturnGeneral=new FacturaProveedorParameterReturnGeneral(); 
		
		this.facturaproveedorSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.facturaproveedorSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public FacturaProveedorBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public FacturaProveedorBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public FacturaProveedorBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessFacturaProveedor(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			//OBLIGA VALIDA CON GUARDAR RELACIONES, TAMBIEN EN SWING
			conGuardarRelaciones=true;
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.facturaproveedorConstantesFunciones=new FacturaProveedorConstantesFunciones(); 
			this.facturaproveedorBean=new FacturaProveedor();//this.facturaproveedorConstantesFunciones); 			
			this.facturaproveedorReturnGeneral=new FacturaProveedorParameterReturnGeneral(); 
		
			FacturaProveedorBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Factura Proveedor Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.facturaproveedor=new FacturaProveedor();
			this.facturaproveedors = new ArrayList<FacturaProveedor>();
			this.facturaproveedorsAux = new ArrayList<FacturaProveedor>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic=new FacturaProveedorLogic();
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			//this.facturaproveedorSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.facturaproveedorSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormFacturaProveedor);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoFacturaProveedor!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoFacturaProveedor);	
					}
					
					if(this.jInternalFrameImportacionFacturaProveedor!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionFacturaProveedor);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByFacturaProveedor!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByFacturaProveedor);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormFacturaProveedor);
				this.jInternalFrameDetalleFormFacturaProveedor.setVisible(false);
				this.jInternalFrameDetalleFormFacturaProveedor.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoFacturaProveedor!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoFacturaProveedor);
					this.jInternalFrameReporteDinamicoFacturaProveedor.setVisible(false);
					this.jInternalFrameReporteDinamicoFacturaProveedor.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionFacturaProveedor!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionFacturaProveedor);
					this.jInternalFrameImportacionFacturaProveedor.setVisible(false);
					this.jInternalFrameImportacionFacturaProveedor.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByFacturaProveedor!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByFacturaProveedor);
					this.jInternalFrameOrderByFacturaProveedor.setVisible(false);
					this.jInternalFrameOrderByFacturaProveedor.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idFacturaProveedorActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=FacturaProveedorConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.facturaproveedorReturnGeneral=new FacturaProveedorParameterReturnGeneral();
			
			this.facturaproveedorParameterGeneral=new FacturaProveedorParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.facturaproveedorLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(FacturaProveedorJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(DetalleFacturaProveedorConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,FacturaProveedorConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.facturaproveedorSessionBean.getEsGuardarRelacionado(),this.facturaproveedorSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,FacturaProveedorConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.facturaproveedorSessionBean.getEsGuardarRelacionado(),this.facturaproveedorSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoFacturaProveedor=false;
			this.isVisibilidadCeldaDuplicarFacturaProveedor=true;
			this.isVisibilidadCeldaCopiarFacturaProveedor=true;
			this.isVisibilidadCeldaVerFormFacturaProveedor=true;
			this.isVisibilidadCeldaOrdenFacturaProveedor=true;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=false;
			this.isVisibilidadCeldaModificarFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarFacturaProveedor=false;
			this.isVisibilidadCeldaEliminarFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdCuentaContableCredito=true;
			this.isVisibilidadFK_IdCuentaContableCreditoFin=true;
			this.isVisibilidadFK_IdCuentaContableCreditoFin2=true;
			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=true;
			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=true;
			this.isVisibilidadFK_IdCuentaContableGasto=true;
			this.isVisibilidadFK_IdCuentaContableGasto2=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpleado=true;
			this.isVisibilidadFK_IdEmpleadoSolicita=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdFactura=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdModulo=true;
			this.isVisibilidadFK_IdMoneda=true;
			this.isVisibilidadFK_IdPeriodo=true;
			this.isVisibilidadFK_IdPlantillaFactura=true;
			this.isVisibilidadFK_IdResponsableFondo=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoDocumento=true;
			this.isVisibilidadFK_IdTipoMovimiento=true;
			this.isVisibilidadFK_IdTipoMovimientoModulo=true;
			this.isVisibilidadFK_IdTipoRetencionFuente1=true;
			this.isVisibilidadFK_IdTipoRetencionFuente2=true;
			this.isVisibilidadFK_IdTipoRetencionIva1=true;
			this.isVisibilidadFK_IdTipoRetencionIva2=true;
			this.isVisibilidadFK_IdTipoTransaccionModulo=true;
			this.isVisibilidadFK_IdTipoTributario=true;
			this.isVisibilidadFK_IdTransaccion=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesFacturaProveedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosFacturaProveedor();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioFacturaProveedor(false);
			
			this.setPermisosUsuarioFacturaProveedor();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado() 
				|| (this.facturaproveedorSessionBean.getEsGuardarRelacionado() && this.facturaproveedorSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioFacturaProveedorClasesRelacionadas();
			}
			
			if(this.facturaproveedorSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioFacturaProveedorClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosFacturaProveedor();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualFacturaProveedor();
			}
			
			if(!this.isPermisoBusquedaFacturaProveedor) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasFacturaProveedor.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioFacturaProveedor,this.isPermisoPaginacionMedioFacturaProveedor,this.isPermisoPaginacionTodoFacturaProveedor);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(FacturaProveedorConstantesFunciones.getTiposSeleccionarFacturaProveedor());
				
				this.tiposColumnasSelect=FacturaProveedorConstantesFunciones.getTiposSeleccionarFacturaProveedor(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectFacturaProveedor();				
				//this.tiposRelacionesSelect=FacturaProveedorConstantesFunciones.getTiposRelacionesFacturaProveedor(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioFacturaProveedor();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioFacturaProveedor(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioFacturaProveedor(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesFacturaProveedor() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.detallefacturaproveedorLogic=new DetalleFacturaProveedorLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.periodoLogic=new PeriodoLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.moduloLogic=new ModuloLogic();
			this.plantillafacturaLogic=new PlantillaFacturaLogic();
			this.tipodocumentoLogic=new TipoDocumentoLogic();
			this.facturaLogic=new FacturaLogic();
			this.transaccionLogic=new TransaccionLogic();
			this.clienteLogic=new ClienteLogic();
			this.empleadosolicitaLogic=new EmpleadoLogic();
			this.monedaLogic=new MonedaLogic();
			this.empleadoLogic=new EmpleadoLogic();
			this.tiporetencionfuente1Logic=new TipoRetencionLogic();
			this.tiporetencionfuente2Logic=new TipoRetencionLogic();
			this.tiporetencioniva1Logic=new TipoRetencionLogic();
			this.tiporetencioniva2Logic=new TipoRetencionLogic();
			this.tipotributarioLogic=new TipoTributarioLogic();
			this.cuentacontablecreditofiscalbienesLogic=new CuentaContableLogic();
			this.responsablefondoLogic=new ResponsableFondoLogic();
			this.cuentacontablecreditofiscalserviciosLogic=new CuentaContableLogic();
			this.cuentacontablegastoLogic=new CuentaContableLogic();
			this.cuentacontablegasto2Logic=new CuentaContableLogic();
			this.cuentacontablecreditofinLogic=new CuentaContableLogic();
			this.cuentacontablecreditofin2Logic=new CuentaContableLogic();
			this.cuentacontablecreditoLogic=new CuentaContableLogic();
			this.tipomovimientoLogic=new TipoMovimientoLogic();
			this.tipomovimientomoduloLogic=new TipoMovimientoModuloLogic();
			this.tipotransaccionmoduloLogic=new TipoTransaccionModuloLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				facturaproveedorImplementable= (FacturaProveedorImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+FacturaProveedorConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				facturaproveedorImplementableHome= (FacturaProveedorImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+FacturaProveedorConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.facturaproveedors= new ArrayList<FacturaProveedor>();
			this.facturaproveedorsEliminados= new ArrayList<FacturaProveedor>();
						
			this.isEsNuevoFacturaProveedor=false;
			this.esParaAccionDesdeFormularioFacturaProveedor=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idPlantillaFacturaActual=0L;
			this.idFacturaActual=0L;
			this.idClienteActual=0L;
			this.idEmpleadoSolicitaActual=0L;
			this.idEmpleadoActual=0L;
			this.idCuentaContableGastoActual=0L;
			this.idCuentaContableCreditoFinActual=0L;
			this.idCuentaContableCreditoFin2Actual=0L;
			this.idCuentaContableCreditoActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.periodosForeignKey=new ArrayList<Periodo>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.modulosForeignKey=new ArrayList<Modulo>() ;
			this.plantillafacturasForeignKey=new ArrayList<PlantillaFactura>() ;
			this.tipodocumentosForeignKey=new ArrayList<TipoDocumento>() ;
			this.facturasForeignKey=new ArrayList<Factura>() ;
			this.transaccionsForeignKey=new ArrayList<Transaccion>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.empleadosolicitasForeignKey=new ArrayList<Empleado>() ;
			this.monedasForeignKey=new ArrayList<Moneda>() ;
			this.empleadosForeignKey=new ArrayList<Empleado>() ;
			this.tiporetencionfuente1sForeignKey=new ArrayList<TipoRetencion>() ;
			this.tiporetencionfuente2sForeignKey=new ArrayList<TipoRetencion>() ;
			this.tiporetencioniva1sForeignKey=new ArrayList<TipoRetencion>() ;
			this.tiporetencioniva2sForeignKey=new ArrayList<TipoRetencion>() ;
			this.tipotributariosForeignKey=new ArrayList<TipoTributario>() ;
			this.cuentacontablecreditofiscalbienessForeignKey=new ArrayList<CuentaContable>() ;
			this.responsablefondosForeignKey=new ArrayList<ResponsableFondo>() ;
			this.cuentacontablecreditofiscalserviciossForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablegastosForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablegasto2sForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecreditofinsForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecreditofin2sForeignKey=new ArrayList<CuentaContable>() ;
			this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>() ;
			this.tipomovimientosForeignKey=new ArrayList<TipoMovimiento>() ;
			this.tipomovimientomodulosForeignKey=new ArrayList<TipoMovimientoModulo>() ;
			this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyFacturaProveedor(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroFacturaProveedor();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			FacturaProveedorBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=FacturaProveedorConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesFacturaProveedor("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingFacturaProveedor(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioFacturaProveedor();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioFacturaProveedor();
			}
			
			FacturaProveedorBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasFacturaProveedor.getTabCount(); i++) {
					this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessFacturaProveedor(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga FacturaProveedor: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectFacturaProveedor() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(DetalleFacturaProveedorConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetalleFacturaProveedorConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesFacturaProveedor")) {
				iIndex=this.jInternalFrameDetalleFormFacturaProveedor.jTabbedPaneRelacionesFacturaProveedor.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormFacturaProveedor.jTabbedPaneRelacionesFacturaProveedor.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();	
				
				

				if(sTitle.equals("Detalle Factura Proveedores")) {
					if(!DetalleFacturaProveedorJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessFacturaProveedor();

						this.cargarParteTabPanelRelacionadaDetalleFacturaProveedor(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessFacturaProveedor();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaDetalleFacturaProveedor(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormFacturaProveedor.cargarSessionConBeanSwingJInternalFrameDetalleFacturaProveedor(false,true,iIndex);
		this.jButtonDetalleFacturaProveedorActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetalleFacturaProveedor();

		//this.jTabbedPaneRelacionesFacturaProveedor.updateUI();
		//this.jTabbedPaneRelacionesFacturaProveedor.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesFacturaProveedor.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("DetalleFacturaProveedor")) {
				int row=this.jTableDatosFacturaProveedor.getSelectedRow();
				jButtonDetalleFacturaProveedorActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Detalle Factura Proveedor")) {

					if(this.isTienePermisosDetalleFacturaProveedor && this.facturaproveedorConstantesFunciones.mostrarDetalleFacturaProveedorFacturaProveedor && !FacturaProveedorConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Detalle Factura Proveedores"+"("+DetalleFacturaProveedorConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Detalle Factura Proveedores");

						if(facturaproveedorConstantesFunciones.resaltarDetalleFacturaProveedorFacturaProveedor!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(facturaproveedorConstantesFunciones.resaltarDetalleFacturaProveedorFacturaProveedor);
						}

						jmenuItem.setEnabled(this.facturaproveedorConstantesFunciones.activarDetalleFacturaProveedorFacturaProveedor);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetalleFacturaProveedor"));

						

						this.jInternalFrameDetalleFormFacturaProveedor.jmenuDetalleFacturaProveedor.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyFacturaProveedor(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyFacturaProveedor(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyFacturaProveedor(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyFacturaProveedorListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyFacturaProveedor();
		
		this.cargarCombosFrameForeignKeyFacturaProveedor();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyFacturaProveedor();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyFacturaProveedor();
		}
	}
	
	

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPlantillaFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyPlantillaFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyPlantillaFactura();
				this.cargarCombosFramePlantillaFacturasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaPlantillaFactura(this.plantillafacturasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoDocumento(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoDocumentoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoDocumento();
				this.cargarCombosFrameTipoDocumentosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoDocumento(this.tipodocumentosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFactura(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFacturaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFactura();
				this.cargarCombosFrameFacturasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFactura(this.facturasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTransaccion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTransaccionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTransaccion();
				this.cargarCombosFrameTransaccionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTransaccion(this.transaccionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoSolicita(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoSolicitaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleadoSolicita();
				this.cargarCombosFrameEmpleadoSolicitasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpleadoSolicita(this.empleadosolicitasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpleado(this.empleadosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionFuente1(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionFuente1Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencionFuente1();
				this.cargarCombosFrameTipoRetencionFuente1sForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencionFuente1(this.tiporetencionfuente1sForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionFuente2(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionFuente2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencionFuente2();
				this.cargarCombosFrameTipoRetencionFuente2sForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencionFuente2(this.tiporetencionfuente2sForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionIva1(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionIva1Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencionIva1();
				this.cargarCombosFrameTipoRetencionIva1sForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencionIva1(this.tiporetencioniva1sForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionIva2(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionIva2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencionIva2();
				this.cargarCombosFrameTipoRetencionIva2sForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencionIva2(this.tiporetencioniva2sForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTributario(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoTributarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoTributario();
				this.cargarCombosFrameTipoTributariosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoTributario(this.tipotributariosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoFiscalBienes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCreditoFiscalBienesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalBienes();
				this.cargarCombosFrameCuentaContableCreditoFiscalBienessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCreditoFiscalBienes(this.cuentacontablecreditofiscalbienessForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyResponsableFondo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyResponsableFondoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyResponsableFondo();
				this.cargarCombosFrameResponsableFondosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaResponsableFondo(this.responsablefondosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoFiscalServicios(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCreditoFiscalServiciosListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalServicios();
				this.cargarCombosFrameCuentaContableCreditoFiscalServiciossForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCreditoFiscalServicios(this.cuentacontablecreditofiscalserviciossForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableGasto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableGastoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableGasto();
				this.cargarCombosFrameCuentaContableGastosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableGasto(this.cuentacontablegastosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableGasto2(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableGasto2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableGasto2();
				this.cargarCombosFrameCuentaContableGasto2sForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableGasto2(this.cuentacontablegasto2sForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoFin(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCreditoFinListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCreditoFin();
				this.cargarCombosFrameCuentaContableCreditoFinsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCreditoFin(this.cuentacontablecreditofinsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCreditoFin2(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCreditoFin2Listas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCreditoFin2();
				this.cargarCombosFrameCuentaContableCreditoFin2sForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCreditoFin2(this.cuentacontablecreditofin2sForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableCredito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableCreditoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableCredito();
				this.cargarCombosFrameCuentaContableCreditosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableCredito(this.cuentacontablecreditosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoMovimiento(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoMovimientoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoMovimiento();
				this.cargarCombosFrameTipoMovimientosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoMovimiento(this.tipomovimientosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoMovimientoModulo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoMovimientoModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoMovimientoModulo();
				this.cargarCombosFrameTipoMovimientoModulosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoMovimientoModulo(this.tipomovimientomodulosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoTransaccionModulo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoTransaccionModuloListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
				this.cargarCombosFrameTipoTransaccionModulosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyTipoTransaccionModulo("Todos");
				}

			this.recargarComboTablaTipoTransaccionModulo(this.tipotransaccionmodulosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoFacturaProveedorActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.facturaproveedorSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			
			
			if(jTableDatosFacturaProveedor.getRowCount()>=1) {
				jTableDatosFacturaProveedor.removeRowSelectionInterval(0, jTableDatosFacturaProveedor.getRowCount()-1);						
			}
			
			this.isEsNuevoFacturaProveedor=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoFacturaProveedor(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesFacturaProveedor(true);			
			//this.facturaproveedor=new FacturaProveedor();
			//this.facturaproveedor.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesFacturaProveedor(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFacturaProveedor() ;
			
			if(FacturaProveedorJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleFacturaProveedor(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.facturaproveedor);	
			this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);				
			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			
			if(this.facturaproveedorSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar FacturaProveedor: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarFacturaProveedorActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosFacturaProveedor.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosFacturaProveedor.getSelectedRows().length;			
			}
			
			facturaproveedorsSeleccionados=this.getFacturaProveedorsSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoFacturaProveedor--;			
				//FacturaProveedor facturaproveedorAux= new FacturaProveedor();			
				//facturaproveedorAux.setId(this.iIdNuevoFacturaProveedor);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//FacturaProveedor facturaproveedorOrigen=new FacturaProveedor();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(FacturaProveedor facturaproveedorOrigen : facturaproveedorsSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							facturaproveedorOrigen =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturaproveedorOrigen =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaFacturaProveedor();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.facturaproveedor.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosFacturaProveedor(facturaproveedorOrigen,this.facturaproveedor,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.facturaproveedorLogic.getFacturaProveedors().add(this.facturaproveedorAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.facturaproveedors.add(this.facturaproveedorAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaFacturaProveedor(false);
				
				this.jTableDatosFacturaProveedor.setRowSelectionInterval(this.getIndiceNuevoFacturaProveedor(), this.getIndiceNuevoFacturaProveedor());
				
				int iLastRow =  this.jTableDatosFacturaProveedor.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosFacturaProveedor.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosFacturaProveedor.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaFacturaProveedor(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();									
		
			FacturaProveedor facturaproveedorOrigen=new FacturaProveedor();
			FacturaProveedor facturaproveedorDestino=new FacturaProveedor();
				
			facturaproveedorsSeleccionados=this.getFacturaProveedorsSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosFacturaProveedor.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || facturaproveedorsSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosFacturaProveedor.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorOrigen =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						facturaproveedorOrigen =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturaproveedorDestino =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						facturaproveedorDestino =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				facturaproveedorOrigen =facturaproveedorsSeleccionados.get(0);
				facturaproveedorDestino =facturaproveedorsSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosFacturaProveedor(facturaproveedorOrigen,facturaproveedorDestino,true,false);
				
				facturaproveedorDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(facturaproveedorDestino,facturaproveedorLogic.getFacturaProveedors());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturaproveedorDestino,facturaproveedors);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaFacturaProveedor(false);
				
				//this.jTableDatosFacturaProveedor.setRowSelectionInterval(this.getIndiceNuevoFacturaProveedor(), this.getIndiceNuevoFacturaProveedor());
				
				int iLastRow =  this.jTableDatosFacturaProveedor.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosFacturaProveedor.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosFacturaProveedor.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaFacturaProveedor(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormFacturaProveedor.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesFacturaProveedor.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasFacturaProveedor.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesFacturaProveedor.setVisible(!isVisible);
			this.jPanelPaginacionFacturaProveedor.setVisible(!isVisible);
			this.jPanelAccionesFacturaProveedor.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameFacturaProveedor();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoFacturaProveedor();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionFacturaProveedor();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByFacturaProveedor();
			
			this.abrirFrameOrderByFacturaProveedor();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByFacturaProveedor();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleFacturaProveedor(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormFacturaProveedor);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormFacturaProveedor.isMaximum()) {
					this.jInternalFrameDetalleFormFacturaProveedor.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormFacturaProveedor.setSize(this.jInternalFrameDetalleFormFacturaProveedor.iWidthFormulario,this.jInternalFrameDetalleFormFacturaProveedor.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormFacturaProveedor.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormFacturaProveedor.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormFacturaProveedor.isMaximum()) {
						this.jInternalFrameDetalleFormFacturaProveedor.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormFacturaProveedor.jContentPaneDetalleFacturaProveedor.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormFacturaProveedor.jTabbedPaneRelacionesFacturaProveedor.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormFacturaProveedor.jContentPaneDetalleFacturaProveedor.getWidth(),FacturaProveedorConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormFacturaProveedor.jTabbedPaneRelacionesFacturaProveedor.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormFacturaProveedor.jContentPaneDetalleFacturaProveedor.getWidth(),FacturaProveedorConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormFacturaProveedor.jTabbedPaneRelacionesFacturaProveedor.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormFacturaProveedor.jContentPaneDetalleFacturaProveedor.getWidth(),FacturaProveedorConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(DetalleFacturaProveedorJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetalleFacturaProveedor();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormFacturaProveedor.setVisible(true);
	        this.jInternalFrameDetalleFormFacturaProveedor.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByFacturaProveedor() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByFacturaProveedor==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByFacturaProveedor=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByFacturaProveedor,false,this);
				} else {
					this.jInternalFrameOrderByFacturaProveedor=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByFacturaProveedor,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByFacturaProveedor);
				this.jInternalFrameOrderByFacturaProveedor.setVisible(false);
				this.jInternalFrameOrderByFacturaProveedor.setSelected(false);
				
				this.jInternalFrameOrderByFacturaProveedor.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByFacturaProveedor"));
				
				this.inicializarActualizarBindingTablaOrderByFacturaProveedor();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionFacturaProveedor() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionFacturaProveedor==null) {
				
				this.jInternalFrameImportacionFacturaProveedor=new ImportacionJInternalFrame(FacturaProveedorConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionFacturaProveedor);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionFacturaProveedor);
				this.jInternalFrameImportacionFacturaProveedor.setVisible(false);
				this.jInternalFrameImportacionFacturaProveedor.setSelected(false);


				this.jInternalFrameImportacionFacturaProveedor.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionFacturaProveedor"));
				this.jInternalFrameImportacionFacturaProveedor.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionFacturaProveedor"));
				this.jInternalFrameImportacionFacturaProveedor.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionFacturaProveedor"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoFacturaProveedor() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoFacturaProveedor==null) {
				this.jInternalFrameReporteDinamicoFacturaProveedor=new ReporteDinamicoJInternalFrame(FacturaProveedorConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoFacturaProveedor);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoFacturaProveedor);
				this.jInternalFrameReporteDinamicoFacturaProveedor.setVisible(false);
				this.jInternalFrameReporteDinamicoFacturaProveedor.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoFacturaProveedor.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoFacturaProveedor"));
				this.jInternalFrameReporteDinamicoFacturaProveedor.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoFacturaProveedor"));
				this.jInternalFrameReporteDinamicoFacturaProveedor.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoFacturaProveedor"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualFacturaProveedor();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaDetalleFacturaProveedor() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.jScrollPanelDatosDetalleFacturaProveedor.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormFacturaProveedor.jContentPaneDetalleFacturaProveedor.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.jScrollPanelDatosDetalleFacturaProveedor.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.jScrollPanelDatosDetalleFacturaProveedor.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.jScrollPanelDatosDetalleFacturaProveedor.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleFacturaProveedor() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormFacturaProveedor);
			
	       	this.jInternalFrameDetalleFormFacturaProveedor.setVisible(false);
	        this.jInternalFrameDetalleFormFacturaProveedor.setSelected(false);
			
			//this.jInternalFrameDetalleFormFacturaProveedor.dispose();
			//this.jInternalFrameDetalleFormFacturaProveedor=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoFacturaProveedor() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoFacturaProveedor.setVisible(true);
	        this.jInternalFrameReporteDinamicoFacturaProveedor.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionFacturaProveedor() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionFacturaProveedor.setVisible(true);
	        this.jInternalFrameImportacionFacturaProveedor.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByFacturaProveedor() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByFacturaProveedor.setVisible(true);
	        this.jInternalFrameOrderByFacturaProveedor.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByFacturaProveedor() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByFacturaProveedor.setVisible(false);
	        this.jInternalFrameOrderByFacturaProveedor.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoFacturaProveedor() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoFacturaProveedor.setVisible(false);
	        this.jInternalFrameReporteDinamicoFacturaProveedor.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionFacturaProveedor() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionFacturaProveedor.setVisible(false);
	        this.jInternalFrameImportacionFacturaProveedor.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCuentaContableCreditoFiscalBienes(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCreditoFiscalBienes";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
						TitledBorder titledBorderCuentaContableCreditoFiscalBienes=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCreditoFiscalBienes.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCreditoFiscalBienes(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCreditoFiscalServicios(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCreditoFiscalServicios";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
						TitledBorder titledBorderCuentaContableCreditoFiscalServicios=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCreditoFiscalServicios.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCreditoFiscalServicios(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableGasto(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableGasto";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
						TitledBorder titledBorderCuentaContableGasto=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableGasto.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableGasto(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableGasto2(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableGasto2";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
						TitledBorder titledBorderCuentaContableGasto2=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableGasto2.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableGasto2(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCreditoFin(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCreditoFin";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
						TitledBorder titledBorderCuentaContableCreditoFin=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCreditoFin.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCreditoFin(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCreditoFin2(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCreditoFin2";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
						TitledBorder titledBorderCuentaContableCreditoFin2=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCreditoFin2.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCreditoFin2(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableCredito(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableCredito";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
						TitledBorder titledBorderCuentaContableCredito=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableCredito.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableCredito(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarFacturaProveedor(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarFacturaProveedor(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesFacturaProveedor(true);
			//this.isEsNuevoFacturaProveedor=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesFacturaProveedor("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesFacturaProveedor(false) ;
			
			if(facturaproveedorSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorSessionBean.getEsGuardarRelacionado() && DetalleFacturaProveedorJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleFacturaProveedorActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(FacturaProveedorJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleFacturaProveedor(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFacturaProveedor(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaFacturaProveedorActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarFacturaProveedor(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesFacturaProveedor(true);
			//this.isEsNuevoFacturaProveedor=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.facturaproveedor.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesFacturaProveedor("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesFacturaProveedor(false) ;
			
			if(FacturaProveedorJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleFacturaProveedor(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFacturaProveedor(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("PlantillaFactura")) {
				if(!this.facturaproveedorConstantesFunciones.cargarid_plantilla_facturaFacturaProveedor) {
					this.cargarCombosPlantillaFacturasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaProveedor(false,false);
					this.cargarCombosFramePlantillaFacturasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_plantilla_factura (id);

				this.recargarComboTablaPlantillaFactura(this.plantillafacturasForeignKey);

			}
			
			if(sType.equals("Factura")) {
				if(!this.facturaproveedorConstantesFunciones.cargarid_facturaFacturaProveedor) {
					this.cargarCombosFacturasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaProveedor(false,false);
					this.cargarCombosFrameFacturasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_factura (id);

				this.recargarComboTablaFactura(this.facturasForeignKey);

			}
			
			if(sType.equals("Cliente")) {
				if(!this.facturaproveedorConstantesFunciones.cargarid_clienteFacturaProveedor) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaProveedor(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
			
			if(sType.equals("EmpleadoSolicita")) {
				if(!this.facturaproveedorConstantesFunciones.cargarid_empleado_solicitaFacturaProveedor) {
					this.cargarCombosEmpleadoSolicitasForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaProveedor(false,false);
					this.cargarCombosFrameEmpleadoSolicitasForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_empleado_solicita (id);

				this.recargarComboTablaEmpleadoSolicita(this.empleadosolicitasForeignKey);

			}
			
			if(sType.equals("Empleado")) {
				if(!this.facturaproveedorConstantesFunciones.cargarid_empleadoFacturaProveedor) {
					this.cargarCombosEmpleadosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaProveedor(false,false);
					this.cargarCombosFrameEmpleadosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_empleado (id);

				this.recargarComboTablaEmpleado(this.empleadosForeignKey);

			}
			
			if(sType.equals("CuentaContableGasto")) {
				if(!this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_gastoFacturaProveedor) {
					this.cargarCombosCuentaContableGastosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaProveedor(false,false);
					this.cargarCombosFrameCuentaContableGastosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_gasto (id);

				this.recargarComboTablaCuentaContableGasto(this.cuentacontablegastosForeignKey);

			}
			
			if(sType.equals("CuentaContableCreditoFin")) {
				if(!this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_finFacturaProveedor) {
					this.cargarCombosCuentaContableCreditoFinsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaProveedor(false,false);
					this.cargarCombosFrameCuentaContableCreditoFinsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito_fin (id);

				this.recargarComboTablaCuentaContableCreditoFin(this.cuentacontablecreditofinsForeignKey);

			}
			
			if(sType.equals("CuentaContableCreditoFin2")) {
				if(!this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_fin2FacturaProveedor) {
					this.cargarCombosCuentaContableCreditoFin2sForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaProveedor(false,false);
					this.cargarCombosFrameCuentaContableCreditoFin2sForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito_fin2 (id);

				this.recargarComboTablaCuentaContableCreditoFin2(this.cuentacontablecreditofin2sForeignKey);

			}
			
			if(sType.equals("CuentaContableCredito")) {
				if(!this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_creditoFacturaProveedor) {
					this.cargarCombosCuentaContableCreditosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaProveedor(false,false);
					this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito (id);

				this.recargarComboTablaCuentaContableCredito(this.cuentacontablecreditosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
					
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
		
	
	public void recargarComboTablaPlantillaFactura(List<PlantillaFactura> plantillafacturasForeignKey)throws Exception{
		TableColumn tableColumnPlantillaFactura=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA));
		TableCellEditor tableCellEditorPlantillaFactura =tableColumnPlantillaFactura.getCellEditor();

		PlantillaFacturaTableCell plantillafacturaTableCellFk=(PlantillaFacturaTableCell)tableCellEditorPlantillaFactura;

		if(plantillafacturaTableCellFk!=null) {
			plantillafacturaTableCellFk.setplantillafacturasForeignKey(plantillafacturasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//plantillafacturaTableCellFk.setRowActual(intSelectedRow);
			//plantillafacturaTableCellFk.setplantillafacturasForeignKeyActual(plantillafacturasForeignKey);
		//}


		if(plantillafacturaTableCellFk!=null) {
			plantillafacturaTableCellFk.RecargarPlantillaFacturasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoDocumento(List<TipoDocumento> tipodocumentosForeignKey)throws Exception{
		TableColumn tableColumnTipoDocumento=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO));
		TableCellEditor tableCellEditorTipoDocumento =tableColumnTipoDocumento.getCellEditor();

		TipoDocumentoTableCell tipodocumentoTableCellFk=(TipoDocumentoTableCell)tableCellEditorTipoDocumento;

		if(tipodocumentoTableCellFk!=null) {
			tipodocumentoTableCellFk.settipodocumentosForeignKey(tipodocumentosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipodocumentoTableCellFk.setRowActual(intSelectedRow);
			//tipodocumentoTableCellFk.settipodocumentosForeignKeyActual(tipodocumentosForeignKey);
		//}


		if(tipodocumentoTableCellFk!=null) {
			tipodocumentoTableCellFk.RecargarTipoDocumentosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFactura(List<Factura> facturasForeignKey)throws Exception{
		TableColumn tableColumnFactura=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDFACTURA));
		TableCellEditor tableCellEditorFactura =tableColumnFactura.getCellEditor();

		FacturaTableCell facturaTableCellFk=(FacturaTableCell)tableCellEditorFactura;

		if(facturaTableCellFk!=null) {
			facturaTableCellFk.setfacturasForeignKey(facturasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//facturaTableCellFk.setRowActual(intSelectedRow);
			//facturaTableCellFk.setfacturasForeignKeyActual(facturasForeignKey);
		//}


		if(facturaTableCellFk!=null) {
			facturaTableCellFk.RecargarFacturasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTransaccion(List<Transaccion> transaccionsForeignKey)throws Exception{
		TableColumn tableColumnTransaccion=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION));
		TableCellEditor tableCellEditorTransaccion =tableColumnTransaccion.getCellEditor();

		TransaccionTableCell transaccionTableCellFk=(TransaccionTableCell)tableCellEditorTransaccion;

		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.settransaccionsForeignKey(transaccionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//transaccionTableCellFk.setRowActual(intSelectedRow);
			//transaccionTableCellFk.settransaccionsForeignKeyActual(transaccionsForeignKey);
		//}


		if(transaccionTableCellFk!=null) {
			transaccionTableCellFk.RecargarTransaccionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEmpleadoSolicita(List<Empleado> empleadosolicitasForeignKey)throws Exception{
		TableColumn tableColumnEmpleadoSolicita=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA));
		TableCellEditor tableCellEditorEmpleadoSolicita =tableColumnEmpleadoSolicita.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleadoSolicita;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosolicitasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosolicitasForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
		
	
	public void recargarComboTablaEmpleado(List<Empleado> empleadosForeignKey)throws Exception{
		TableColumn tableColumnEmpleado=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO));
		TableCellEditor tableCellEditorEmpleado =tableColumnEmpleado.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleado;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoRetencionFuente1(List<TipoRetencion> tiporetencionfuente1sForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencionFuente1=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1));
		TableCellEditor tableCellEditorTipoRetencionFuente1 =tableColumnTipoRetencionFuente1.getCellEditor();

		TipoRetencionTableCell tiporetencionTableCellFk=(TipoRetencionTableCell)tableCellEditorTipoRetencionFuente1;

		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.settiporetencionsForeignKey(tiporetencionfuente1sForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionTableCellFk.settiporetencionsForeignKeyActual(tiporetencionfuente1sForeignKey);
		//}


		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.RecargarTipoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoRetencionFuente2(List<TipoRetencion> tiporetencionfuente2sForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencionFuente2=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2));
		TableCellEditor tableCellEditorTipoRetencionFuente2 =tableColumnTipoRetencionFuente2.getCellEditor();

		TipoRetencionTableCell tiporetencionTableCellFk=(TipoRetencionTableCell)tableCellEditorTipoRetencionFuente2;

		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.settiporetencionsForeignKey(tiporetencionfuente2sForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionTableCellFk.settiporetencionsForeignKeyActual(tiporetencionfuente2sForeignKey);
		//}


		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.RecargarTipoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoRetencionIva1(List<TipoRetencion> tiporetencioniva1sForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencionIva1=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1));
		TableCellEditor tableCellEditorTipoRetencionIva1 =tableColumnTipoRetencionIva1.getCellEditor();

		TipoRetencionTableCell tiporetencionTableCellFk=(TipoRetencionTableCell)tableCellEditorTipoRetencionIva1;

		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.settiporetencionsForeignKey(tiporetencioniva1sForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionTableCellFk.settiporetencionsForeignKeyActual(tiporetencioniva1sForeignKey);
		//}


		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.RecargarTipoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoRetencionIva2(List<TipoRetencion> tiporetencioniva2sForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencionIva2=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2));
		TableCellEditor tableCellEditorTipoRetencionIva2 =tableColumnTipoRetencionIva2.getCellEditor();

		TipoRetencionTableCell tiporetencionTableCellFk=(TipoRetencionTableCell)tableCellEditorTipoRetencionIva2;

		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.settiporetencionsForeignKey(tiporetencioniva2sForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionTableCellFk.settiporetencionsForeignKeyActual(tiporetencioniva2sForeignKey);
		//}


		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.RecargarTipoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoTributario(List<TipoTributario> tipotributariosForeignKey)throws Exception{
		TableColumn tableColumnTipoTributario=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO));
		TableCellEditor tableCellEditorTipoTributario =tableColumnTipoTributario.getCellEditor();

		TipoTributarioTableCell tipotributarioTableCellFk=(TipoTributarioTableCell)tableCellEditorTipoTributario;

		if(tipotributarioTableCellFk!=null) {
			tipotributarioTableCellFk.settipotributariosForeignKey(tipotributariosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipotributarioTableCellFk.setRowActual(intSelectedRow);
			//tipotributarioTableCellFk.settipotributariosForeignKeyActual(tipotributariosForeignKey);
		//}


		if(tipotributarioTableCellFk!=null) {
			tipotributarioTableCellFk.RecargarTipoTributariosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCreditoFiscalBienes(List<CuentaContable> cuentacontablecreditofiscalbienessForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCreditoFiscalBienes=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES));
		TableCellEditor tableCellEditorCuentaContableCreditoFiscalBienes =tableColumnCuentaContableCreditoFiscalBienes.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCreditoFiscalBienes;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecreditofiscalbienessForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecreditofiscalbienessForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaResponsableFondo(List<ResponsableFondo> responsablefondosForeignKey)throws Exception{
		TableColumn tableColumnResponsableFondo=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO));
		TableCellEditor tableCellEditorResponsableFondo =tableColumnResponsableFondo.getCellEditor();

		ResponsableFondoTableCell responsablefondoTableCellFk=(ResponsableFondoTableCell)tableCellEditorResponsableFondo;

		if(responsablefondoTableCellFk!=null) {
			responsablefondoTableCellFk.setresponsablefondosForeignKey(responsablefondosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//responsablefondoTableCellFk.setRowActual(intSelectedRow);
			//responsablefondoTableCellFk.setresponsablefondosForeignKeyActual(responsablefondosForeignKey);
		//}


		if(responsablefondoTableCellFk!=null) {
			responsablefondoTableCellFk.RecargarResponsableFondosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCreditoFiscalServicios(List<CuentaContable> cuentacontablecreditofiscalserviciossForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCreditoFiscalServicios=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS));
		TableCellEditor tableCellEditorCuentaContableCreditoFiscalServicios =tableColumnCuentaContableCreditoFiscalServicios.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCreditoFiscalServicios;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecreditofiscalserviciossForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecreditofiscalserviciossForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableGasto(List<CuentaContable> cuentacontablegastosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableGasto=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO));
		TableCellEditor tableCellEditorCuentaContableGasto =tableColumnCuentaContableGasto.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableGasto;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablegastosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablegastosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableGasto2(List<CuentaContable> cuentacontablegasto2sForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableGasto2=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2));
		TableCellEditor tableCellEditorCuentaContableGasto2 =tableColumnCuentaContableGasto2.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableGasto2;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablegasto2sForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablegasto2sForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCreditoFin(List<CuentaContable> cuentacontablecreditofinsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCreditoFin=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN));
		TableCellEditor tableCellEditorCuentaContableCreditoFin =tableColumnCuentaContableCreditoFin.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCreditoFin;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecreditofinsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecreditofinsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCreditoFin2(List<CuentaContable> cuentacontablecreditofin2sForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCreditoFin2=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN2));
		TableCellEditor tableCellEditorCuentaContableCreditoFin2 =tableColumnCuentaContableCreditoFin2.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCreditoFin2;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecreditofin2sForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecreditofin2sForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableCredito(List<CuentaContable> cuentacontablecreditosForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableCredito=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO));
		TableCellEditor tableCellEditorCuentaContableCredito =tableColumnCuentaContableCredito.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableCredito;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecreditosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecreditosForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoMovimiento(List<TipoMovimiento> tipomovimientosForeignKey)throws Exception{
		TableColumn tableColumnTipoMovimiento=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTO));
		TableCellEditor tableCellEditorTipoMovimiento =tableColumnTipoMovimiento.getCellEditor();

		TipoMovimientoTableCell tipomovimientoTableCellFk=(TipoMovimientoTableCell)tableCellEditorTipoMovimiento;

		if(tipomovimientoTableCellFk!=null) {
			tipomovimientoTableCellFk.settipomovimientosForeignKey(tipomovimientosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipomovimientoTableCellFk.setRowActual(intSelectedRow);
			//tipomovimientoTableCellFk.settipomovimientosForeignKeyActual(tipomovimientosForeignKey);
		//}


		if(tipomovimientoTableCellFk!=null) {
			tipomovimientoTableCellFk.RecargarTipoMovimientosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoMovimientoModulo(List<TipoMovimientoModulo> tipomovimientomodulosForeignKey)throws Exception{
		TableColumn tableColumnTipoMovimientoModulo=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO));
		TableCellEditor tableCellEditorTipoMovimientoModulo =tableColumnTipoMovimientoModulo.getCellEditor();

		TipoMovimientoModuloTableCell tipomovimientomoduloTableCellFk=(TipoMovimientoModuloTableCell)tableCellEditorTipoMovimientoModulo;

		if(tipomovimientomoduloTableCellFk!=null) {
			tipomovimientomoduloTableCellFk.settipomovimientomodulosForeignKey(tipomovimientomodulosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipomovimientomoduloTableCellFk.setRowActual(intSelectedRow);
			//tipomovimientomoduloTableCellFk.settipomovimientomodulosForeignKeyActual(tipomovimientomodulosForeignKey);
		//}


		if(tipomovimientomoduloTableCellFk!=null) {
			tipomovimientomoduloTableCellFk.RecargarTipoMovimientoModulosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoTransaccionModulo(List<TipoTransaccionModulo> tipotransaccionmodulosForeignKey)throws Exception{
		TableColumn tableColumnTipoTransaccionModulo=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO));
		TableCellEditor tableCellEditorTipoTransaccionModulo =tableColumnTipoTransaccionModulo.getCellEditor();

		TipoTransaccionModuloTableCell tipotransaccionmoduloTableCellFk=(TipoTransaccionModuloTableCell)tableCellEditorTipoTransaccionModulo;

		if(tipotransaccionmoduloTableCellFk!=null) {
			tipotransaccionmoduloTableCellFk.settipotransaccionmodulosForeignKey(tipotransaccionmodulosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipotransaccionmoduloTableCellFk.setRowActual(intSelectedRow);
			//tipotransaccionmoduloTableCellFk.settipotransaccionmodulosForeignKeyActual(tipotransaccionmodulosForeignKey);
		//}


		if(tipotransaccionmoduloTableCellFk!=null) {
			tipotransaccionmoduloTableCellFk.RecargarTipoTransaccionModulosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_plantilla_factura (Long id) throws Exception {
		this.setActualPlantillaFacturaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_factura (Long id) throws Exception {
		this.setActualFacturaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_empleado_solicita (Long id) throws Exception {
		this.setActualEmpleadoSolicitaForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_empleado (Long id) throws Exception {
		this.setActualEmpleadoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_gasto (Long id) throws Exception {
		this.setActualCuentaContableGastoForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_credito_fin (Long id) throws Exception {
		this.setActualCuentaContableCreditoFinForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_credito_fin2 (Long id) throws Exception {
		this.setActualCuentaContableCreditoFin2ForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cuenta_contable_credito (Long id) throws Exception {
		this.setActualCuentaContableCreditoForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesFacturaProveedor(false);
			
			//if(!this.isEsNuevoFacturaProveedor) {								
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				
			}
			
			if(this.permiteMantenimiento(this.facturaproveedor)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoFacturaProveedor=true;
					this.inicializarActualizarBindingTablaFacturaProveedor(false);
					this.isEsNuevoFacturaProveedor=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoFacturaProveedor=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoFacturaProveedor=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesFacturaProveedor(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualFacturaProveedor(false);
				
				this.habilitarDeshabilitarControlesFacturaProveedor(false);
			
												
				
				if(FacturaProveedorJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleFacturaProveedor();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoFacturaProveedorActionPerformed(evt,facturaproveedorSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualFacturaProveedor(this.facturaproveedor,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,facturaproveedorSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.facturaproveedor.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(FacturaProveedor.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedor.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				this.facturaproveedor.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				this.facturaproveedor.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.facturaproveedor)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((FacturaProveedorModel) this.jTableDatosFacturaProveedor.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoFacturaProveedor=true;
				this.inicializarActualizarBindingTablaFacturaProveedor(false);
				this.isEsNuevoFacturaProveedor=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesFacturaProveedor(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualFacturaProveedor(false);
				
				this.habilitarDeshabilitarControlesFacturaProveedor(false);
				
				
				
				if(FacturaProveedorJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleFacturaProveedor();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosFacturaProveedor.getRowCount()>=1) {
				jTableDatosFacturaProveedor.removeRowSelectionInterval(0, jTableDatosFacturaProveedor.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesFacturaProveedor(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaFacturaProveedor(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesFacturaProveedor(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFacturaProveedor(false) ;
			
			this.isEsNuevoFacturaProveedor=false;
			
			if(FacturaProveedorJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleFacturaProveedor();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingFacturaProveedor(false);
				
				//SI ES MANUAL
				if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualFacturaProveedor();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoFacturaProveedor--;			
			//FacturaProveedor facturaproveedorAux= new FacturaProveedor();			
			//facturaproveedorAux.setId(this.iIdNuevoFacturaProveedor);
			
			if(this.jInternalFrameDetalleFormFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaFacturaProveedor();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
			
			this.facturaproveedor.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.facturaproveedorLogic.getFacturaProveedors().add(this.facturaproveedorAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.facturaproveedors.add(this.facturaproveedorAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaFacturaProveedor(false);
			
			this.jTableDatosFacturaProveedor.setRowSelectionInterval(this.getIndiceNuevoFacturaProveedor(), this.getIndiceNuevoFacturaProveedor());
			
			int iLastRow =  this.jTableDatosFacturaProveedor.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosFacturaProveedor.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosFacturaProveedor.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaFacturaProveedor(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingFacturaProveedor(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFacturaProveedor(false);
			
			//SI ES MANUAL
			if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualFacturaProveedor();
			}
			
			//this.abrirFrameTreeFacturaProveedor();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Factura ProveedorS ?", "MANTENIMIENTO DE Factura Proveedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionFacturaProveedor.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralFacturaProveedor();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.facturaproveedorReturnGeneral=facturaproveedorLogic.procesarImportacionFacturaProveedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.facturaproveedorParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarFacturaProveedorReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionFacturaProveedor.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionFacturaProveedor.setFileImportacion(this.jInternalFrameImportacionFacturaProveedor.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionFacturaProveedor.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionFacturaProveedor.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionFacturaProveedor.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionFacturaProveedor.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();		

		facturaproveedorsSeleccionados=this.getFacturaProveedorsSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("FacturaProveedorBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"FacturaProveedorBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteFacturaProveedors("Todos",facturaproveedorsSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case FacturaProveedorConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDPERIODO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Periodo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Periodo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Periodo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Periodo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Modulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Modulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Modulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Modulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_PlantillaFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_PlantillaFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_PlantillaFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_PlantillaFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoDocumento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoDocumento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoDocumento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoDocumento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_PLAZO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_azo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_azo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_azo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_azo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Factura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Factura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Factura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Factura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Transaccion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Transaccion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Transaccion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Transaccion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaEmision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaEmision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaEmision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaEmision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_RUC:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_c_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_c_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_c_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_c_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EmpleadoSolicita_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EmpleadoSolicita_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EmpleadoSolicita_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EmpleadoSolicita_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaVence_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaVence_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaVence_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaVence_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMONEDA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Moneda_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Moneda_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Moneda_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Moneda_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empleado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empleado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empleado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empleado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nActivos_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nActivos_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nActivos_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nActivos_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONRISE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nRise_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nRise_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nRise_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nRise_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONSITIOS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nSitios_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nSitios_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nSitios_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nSitios_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_DETALLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talle_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talle_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talle_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talle_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorBienes12_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorBienes12_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorBienes12_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorBienes12_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorServicios12_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorServicios12_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorServicios12_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorServicios12_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talValor12_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talValor12_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talValor12_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talValor12_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorBienes0_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorBienes0_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorBienes0_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorBienes0_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorServicios0_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorServicios0_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorServicios0_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorServicios0_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talValor0_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talValor0_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talValor0_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talValor0_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_BIENESICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_enesIce_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_enesIce_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_enesIce_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_enesIce_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rviciosIce_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rviciosIce_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rviciosIce_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rviciosIce_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talIce_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talIce_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talIce_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talIce_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_BIENESIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_enesIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_enesIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_enesIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_enesIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rviciosIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rviciosIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rviciosIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rviciosIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_aPorcentaje_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_aPorcentaje_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_aPorcentaje_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_aPorcentaje_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nMontoObjetoIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nMontoObjetoIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nMontoObjetoIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nMontoObjetoIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroSerie_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroSerie_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroSerie_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroSerie_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroAutorizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroAutorizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroAutorizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroAutorizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaValidez_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaValidez_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaValidez_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaValidez_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencionFuente1_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencionFuente1_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencionFuente1_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencionFuente1_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tFuente1Porcentaje_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tFuente1Porcentaje_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tFuente1Porcentaje_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tFuente1Porcentaje_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tFuente1Base_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tFuente1Base_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tFuente1Base_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tFuente1Base_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tFuente1Retenido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tFuente1Retenido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tFuente1Retenido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tFuente1Retenido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencionFuente2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencionFuente2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencionFuente2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencionFuente2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tFuente2Porcentaje_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tFuente2Porcentaje_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tFuente2Porcentaje_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tFuente2Porcentaje_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tFuente2Base_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tFuente2Base_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tFuente2Base_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tFuente2Base_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tFuente2Retenido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tFuente2Retenido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tFuente2Retenido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tFuente2Retenido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencionIva1_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencionIva1_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencionIva1_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencionIva1_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tIvaBienPorcentaje_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tIvaBienPorcentaje_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tIvaBienPorcentaje_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tIvaBienPorcentaje_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tIvaBienBase_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tIvaBienBase_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tIvaBienBase_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tIvaBienBase_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tIvaBienRetenido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tIvaBienRetenido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tIvaBienRetenido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tIvaBienRetenido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencionIva2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencionIva2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencionIva2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencionIva2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tIvaServicioPorcentaje_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tIvaServicioPorcentaje_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tIvaServicioPorcentaje_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tIvaServicioPorcentaje_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tIvaServicioBase_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tIvaServicioBase_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tIvaServicioBase_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tIvaServicioBase_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tIvaServicioRetenido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tIvaServicioRetenido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tIvaServicioRetenido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tIvaServicioRetenido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_exoNumeroAutorizacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_exoNumeroAutorizacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_exoNumeroAutorizacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_exoNumeroAutorizacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_exoNumesoSerie_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_exoNumesoSerie_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_exoNumesoSerie_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_exoNumesoSerie_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_exoFechaValidez_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_exoFechaValidez_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_exoFechaValidez_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_exoFechaValidez_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoTributario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoTributario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoTributario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoTributario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_exoFacturaInicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_exoFacturaInicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_exoFacturaInicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_exoFacturaInicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_exoFacturaFin_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_exoFacturaFin_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_exoFacturaFin_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_exoFacturaFin_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCreditoFiscalBienes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCreditoFiscalBienes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCreditoFiscalBienes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCreditoFiscalBienes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ResponsableFondo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ResponsableFondo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ResponsableFondo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ResponsableFondo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCreditoFiscalServicios_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCreditoFiscalServicios_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCreditoFiscalServicios_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCreditoFiscalServicios_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencial_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencial_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencial_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencial_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableGasto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableGasto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableGasto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableGasto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableGasto2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableGasto2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableGasto2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableGasto2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoValor2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoValor2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoValor2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoValor2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoNombre_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoNombre_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoNombre_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoNombre_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE2:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoNombre2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoNombre2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoNombre2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoNombre2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCreditoFin_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCreditoFin_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCreditoFin_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCreditoFin_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN2:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCreditoFin2_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCreditoFin2_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCreditoFin2_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCreditoFin2_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoMovimiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoMovimiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoMovimiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoMovimiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoMovimientoModulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoMovimientoModulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoMovimientoModulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoMovimientoModulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoTransaccionModulo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoTransaccionModulo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoTransaccionModulo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoTransaccionModulo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROMAYOR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroMayor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroMayor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroMayor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroMayor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaProveedorConstantesFunciones.LABEL_CODIGOASIENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digoAsiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digoAsiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digoAsiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digoAsiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoFacturaProveedor.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case FacturaProveedorConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoria="id_periodo";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoria="id_modulo";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA:
					sNombreCampoCategoria="id_plantilla_factura";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					sNombreCampoCategoria="id_tipo_documento";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_PLAZO:
					sNombreCampoCategoria="plazo";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoria="id_factura";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA:
					sNombreCampoCategoria="numero_factura";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION:
					sNombreCampoCategoria="id_transaccion";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoria="fecha_emision";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoria="ruc";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA:
					sNombreCampoCategoria="id_empleado_solicita";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE:
					sNombreCampoCategoria="fecha_vence";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoria="id_moneda";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoria="id_empleado";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS:
					sNombreCampoCategoria="con_activos";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONRISE:
					sNombreCampoCategoria="con_rise";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONSITIOS:
					sNombreCampoCategoria="con_sitios";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_DETALLE:
					sNombreCampoCategoria="detalle";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12:
					sNombreCampoCategoria="valor_bienes12";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12:
					sNombreCampoCategoria="valor_servicios12";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12:
					sNombreCampoCategoria="total_valor12";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0:
					sNombreCampoCategoria="valor_bienes0";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0:
					sNombreCampoCategoria="valor_servicios0";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0:
					sNombreCampoCategoria="total_valor0";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_BIENESICE:
					sNombreCampoCategoria="bienes_ice";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE:
					sNombreCampoCategoria="servicios_ice";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALICE:
					sNombreCampoCategoria="total_ice";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_BIENESIVA:
					sNombreCampoCategoria="bienes_iva";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA:
					sNombreCampoCategoria="servicios_iva";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoria="total_iva";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE:
					sNombreCampoCategoria="iva_porcentaje";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoria="total";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA:
					sNombreCampoCategoria="con_monto_objeto_iva";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION:
					sNombreCampoCategoria="numero_retencion";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE:
					sNombreCampoCategoria="numero_serie";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION:
					sNombreCampoCategoria="numero_autorizacion";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ:
					sNombreCampoCategoria="fecha_validez";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1:
					sNombreCampoCategoria="id_tipo_retencion_fuente1";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE:
					sNombreCampoCategoria="ret_fuente1_porcentaje";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE:
					sNombreCampoCategoria="ret_fuente1_base";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO:
					sNombreCampoCategoria="ret_fuente1_retenido";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2:
					sNombreCampoCategoria="id_tipo_retencion_fuente2";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE:
					sNombreCampoCategoria="ret_fuente2_porcentaje";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE:
					sNombreCampoCategoria="ret_fuente2_base";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO:
					sNombreCampoCategoria="ret_fuente2_retenido";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1:
					sNombreCampoCategoria="id_tipo_retencion_iva1";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE:
					sNombreCampoCategoria="ret_iva_bien_porcentaje";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE:
					sNombreCampoCategoria="ret_iva_bien_base";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO:
					sNombreCampoCategoria="ret_iva_bien_retenido";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2:
					sNombreCampoCategoria="id_tipo_retencion_iva2";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE:
					sNombreCampoCategoria="ret_iva_servicio_porcentaje";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE:
					sNombreCampoCategoria="ret_iva_servicio_base";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO:
					sNombreCampoCategoria="ret_iva_servicio_retenido";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION:
					sNombreCampoCategoria="anexo_numero_autorizacion";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE:
					sNombreCampoCategoria="anexo_numeso_serie";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ:
					sNombreCampoCategoria="anexo_fecha_validez";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					sNombreCampoCategoria="id_tipo_tributario";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO:
					sNombreCampoCategoria="anexo_factura_inicio";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN:
					sNombreCampoCategoria="anexo_factura_fin";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES:
					sNombreCampoCategoria="id_cuenta_contable_credito_fiscal_bienes";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO:
					sNombreCampoCategoria="id_responsable_fondo";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS:
					sNombreCampoCategoria="id_cuenta_contable_credito_fiscal_servicios";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL:
					sNombreCampoCategoria="secuencial";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					sNombreCampoCategoria="id_cuenta_contable_gasto";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR:
					sNombreCampoCategoria="gasto_valor";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2:
					sNombreCampoCategoria="id_cuenta_contable_gasto2";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2:
					sNombreCampoCategoria="gasto_valor2";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE:
					sNombreCampoCategoria="gasto_nombre";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE2:
					sNombreCampoCategoria="gasto_nombre2";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN:
					sNombreCampoCategoria="id_cuenta_contable_credito_fin";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN2:
					sNombreCampoCategoria="id_cuenta_contable_credito_fin2";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					sNombreCampoCategoria="id_cuenta_contable_credito";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					sNombreCampoCategoria="id_tipo_movimiento";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					sNombreCampoCategoria="id_tipo_movimiento_modulo";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					sNombreCampoCategoria="id_tipo_transaccion_modulo";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROMAYOR:
					sNombreCampoCategoria="numero_mayor";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CODIGOASIENTO:
					sNombreCampoCategoria="codigo_asiento";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case FacturaProveedorConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDPERIODO:
					sNombreCampoCategoriaValor="id_periodo";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMODULO:
					sNombreCampoCategoriaValor="id_modulo";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA:
					sNombreCampoCategoriaValor="id_plantilla_factura";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					sNombreCampoCategoriaValor="id_tipo_documento";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_PLAZO:
					sNombreCampoCategoriaValor="plazo";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDFACTURA:
					sNombreCampoCategoriaValor="id_factura";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA:
					sNombreCampoCategoriaValor="numero_factura";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION:
					sNombreCampoCategoriaValor="id_transaccion";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION:
					sNombreCampoCategoriaValor="fecha_emision";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RUC:
					sNombreCampoCategoriaValor="ruc";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA:
					sNombreCampoCategoriaValor="id_empleado_solicita";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE:
					sNombreCampoCategoriaValor="fecha_vence";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMONEDA:
					sNombreCampoCategoriaValor="id_moneda";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoriaValor="id_empleado";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS:
					sNombreCampoCategoriaValor="con_activos";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONRISE:
					sNombreCampoCategoriaValor="con_rise";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONSITIOS:
					sNombreCampoCategoriaValor="con_sitios";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_DETALLE:
					sNombreCampoCategoriaValor="detalle";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12:
					sNombreCampoCategoriaValor="valor_bienes12";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12:
					sNombreCampoCategoriaValor="valor_servicios12";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12:
					sNombreCampoCategoriaValor="total_valor12";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0:
					sNombreCampoCategoriaValor="valor_bienes0";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0:
					sNombreCampoCategoriaValor="valor_servicios0";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0:
					sNombreCampoCategoriaValor="total_valor0";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_BIENESICE:
					sNombreCampoCategoriaValor="bienes_ice";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE:
					sNombreCampoCategoriaValor="servicios_ice";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALICE:
					sNombreCampoCategoriaValor="total_ice";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_BIENESIVA:
					sNombreCampoCategoriaValor="bienes_iva";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA:
					sNombreCampoCategoriaValor="servicios_iva";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoriaValor="total_iva";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE:
					sNombreCampoCategoriaValor="iva_porcentaje";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoriaValor="total";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA:
					sNombreCampoCategoriaValor="con_monto_objeto_iva";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION:
					sNombreCampoCategoriaValor="numero_retencion";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE:
					sNombreCampoCategoriaValor="numero_serie";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION:
					sNombreCampoCategoriaValor="numero_autorizacion";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ:
					sNombreCampoCategoriaValor="fecha_validez";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1:
					sNombreCampoCategoriaValor="id_tipo_retencion_fuente1";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE:
					sNombreCampoCategoriaValor="ret_fuente1_porcentaje";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE:
					sNombreCampoCategoriaValor="ret_fuente1_base";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO:
					sNombreCampoCategoriaValor="ret_fuente1_retenido";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2:
					sNombreCampoCategoriaValor="id_tipo_retencion_fuente2";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE:
					sNombreCampoCategoriaValor="ret_fuente2_porcentaje";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE:
					sNombreCampoCategoriaValor="ret_fuente2_base";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO:
					sNombreCampoCategoriaValor="ret_fuente2_retenido";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1:
					sNombreCampoCategoriaValor="id_tipo_retencion_iva1";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE:
					sNombreCampoCategoriaValor="ret_iva_bien_porcentaje";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE:
					sNombreCampoCategoriaValor="ret_iva_bien_base";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO:
					sNombreCampoCategoriaValor="ret_iva_bien_retenido";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2:
					sNombreCampoCategoriaValor="id_tipo_retencion_iva2";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE:
					sNombreCampoCategoriaValor="ret_iva_servicio_porcentaje";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE:
					sNombreCampoCategoriaValor="ret_iva_servicio_base";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO:
					sNombreCampoCategoriaValor="ret_iva_servicio_retenido";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION:
					sNombreCampoCategoriaValor="anexo_numero_autorizacion";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE:
					sNombreCampoCategoriaValor="anexo_numeso_serie";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ:
					sNombreCampoCategoriaValor="anexo_fecha_validez";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					sNombreCampoCategoriaValor="id_tipo_tributario";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO:
					sNombreCampoCategoriaValor="anexo_factura_inicio";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN:
					sNombreCampoCategoriaValor="anexo_factura_fin";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES:
					sNombreCampoCategoriaValor="id_cuenta_contable_credito_fiscal_bienes";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO:
					sNombreCampoCategoriaValor="id_responsable_fondo";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS:
					sNombreCampoCategoriaValor="id_cuenta_contable_credito_fiscal_servicios";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL:
					sNombreCampoCategoriaValor="secuencial";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					sNombreCampoCategoriaValor="id_cuenta_contable_gasto";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR:
					sNombreCampoCategoriaValor="gasto_valor";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2:
					sNombreCampoCategoriaValor="id_cuenta_contable_gasto2";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2:
					sNombreCampoCategoriaValor="gasto_valor2";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE:
					sNombreCampoCategoriaValor="gasto_nombre";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE2:
					sNombreCampoCategoriaValor="gasto_nombre2";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN:
					sNombreCampoCategoriaValor="id_cuenta_contable_credito_fin";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN2:
					sNombreCampoCategoriaValor="id_cuenta_contable_credito_fin2";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					sNombreCampoCategoriaValor="id_cuenta_contable_credito";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					sNombreCampoCategoriaValor="id_tipo_movimiento";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					sNombreCampoCategoriaValor="id_tipo_movimiento_modulo";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					sNombreCampoCategoriaValor="id_tipo_transaccion_modulo";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROMAYOR:
					sNombreCampoCategoriaValor="numero_mayor";
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CODIGOASIENTO:
					sNombreCampoCategoriaValor="codigo_asiento";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case FacturaProveedorConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDPERIODO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Periodo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_periodo");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_modulo");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Plantilla Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_plantilla_factura");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"T. Documento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_documento");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_PLAZO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Plazo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"plazo");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_factura");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Factura",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_factura");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"T.Comprobante",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_transaccion");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F. Emision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_emision");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Proveedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RUC:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ruc",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ruc");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empl.Solicita",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empleado_solicita");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F. Vence",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_vence");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMONEDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Moneda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_moneda");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empl.Autoriza",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empleado");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Activos",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_activos");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONRISE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Rise",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_rise");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONSITIOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sitios",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_sitios");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_DETALLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Detalle",sNombreCampoCategoria,sNombreCampoCategoriaValor,"detalle");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor12% B",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_bienes12");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor 12% S",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_servicios12");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total 12%",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_valor12");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor 0% B",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_bienes0");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor 0% S",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_servicios0");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total 0%",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_valor0");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_BIENESICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"ICE B.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"bienes_ice");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"ICE S.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"servicios_ice");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total ICE",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_ice");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_BIENESIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"IVA B.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"bienes_iva");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"IVA S.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"servicios_iva");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total IVA",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_iva");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"IVA %",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva_porcentaje");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Sin Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"con_monto_objeto_iva");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_retencion");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Serie",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_serie");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Autori.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_autorizacion");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F. Validez",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_validez");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ret. Fuente 1",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion_fuente1");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"% F1",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ret_fuente1_porcentaje");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Base F1",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ret_fuente1_base");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Val Retenido F1",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ret_fuente1_retenido");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ret Fuente 2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion_fuente2");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"% F2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ret_fuente2_porcentaje");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Base F2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ret_fuente2_base");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Val Retenido F2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ret_fuente2_retenido");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ret Iva B.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion_iva1");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"% IB",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ret_iva_bien_porcentaje");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Base IB",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ret_iva_bien_base");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Val Retenido IB",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ret_iva_bien_retenido");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ret Iva S.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion_iva2");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"% IS",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ret_iva_servicio_porcentaje");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Base IS",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ret_iva_servicio_base");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Val Retenido IS",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ret_iva_servicio_retenido");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Autori",sNombreCampoCategoria,sNombreCampoCategoriaValor,"anexo_numero_autorizacion");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Serie.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"anexo_numeso_serie");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"F. Validez.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"anexo_fecha_validez");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sustento Trib.",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_tributario");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fac Ini",sNombreCampoCategoria,sNombreCampoCategoriaValor,"anexo_factura_inicio");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fac Fin",sNombreCampoCategoria,sNombreCampoCategoriaValor,"anexo_factura_fin");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Credito Fiscal Bienes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_credito_fiscal_bienes");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Responsable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_responsable_fondo");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Credito Fiscal Servicios",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_credito_fiscal_servicios");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"C. Gasto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_gasto");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor 1",sNombreCampoCategoria,sNombreCampoCategoriaValor,"gasto_valor");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"C. Gasto 2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_gasto2");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor 2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"gasto_valor2");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Gasto Nombre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"gasto_nombre");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Gasto Nombre2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"gasto_nombre2");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Credito Fin",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_credito_fin");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN2:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Credito Fin 2",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_credito_fin2");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cuenta Contable Credito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_credito");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Movimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_movimiento");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Movimiento Modulo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_movimiento_modulo");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Comprobante",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_transaccion_modulo");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROMAYOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Mayor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_mayor");
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CODIGOASIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo Asiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo_asiento");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();		
		
		facturaproveedorsSeleccionados=this.getFacturaProveedorsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedor";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("FacturaProveedors");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case FacturaProveedorConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDPERIODO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDPERIODO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getperiodo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDMODULO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getplantillafactura_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettipodocumento_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_PLAZO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_PLAZO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getplazo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDFACTURA);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getfactura_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getnumero_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettransaccion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getfecha_emision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RUC:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RUC);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getruc());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getempleadosolicita_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getfecha_vence());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDMONEDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDMONEDA);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getmoneda_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getempleado_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getcon_activos());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONRISE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CONRISE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getcon_rise());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONSITIOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CONSITIOS);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getcon_sitios());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_DETALLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_DETALLE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getdetalle());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getvalor_bienes12());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getvalor_servicios12());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettotal_valor12());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getvalor_bienes0());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getvalor_servicios0());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettotal_valor0());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_BIENESICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_BIENESICE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getbienes_ice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getservicios_ice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTALICE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettotal_ice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_BIENESIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_BIENESIVA);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getbienes_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getservicios_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTALIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTALIVA);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettotal_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getiva_porcentaje());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_TOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTAL);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettotal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getcon_monto_objeto_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getnumero_retencion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getnumero_serie());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getnumero_autorizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getfecha_validez());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettiporetencionfuente1_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getret_fuente1_porcentaje());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getret_fuente1_base());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getret_fuente1_retenido());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettiporetencionfuente2_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getret_fuente2_porcentaje());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getret_fuente2_base());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getret_fuente2_retenido());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettiporetencioniva1_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getret_iva_bien_porcentaje());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getret_iva_bien_base());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getret_iva_bien_retenido());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettiporetencioniva2_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getret_iva_servicio_porcentaje());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getret_iva_servicio_base());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getret_iva_servicio_retenido());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getanexo_numero_autorizacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getanexo_numeso_serie());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getanexo_fecha_validez());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettipotributario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getanexo_factura_inicio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getanexo_factura_fin());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getcuentacontablecreditofiscalbienes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getresponsablefondo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getcuentacontablecreditofiscalservicios_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getsecuencial());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getcuentacontablegasto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getgasto_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getcuentacontablegasto2_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getgasto_valor2());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getgasto_nombre());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE2);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getgasto_nombre2());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getcuentacontablecreditofin_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN2:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN2);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getcuentacontablecreditofin2_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getcuentacontablecredito_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettipomovimiento_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettipomovimientomodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.gettipotransaccionmodulo_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_NUMEROMAYOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMEROMAYOR);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getnumero_mayor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaProveedorConstantesFunciones.LABEL_CODIGOASIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CODIGOASIENTO);
					iRow++;

					for(FacturaProveedor facturaproveedor:facturaproveedorsSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturaproveedor.getcodigo_asiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelFacturaProveedor(row);				
			//	iRow++;
			//}				
			
			//for(FacturaProveedor facturaproveedorAux:facturaproveedorsSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelFacturaProveedor(facturaproveedorAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFacturaProveedor(false);
			
			//SI ES MANUAL
			if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualFacturaProveedor();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFacturaProveedor(false);
			
			//SI ES MANUAL
			if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualFacturaProveedor();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFacturaProveedor(false);
			
			//SI ES MANUAL
			if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualFacturaProveedor();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaFacturaProveedor() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosFacturaProveedor.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosFacturaProveedor.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosFacturaProveedor.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosFacturaProveedor.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosFacturaProveedor.setMinimumSize(dimensionMinimum);
		this.jTableDatosFacturaProveedor.setMaximumSize(dimensionMaximum);
		this.jTableDatosFacturaProveedor.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingFacturaProveedor(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingFacturaProveedor(esInicializar,true);
	}
	
	public void inicializarActualizarBindingFacturaProveedor(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaFacturaProveedor(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesFacturaProveedor(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasFacturaProveedor(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesFacturaProveedor(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesFacturaProveedor(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !FacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualFacturaProveedor() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaFacturaProveedor();
		
		this.inicializarActualizarBindingBotonesManualFacturaProveedor(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualFacturaProveedor();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesFacturaProveedor() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualFacturaProveedor(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualFacturaProveedor(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosFacturaProveedor.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosFacturaProveedor.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteFacturaProveedor.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxPostAccionNuevoFacturaProveedor.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxPostAccionSinCerrarFacturaProveedor.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxPostAccionSinMensajeFacturaProveedor.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosFacturaProveedor.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosFacturaProveedor.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteFacturaProveedor.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
				this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxPostAccionNuevoFacturaProveedor.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxPostAccionSinCerrarFacturaProveedor.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxPostAccionSinMensajeFacturaProveedor.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionFacturaProveedor.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionFacturaProveedor.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesFacturaProveedor.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoFacturaProveedor!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesFacturaProveedor.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesFacturaProveedor.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarFacturaProveedor.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesFacturaProveedor.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoFacturaProveedor!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesFacturaProveedor.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralFacturaProveedor.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesFacturaProveedor(Boolean esInicializar) throws Exception {
		try	{	
			if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualFacturaProveedor(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesFacturaProveedor() throws Exception {
		try	{
			if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFacturaProveedor();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleFacturaProveedor() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFacturaProveedor() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesFacturaProveedor.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesFacturaProveedor.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesFacturaProveedor.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionFacturaProveedor.addItem(reporte);
			}
			
			
			if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionFacturaProveedor.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionFacturaProveedor.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesFacturaProveedor.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesFacturaProveedor.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarFacturaProveedor.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarFacturaProveedor.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarFacturaProveedor.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualFacturaProveedor();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualFacturaProveedor() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoFacturaProveedor!=null) {
				this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoFacturaProveedor!=null) {
				this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoFacturaProveedor!=null) {
				
				if(this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoFacturaProveedor.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoFacturaProveedor.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoFacturaProveedor.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=FacturaProveedorConstantesFunciones.getTiposSeleccionarFacturaProveedor(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=FacturaProveedorConstantesFunciones.getTiposSeleccionarFacturaProveedor(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=FacturaProveedorConstantesFunciones.getTiposSeleccionarFacturaProveedor(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoFacturaProveedor.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoFacturaProveedor.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualFacturaProveedor()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_clienteFK_IdClienteFacturaProveedor.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor.getSelectedItem()!=null){this.id_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes=((CuentaContable)this.jComboBoxid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor.getSelectedItem()!=null){this.id_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios=((CuentaContable)this.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_gasto2FK_IdCuentaContableGasto2FacturaProveedor.getSelectedItem()!=null){this.id_cuenta_contable_gasto2FK_IdCuentaContableGasto2=((CuentaContable)this.jComboBoxid_cuenta_contable_gasto2FK_IdCuentaContableGasto2FacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedor.getSelectedItem()!=null){this.id_empleadoFK_IdEmpleado=((Empleado)this.jComboBoxid_empleadoFK_IdEmpleadoFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_plantilla_facturaFK_IdPlantillaFacturaFacturaProveedor.getSelectedItem()!=null){this.id_plantilla_facturaFK_IdPlantillaFactura=((PlantillaFactura)this.jComboBoxid_plantilla_facturaFK_IdPlantillaFacturaFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_responsable_fondoFK_IdResponsableFondoFacturaProveedor.getSelectedItem()!=null){this.id_responsable_fondoFK_IdResponsableFondo=((ResponsableFondo)this.jComboBoxid_responsable_fondoFK_IdResponsableFondoFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedor.getSelectedItem()!=null){this.id_tipo_documentoFK_IdTipoDocumento=((TipoDocumento)this.jComboBoxid_tipo_documentoFK_IdTipoDocumentoFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedor.getSelectedItem()!=null){this.id_tipo_movimiento_moduloFK_IdTipoMovimientoModulo=((TipoMovimientoModulo)this.jComboBoxid_tipo_movimiento_moduloFK_IdTipoMovimientoModuloFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedor.getSelectedItem()!=null){this.id_tipo_retencion_fuente1FK_IdTipoRetencionFuente1=((TipoRetencion)this.jComboBoxid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1FacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedor.getSelectedItem()!=null){this.id_tipo_retencion_iva1FK_IdTipoRetencionIva1=((TipoRetencion)this.jComboBoxid_tipo_retencion_iva1FK_IdTipoRetencionIva1FacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.getSelectedItem()!=null){this.id_tipo_transaccion_moduloFK_IdTipoTransaccionModulo=((TipoTransaccionModulo)this.jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedor.getSelectedItem()!=null){this.id_tipo_tributarioFK_IdTipoTributario=((TipoTributario)this.jComboBoxid_tipo_tributarioFK_IdTipoTributarioFacturaProveedor.getSelectedItem()).getId();}
		if(this.jComboBoxid_transaccionFK_IdTransaccionFacturaProveedor.getSelectedItem()!=null){this.id_transaccionFK_IdTransaccion=((Transaccion)this.jComboBoxid_transaccionFK_IdTransaccionFacturaProveedor.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasFacturaProveedor(Boolean esInicializar) throws Exception {				
		if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualFacturaProveedor();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaFacturaProveedor() throws Exception {
		this.inicializarActualizarBindingTablaFacturaProveedor(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByFacturaProveedor() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByFacturaProveedor.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByFacturaProveedor.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByFacturaProveedor.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByFacturaProveedor.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByFacturaProveedor.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosFacturaProveedorOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedorOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByFacturaProveedor.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByFacturaProveedor.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByFacturaProveedor.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaFacturaProveedor(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=facturaproveedorLogic.getFacturaProveedors().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=facturaproveedors.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosFacturaProveedor.setModel(new FacturaProveedorModel(this.facturaproveedorLogic.getFacturaProveedors(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosFacturaProveedor.setModel(new FacturaProveedorModel(this.facturaproveedors,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByFacturaProveedor!=null && this.jInternalFrameOrderByFacturaProveedor.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByFacturaProveedor();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+FacturaProveedorConstantesFunciones.SCLASSWEBTITULO,facturaproveedorConstantesFunciones.resaltarSeleccionarFacturaProveedor,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+FacturaProveedorConstantesFunciones.SCLASSWEBTITULO,facturaproveedorConstantesFunciones.resaltarSeleccionarFacturaProveedor,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_ID));

		if(this.facturaproveedorConstantesFunciones.mostraridFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltaridFacturaProveedor,this.facturaproveedorConstantesFunciones.activaridFacturaProveedor,iSizeTabla,this,true,"idFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltaridFacturaProveedor,this.facturaproveedorConstantesFunciones.activaridFacturaProveedor,this,true,"idFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDEMPRESA));

		if(this.facturaproveedorConstantesFunciones.mostrarid_empresaFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_empresaFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_empresaFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_empresaFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_empresaFacturaProveedor,false,"id_empresaFacturaProveedor","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.facturaproveedorConstantesFunciones.mostrarid_sucursalFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_sucursalFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_sucursalFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_sucursalFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_sucursalFacturaProveedor,false,"id_sucursalFacturaProveedor","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.facturaproveedorConstantesFunciones.mostrarid_ejercicioFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_ejercicioFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_ejercicioFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_ejercicioFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_ejercicioFacturaProveedor,false,"id_ejercicioFacturaProveedor","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDPERIODO));

		if(this.facturaproveedorConstantesFunciones.mostrarid_periodoFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDPERIODO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new PeriodoTableCell(this.periodosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_periodoFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_periodoFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new PeriodoTableCell(this.periodosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_periodoFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_periodoFacturaProveedor,false,"id_periodoFacturaProveedor","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDANIO));

		if(this.facturaproveedorConstantesFunciones.mostrarid_anioFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_anioFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_anioFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_anioFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_anioFacturaProveedor,true,"id_anioFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDMES));

		if(this.facturaproveedorConstantesFunciones.mostrarid_mesFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_mesFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_mesFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_mesFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_mesFacturaProveedor,true,"id_mesFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDMODULO));

		if(this.facturaproveedorConstantesFunciones.mostrarid_moduloFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDMODULO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ModuloTableCell(this.modulosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_moduloFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_moduloFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new ModuloTableCell(this.modulosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_moduloFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_moduloFacturaProveedor,false,"id_moduloFacturaProveedor","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA));

		if(this.facturaproveedorConstantesFunciones.mostrarid_plantilla_facturaFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new PlantillaFacturaTableCell(this.plantillafacturasForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_plantilla_facturaFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_plantilla_facturaFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new PlantillaFacturaTableCell(this.plantillafacturasForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_plantilla_facturaFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_plantilla_facturaFacturaProveedor,true,"id_plantilla_facturaFacturaProveedor","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO));

		if(this.facturaproveedorConstantesFunciones.mostrarid_tipo_documentoFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoDocumentoTableCell(this.tipodocumentosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_tipo_documentoFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_tipo_documentoFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new TipoDocumentoTableCell(this.tipodocumentosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_tipo_documentoFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_tipo_documentoFacturaProveedor,true,"id_tipo_documentoFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_PLAZO));

		if(this.facturaproveedorConstantesFunciones.mostrarplazoFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_PLAZO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarplazoFacturaProveedor,this.facturaproveedorConstantesFunciones.activarplazoFacturaProveedor,iSizeTabla,this,true,"plazoFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarplazoFacturaProveedor,this.facturaproveedorConstantesFunciones.activarplazoFacturaProveedor,this,true,"plazoFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDFACTURA));

		if(this.facturaproveedorConstantesFunciones.mostrarid_facturaFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDFACTURA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FacturaTableCell(this.facturasForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_facturaFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_facturaFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new FacturaTableCell(this.facturasForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_facturaFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_facturaFacturaProveedor,true,"id_facturaFacturaProveedor","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA));

		if(this.facturaproveedorConstantesFunciones.mostrarnumero_facturaFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorConstantesFunciones.resaltarnumero_facturaFacturaProveedor,this.facturaproveedorConstantesFunciones.activarnumero_facturaFacturaProveedor,iSizeTabla,this,true,"numero_facturaFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarnumero_facturaFacturaProveedor,this.facturaproveedorConstantesFunciones.activarnumero_facturaFacturaProveedor,this,true,"numero_facturaFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION));

		if(this.facturaproveedorConstantesFunciones.mostrarid_transaccionFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TransaccionTableCell(this.transaccionsForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_transaccionFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_transaccionFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new TransaccionTableCell(this.transaccionsForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_transaccionFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_transaccionFacturaProveedor,true,"id_transaccionFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,50);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION));

		if(this.facturaproveedorConstantesFunciones.mostrarfecha_emisionFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.facturaproveedorConstantesFunciones.resaltarfecha_emisionFacturaProveedor,this.facturaproveedorConstantesFunciones.activarfecha_emisionFacturaProveedor,iSizeTabla,this,true,"fecha_emisionFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarfecha_emisionFacturaProveedor,this.facturaproveedorConstantesFunciones.activarfecha_emisionFacturaProveedor,this,true,"fecha_emisionFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE));

		if(this.facturaproveedorConstantesFunciones.mostrarid_clienteFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_clienteFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_clienteFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_clienteFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_clienteFacturaProveedor,true,"id_clienteFacturaProveedor","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_RUC));

		if(this.facturaproveedorConstantesFunciones.mostrarrucFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_RUC,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorConstantesFunciones.resaltarrucFacturaProveedor,this.facturaproveedorConstantesFunciones.activarrucFacturaProveedor,iSizeTabla,this,true,"rucFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarrucFacturaProveedor,this.facturaproveedorConstantesFunciones.activarrucFacturaProveedor,this,true,"rucFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA));

		if(this.facturaproveedorConstantesFunciones.mostrarid_empleado_solicitaFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpleadoTableCell(this.empleadosolicitasForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_empleado_solicitaFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_empleado_solicitaFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new EmpleadoTableCell(this.empleadosolicitasForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_empleado_solicitaFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_empleado_solicitaFacturaProveedor,true,"id_empleado_solicitaFacturaProveedor","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE));

		if(this.facturaproveedorConstantesFunciones.mostrarfecha_venceFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.facturaproveedorConstantesFunciones.resaltarfecha_venceFacturaProveedor,this.facturaproveedorConstantesFunciones.activarfecha_venceFacturaProveedor,iSizeTabla,this,true,"fecha_venceFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarfecha_venceFacturaProveedor,this.facturaproveedorConstantesFunciones.activarfecha_venceFacturaProveedor,this,true,"fecha_venceFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDMONEDA));

		if(this.facturaproveedorConstantesFunciones.mostrarid_monedaFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDMONEDA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MonedaTableCell(this.monedasForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_monedaFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_monedaFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new MonedaTableCell(this.monedasForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_monedaFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_monedaFacturaProveedor,false,"id_monedaFacturaProveedor","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO));

		if(this.facturaproveedorConstantesFunciones.mostrarid_empleadoFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpleadoTableCell(this.empleadosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_empleadoFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_empleadoFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new EmpleadoTableCell(this.empleadosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_empleadoFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_empleadoFacturaProveedor,true,"id_empleadoFacturaProveedor","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS));

		if(this.facturaproveedorConstantesFunciones.mostrarcon_activosFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.facturaproveedorConstantesFunciones.resaltarcon_activosFacturaProveedor,this.facturaproveedorConstantesFunciones.activarcon_activosFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarcon_activosFacturaProveedor,this.facturaproveedorConstantesFunciones.activarcon_activosFacturaProveedor,this,true,"con_activosFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_CONRISE));

		if(this.facturaproveedorConstantesFunciones.mostrarcon_riseFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_CONRISE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.facturaproveedorConstantesFunciones.resaltarcon_riseFacturaProveedor,this.facturaproveedorConstantesFunciones.activarcon_riseFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarcon_riseFacturaProveedor,this.facturaproveedorConstantesFunciones.activarcon_riseFacturaProveedor,this,true,"con_riseFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_CONSITIOS));

		if(this.facturaproveedorConstantesFunciones.mostrarcon_sitiosFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_CONSITIOS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.facturaproveedorConstantesFunciones.resaltarcon_sitiosFacturaProveedor,this.facturaproveedorConstantesFunciones.activarcon_sitiosFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarcon_sitiosFacturaProveedor,this.facturaproveedorConstantesFunciones.activarcon_sitiosFacturaProveedor,this,true,"con_sitiosFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_DETALLE));

		if(this.facturaproveedorConstantesFunciones.mostrardetalleFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_DETALLE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorConstantesFunciones.resaltardetalleFacturaProveedor,this.facturaproveedorConstantesFunciones.activardetalleFacturaProveedor,iSizeTabla,this,true,"detalleFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltardetalleFacturaProveedor,this.facturaproveedorConstantesFunciones.activardetalleFacturaProveedor,this,true,"detalleFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,200));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,200));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,200));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,200));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,200);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12));

		if(this.facturaproveedorConstantesFunciones.mostrarvalor_bienes12FacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarvalor_bienes12FacturaProveedor,this.facturaproveedorConstantesFunciones.activarvalor_bienes12FacturaProveedor,iSizeTabla,this,true,"valor_bienes12FacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarvalor_bienes12FacturaProveedor,this.facturaproveedorConstantesFunciones.activarvalor_bienes12FacturaProveedor,this,true,"valor_bienes12FacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12));

		if(this.facturaproveedorConstantesFunciones.mostrarvalor_servicios12FacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarvalor_servicios12FacturaProveedor,this.facturaproveedorConstantesFunciones.activarvalor_servicios12FacturaProveedor,iSizeTabla,this,true,"valor_servicios12FacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarvalor_servicios12FacturaProveedor,this.facturaproveedorConstantesFunciones.activarvalor_servicios12FacturaProveedor,this,true,"valor_servicios12FacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12));

		if(this.facturaproveedorConstantesFunciones.mostrartotal_valor12FacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltartotal_valor12FacturaProveedor,this.facturaproveedorConstantesFunciones.activartotal_valor12FacturaProveedor,iSizeTabla,this,true,"total_valor12FacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltartotal_valor12FacturaProveedor,this.facturaproveedorConstantesFunciones.activartotal_valor12FacturaProveedor,this,true,"total_valor12FacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0));

		if(this.facturaproveedorConstantesFunciones.mostrarvalor_bienes0FacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarvalor_bienes0FacturaProveedor,this.facturaproveedorConstantesFunciones.activarvalor_bienes0FacturaProveedor,iSizeTabla,this,true,"valor_bienes0FacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarvalor_bienes0FacturaProveedor,this.facturaproveedorConstantesFunciones.activarvalor_bienes0FacturaProveedor,this,true,"valor_bienes0FacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0));

		if(this.facturaproveedorConstantesFunciones.mostrarvalor_servicios0FacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarvalor_servicios0FacturaProveedor,this.facturaproveedorConstantesFunciones.activarvalor_servicios0FacturaProveedor,iSizeTabla,this,true,"valor_servicios0FacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarvalor_servicios0FacturaProveedor,this.facturaproveedorConstantesFunciones.activarvalor_servicios0FacturaProveedor,this,true,"valor_servicios0FacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0));

		if(this.facturaproveedorConstantesFunciones.mostrartotal_valor0FacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltartotal_valor0FacturaProveedor,this.facturaproveedorConstantesFunciones.activartotal_valor0FacturaProveedor,iSizeTabla,this,true,"total_valor0FacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltartotal_valor0FacturaProveedor,this.facturaproveedorConstantesFunciones.activartotal_valor0FacturaProveedor,this,true,"total_valor0FacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_BIENESICE));

		if(this.facturaproveedorConstantesFunciones.mostrarbienes_iceFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_BIENESICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarbienes_iceFacturaProveedor,this.facturaproveedorConstantesFunciones.activarbienes_iceFacturaProveedor,iSizeTabla,this,true,"bienes_iceFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarbienes_iceFacturaProveedor,this.facturaproveedorConstantesFunciones.activarbienes_iceFacturaProveedor,this,true,"bienes_iceFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE));

		if(this.facturaproveedorConstantesFunciones.mostrarservicios_iceFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarservicios_iceFacturaProveedor,this.facturaproveedorConstantesFunciones.activarservicios_iceFacturaProveedor,iSizeTabla,this,true,"servicios_iceFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarservicios_iceFacturaProveedor,this.facturaproveedorConstantesFunciones.activarservicios_iceFacturaProveedor,this,true,"servicios_iceFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_TOTALICE));

		if(this.facturaproveedorConstantesFunciones.mostrartotal_iceFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_TOTALICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltartotal_iceFacturaProveedor,this.facturaproveedorConstantesFunciones.activartotal_iceFacturaProveedor,iSizeTabla,this,true,"total_iceFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltartotal_iceFacturaProveedor,this.facturaproveedorConstantesFunciones.activartotal_iceFacturaProveedor,this,true,"total_iceFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_BIENESIVA));

		if(this.facturaproveedorConstantesFunciones.mostrarbienes_ivaFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_BIENESIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarbienes_ivaFacturaProveedor,this.facturaproveedorConstantesFunciones.activarbienes_ivaFacturaProveedor,iSizeTabla,this,true,"bienes_ivaFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarbienes_ivaFacturaProveedor,this.facturaproveedorConstantesFunciones.activarbienes_ivaFacturaProveedor,this,true,"bienes_ivaFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA));

		if(this.facturaproveedorConstantesFunciones.mostrarservicios_ivaFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarservicios_ivaFacturaProveedor,this.facturaproveedorConstantesFunciones.activarservicios_ivaFacturaProveedor,iSizeTabla,this,true,"servicios_ivaFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarservicios_ivaFacturaProveedor,this.facturaproveedorConstantesFunciones.activarservicios_ivaFacturaProveedor,this,true,"servicios_ivaFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_TOTALIVA));

		if(this.facturaproveedorConstantesFunciones.mostrartotal_ivaFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_TOTALIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltartotal_ivaFacturaProveedor,this.facturaproveedorConstantesFunciones.activartotal_ivaFacturaProveedor,iSizeTabla,this,true,"total_ivaFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltartotal_ivaFacturaProveedor,this.facturaproveedorConstantesFunciones.activartotal_ivaFacturaProveedor,this,true,"total_ivaFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE));

		if(this.facturaproveedorConstantesFunciones.mostrariva_porcentajeFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltariva_porcentajeFacturaProveedor,this.facturaproveedorConstantesFunciones.activariva_porcentajeFacturaProveedor,iSizeTabla,this,true,"iva_porcentajeFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltariva_porcentajeFacturaProveedor,this.facturaproveedorConstantesFunciones.activariva_porcentajeFacturaProveedor,this,true,"iva_porcentajeFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_TOTAL));

		if(this.facturaproveedorConstantesFunciones.mostrartotalFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_TOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltartotalFacturaProveedor,this.facturaproveedorConstantesFunciones.activartotalFacturaProveedor,iSizeTabla,this,true,"totalFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltartotalFacturaProveedor,this.facturaproveedorConstantesFunciones.activartotalFacturaProveedor,this,true,"totalFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA));

		if(this.facturaproveedorConstantesFunciones.mostrarcon_monto_objeto_ivaFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.facturaproveedorConstantesFunciones.resaltarcon_monto_objeto_ivaFacturaProveedor,this.facturaproveedorConstantesFunciones.activarcon_monto_objeto_ivaFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarcon_monto_objeto_ivaFacturaProveedor,this.facturaproveedorConstantesFunciones.activarcon_monto_objeto_ivaFacturaProveedor,this,true,"con_monto_objeto_ivaFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION));

		if(this.facturaproveedorConstantesFunciones.mostrarnumero_retencionFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorConstantesFunciones.resaltarnumero_retencionFacturaProveedor,this.facturaproveedorConstantesFunciones.activarnumero_retencionFacturaProveedor,iSizeTabla,this,true,"numero_retencionFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarnumero_retencionFacturaProveedor,this.facturaproveedorConstantesFunciones.activarnumero_retencionFacturaProveedor,this,true,"numero_retencionFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE));

		if(this.facturaproveedorConstantesFunciones.mostrarnumero_serieFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorConstantesFunciones.resaltarnumero_serieFacturaProveedor,this.facturaproveedorConstantesFunciones.activarnumero_serieFacturaProveedor,iSizeTabla,this,true,"numero_serieFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarnumero_serieFacturaProveedor,this.facturaproveedorConstantesFunciones.activarnumero_serieFacturaProveedor,this,true,"numero_serieFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION));

		if(this.facturaproveedorConstantesFunciones.mostrarnumero_autorizacionFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorConstantesFunciones.resaltarnumero_autorizacionFacturaProveedor,this.facturaproveedorConstantesFunciones.activarnumero_autorizacionFacturaProveedor,iSizeTabla,this,true,"numero_autorizacionFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarnumero_autorizacionFacturaProveedor,this.facturaproveedorConstantesFunciones.activarnumero_autorizacionFacturaProveedor,this,true,"numero_autorizacionFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ));

		if(this.facturaproveedorConstantesFunciones.mostrarfecha_validezFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.facturaproveedorConstantesFunciones.resaltarfecha_validezFacturaProveedor,this.facturaproveedorConstantesFunciones.activarfecha_validezFacturaProveedor,iSizeTabla,this,true,"fecha_validezFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarfecha_validezFacturaProveedor,this.facturaproveedorConstantesFunciones.activarfecha_validezFacturaProveedor,this,true,"fecha_validezFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1));

		if(this.facturaproveedorConstantesFunciones.mostrarid_tipo_retencion_fuente1FacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoRetencionTableCell(this.tiporetencionfuente1sForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_fuente1FacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_fuente1FacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new TipoRetencionTableCell(this.tiporetencionfuente1sForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_fuente1FacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_fuente1FacturaProveedor,true,"id_tipo_retencion_fuente1FacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE));

		if(this.facturaproveedorConstantesFunciones.mostrarret_fuente1_porcentajeFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarret_fuente1_porcentajeFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_fuente1_porcentajeFacturaProveedor,iSizeTabla,this,true,"ret_fuente1_porcentajeFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarret_fuente1_porcentajeFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_fuente1_porcentajeFacturaProveedor,this,true,"ret_fuente1_porcentajeFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE));

		if(this.facturaproveedorConstantesFunciones.mostrarret_fuente1_baseFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarret_fuente1_baseFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_fuente1_baseFacturaProveedor,iSizeTabla,this,true,"ret_fuente1_baseFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarret_fuente1_baseFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_fuente1_baseFacturaProveedor,this,true,"ret_fuente1_baseFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO));

		if(this.facturaproveedorConstantesFunciones.mostrarret_fuente1_retenidoFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarret_fuente1_retenidoFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_fuente1_retenidoFacturaProveedor,iSizeTabla,this,true,"ret_fuente1_retenidoFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarret_fuente1_retenidoFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_fuente1_retenidoFacturaProveedor,this,true,"ret_fuente1_retenidoFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2));

		if(this.facturaproveedorConstantesFunciones.mostrarid_tipo_retencion_fuente2FacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoRetencionTableCell(this.tiporetencionfuente2sForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_fuente2FacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_fuente2FacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new TipoRetencionTableCell(this.tiporetencionfuente2sForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_fuente2FacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_fuente2FacturaProveedor,true,"id_tipo_retencion_fuente2FacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE));

		if(this.facturaproveedorConstantesFunciones.mostrarret_fuente2_porcentajeFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarret_fuente2_porcentajeFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_fuente2_porcentajeFacturaProveedor,iSizeTabla,this,true,"ret_fuente2_porcentajeFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarret_fuente2_porcentajeFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_fuente2_porcentajeFacturaProveedor,this,true,"ret_fuente2_porcentajeFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE));

		if(this.facturaproveedorConstantesFunciones.mostrarret_fuente2_baseFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarret_fuente2_baseFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_fuente2_baseFacturaProveedor,iSizeTabla,this,true,"ret_fuente2_baseFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarret_fuente2_baseFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_fuente2_baseFacturaProveedor,this,true,"ret_fuente2_baseFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO));

		if(this.facturaproveedorConstantesFunciones.mostrarret_fuente2_retenidoFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarret_fuente2_retenidoFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_fuente2_retenidoFacturaProveedor,iSizeTabla,this,true,"ret_fuente2_retenidoFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarret_fuente2_retenidoFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_fuente2_retenidoFacturaProveedor,this,true,"ret_fuente2_retenidoFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1));

		if(this.facturaproveedorConstantesFunciones.mostrarid_tipo_retencion_iva1FacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoRetencionTableCell(this.tiporetencioniva1sForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_iva1FacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_iva1FacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new TipoRetencionTableCell(this.tiporetencioniva1sForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_iva1FacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_iva1FacturaProveedor,true,"id_tipo_retencion_iva1FacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE));

		if(this.facturaproveedorConstantesFunciones.mostrarret_iva_bien_porcentajeFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarret_iva_bien_porcentajeFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_iva_bien_porcentajeFacturaProveedor,iSizeTabla,this,true,"ret_iva_bien_porcentajeFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarret_iva_bien_porcentajeFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_iva_bien_porcentajeFacturaProveedor,this,true,"ret_iva_bien_porcentajeFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE));

		if(this.facturaproveedorConstantesFunciones.mostrarret_iva_bien_baseFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarret_iva_bien_baseFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_iva_bien_baseFacturaProveedor,iSizeTabla,this,true,"ret_iva_bien_baseFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarret_iva_bien_baseFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_iva_bien_baseFacturaProveedor,this,true,"ret_iva_bien_baseFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO));

		if(this.facturaproveedorConstantesFunciones.mostrarret_iva_bien_retenidoFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarret_iva_bien_retenidoFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_iva_bien_retenidoFacturaProveedor,iSizeTabla,this,true,"ret_iva_bien_retenidoFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarret_iva_bien_retenidoFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_iva_bien_retenidoFacturaProveedor,this,true,"ret_iva_bien_retenidoFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2));

		if(this.facturaproveedorConstantesFunciones.mostrarid_tipo_retencion_iva2FacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoRetencionTableCell(this.tiporetencioniva2sForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_iva2FacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_iva2FacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new TipoRetencionTableCell(this.tiporetencioniva2sForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_iva2FacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_iva2FacturaProveedor,true,"id_tipo_retencion_iva2FacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE));

		if(this.facturaproveedorConstantesFunciones.mostrarret_iva_servicio_porcentajeFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarret_iva_servicio_porcentajeFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_iva_servicio_porcentajeFacturaProveedor,iSizeTabla,this,true,"ret_iva_servicio_porcentajeFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarret_iva_servicio_porcentajeFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_iva_servicio_porcentajeFacturaProveedor,this,true,"ret_iva_servicio_porcentajeFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE));

		if(this.facturaproveedorConstantesFunciones.mostrarret_iva_servicio_baseFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarret_iva_servicio_baseFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_iva_servicio_baseFacturaProveedor,iSizeTabla,this,true,"ret_iva_servicio_baseFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarret_iva_servicio_baseFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_iva_servicio_baseFacturaProveedor,this,true,"ret_iva_servicio_baseFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO));

		if(this.facturaproveedorConstantesFunciones.mostrarret_iva_servicio_retenidoFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltarret_iva_servicio_retenidoFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_iva_servicio_retenidoFacturaProveedor,iSizeTabla,this,true,"ret_iva_servicio_retenidoFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarret_iva_servicio_retenidoFacturaProveedor,this.facturaproveedorConstantesFunciones.activarret_iva_servicio_retenidoFacturaProveedor,this,true,"ret_iva_servicio_retenidoFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION));

		if(this.facturaproveedorConstantesFunciones.mostraranexo_numero_autorizacionFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorConstantesFunciones.resaltaranexo_numero_autorizacionFacturaProveedor,this.facturaproveedorConstantesFunciones.activaranexo_numero_autorizacionFacturaProveedor,iSizeTabla,this,true,"anexo_numero_autorizacionFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltaranexo_numero_autorizacionFacturaProveedor,this.facturaproveedorConstantesFunciones.activaranexo_numero_autorizacionFacturaProveedor,this,true,"anexo_numero_autorizacionFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE));

		if(this.facturaproveedorConstantesFunciones.mostraranexo_numeso_serieFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorConstantesFunciones.resaltaranexo_numeso_serieFacturaProveedor,this.facturaproveedorConstantesFunciones.activaranexo_numeso_serieFacturaProveedor,iSizeTabla,this,true,"anexo_numeso_serieFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltaranexo_numeso_serieFacturaProveedor,this.facturaproveedorConstantesFunciones.activaranexo_numeso_serieFacturaProveedor,this,true,"anexo_numeso_serieFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ));

		if(this.facturaproveedorConstantesFunciones.mostraranexo_fecha_validezFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.facturaproveedorConstantesFunciones.resaltaranexo_fecha_validezFacturaProveedor,this.facturaproveedorConstantesFunciones.activaranexo_fecha_validezFacturaProveedor,iSizeTabla,this,true,"anexo_fecha_validezFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.facturaproveedorConstantesFunciones.resaltaranexo_fecha_validezFacturaProveedor,this.facturaproveedorConstantesFunciones.activaranexo_fecha_validezFacturaProveedor,this,true,"anexo_fecha_validezFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO));

		if(this.facturaproveedorConstantesFunciones.mostrarid_tipo_tributarioFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoTributarioTableCell(this.tipotributariosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_tipo_tributarioFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_tipo_tributarioFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new TipoTributarioTableCell(this.tipotributariosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_tipo_tributarioFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_tipo_tributarioFacturaProveedor,true,"id_tipo_tributarioFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO));

		if(this.facturaproveedorConstantesFunciones.mostraranexo_factura_inicioFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorConstantesFunciones.resaltaranexo_factura_inicioFacturaProveedor,this.facturaproveedorConstantesFunciones.activaranexo_factura_inicioFacturaProveedor,iSizeTabla,this,true,"anexo_factura_inicioFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltaranexo_factura_inicioFacturaProveedor,this.facturaproveedorConstantesFunciones.activaranexo_factura_inicioFacturaProveedor,this,true,"anexo_factura_inicioFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN));

		if(this.facturaproveedorConstantesFunciones.mostraranexo_factura_finFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorConstantesFunciones.resaltaranexo_factura_finFacturaProveedor,this.facturaproveedorConstantesFunciones.activaranexo_factura_finFacturaProveedor,iSizeTabla,this,true,"anexo_factura_finFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltaranexo_factura_finFacturaProveedor,this.facturaproveedorConstantesFunciones.activaranexo_factura_finFacturaProveedor,this,true,"anexo_factura_finFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES));

		if(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecreditofiscalbienessForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecreditofiscalbienessForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor,true,"id_cuenta_contable_credito_fiscal_bienesFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO));

		if(this.facturaproveedorConstantesFunciones.mostrarid_responsable_fondoFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ResponsableFondoTableCell(this.responsablefondosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_responsable_fondoFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_responsable_fondoFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new ResponsableFondoTableCell(this.responsablefondosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_responsable_fondoFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_responsable_fondoFacturaProveedor,true,"id_responsable_fondoFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS));

		if(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecreditofiscalserviciossForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecreditofiscalserviciossForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor,true,"id_cuenta_contable_credito_fiscal_serviciosFacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL));

		if(this.facturaproveedorConstantesFunciones.mostrarsecuencialFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturaproveedorConstantesFunciones.resaltarsecuencialFacturaProveedor,this.facturaproveedorConstantesFunciones.activarsecuencialFacturaProveedor,iSizeTabla,this,true,"secuencialFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltarsecuencialFacturaProveedor,this.facturaproveedorConstantesFunciones.activarsecuencialFacturaProveedor,this,true,"secuencialFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO));

		if(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_gastoFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablegastosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_gastoFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_gastoFacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablegastosForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_gastoFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_gastoFacturaProveedor,true,"id_cuenta_contable_gastoFacturaProveedor","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR));

		if(this.facturaproveedorConstantesFunciones.mostrargasto_valorFacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltargasto_valorFacturaProveedor,this.facturaproveedorConstantesFunciones.activargasto_valorFacturaProveedor,iSizeTabla,this,true,"gasto_valorFacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltargasto_valorFacturaProveedor,this.facturaproveedorConstantesFunciones.activargasto_valorFacturaProveedor,this,true,"gasto_valorFacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2));

		if(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_gasto2FacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablegasto2sForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_gasto2FacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_gasto2FacturaProveedor,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablegasto2sForeignKey,this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_gasto2FacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_gasto2FacturaProveedor,true,"id_cuenta_contable_gasto2FacturaProveedor","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2));

		if(this.facturaproveedorConstantesFunciones.mostrargasto_valor2FacturaProveedor && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturaproveedorConstantesFunciones.resaltargasto_valor2FacturaProveedor,this.facturaproveedorConstantesFunciones.activargasto_valor2FacturaProveedor,iSizeTabla,this,true,"gasto_valor2FacturaProveedor","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturaproveedorConstantesFunciones.resaltargasto_valor2FacturaProveedor,this.facturaproveedorConstantesFunciones.activargasto_valor2FacturaProveedor,this,true,"gasto_valor2FacturaProveedor","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaProveedorPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosDetalleFacturaProveedor && this.facturaproveedorConstantesFunciones.mostrarDetalleFacturaProveedorFacturaProveedor && !FacturaProveedorConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Detalle Factura Proveedores");
				tableColumn.setHeaderValue("Detalle Factura Proveedores");
				tableColumn.setCellRenderer(new DetalleFacturaProveedorTableCell(facturaproveedorConstantesFunciones.resaltarDetalleFacturaProveedorFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarDetalleFacturaProveedorFacturaProveedor));
				tableColumn.setCellEditor(new DetalleFacturaProveedorTableCell(facturaproveedorConstantesFunciones.resaltarDetalleFacturaProveedorFacturaProveedor,this,this.facturaproveedorConstantesFunciones.activarDetalleFacturaProveedorFacturaProveedor));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosFacturaProveedor.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.facturaproveedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.facturaproveedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosFacturaProveedor.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				//tableColumn= new TableColumn();
				//tableColumn.setIdentifier(sLabelColumnAccion);
				//tableColumn.setHeaderValue(sLabelColumnAccion);
				//tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.facturaproveedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				//tableColumn.setCellEditor(new IdTableCell(this,false,false,this.facturaproveedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				//tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				//tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				//this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				//this.jTableDatosFacturaProveedor.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarFacturaProveedor && this.isPermisoGuardarCambiosFacturaProveedor) {
					//tableColumn= new TableColumn();
					//tableColumn.setIdentifier(Constantes2.S_ELI);
					//tableColumn.setHeaderValue(sLabelColumnAccionEli);
					//tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.facturaproveedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					//tableColumn.setCellEditor(new IdTableCell(this,false,true,this.facturaproveedorSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					//tableColumn.setPreferredWidth(65); 	 
					//tableColumn.setWidth(65); 	 
					//tableColumn.setMinWidth(65); 
					//tableColumn.setMaxWidth(65);
					
					//this.iWidthTableDefinicion+=65;
						
					//this.jTableDatosFacturaProveedor.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.facturaproveedorSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosFacturaProveedor.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosFacturaProveedor.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarFacturaProveedor && this.isPermisoGuardarCambiosFacturaProveedor) {
				//iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		//iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.facturaproveedorSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarFacturaProveedor && this.isPermisoGuardarCambiosFacturaProveedor) {
				////REUBICA ELIMINAR SIMPLE
				//jTableDatosFacturaProveedor.moveColumn(this.jTableDatosFacturaProveedor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				//iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		//jTableDatosFacturaProveedor.moveColumn(this.jTableDatosFacturaProveedor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.facturaproveedorSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosFacturaProveedor.moveColumn(this.jTableDatosFacturaProveedor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosFacturaProveedor.moveColumn(this.jTableDatosFacturaProveedor.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosFacturaProveedor.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosFacturaProveedor.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosFacturaProveedor,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosFacturaProveedor.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosFacturaProveedor.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!FacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosFacturaProveedor.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosFacturaProveedor.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosFacturaProveedor.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=facturaproveedorLogic.getFacturaProveedors().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=facturaproveedors.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosFacturaProveedor.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosFacturaProveedor.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosFacturaProveedor();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoFacturaProveedor=false;
					
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			
				if(this.facturaproveedorSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormFacturaProveedor==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosFacturaProveedor.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.facturaproveedor.getsType().equals("DUPLICADO")
				   || this.facturaproveedor.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoFacturaProveedor=true;
				
				} else {
					this.isEsNuevoFacturaProveedor=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
					if(this.facturaproveedor.getId()>=0 && !this.facturaproveedor.getIsNew()) {						
						this.isEsNuevoFacturaProveedor=false;
						
					} else {
						this.isEsNuevoFacturaProveedor=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoFacturaProveedor(esRelaciones);						
				
				this.seleccionarFacturaProveedor(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.facturaproveedor.getId()<0) {
					this.isEsNuevoFacturaProveedor=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarFacturaProveedor(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarFacturaProveedor(evt,rowIndex);
				}	
				
				if(this.facturaproveedorSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion FacturaProveedor: " + this.dDif); 
					}
				}								
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarFacturaProveedor(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.facturaproveedor)) {
					if(this.facturaproveedor.getId()>0) {
						this.facturaproveedor.setIsDeleted(true);
						
						this.facturaproveedorsEliminados.add(this.facturaproveedor);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.facturaproveedorLogic.getFacturaProveedors().remove(this.facturaproveedor);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.facturaproveedors.remove(this.facturaproveedor);				
					}
					
					
					((FacturaProveedorModel) this.jTableDatosFacturaProveedor.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaFacturaProveedor(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarFacturaProveedor(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoFacturaProveedor) {
			
			if(this.jInternalFrameDetalleFormFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosFacturaProveedor.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosFacturaProveedor.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioFacturaProveedor(this.facturaproveedor);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.facturaproveedorConstantesFunciones.cargarid_empresaFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_empresaFacturaProveedor) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.facturaproveedor.getid_empresa());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(facturaproveedor.getEmpresa()!=null) {
							this.empresasForeignKey.add(facturaproveedor.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.facturaproveedor.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.facturaproveedorConstantesFunciones.cargarid_sucursalFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_sucursalFacturaProveedor) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.facturaproveedor.getid_sucursal());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(facturaproveedor.getSucursal()!=null) {
							this.sucursalsForeignKey.add(facturaproveedor.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.facturaproveedor.getid_sucursal(),false,"Formulario");

					//Ejercicio
					if(!this.facturaproveedorConstantesFunciones.cargarid_ejercicioFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_ejercicioFacturaProveedor) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.facturaproveedor.getid_ejercicio());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(facturaproveedor.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(facturaproveedor.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.facturaproveedor.getid_ejercicio(),false,"Formulario");

					//Periodo
					if(!this.facturaproveedorConstantesFunciones.cargarid_periodoFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_periodoFacturaProveedor) {
						//this.cargarCombosPeriodosForeignKeyLista(" where id="+this.facturaproveedor.getid_periodo());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.periodosForeignKey=new ArrayList<Periodo>();

						if(facturaproveedor.getPeriodo()!=null) {
							this.periodosForeignKey.add(facturaproveedor.getPeriodo());
						}

						this.addItemDefectoCombosForeignKeyPeriodo();
						this.cargarCombosFramePeriodosForeignKey("Todos");
					}
					this.setActualPeriodoForeignKey(this.facturaproveedor.getid_periodo(),false,"Formulario");

					//Anio
					if(!this.facturaproveedorConstantesFunciones.cargarid_anioFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_anioFacturaProveedor) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.facturaproveedor.getid_anio());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(facturaproveedor.getAnio()!=null) {
							this.aniosForeignKey.add(facturaproveedor.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.facturaproveedor.getid_anio(),false,"Formulario");

					//Mes
					if(!this.facturaproveedorConstantesFunciones.cargarid_mesFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_mesFacturaProveedor) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.facturaproveedor.getid_mes());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(facturaproveedor.getMes()!=null) {
							this.messForeignKey.add(facturaproveedor.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.facturaproveedor.getid_mes(),false,"Formulario");

					//Modulo
					if(!this.facturaproveedorConstantesFunciones.cargarid_moduloFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_moduloFacturaProveedor) {
						//this.cargarCombosModulosForeignKeyLista(" where id="+this.facturaproveedor.getid_modulo());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.modulosForeignKey=new ArrayList<Modulo>();

						if(facturaproveedor.getModulo()!=null) {
							this.modulosForeignKey.add(facturaproveedor.getModulo());
						}

						this.addItemDefectoCombosForeignKeyModulo();
						this.cargarCombosFrameModulosForeignKey("Todos");
					}
					this.setActualModuloForeignKey(this.facturaproveedor.getid_modulo(),false,"Formulario");

					//PlantillaFactura
					if(!this.facturaproveedorConstantesFunciones.cargarid_plantilla_facturaFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_plantilla_facturaFacturaProveedor) {
						//this.cargarCombosPlantillaFacturasForeignKeyLista(" where id="+this.facturaproveedor.getid_plantilla_factura());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.plantillafacturasForeignKey=new ArrayList<PlantillaFactura>();

						if(facturaproveedor.getPlantillaFactura()!=null) {
							this.plantillafacturasForeignKey.add(facturaproveedor.getPlantillaFactura());
						}

						this.addItemDefectoCombosForeignKeyPlantillaFactura();
						this.cargarCombosFramePlantillaFacturasForeignKey("Todos");
					}
					this.setActualPlantillaFacturaForeignKey(this.facturaproveedor.getid_plantilla_factura(),false,"Formulario");

					//TipoDocumento
					if(!this.facturaproveedorConstantesFunciones.cargarid_tipo_documentoFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_tipo_documentoFacturaProveedor) {
						//this.cargarCombosTipoDocumentosForeignKeyLista(" where id="+this.facturaproveedor.getid_tipo_documento());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.tipodocumentosForeignKey=new ArrayList<TipoDocumento>();

						if(facturaproveedor.getTipoDocumento()!=null) {
							this.tipodocumentosForeignKey.add(facturaproveedor.getTipoDocumento());
						}

						this.addItemDefectoCombosForeignKeyTipoDocumento();
						this.cargarCombosFrameTipoDocumentosForeignKey("Todos");
					}
					this.setActualTipoDocumentoForeignKey(this.facturaproveedor.getid_tipo_documento(),false,"Formulario");

					//Factura
					if(!this.facturaproveedorConstantesFunciones.cargarid_facturaFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_facturaFacturaProveedor) {
						//this.cargarCombosFacturasForeignKeyLista(" where id="+this.facturaproveedor.getid_factura());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.facturasForeignKey=new ArrayList<Factura>();

						if(facturaproveedor.getFactura()!=null) {
							this.facturasForeignKey.add(facturaproveedor.getFactura());
						}

						this.addItemDefectoCombosForeignKeyFactura();
						this.cargarCombosFrameFacturasForeignKey("Todos");
					}
					this.setActualFacturaForeignKey(this.facturaproveedor.getid_factura(),false,"Formulario");

					//Transaccion
					if(!this.facturaproveedorConstantesFunciones.cargarid_transaccionFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_transaccionFacturaProveedor) {
						//this.cargarCombosTransaccionsForeignKeyLista(" where id="+this.facturaproveedor.getid_transaccion());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.transaccionsForeignKey=new ArrayList<Transaccion>();

						if(facturaproveedor.getTransaccion()!=null) {
							this.transaccionsForeignKey.add(facturaproveedor.getTransaccion());
						}

						this.addItemDefectoCombosForeignKeyTransaccion();
						this.cargarCombosFrameTransaccionsForeignKey("Todos");
					}
					this.setActualTransaccionForeignKey(this.facturaproveedor.getid_transaccion(),false,"Formulario");

					//Cliente
					if(!this.facturaproveedorConstantesFunciones.cargarid_clienteFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_clienteFacturaProveedor) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.facturaproveedor.getid_cliente());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(facturaproveedor.getCliente()!=null) {
							this.clientesForeignKey.add(facturaproveedor.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.facturaproveedor.getid_cliente(),false,"Formulario");

					//EmpleadoSolicita
					if(!this.facturaproveedorConstantesFunciones.cargarid_empleado_solicitaFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_empleado_solicitaFacturaProveedor) {
						//this.cargarCombosEmpleadoSolicitasForeignKeyLista(" where id="+this.facturaproveedor.getid_empleado_solicita());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.empleadosolicitasForeignKey=new ArrayList<Empleado>();

						if(facturaproveedor.getEmpleadoSolicita()!=null) {
							this.empleadosolicitasForeignKey.add(facturaproveedor.getEmpleadoSolicita());
						}

						this.addItemDefectoCombosForeignKeyEmpleadoSolicita();
						this.cargarCombosFrameEmpleadoSolicitasForeignKey("Todos");
					}
					this.setActualEmpleadoSolicitaForeignKey(this.facturaproveedor.getid_empleado_solicita(),false,"Formulario");

					//Moneda
					if(!this.facturaproveedorConstantesFunciones.cargarid_monedaFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_monedaFacturaProveedor) {
						//this.cargarCombosMonedasForeignKeyLista(" where id="+this.facturaproveedor.getid_moneda());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.monedasForeignKey=new ArrayList<Moneda>();

						if(facturaproveedor.getMoneda()!=null) {
							this.monedasForeignKey.add(facturaproveedor.getMoneda());
						}

						this.addItemDefectoCombosForeignKeyMoneda();
						this.cargarCombosFrameMonedasForeignKey("Todos");
					}
					this.setActualMonedaForeignKey(this.facturaproveedor.getid_moneda(),false,"Formulario");

					//Empleado
					if(!this.facturaproveedorConstantesFunciones.cargarid_empleadoFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_empleadoFacturaProveedor) {
						//this.cargarCombosEmpleadosForeignKeyLista(" where id="+this.facturaproveedor.getid_empleado());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.empleadosForeignKey=new ArrayList<Empleado>();

						if(facturaproveedor.getEmpleado()!=null) {
							this.empleadosForeignKey.add(facturaproveedor.getEmpleado());
						}

						this.addItemDefectoCombosForeignKeyEmpleado();
						this.cargarCombosFrameEmpleadosForeignKey("Todos");
					}
					this.setActualEmpleadoForeignKey(this.facturaproveedor.getid_empleado(),false,"Formulario");

					//TipoRetencionFuente1
					if(!this.facturaproveedorConstantesFunciones.cargarid_tipo_retencion_fuente1FacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_tipo_retencion_fuente1FacturaProveedor) {
						//this.cargarCombosTipoRetencionFuente1sForeignKeyLista(" where id="+this.facturaproveedor.getid_tipo_retencion_fuente1());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.tiporetencionfuente1sForeignKey=new ArrayList<TipoRetencion>();

						if(facturaproveedor.getTipoRetencionFuente1()!=null) {
							this.tiporetencionfuente1sForeignKey.add(facturaproveedor.getTipoRetencionFuente1());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencionFuente1();
						this.cargarCombosFrameTipoRetencionFuente1sForeignKey("Todos");
					}
					this.setActualTipoRetencionFuente1ForeignKey(this.facturaproveedor.getid_tipo_retencion_fuente1(),false,"Formulario");

					//TipoRetencionFuente2
					if(!this.facturaproveedorConstantesFunciones.cargarid_tipo_retencion_fuente2FacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_tipo_retencion_fuente2FacturaProveedor) {
						//this.cargarCombosTipoRetencionFuente2sForeignKeyLista(" where id="+this.facturaproveedor.getid_tipo_retencion_fuente2());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.tiporetencionfuente2sForeignKey=new ArrayList<TipoRetencion>();

						if(facturaproveedor.getTipoRetencionFuente2()!=null) {
							this.tiporetencionfuente2sForeignKey.add(facturaproveedor.getTipoRetencionFuente2());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencionFuente2();
						this.cargarCombosFrameTipoRetencionFuente2sForeignKey("Todos");
					}
					this.setActualTipoRetencionFuente2ForeignKey(this.facturaproveedor.getid_tipo_retencion_fuente2(),false,"Formulario");

					//TipoRetencionIva1
					if(!this.facturaproveedorConstantesFunciones.cargarid_tipo_retencion_iva1FacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_tipo_retencion_iva1FacturaProveedor) {
						//this.cargarCombosTipoRetencionIva1sForeignKeyLista(" where id="+this.facturaproveedor.getid_tipo_retencion_iva1());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.tiporetencioniva1sForeignKey=new ArrayList<TipoRetencion>();

						if(facturaproveedor.getTipoRetencionIva1()!=null) {
							this.tiporetencioniva1sForeignKey.add(facturaproveedor.getTipoRetencionIva1());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencionIva1();
						this.cargarCombosFrameTipoRetencionIva1sForeignKey("Todos");
					}
					this.setActualTipoRetencionIva1ForeignKey(this.facturaproveedor.getid_tipo_retencion_iva1(),false,"Formulario");

					//TipoRetencionIva2
					if(!this.facturaproveedorConstantesFunciones.cargarid_tipo_retencion_iva2FacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_tipo_retencion_iva2FacturaProveedor) {
						//this.cargarCombosTipoRetencionIva2sForeignKeyLista(" where id="+this.facturaproveedor.getid_tipo_retencion_iva2());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.tiporetencioniva2sForeignKey=new ArrayList<TipoRetencion>();

						if(facturaproveedor.getTipoRetencionIva2()!=null) {
							this.tiporetencioniva2sForeignKey.add(facturaproveedor.getTipoRetencionIva2());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencionIva2();
						this.cargarCombosFrameTipoRetencionIva2sForeignKey("Todos");
					}
					this.setActualTipoRetencionIva2ForeignKey(this.facturaproveedor.getid_tipo_retencion_iva2(),false,"Formulario");

					//TipoTributario
					if(!this.facturaproveedorConstantesFunciones.cargarid_tipo_tributarioFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_tipo_tributarioFacturaProveedor) {
						//this.cargarCombosTipoTributariosForeignKeyLista(" where id="+this.facturaproveedor.getid_tipo_tributario());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.tipotributariosForeignKey=new ArrayList<TipoTributario>();

						if(facturaproveedor.getTipoTributario()!=null) {
							this.tipotributariosForeignKey.add(facturaproveedor.getTipoTributario());
						}

						this.addItemDefectoCombosForeignKeyTipoTributario();
						this.cargarCombosFrameTipoTributariosForeignKey("Todos");
					}
					this.setActualTipoTributarioForeignKey(this.facturaproveedor.getid_tipo_tributario(),false,"Formulario");

					//CuentaContableCreditoFiscalBienes
					if(!this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_cuenta_contable_credito_fiscal_bienesFacturaProveedor) {
						//this.cargarCombosCuentaContableCreditoFiscalBienessForeignKeyLista(" where id="+this.facturaproveedor.getid_cuenta_contable_credito_fiscal_bienes());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.cuentacontablecreditofiscalbienessForeignKey=new ArrayList<CuentaContable>();

						if(facturaproveedor.getCuentaContableCreditoFiscalBienes()!=null) {
							this.cuentacontablecreditofiscalbienessForeignKey.add(facturaproveedor.getCuentaContableCreditoFiscalBienes());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalBienes();
						this.cargarCombosFrameCuentaContableCreditoFiscalBienessForeignKey("Todos");
					}
					this.setActualCuentaContableCreditoFiscalBienesForeignKey(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_bienes(),false,"Formulario");

					//ResponsableFondo
					if(!this.facturaproveedorConstantesFunciones.cargarid_responsable_fondoFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_responsable_fondoFacturaProveedor) {
						//this.cargarCombosResponsableFondosForeignKeyLista(" where id="+this.facturaproveedor.getid_responsable_fondo());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.responsablefondosForeignKey=new ArrayList<ResponsableFondo>();

						if(facturaproveedor.getResponsableFondo()!=null) {
							this.responsablefondosForeignKey.add(facturaproveedor.getResponsableFondo());
						}

						this.addItemDefectoCombosForeignKeyResponsableFondo();
						this.cargarCombosFrameResponsableFondosForeignKey("Todos");
					}
					this.setActualResponsableFondoForeignKey(this.facturaproveedor.getid_responsable_fondo(),false,"Formulario");

					//CuentaContableCreditoFiscalServicios
					if(!this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor) {
						//this.cargarCombosCuentaContableCreditoFiscalServiciossForeignKeyLista(" where id="+this.facturaproveedor.getid_cuenta_contable_credito_fiscal_servicios());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.cuentacontablecreditofiscalserviciossForeignKey=new ArrayList<CuentaContable>();

						if(facturaproveedor.getCuentaContableCreditoFiscalServicios()!=null) {
							this.cuentacontablecreditofiscalserviciossForeignKey.add(facturaproveedor.getCuentaContableCreditoFiscalServicios());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCreditoFiscalServicios();
						this.cargarCombosFrameCuentaContableCreditoFiscalServiciossForeignKey("Todos");
					}
					this.setActualCuentaContableCreditoFiscalServiciosForeignKey(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_servicios(),false,"Formulario");

					//CuentaContableGasto
					if(!this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_gastoFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_cuenta_contable_gastoFacturaProveedor) {
						//this.cargarCombosCuentaContableGastosForeignKeyLista(" where id="+this.facturaproveedor.getid_cuenta_contable_gasto());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.cuentacontablegastosForeignKey=new ArrayList<CuentaContable>();

						if(facturaproveedor.getCuentaContableGasto()!=null) {
							this.cuentacontablegastosForeignKey.add(facturaproveedor.getCuentaContableGasto());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableGasto();
						this.cargarCombosFrameCuentaContableGastosForeignKey("Todos");
					}
					this.setActualCuentaContableGastoForeignKey(this.facturaproveedor.getid_cuenta_contable_gasto(),false,"Formulario");

					//CuentaContableGasto2
					if(!this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_gasto2FacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_cuenta_contable_gasto2FacturaProveedor) {
						//this.cargarCombosCuentaContableGasto2sForeignKeyLista(" where id="+this.facturaproveedor.getid_cuenta_contable_gasto2());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.cuentacontablegasto2sForeignKey=new ArrayList<CuentaContable>();

						if(facturaproveedor.getCuentaContableGasto2()!=null) {
							this.cuentacontablegasto2sForeignKey.add(facturaproveedor.getCuentaContableGasto2());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableGasto2();
						this.cargarCombosFrameCuentaContableGasto2sForeignKey("Todos");
					}
					this.setActualCuentaContableGasto2ForeignKey(this.facturaproveedor.getid_cuenta_contable_gasto2(),false,"Formulario");

					//CuentaContableCreditoFin
					if(!this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_finFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_cuenta_contable_credito_finFacturaProveedor) {
						//this.cargarCombosCuentaContableCreditoFinsForeignKeyLista(" where id="+this.facturaproveedor.getid_cuenta_contable_credito_fin());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.cuentacontablecreditofinsForeignKey=new ArrayList<CuentaContable>();

						if(facturaproveedor.getCuentaContableCreditoFin()!=null) {
							this.cuentacontablecreditofinsForeignKey.add(facturaproveedor.getCuentaContableCreditoFin());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCreditoFin();
						this.cargarCombosFrameCuentaContableCreditoFinsForeignKey("Todos");
					}
					this.setActualCuentaContableCreditoFinForeignKey(this.facturaproveedor.getid_cuenta_contable_credito_fin(),false,"Formulario");

					//CuentaContableCreditoFin2
					if(!this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_credito_fin2FacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_cuenta_contable_credito_fin2FacturaProveedor) {
						//this.cargarCombosCuentaContableCreditoFin2sForeignKeyLista(" where id="+this.facturaproveedor.getid_cuenta_contable_credito_fin2());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.cuentacontablecreditofin2sForeignKey=new ArrayList<CuentaContable>();

						if(facturaproveedor.getCuentaContableCreditoFin2()!=null) {
							this.cuentacontablecreditofin2sForeignKey.add(facturaproveedor.getCuentaContableCreditoFin2());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCreditoFin2();
						this.cargarCombosFrameCuentaContableCreditoFin2sForeignKey("Todos");
					}
					this.setActualCuentaContableCreditoFin2ForeignKey(this.facturaproveedor.getid_cuenta_contable_credito_fin2(),false,"Formulario");

					//CuentaContableCredito
					if(!this.facturaproveedorConstantesFunciones.cargarid_cuenta_contable_creditoFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_cuenta_contable_creditoFacturaProveedor) {
						//this.cargarCombosCuentaContableCreditosForeignKeyLista(" where id="+this.facturaproveedor.getid_cuenta_contable_credito());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.cuentacontablecreditosForeignKey=new ArrayList<CuentaContable>();

						if(facturaproveedor.getCuentaContableCredito()!=null) {
							this.cuentacontablecreditosForeignKey.add(facturaproveedor.getCuentaContableCredito());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableCredito();
						this.cargarCombosFrameCuentaContableCreditosForeignKey("Todos");
					}
					this.setActualCuentaContableCreditoForeignKey(this.facturaproveedor.getid_cuenta_contable_credito(),false,"Formulario");

					//TipoMovimiento
					if(!this.facturaproveedorConstantesFunciones.cargarid_tipo_movimientoFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_tipo_movimientoFacturaProveedor) {
						//this.cargarCombosTipoMovimientosForeignKeyLista(" where id="+this.facturaproveedor.getid_tipo_movimiento());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.tipomovimientosForeignKey=new ArrayList<TipoMovimiento>();

						if(facturaproveedor.getTipoMovimiento()!=null) {
							this.tipomovimientosForeignKey.add(facturaproveedor.getTipoMovimiento());
						}

						this.addItemDefectoCombosForeignKeyTipoMovimiento();
						this.cargarCombosFrameTipoMovimientosForeignKey("Todos");
					}
					this.setActualTipoMovimientoForeignKey(this.facturaproveedor.getid_tipo_movimiento(),false,"Formulario");

					//TipoMovimientoModulo
					if(!this.facturaproveedorConstantesFunciones.cargarid_tipo_movimiento_moduloFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_tipo_movimiento_moduloFacturaProveedor) {
						//this.cargarCombosTipoMovimientoModulosForeignKeyLista(" where id="+this.facturaproveedor.getid_tipo_movimiento_modulo());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.tipomovimientomodulosForeignKey=new ArrayList<TipoMovimientoModulo>();

						if(facturaproveedor.getTipoMovimientoModulo()!=null) {
							this.tipomovimientomodulosForeignKey.add(facturaproveedor.getTipoMovimientoModulo());
						}

						this.addItemDefectoCombosForeignKeyTipoMovimientoModulo();
						this.cargarCombosFrameTipoMovimientoModulosForeignKey("Todos");
					}
					this.setActualTipoMovimientoModuloForeignKey(this.facturaproveedor.getid_tipo_movimiento_modulo(),false,"Formulario");

					//TipoTransaccionModulo
					if(!this.facturaproveedorConstantesFunciones.cargarid_tipo_transaccion_moduloFacturaProveedor || this.facturaproveedorConstantesFunciones.event_dependid_tipo_transaccion_moduloFacturaProveedor) {
						//this.cargarCombosTipoTransaccionModulosForeignKeyLista(" where id="+this.facturaproveedor.getid_tipo_transaccion_modulo());
									//this.inicializarActualizarBindingFacturaProveedor(false,false);
						this.tipotransaccionmodulosForeignKey=new ArrayList<TipoTransaccionModulo>();

						if(facturaproveedor.getTipoTransaccionModulo()!=null) {
							this.tipotransaccionmodulosForeignKey.add(facturaproveedor.getTipoTransaccionModulo());
						}

						this.addItemDefectoCombosForeignKeyTipoTransaccionModulo();
						this.cargarCombosFrameTipoTransaccionModulosForeignKey("Todos");
					}
					this.setActualTipoTransaccionModuloForeignKey(this.facturaproveedor.getid_tipo_transaccion_modulo(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesFacturaProveedor("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesFacturaProveedor(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualFacturaProveedor() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoFacturaProveedor(FacturaProveedor facturaproveedor) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoFacturaProveedor(facturaproveedor,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoFacturaProveedor(FacturaProveedor facturaproveedor,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioFacturaProveedor(facturaproveedor);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyFacturaProveedor(facturaproveedor,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyFacturaProveedor(facturaproveedor);
	}
	
	public void setVariablesObjetoActualToFormularioFacturaProveedor(FacturaProveedor facturaproveedor) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormFacturaProveedor.jLabelidFacturaProveedor.setText(facturaproveedor.getId().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldplazoFacturaProveedor.setText(facturaproveedor.getplazo().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_facturaFacturaProveedor.setText(facturaproveedor.getnumero_factura());
			this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_emisionFacturaProveedor.setDate(facturaproveedor.getfecha_emision());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldrucFacturaProveedor.setText(facturaproveedor.getruc());
			this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_venceFacturaProveedor.setDate(facturaproveedor.getfecha_vence());
			this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_activosFacturaProveedor.setSelected(facturaproveedor.getcon_activos());
			this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_riseFacturaProveedor.setSelected(facturaproveedor.getcon_rise());
			this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_sitiosFacturaProveedor.setSelected(facturaproveedor.getcon_sitios());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextAreadetalleFacturaProveedor.setText(facturaproveedor.getdetalle());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes12FacturaProveedor.setText(facturaproveedor.getvalor_bienes12().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios12FacturaProveedor.setText(facturaproveedor.getvalor_servicios12().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor12FacturaProveedor.setText(facturaproveedor.gettotal_valor12().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes0FacturaProveedor.setText(facturaproveedor.getvalor_bienes0().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios0FacturaProveedor.setText(facturaproveedor.getvalor_servicios0().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor0FacturaProveedor.setText(facturaproveedor.gettotal_valor0().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_iceFacturaProveedor.setText(facturaproveedor.getbienes_ice().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_iceFacturaProveedor.setText(facturaproveedor.getservicios_ice().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_iceFacturaProveedor.setText(facturaproveedor.gettotal_ice().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_ivaFacturaProveedor.setText(facturaproveedor.getbienes_iva().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_ivaFacturaProveedor.setText(facturaproveedor.getservicios_iva().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_ivaFacturaProveedor.setText(facturaproveedor.gettotal_iva().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldiva_porcentajeFacturaProveedor.setText(facturaproveedor.getiva_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotalFacturaProveedor.setText(facturaproveedor.gettotal().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_monto_objeto_ivaFacturaProveedor.setSelected(facturaproveedor.getcon_monto_objeto_iva());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_retencionFacturaProveedor.setText(facturaproveedor.getnumero_retencion());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_serieFacturaProveedor.setText(facturaproveedor.getnumero_serie());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_autorizacionFacturaProveedor.setText(facturaproveedor.getnumero_autorizacion());
			this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_validezFacturaProveedor.setDate(facturaproveedor.getfecha_validez());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_porcentajeFacturaProveedor.setText(facturaproveedor.getret_fuente1_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_baseFacturaProveedor.setText(facturaproveedor.getret_fuente1_base().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_retenidoFacturaProveedor.setText(facturaproveedor.getret_fuente1_retenido().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_porcentajeFacturaProveedor.setText(facturaproveedor.getret_fuente2_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_baseFacturaProveedor.setText(facturaproveedor.getret_fuente2_base().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_retenidoFacturaProveedor.setText(facturaproveedor.getret_fuente2_retenido().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_porcentajeFacturaProveedor.setText(facturaproveedor.getret_iva_bien_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_baseFacturaProveedor.setText(facturaproveedor.getret_iva_bien_base().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_retenidoFacturaProveedor.setText(facturaproveedor.getret_iva_bien_retenido().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_porcentajeFacturaProveedor.setText(facturaproveedor.getret_iva_servicio_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_baseFacturaProveedor.setText(facturaproveedor.getret_iva_servicio_base().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_retenidoFacturaProveedor.setText(facturaproveedor.getret_iva_servicio_retenido().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numero_autorizacionFacturaProveedor.setText(facturaproveedor.getanexo_numero_autorizacion());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numeso_serieFacturaProveedor.setText(facturaproveedor.getanexo_numeso_serie());
			this.jInternalFrameDetalleFormFacturaProveedor.jDateChooseranexo_fecha_validezFacturaProveedor.setDate(facturaproveedor.getanexo_fecha_validez());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_inicioFacturaProveedor.setText(facturaproveedor.getanexo_factura_inicio());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_finFacturaProveedor.setText(facturaproveedor.getanexo_factura_fin());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldsecuencialFacturaProveedor.setText(facturaproveedor.getsecuencial());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valorFacturaProveedor.setText(facturaproveedor.getgasto_valor().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valor2FacturaProveedor.setText(facturaproveedor.getgasto_valor2().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,FacturaProveedor facturaproveedorLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,facturaproveedorLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,FacturaProveedor facturaproveedorLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				facturaproveedorLocal=this.facturaproveedor;
			} else {
				facturaproveedorLocal=this.facturaproveedorAnterior;
			}
		}
		
		if(this.permiteMantenimiento(facturaproveedorLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoFacturaProveedor(facturaproveedorLocal,true);
					
					if(facturaproveedorSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(facturaproveedorLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(facturaproveedorLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoFacturaProveedor(FacturaProveedor facturaproveedor,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualFacturaProveedor(facturaproveedor,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(facturaproveedor);
	}
	
	public void setVariablesFormularioToObjetoActualFacturaProveedor(FacturaProveedor facturaproveedor,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualFacturaProveedor(facturaproveedor,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualFacturaProveedor(FacturaProveedor facturaproveedor,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormFacturaProveedor.jLabelidFacturaProveedor.getText()==null || this.jInternalFrameDetalleFormFacturaProveedor.jLabelidFacturaProveedor.getText()=="" || this.jInternalFrameDetalleFormFacturaProveedor.jLabelidFacturaProveedor.getText()=="Id") {
				this.jInternalFrameDetalleFormFacturaProveedor.jLabelidFacturaProveedor.setText("0");
			}

			if(conColumnasBase) {facturaproveedor.setId(Long.parseLong(this.jInternalFrameDetalleFormFacturaProveedor.jLabelidFacturaProveedor.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelIdFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setplazo(Integer.parseInt(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldplazoFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_PLAZO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelplazoFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setnumero_factura(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_facturaFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_facturaFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setfecha_emision(this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_emisionFacturaProveedor.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelfecha_emisionFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setruc(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldrucFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_RUC+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelrucFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setfecha_vence(this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_venceFacturaProveedor.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelfecha_venceFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setcon_activos(this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_activosFacturaProveedor.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcon_activosFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setcon_rise(this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_riseFacturaProveedor.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_CONRISE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcon_riseFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setcon_sitios(this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_sitiosFacturaProveedor.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_CONSITIOS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcon_sitiosFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setdetalle(this.jInternalFrameDetalleFormFacturaProveedor.jTextAreadetalleFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_DETALLE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeldetalleFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setvalor_bienes12(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes12FacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelvalor_bienes12FacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setvalor_servicios12(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios12FacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelvalor_servicios12FacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.settotal_valor12(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor12FacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotal_valor12FacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setvalor_bienes0(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes0FacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelvalor_bienes0FacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setvalor_servicios0(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios0FacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelvalor_servicios0FacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.settotal_valor0(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor0FacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotal_valor0FacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setbienes_ice(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_iceFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_BIENESICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelbienes_iceFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setservicios_ice(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_iceFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelservicios_iceFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.settotal_ice(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_iceFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_TOTALICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotal_iceFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setbienes_iva(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_ivaFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_BIENESIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelbienes_ivaFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setservicios_iva(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_ivaFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelservicios_ivaFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.settotal_iva(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_ivaFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_TOTALIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotal_ivaFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setiva_porcentaje(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldiva_porcentajeFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeliva_porcentajeFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.settotal(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotalFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_TOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabeltotalFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setcon_monto_objeto_iva(this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_monto_objeto_ivaFacturaProveedor.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelcon_monto_objeto_ivaFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setnumero_retencion(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_retencionFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_retencionFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setnumero_serie(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_serieFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_serieFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setnumero_autorizacion(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_autorizacionFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelnumero_autorizacionFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setfecha_validez(this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_validezFacturaProveedor.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelfecha_validezFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setret_fuente1_porcentaje(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_porcentajeFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente1_porcentajeFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setret_fuente1_base(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_baseFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente1_baseFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setret_fuente1_retenido(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_retenidoFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente1_retenidoFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setret_fuente2_porcentaje(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_porcentajeFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente2_porcentajeFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setret_fuente2_base(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_baseFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente2_baseFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setret_fuente2_retenido(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_retenidoFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_fuente2_retenidoFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setret_iva_bien_porcentaje(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_porcentajeFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_bien_porcentajeFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setret_iva_bien_base(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_baseFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_bien_baseFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setret_iva_bien_retenido(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_retenidoFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_bien_retenidoFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setret_iva_servicio_porcentaje(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_porcentajeFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_servicio_porcentajeFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setret_iva_servicio_base(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_baseFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_servicio_baseFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setret_iva_servicio_retenido(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_retenidoFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelret_iva_servicio_retenidoFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setanexo_numero_autorizacion(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numero_autorizacionFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_numero_autorizacionFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setanexo_numeso_serie(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numeso_serieFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_numeso_serieFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setanexo_fecha_validez(this.jInternalFrameDetalleFormFacturaProveedor.jDateChooseranexo_fecha_validezFacturaProveedor.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_fecha_validezFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setanexo_factura_inicio(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_inicioFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_factura_inicioFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setanexo_factura_fin(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_finFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelanexo_factura_finFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setsecuencial(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldsecuencialFacturaProveedor.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelsecuencialFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setgasto_valor(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valorFacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelgasto_valorFacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturaproveedor.setgasto_valor2(Double.parseDouble(this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valor2FacturaProveedor.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaProveedor.jLabelgasto_valor2FacturaProveedor,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualFacturaProveedor(FacturaProveedor facturaproveedorBean,FacturaProveedor facturaproveedor,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosFacturaProveedor(FacturaProveedor facturaproveedorOrigen,FacturaProveedor facturaproveedor,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && facturaproveedorOrigen.getId()!=null && !facturaproveedorOrigen.getId().equals(0L))) {facturaproveedor.setId(facturaproveedorOrigen.getId());}}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getplazo()!=null && !facturaproveedorOrigen.getplazo().equals(0))) {facturaproveedor.setplazo(facturaproveedorOrigen.getplazo());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getnumero_factura()!=null && !facturaproveedorOrigen.getnumero_factura().equals(""))) {facturaproveedor.setnumero_factura(facturaproveedorOrigen.getnumero_factura());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getfecha_emision()!=null && !facturaproveedorOrigen.getfecha_emision().equals(new Date()))) {facturaproveedor.setfecha_emision(facturaproveedorOrigen.getfecha_emision());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getruc()!=null && !facturaproveedorOrigen.getruc().equals(""))) {facturaproveedor.setruc(facturaproveedorOrigen.getruc());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getfecha_vence()!=null && !facturaproveedorOrigen.getfecha_vence().equals(new Date()))) {facturaproveedor.setfecha_vence(facturaproveedorOrigen.getfecha_vence());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getcon_activos()!=null && !facturaproveedorOrigen.getcon_activos().equals(false))) {facturaproveedor.setcon_activos(facturaproveedorOrigen.getcon_activos());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getcon_rise()!=null && !facturaproveedorOrigen.getcon_rise().equals(false))) {facturaproveedor.setcon_rise(facturaproveedorOrigen.getcon_rise());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getcon_sitios()!=null && !facturaproveedorOrigen.getcon_sitios().equals(false))) {facturaproveedor.setcon_sitios(facturaproveedorOrigen.getcon_sitios());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getdetalle()!=null && !facturaproveedorOrigen.getdetalle().equals(""))) {facturaproveedor.setdetalle(facturaproveedorOrigen.getdetalle());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getvalor_bienes12()!=null && !facturaproveedorOrigen.getvalor_bienes12().equals(0.0))) {facturaproveedor.setvalor_bienes12(facturaproveedorOrigen.getvalor_bienes12());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getvalor_servicios12()!=null && !facturaproveedorOrigen.getvalor_servicios12().equals(0.0))) {facturaproveedor.setvalor_servicios12(facturaproveedorOrigen.getvalor_servicios12());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.gettotal_valor12()!=null && !facturaproveedorOrigen.gettotal_valor12().equals(0.0))) {facturaproveedor.settotal_valor12(facturaproveedorOrigen.gettotal_valor12());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getvalor_bienes0()!=null && !facturaproveedorOrigen.getvalor_bienes0().equals(0.0))) {facturaproveedor.setvalor_bienes0(facturaproveedorOrigen.getvalor_bienes0());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getvalor_servicios0()!=null && !facturaproveedorOrigen.getvalor_servicios0().equals(0.0))) {facturaproveedor.setvalor_servicios0(facturaproveedorOrigen.getvalor_servicios0());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.gettotal_valor0()!=null && !facturaproveedorOrigen.gettotal_valor0().equals(0.0))) {facturaproveedor.settotal_valor0(facturaproveedorOrigen.gettotal_valor0());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getbienes_ice()!=null && !facturaproveedorOrigen.getbienes_ice().equals(0.0))) {facturaproveedor.setbienes_ice(facturaproveedorOrigen.getbienes_ice());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getservicios_ice()!=null && !facturaproveedorOrigen.getservicios_ice().equals(0.0))) {facturaproveedor.setservicios_ice(facturaproveedorOrigen.getservicios_ice());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.gettotal_ice()!=null && !facturaproveedorOrigen.gettotal_ice().equals(0.0))) {facturaproveedor.settotal_ice(facturaproveedorOrigen.gettotal_ice());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getbienes_iva()!=null && !facturaproveedorOrigen.getbienes_iva().equals(0.0))) {facturaproveedor.setbienes_iva(facturaproveedorOrigen.getbienes_iva());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getservicios_iva()!=null && !facturaproveedorOrigen.getservicios_iva().equals(0.0))) {facturaproveedor.setservicios_iva(facturaproveedorOrigen.getservicios_iva());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.gettotal_iva()!=null && !facturaproveedorOrigen.gettotal_iva().equals(0.0))) {facturaproveedor.settotal_iva(facturaproveedorOrigen.gettotal_iva());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getiva_porcentaje()!=null && !facturaproveedorOrigen.getiva_porcentaje().equals(0.0))) {facturaproveedor.setiva_porcentaje(facturaproveedorOrigen.getiva_porcentaje());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.gettotal()!=null && !facturaproveedorOrigen.gettotal().equals(0.0))) {facturaproveedor.settotal(facturaproveedorOrigen.gettotal());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getcon_monto_objeto_iva()!=null && !facturaproveedorOrigen.getcon_monto_objeto_iva().equals(false))) {facturaproveedor.setcon_monto_objeto_iva(facturaproveedorOrigen.getcon_monto_objeto_iva());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getnumero_retencion()!=null && !facturaproveedorOrigen.getnumero_retencion().equals(""))) {facturaproveedor.setnumero_retencion(facturaproveedorOrigen.getnumero_retencion());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getnumero_serie()!=null && !facturaproveedorOrigen.getnumero_serie().equals(""))) {facturaproveedor.setnumero_serie(facturaproveedorOrigen.getnumero_serie());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getnumero_autorizacion()!=null && !facturaproveedorOrigen.getnumero_autorizacion().equals(""))) {facturaproveedor.setnumero_autorizacion(facturaproveedorOrigen.getnumero_autorizacion());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getfecha_validez()!=null && !facturaproveedorOrigen.getfecha_validez().equals(new Date()))) {facturaproveedor.setfecha_validez(facturaproveedorOrigen.getfecha_validez());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getret_fuente1_porcentaje()!=null && !facturaproveedorOrigen.getret_fuente1_porcentaje().equals(0.0))) {facturaproveedor.setret_fuente1_porcentaje(facturaproveedorOrigen.getret_fuente1_porcentaje());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getret_fuente1_base()!=null && !facturaproveedorOrigen.getret_fuente1_base().equals(0.0))) {facturaproveedor.setret_fuente1_base(facturaproveedorOrigen.getret_fuente1_base());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getret_fuente1_retenido()!=null && !facturaproveedorOrigen.getret_fuente1_retenido().equals(0.0))) {facturaproveedor.setret_fuente1_retenido(facturaproveedorOrigen.getret_fuente1_retenido());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getret_fuente2_porcentaje()!=null && !facturaproveedorOrigen.getret_fuente2_porcentaje().equals(0.0))) {facturaproveedor.setret_fuente2_porcentaje(facturaproveedorOrigen.getret_fuente2_porcentaje());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getret_fuente2_base()!=null && !facturaproveedorOrigen.getret_fuente2_base().equals(0.0))) {facturaproveedor.setret_fuente2_base(facturaproveedorOrigen.getret_fuente2_base());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getret_fuente2_retenido()!=null && !facturaproveedorOrigen.getret_fuente2_retenido().equals(0.0))) {facturaproveedor.setret_fuente2_retenido(facturaproveedorOrigen.getret_fuente2_retenido());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getret_iva_bien_porcentaje()!=null && !facturaproveedorOrigen.getret_iva_bien_porcentaje().equals(0.0))) {facturaproveedor.setret_iva_bien_porcentaje(facturaproveedorOrigen.getret_iva_bien_porcentaje());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getret_iva_bien_base()!=null && !facturaproveedorOrigen.getret_iva_bien_base().equals(0.0))) {facturaproveedor.setret_iva_bien_base(facturaproveedorOrigen.getret_iva_bien_base());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getret_iva_bien_retenido()!=null && !facturaproveedorOrigen.getret_iva_bien_retenido().equals(0.0))) {facturaproveedor.setret_iva_bien_retenido(facturaproveedorOrigen.getret_iva_bien_retenido());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getret_iva_servicio_porcentaje()!=null && !facturaproveedorOrigen.getret_iva_servicio_porcentaje().equals(0.0))) {facturaproveedor.setret_iva_servicio_porcentaje(facturaproveedorOrigen.getret_iva_servicio_porcentaje());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getret_iva_servicio_base()!=null && !facturaproveedorOrigen.getret_iva_servicio_base().equals(0.0))) {facturaproveedor.setret_iva_servicio_base(facturaproveedorOrigen.getret_iva_servicio_base());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getret_iva_servicio_retenido()!=null && !facturaproveedorOrigen.getret_iva_servicio_retenido().equals(0.0))) {facturaproveedor.setret_iva_servicio_retenido(facturaproveedorOrigen.getret_iva_servicio_retenido());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getanexo_numero_autorizacion()!=null && !facturaproveedorOrigen.getanexo_numero_autorizacion().equals(""))) {facturaproveedor.setanexo_numero_autorizacion(facturaproveedorOrigen.getanexo_numero_autorizacion());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getanexo_numeso_serie()!=null && !facturaproveedorOrigen.getanexo_numeso_serie().equals(""))) {facturaproveedor.setanexo_numeso_serie(facturaproveedorOrigen.getanexo_numeso_serie());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getanexo_fecha_validez()!=null && !facturaproveedorOrigen.getanexo_fecha_validez().equals(new Date()))) {facturaproveedor.setanexo_fecha_validez(facturaproveedorOrigen.getanexo_fecha_validez());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getanexo_factura_inicio()!=null && !facturaproveedorOrigen.getanexo_factura_inicio().equals(""))) {facturaproveedor.setanexo_factura_inicio(facturaproveedorOrigen.getanexo_factura_inicio());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getanexo_factura_fin()!=null && !facturaproveedorOrigen.getanexo_factura_fin().equals(""))) {facturaproveedor.setanexo_factura_fin(facturaproveedorOrigen.getanexo_factura_fin());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getsecuencial()!=null && !facturaproveedorOrigen.getsecuencial().equals(""))) {facturaproveedor.setsecuencial(facturaproveedorOrigen.getsecuencial());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getgasto_valor()!=null && !facturaproveedorOrigen.getgasto_valor().equals(0.0))) {facturaproveedor.setgasto_valor(facturaproveedorOrigen.getgasto_valor());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getgasto_valor2()!=null && !facturaproveedorOrigen.getgasto_valor2().equals(0.0))) {facturaproveedor.setgasto_valor2(facturaproveedorOrigen.getgasto_valor2());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getgasto_nombre()!=null && !facturaproveedorOrigen.getgasto_nombre().equals(null))) {facturaproveedor.setgasto_nombre(facturaproveedorOrigen.getgasto_nombre());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getgasto_nombre2()!=null && !facturaproveedorOrigen.getgasto_nombre2().equals(null))) {facturaproveedor.setgasto_nombre2(facturaproveedorOrigen.getgasto_nombre2());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getdescripcion()!=null && !facturaproveedorOrigen.getdescripcion().equals(""))) {facturaproveedor.setdescripcion(facturaproveedorOrigen.getdescripcion());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getnumero_mayor()!=null && !facturaproveedorOrigen.getnumero_mayor().equals(""))) {facturaproveedor.setnumero_mayor(facturaproveedorOrigen.getnumero_mayor());}
			if(conDefault || (!conDefault && facturaproveedorOrigen.getcodigo_asiento()!=null && !facturaproveedorOrigen.getcodigo_asiento().equals(""))) {facturaproveedor.setcodigo_asiento(facturaproveedorOrigen.getcodigo_asiento());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioFacturaProveedor(FacturaProveedor facturaproveedor) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormFacturaProveedor.jLabelidFacturaProveedor.setText(facturaproveedor.getId().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldplazoFacturaProveedor.setText(facturaproveedor.getplazo().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_facturaFacturaProveedor.setText(facturaproveedor.getnumero_factura());
			this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_emisionFacturaProveedor.setDate(facturaproveedor.getfecha_emision());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldrucFacturaProveedor.setText(facturaproveedor.getruc());
			this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_venceFacturaProveedor.setDate(facturaproveedor.getfecha_vence());
			this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_activosFacturaProveedor.setSelected(facturaproveedor.getcon_activos());
			this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_riseFacturaProveedor.setSelected(facturaproveedor.getcon_rise());
			this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_sitiosFacturaProveedor.setSelected(facturaproveedor.getcon_sitios());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextAreadetalleFacturaProveedor.setText(facturaproveedor.getdetalle());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes12FacturaProveedor.setText(facturaproveedor.getvalor_bienes12().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios12FacturaProveedor.setText(facturaproveedor.getvalor_servicios12().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor12FacturaProveedor.setText(facturaproveedor.gettotal_valor12().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes0FacturaProveedor.setText(facturaproveedor.getvalor_bienes0().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios0FacturaProveedor.setText(facturaproveedor.getvalor_servicios0().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor0FacturaProveedor.setText(facturaproveedor.gettotal_valor0().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_iceFacturaProveedor.setText(facturaproveedor.getbienes_ice().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_iceFacturaProveedor.setText(facturaproveedor.getservicios_ice().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_iceFacturaProveedor.setText(facturaproveedor.gettotal_ice().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_ivaFacturaProveedor.setText(facturaproveedor.getbienes_iva().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_ivaFacturaProveedor.setText(facturaproveedor.getservicios_iva().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_ivaFacturaProveedor.setText(facturaproveedor.gettotal_iva().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldiva_porcentajeFacturaProveedor.setText(facturaproveedor.getiva_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotalFacturaProveedor.setText(facturaproveedor.gettotal().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_monto_objeto_ivaFacturaProveedor.setSelected(facturaproveedor.getcon_monto_objeto_iva());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_retencionFacturaProveedor.setText(facturaproveedor.getnumero_retencion());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_serieFacturaProveedor.setText(facturaproveedor.getnumero_serie());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_autorizacionFacturaProveedor.setText(facturaproveedor.getnumero_autorizacion());
			this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_validezFacturaProveedor.setDate(facturaproveedor.getfecha_validez());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_porcentajeFacturaProveedor.setText(facturaproveedor.getret_fuente1_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_baseFacturaProveedor.setText(facturaproveedor.getret_fuente1_base().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_retenidoFacturaProveedor.setText(facturaproveedor.getret_fuente1_retenido().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_porcentajeFacturaProveedor.setText(facturaproveedor.getret_fuente2_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_baseFacturaProveedor.setText(facturaproveedor.getret_fuente2_base().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_retenidoFacturaProveedor.setText(facturaproveedor.getret_fuente2_retenido().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_porcentajeFacturaProveedor.setText(facturaproveedor.getret_iva_bien_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_baseFacturaProveedor.setText(facturaproveedor.getret_iva_bien_base().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_retenidoFacturaProveedor.setText(facturaproveedor.getret_iva_bien_retenido().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_porcentajeFacturaProveedor.setText(facturaproveedor.getret_iva_servicio_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_baseFacturaProveedor.setText(facturaproveedor.getret_iva_servicio_base().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_retenidoFacturaProveedor.setText(facturaproveedor.getret_iva_servicio_retenido().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numero_autorizacionFacturaProveedor.setText(facturaproveedor.getanexo_numero_autorizacion());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numeso_serieFacturaProveedor.setText(facturaproveedor.getanexo_numeso_serie());
			this.jInternalFrameDetalleFormFacturaProveedor.jDateChooseranexo_fecha_validezFacturaProveedor.setDate(facturaproveedor.getanexo_fecha_validez());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_inicioFacturaProveedor.setText(facturaproveedor.getanexo_factura_inicio());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_finFacturaProveedor.setText(facturaproveedor.getanexo_factura_fin());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldsecuencialFacturaProveedor.setText(facturaproveedor.getsecuencial());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valorFacturaProveedor.setText(facturaproveedor.getgasto_valor().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valor2FacturaProveedor.setText(facturaproveedor.getgasto_valor2().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioFacturaProveedor(FacturaProveedorBean facturaproveedorBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormFacturaProveedor.jLabelidFacturaProveedor.setText(facturaproveedorBean.getId().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldplazoFacturaProveedor.setText(facturaproveedorBean.getplazo().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_facturaFacturaProveedor.setText(facturaproveedorBean.getnumero_factura());
			this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_emisionFacturaProveedor.setDate(facturaproveedorBean.getfecha_emision());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldrucFacturaProveedor.setText(facturaproveedorBean.getruc());
			this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_venceFacturaProveedor.setDate(facturaproveedorBean.getfecha_vence());
			this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_activosFacturaProveedor.setSelected(facturaproveedorBean.getcon_activos());
			this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_riseFacturaProveedor.setSelected(facturaproveedorBean.getcon_rise());
			this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_sitiosFacturaProveedor.setSelected(facturaproveedorBean.getcon_sitios());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextAreadetalleFacturaProveedor.setText(facturaproveedorBean.getdetalle());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes12FacturaProveedor.setText(facturaproveedorBean.getvalor_bienes12().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios12FacturaProveedor.setText(facturaproveedorBean.getvalor_servicios12().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor12FacturaProveedor.setText(facturaproveedorBean.gettotal_valor12().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes0FacturaProveedor.setText(facturaproveedorBean.getvalor_bienes0().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios0FacturaProveedor.setText(facturaproveedorBean.getvalor_servicios0().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor0FacturaProveedor.setText(facturaproveedorBean.gettotal_valor0().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_iceFacturaProveedor.setText(facturaproveedorBean.getbienes_ice().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_iceFacturaProveedor.setText(facturaproveedorBean.getservicios_ice().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_iceFacturaProveedor.setText(facturaproveedorBean.gettotal_ice().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_ivaFacturaProveedor.setText(facturaproveedorBean.getbienes_iva().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_ivaFacturaProveedor.setText(facturaproveedorBean.getservicios_iva().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_ivaFacturaProveedor.setText(facturaproveedorBean.gettotal_iva().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldiva_porcentajeFacturaProveedor.setText(facturaproveedorBean.getiva_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotalFacturaProveedor.setText(facturaproveedorBean.gettotal().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_monto_objeto_ivaFacturaProveedor.setSelected(facturaproveedorBean.getcon_monto_objeto_iva());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_retencionFacturaProveedor.setText(facturaproveedorBean.getnumero_retencion());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_serieFacturaProveedor.setText(facturaproveedorBean.getnumero_serie());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_autorizacionFacturaProveedor.setText(facturaproveedorBean.getnumero_autorizacion());
			this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_validezFacturaProveedor.setDate(facturaproveedorBean.getfecha_validez());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_porcentajeFacturaProveedor.setText(facturaproveedorBean.getret_fuente1_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_baseFacturaProveedor.setText(facturaproveedorBean.getret_fuente1_base().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_retenidoFacturaProveedor.setText(facturaproveedorBean.getret_fuente1_retenido().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_porcentajeFacturaProveedor.setText(facturaproveedorBean.getret_fuente2_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_baseFacturaProveedor.setText(facturaproveedorBean.getret_fuente2_base().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_retenidoFacturaProveedor.setText(facturaproveedorBean.getret_fuente2_retenido().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_porcentajeFacturaProveedor.setText(facturaproveedorBean.getret_iva_bien_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_baseFacturaProveedor.setText(facturaproveedorBean.getret_iva_bien_base().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_retenidoFacturaProveedor.setText(facturaproveedorBean.getret_iva_bien_retenido().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_porcentajeFacturaProveedor.setText(facturaproveedorBean.getret_iva_servicio_porcentaje().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_baseFacturaProveedor.setText(facturaproveedorBean.getret_iva_servicio_base().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_retenidoFacturaProveedor.setText(facturaproveedorBean.getret_iva_servicio_retenido().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numero_autorizacionFacturaProveedor.setText(facturaproveedorBean.getanexo_numero_autorizacion());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numeso_serieFacturaProveedor.setText(facturaproveedorBean.getanexo_numeso_serie());
			this.jInternalFrameDetalleFormFacturaProveedor.jDateChooseranexo_fecha_validezFacturaProveedor.setDate(facturaproveedorBean.getanexo_fecha_validez());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_inicioFacturaProveedor.setText(facturaproveedorBean.getanexo_factura_inicio());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_finFacturaProveedor.setText(facturaproveedorBean.getanexo_factura_fin());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldsecuencialFacturaProveedor.setText(facturaproveedorBean.getsecuencial());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valorFacturaProveedor.setText(facturaproveedorBean.getgasto_valor().toString());
			this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valor2FacturaProveedor.setText(facturaproveedorBean.getgasto_valor2().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanFacturaProveedor(FacturaProveedorParameterReturnGeneral facturaproveedorReturnGeneral,FacturaProveedorBean facturaproveedorBean,Boolean conDefault) throws Exception { 
		try {
			FacturaProveedor facturaproveedorLocal=new FacturaProveedor();
			
			facturaproveedorLocal=facturaproveedorReturnGeneral.getFacturaProveedor();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && facturaproveedorLocal.getId()!=null && !facturaproveedorLocal.getId().equals(0L))) {facturaproveedorBean.setId(facturaproveedorLocal.getId());}}
			if(conDefault || (!conDefault && facturaproveedorLocal.getplazo()!=null && !facturaproveedorLocal.getplazo().equals(0))) {facturaproveedorBean.setplazo(facturaproveedorLocal.getplazo());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getnumero_factura()!=null && !facturaproveedorLocal.getnumero_factura().equals(""))) {facturaproveedorBean.setnumero_factura(facturaproveedorLocal.getnumero_factura());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getfecha_emision()!=null && !facturaproveedorLocal.getfecha_emision().equals(new Date()))) {facturaproveedorBean.setfecha_emision(facturaproveedorLocal.getfecha_emision());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getruc()!=null && !facturaproveedorLocal.getruc().equals(""))) {facturaproveedorBean.setruc(facturaproveedorLocal.getruc());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getfecha_vence()!=null && !facturaproveedorLocal.getfecha_vence().equals(new Date()))) {facturaproveedorBean.setfecha_vence(facturaproveedorLocal.getfecha_vence());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getcon_activos()!=null && !facturaproveedorLocal.getcon_activos().equals(false))) {facturaproveedorBean.setcon_activos(facturaproveedorLocal.getcon_activos());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getcon_rise()!=null && !facturaproveedorLocal.getcon_rise().equals(false))) {facturaproveedorBean.setcon_rise(facturaproveedorLocal.getcon_rise());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getcon_sitios()!=null && !facturaproveedorLocal.getcon_sitios().equals(false))) {facturaproveedorBean.setcon_sitios(facturaproveedorLocal.getcon_sitios());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getdetalle()!=null && !facturaproveedorLocal.getdetalle().equals(""))) {facturaproveedorBean.setdetalle(facturaproveedorLocal.getdetalle());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getvalor_bienes12()!=null && !facturaproveedorLocal.getvalor_bienes12().equals(0.0))) {facturaproveedorBean.setvalor_bienes12(facturaproveedorLocal.getvalor_bienes12());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getvalor_servicios12()!=null && !facturaproveedorLocal.getvalor_servicios12().equals(0.0))) {facturaproveedorBean.setvalor_servicios12(facturaproveedorLocal.getvalor_servicios12());}
			if(conDefault || (!conDefault && facturaproveedorLocal.gettotal_valor12()!=null && !facturaproveedorLocal.gettotal_valor12().equals(0.0))) {facturaproveedorBean.settotal_valor12(facturaproveedorLocal.gettotal_valor12());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getvalor_bienes0()!=null && !facturaproveedorLocal.getvalor_bienes0().equals(0.0))) {facturaproveedorBean.setvalor_bienes0(facturaproveedorLocal.getvalor_bienes0());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getvalor_servicios0()!=null && !facturaproveedorLocal.getvalor_servicios0().equals(0.0))) {facturaproveedorBean.setvalor_servicios0(facturaproveedorLocal.getvalor_servicios0());}
			if(conDefault || (!conDefault && facturaproveedorLocal.gettotal_valor0()!=null && !facturaproveedorLocal.gettotal_valor0().equals(0.0))) {facturaproveedorBean.settotal_valor0(facturaproveedorLocal.gettotal_valor0());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getbienes_ice()!=null && !facturaproveedorLocal.getbienes_ice().equals(0.0))) {facturaproveedorBean.setbienes_ice(facturaproveedorLocal.getbienes_ice());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getservicios_ice()!=null && !facturaproveedorLocal.getservicios_ice().equals(0.0))) {facturaproveedorBean.setservicios_ice(facturaproveedorLocal.getservicios_ice());}
			if(conDefault || (!conDefault && facturaproveedorLocal.gettotal_ice()!=null && !facturaproveedorLocal.gettotal_ice().equals(0.0))) {facturaproveedorBean.settotal_ice(facturaproveedorLocal.gettotal_ice());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getbienes_iva()!=null && !facturaproveedorLocal.getbienes_iva().equals(0.0))) {facturaproveedorBean.setbienes_iva(facturaproveedorLocal.getbienes_iva());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getservicios_iva()!=null && !facturaproveedorLocal.getservicios_iva().equals(0.0))) {facturaproveedorBean.setservicios_iva(facturaproveedorLocal.getservicios_iva());}
			if(conDefault || (!conDefault && facturaproveedorLocal.gettotal_iva()!=null && !facturaproveedorLocal.gettotal_iva().equals(0.0))) {facturaproveedorBean.settotal_iva(facturaproveedorLocal.gettotal_iva());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getiva_porcentaje()!=null && !facturaproveedorLocal.getiva_porcentaje().equals(0.0))) {facturaproveedorBean.setiva_porcentaje(facturaproveedorLocal.getiva_porcentaje());}
			if(conDefault || (!conDefault && facturaproveedorLocal.gettotal()!=null && !facturaproveedorLocal.gettotal().equals(0.0))) {facturaproveedorBean.settotal(facturaproveedorLocal.gettotal());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getcon_monto_objeto_iva()!=null && !facturaproveedorLocal.getcon_monto_objeto_iva().equals(false))) {facturaproveedorBean.setcon_monto_objeto_iva(facturaproveedorLocal.getcon_monto_objeto_iva());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getnumero_retencion()!=null && !facturaproveedorLocal.getnumero_retencion().equals(""))) {facturaproveedorBean.setnumero_retencion(facturaproveedorLocal.getnumero_retencion());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getnumero_serie()!=null && !facturaproveedorLocal.getnumero_serie().equals(""))) {facturaproveedorBean.setnumero_serie(facturaproveedorLocal.getnumero_serie());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getnumero_autorizacion()!=null && !facturaproveedorLocal.getnumero_autorizacion().equals(""))) {facturaproveedorBean.setnumero_autorizacion(facturaproveedorLocal.getnumero_autorizacion());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getfecha_validez()!=null && !facturaproveedorLocal.getfecha_validez().equals(new Date()))) {facturaproveedorBean.setfecha_validez(facturaproveedorLocal.getfecha_validez());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getret_fuente1_porcentaje()!=null && !facturaproveedorLocal.getret_fuente1_porcentaje().equals(0.0))) {facturaproveedorBean.setret_fuente1_porcentaje(facturaproveedorLocal.getret_fuente1_porcentaje());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getret_fuente1_base()!=null && !facturaproveedorLocal.getret_fuente1_base().equals(0.0))) {facturaproveedorBean.setret_fuente1_base(facturaproveedorLocal.getret_fuente1_base());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getret_fuente1_retenido()!=null && !facturaproveedorLocal.getret_fuente1_retenido().equals(0.0))) {facturaproveedorBean.setret_fuente1_retenido(facturaproveedorLocal.getret_fuente1_retenido());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getret_fuente2_porcentaje()!=null && !facturaproveedorLocal.getret_fuente2_porcentaje().equals(0.0))) {facturaproveedorBean.setret_fuente2_porcentaje(facturaproveedorLocal.getret_fuente2_porcentaje());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getret_fuente2_base()!=null && !facturaproveedorLocal.getret_fuente2_base().equals(0.0))) {facturaproveedorBean.setret_fuente2_base(facturaproveedorLocal.getret_fuente2_base());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getret_fuente2_retenido()!=null && !facturaproveedorLocal.getret_fuente2_retenido().equals(0.0))) {facturaproveedorBean.setret_fuente2_retenido(facturaproveedorLocal.getret_fuente2_retenido());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getret_iva_bien_porcentaje()!=null && !facturaproveedorLocal.getret_iva_bien_porcentaje().equals(0.0))) {facturaproveedorBean.setret_iva_bien_porcentaje(facturaproveedorLocal.getret_iva_bien_porcentaje());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getret_iva_bien_base()!=null && !facturaproveedorLocal.getret_iva_bien_base().equals(0.0))) {facturaproveedorBean.setret_iva_bien_base(facturaproveedorLocal.getret_iva_bien_base());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getret_iva_bien_retenido()!=null && !facturaproveedorLocal.getret_iva_bien_retenido().equals(0.0))) {facturaproveedorBean.setret_iva_bien_retenido(facturaproveedorLocal.getret_iva_bien_retenido());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getret_iva_servicio_porcentaje()!=null && !facturaproveedorLocal.getret_iva_servicio_porcentaje().equals(0.0))) {facturaproveedorBean.setret_iva_servicio_porcentaje(facturaproveedorLocal.getret_iva_servicio_porcentaje());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getret_iva_servicio_base()!=null && !facturaproveedorLocal.getret_iva_servicio_base().equals(0.0))) {facturaproveedorBean.setret_iva_servicio_base(facturaproveedorLocal.getret_iva_servicio_base());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getret_iva_servicio_retenido()!=null && !facturaproveedorLocal.getret_iva_servicio_retenido().equals(0.0))) {facturaproveedorBean.setret_iva_servicio_retenido(facturaproveedorLocal.getret_iva_servicio_retenido());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getanexo_numero_autorizacion()!=null && !facturaproveedorLocal.getanexo_numero_autorizacion().equals(""))) {facturaproveedorBean.setanexo_numero_autorizacion(facturaproveedorLocal.getanexo_numero_autorizacion());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getanexo_numeso_serie()!=null && !facturaproveedorLocal.getanexo_numeso_serie().equals(""))) {facturaproveedorBean.setanexo_numeso_serie(facturaproveedorLocal.getanexo_numeso_serie());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getanexo_fecha_validez()!=null && !facturaproveedorLocal.getanexo_fecha_validez().equals(new Date()))) {facturaproveedorBean.setanexo_fecha_validez(facturaproveedorLocal.getanexo_fecha_validez());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getanexo_factura_inicio()!=null && !facturaproveedorLocal.getanexo_factura_inicio().equals(""))) {facturaproveedorBean.setanexo_factura_inicio(facturaproveedorLocal.getanexo_factura_inicio());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getanexo_factura_fin()!=null && !facturaproveedorLocal.getanexo_factura_fin().equals(""))) {facturaproveedorBean.setanexo_factura_fin(facturaproveedorLocal.getanexo_factura_fin());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getsecuencial()!=null && !facturaproveedorLocal.getsecuencial().equals(""))) {facturaproveedorBean.setsecuencial(facturaproveedorLocal.getsecuencial());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getgasto_valor()!=null && !facturaproveedorLocal.getgasto_valor().equals(0.0))) {facturaproveedorBean.setgasto_valor(facturaproveedorLocal.getgasto_valor());}
			if(conDefault || (!conDefault && facturaproveedorLocal.getgasto_valor2()!=null && !facturaproveedorLocal.getgasto_valor2().equals(0.0))) {facturaproveedorBean.setgasto_valor2(facturaproveedorLocal.getgasto_valor2());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxFacturaProveedorGenerico(Long idFacturaProveedorSeleccionado,JComboBox jComboBoxFacturaProveedor,List<FacturaProveedor> facturaproveedorsLocal)throws Exception {
		try {
			FacturaProveedor  facturaproveedorTemp=null;

			for(FacturaProveedor facturaproveedorAux:facturaproveedorsLocal) {
				if(facturaproveedorAux.getId()!=null && facturaproveedorAux.getId().equals(idFacturaProveedorSeleccionado)) {
					facturaproveedorTemp=facturaproveedorAux;
					break;
				}
			}

			jComboBoxFacturaProveedor.setSelectedItem(facturaproveedorTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxFacturaProveedorGenerico(JComboBox jComboBoxFacturaProveedor,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxFacturaProveedor.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxFacturaProveedor.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxFacturaProveedor.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxFacturaProveedor.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxFacturaProveedor.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxFacturaProveedor.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxFacturaProveedor.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxFacturaProveedor.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxFacturaProveedor.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxFacturaProveedor.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("DetalleFacturaProveedor")) {
			jButtonDetalleFacturaProveedorActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			facturaproveedor=(FacturaProveedor) facturaproveedorLogic.getFacturaProveedors().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			facturaproveedor =(FacturaProveedor) facturaproveedors.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Periodo")) {
			//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getperiodo_descripcion();
			} else {
				//sDescripcion=this.getActualPeriodoForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getperiodo_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getmes_descripcion();
			}
		}

		if(sTipo.equals("Modulo")) {
			//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualModuloForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getmodulo_descripcion();
			}
		}

		if(sTipo.equals("PlantillaFactura")) {
			//sDescripcion=this.getActualPlantillaFacturaForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getplantillafactura_descripcion();
			} else {
				//sDescripcion=this.getActualPlantillaFacturaForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getplantillafactura_descripcion();
			}
		}

		if(sTipo.equals("TipoDocumento")) {
			//sDescripcion=this.getActualTipoDocumentoForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.gettipodocumento_descripcion();
			} else {
				//sDescripcion=this.getActualTipoDocumentoForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.gettipodocumento_descripcion();
			}
		}

		if(sTipo.equals("Factura")) {
			//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getfactura_descripcion();
			} else {
				//sDescripcion=this.getActualFacturaForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getfactura_descripcion();
			}
		}

		if(sTipo.equals("Transaccion")) {
			//sDescripcion=this.getActualTransaccionForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.gettransaccion_descripcion();
			} else {
				//sDescripcion=this.getActualTransaccionForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.gettransaccion_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getcliente_descripcion();
			}
		}

		if(sTipo.equals("EmpleadoSolicita")) {
			//sDescripcion=this.getActualEmpleadoSolicitaForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getempleadosolicita_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoSolicitaForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getempleadosolicita_descripcion();
			}
		}

		if(sTipo.equals("Moneda")) {
			//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getmoneda_descripcion();
			} else {
				//sDescripcion=this.getActualMonedaForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getmoneda_descripcion();
			}
		}

		if(sTipo.equals("Empleado")) {
			//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getempleado_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getempleado_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencionFuente1")) {
			//sDescripcion=this.getActualTipoRetencionFuente1ForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.gettiporetencionfuente1_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionFuente1ForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.gettiporetencionfuente1_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencionFuente2")) {
			//sDescripcion=this.getActualTipoRetencionFuente2ForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.gettiporetencionfuente2_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionFuente2ForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.gettiporetencionfuente2_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencionIva1")) {
			//sDescripcion=this.getActualTipoRetencionIva1ForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.gettiporetencioniva1_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionIva1ForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.gettiporetencioniva1_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencionIva2")) {
			//sDescripcion=this.getActualTipoRetencionIva2ForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.gettiporetencioniva2_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionIva2ForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.gettiporetencioniva2_descripcion();
			}
		}

		if(sTipo.equals("TipoTributario")) {
			//sDescripcion=this.getActualTipoTributarioForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.gettipotributario_descripcion();
			} else {
				//sDescripcion=this.getActualTipoTributarioForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.gettipotributario_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCreditoFiscalBienes")) {
			//sDescripcion=this.getActualCuentaContableCreditoFiscalBienesForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getcuentacontablecreditofiscalbienes_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCreditoFiscalBienesForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getcuentacontablecreditofiscalbienes_descripcion();
			}
		}

		if(sTipo.equals("ResponsableFondo")) {
			//sDescripcion=this.getActualResponsableFondoForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getresponsablefondo_descripcion();
			} else {
				//sDescripcion=this.getActualResponsableFondoForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getresponsablefondo_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCreditoFiscalServicios")) {
			//sDescripcion=this.getActualCuentaContableCreditoFiscalServiciosForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getcuentacontablecreditofiscalservicios_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCreditoFiscalServiciosForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getcuentacontablecreditofiscalservicios_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableGasto")) {
			//sDescripcion=this.getActualCuentaContableGastoForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getcuentacontablegasto_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableGastoForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getcuentacontablegasto_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableGasto2")) {
			//sDescripcion=this.getActualCuentaContableGasto2ForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getcuentacontablegasto2_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableGasto2ForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getcuentacontablegasto2_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCreditoFin")) {
			//sDescripcion=this.getActualCuentaContableCreditoFinForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getcuentacontablecreditofin_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCreditoFinForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getcuentacontablecreditofin_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCreditoFin2")) {
			//sDescripcion=this.getActualCuentaContableCreditoFin2ForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getcuentacontablecreditofin2_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCreditoFin2ForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getcuentacontablecreditofin2_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableCredito")) {
			//sDescripcion=this.getActualCuentaContableCreditoForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.getcuentacontablecredito_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableCreditoForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.getcuentacontablecredito_descripcion();
			}
		}

		if(sTipo.equals("TipoMovimiento")) {
			//sDescripcion=this.getActualTipoMovimientoForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.gettipomovimiento_descripcion();
			} else {
				//sDescripcion=this.getActualTipoMovimientoForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.gettipomovimiento_descripcion();
			}
		}

		if(sTipo.equals("TipoMovimientoModulo")) {
			//sDescripcion=this.getActualTipoMovimientoModuloForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.gettipomovimientomodulo_descripcion();
			} else {
				//sDescripcion=this.getActualTipoMovimientoModuloForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.gettipomovimientomodulo_descripcion();
			}
		}

		if(sTipo.equals("TipoTransaccionModulo")) {
			//sDescripcion=this.getActualTipoTransaccionModuloForeignKeyDescripcion((Long)value);
			if(!facturaproveedor.getIsNew() && !facturaproveedor.getIsChanged() && !facturaproveedor.getIsDeleted()) {
				sDescripcion=facturaproveedor.gettipotransaccionmodulo_descripcion();
			} else {
				//sDescripcion=this.getActualTipoTransaccionModuloForeignKeyDescripcion((Long)value);
				sDescripcion=facturaproveedor.gettipotransaccionmodulo_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		FacturaProveedor facturaproveedorRow=new FacturaProveedor();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			facturaproveedorRow=(FacturaProveedor) facturaproveedorLogic.getFacturaProveedors().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			facturaproveedorRow=(FacturaProveedor) facturaproveedors.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonDetalleFacturaProveedorActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,FacturaProveedor facturaproveedor) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormFacturaProveedor==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor = (FacturaProveedor)this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.facturaproveedor = (FacturaProveedor)this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(facturaproveedor!=null) {
						this.facturaproveedor = facturaproveedor;
					} else {
						this.facturaproveedor = new FacturaProveedor();
					}
				}

				if(this.isTienePermisosDetalleFacturaProveedor && this.permiteMantenimiento(this.facturaproveedor)) {
					DetalleFacturaProveedorBeanSwingJInternalFrame detallefacturaproveedorBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFramePopup=new DetalleFacturaProveedorBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detallefacturaproveedorBeanSwingJInternalFrame=this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFramePopup;
					} else {
						detallefacturaproveedorBeanSwingJInternalFrame=this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame;
					}

					List<FacturaProveedor> facturaproveedors=new ArrayList<FacturaProveedor>();
					facturaproveedors.add(this.facturaproveedor);
					if(!esRelacionado) {
						//detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorSessionBean.setConGuardarRelaciones(false);
						//detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detallefacturaproveedorBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormFacturaProveedor.cargarDetalleFacturaProveedorBeanSwingJInternalFrame(facturaproveedors,this.facturaproveedor,detallefacturaproveedorBeanSwingJInternalFrame,/*conInicializar,*/detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorSessionBean.getConGuardarRelaciones(),detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorSessionBean.getEsGuardarRelacionado());
					detallefacturaproveedorBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detallefacturaproveedorBeanSwingJInternalFrame.actualizarEstadoPanelsDetalleFacturaProveedor("no_relacionado");

						detallefacturaproveedorBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetalleFacturaProveedorConstantesFunciones.ITAMANIOFILATABLA + (DetalleFacturaProveedorConstantesFunciones.ITAMANIOFILATABLA/2));

						detallefacturaproveedorBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
						TitledBorder titledBorderDetalleFacturaProveedor=(TitledBorder)detallefacturaproveedorBeanSwingJInternalFrame.jScrollPanelDatosDetalleFacturaProveedor.getBorder();

						titledBorderDetalleFacturaProveedor.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Detalle Factura Proveedor");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detallefacturaproveedorBeanSwingJInternalFrame);
						}

						detallefacturaproveedorBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detallefacturaproveedorBeanSwingJInternalFrame);

						detallefacturaproveedorBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.facturaproveedorSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Detalle Factura Proveedor",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualFacturaProveedor(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoFacturaProveedor && this.isPermisoNuevoFacturaProveedor));			
			this.jButtonDuplicarFacturaProveedor.setVisible((this.isVisibilidadCeldaDuplicarFacturaProveedor && this.isPermisoDuplicarFacturaProveedor));			
			this.jButtonCopiarFacturaProveedor.setVisible((this.isVisibilidadCeldaCopiarFacturaProveedor && this.isPermisoCopiarFacturaProveedor));
			this.jButtonVerFormFacturaProveedor.setVisible((this.isVisibilidadCeldaVerFormFacturaProveedor && this.isPermisoVerFormFacturaProveedor));
			
			this.jButtonAbrirOrderByFacturaProveedor.setVisible((this.isVisibilidadCeldaOrdenFacturaProveedor && this.isPermisoOrdenFacturaProveedor));			
			
			this.jButtonNuevoRelacionesFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor && this.isPermisoNuevoFacturaProveedor));			
			this.jButtonNuevoGuardarCambiosFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoFacturaProveedor && this.isPermisoNuevoFacturaProveedor && this.isPermisoGuardarCambiosFacturaProveedor));
			
			if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonModificarFacturaProveedor.setVisible((this.isVisibilidadCeldaModificarFacturaProveedor && this.isPermisoActualizarFacturaProveedor));	
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonActualizarFacturaProveedor.setVisible((this.isVisibilidadCeldaActualizarFacturaProveedor && this.isPermisoActualizarFacturaProveedor));	
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonEliminarFacturaProveedor.setVisible((this.isVisibilidadCeldaEliminarFacturaProveedor && this.isPermisoEliminarFacturaProveedor));
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonCancelarFacturaProveedor.setVisible(this.isVisibilidadCeldaCancelarFacturaProveedor);							
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonGuardarCambiosFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarFacturaProveedor && this.isPermisoGuardarCambiosFacturaProveedor));			
			
			}
						
			this.jButtonGuardarCambiosTablaFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarCambiosFacturaProveedor && this.isPermisoGuardarCambiosFacturaProveedor));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoFacturaProveedor && this.isPermisoNuevoFacturaProveedor));						
			this.jButtonDuplicarToolBarFacturaProveedor.setVisible((this.isVisibilidadCeldaDuplicarFacturaProveedor && this.isPermisoDuplicarFacturaProveedor));						
			this.jButtonCopiarToolBarFacturaProveedor.setVisible((this.isVisibilidadCeldaCopiarFacturaProveedor && this.isPermisoCopiarFacturaProveedor));			
			this.jButtonVerFormToolBarFacturaProveedor.setVisible((this.isVisibilidadCeldaVerFormFacturaProveedor && this.isPermisoVerFormFacturaProveedor));			
			this.jButtonAbrirOrderByToolBarFacturaProveedor.setVisible((this.isVisibilidadCeldaOrdenFacturaProveedor && this.isPermisoOrdenFacturaProveedor));
			this.jButtonNuevoRelacionesToolBarFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor && this.isPermisoNuevoFacturaProveedor));			
			this.jButtonNuevoGuardarCambiosToolBarFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoFacturaProveedor && this.isPermisoNuevoFacturaProveedor && this.isPermisoGuardarCambiosFacturaProveedor));			
			
			if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonModificarToolBarFacturaProveedor.setVisible((this.isVisibilidadCeldaModificarFacturaProveedor && this.isPermisoActualizarFacturaProveedor));	
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonActualizarToolBarFacturaProveedor.setVisible((this.isVisibilidadCeldaActualizarFacturaProveedor  && this.isPermisoActualizarFacturaProveedor));	
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonEliminarToolBarFacturaProveedor.setVisible((this.isVisibilidadCeldaEliminarFacturaProveedor && this.isPermisoEliminarFacturaProveedor));
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonCancelarToolBarFacturaProveedor.setVisible(this.isVisibilidadCeldaCancelarFacturaProveedor);				
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonGuardarCambiosToolBarFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarFacturaProveedor && this.isPermisoGuardarCambiosFacturaProveedor));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarCambiosFacturaProveedor && this.isPermisoGuardarCambiosFacturaProveedor));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoFacturaProveedor && this.isPermisoNuevoFacturaProveedor));			
			this.jMenuItemDuplicarFacturaProveedor.setVisible((this.isVisibilidadCeldaDuplicarFacturaProveedor && this.isPermisoDuplicarFacturaProveedor));			
			this.jMenuItemCopiarFacturaProveedor.setVisible((this.isVisibilidadCeldaCopiarFacturaProveedor && this.isPermisoCopiarFacturaProveedor));			
			this.jMenuItemVerFormFacturaProveedor.setVisible((this.isVisibilidadCeldaVerFormFacturaProveedor && this.isPermisoVerFormFacturaProveedor));			
			this.jMenuItemAbrirOrderByFacturaProveedor.setVisible((this.isVisibilidadCeldaOrdenFacturaProveedor && this.isPermisoOrdenFacturaProveedor));			
			//this.jMenuItemMostrarOcultarFacturaProveedor.setVisible((this.isVisibilidadCeldaOrdenFacturaProveedor && this.isPermisoOrdenFacturaProveedor));
			this.jMenuItemDetalleAbrirOrderByFacturaProveedor.setVisible((this.isVisibilidadCeldaOrdenFacturaProveedor && this.isPermisoOrdenFacturaProveedor));			
			//this.jMenuItemDetalleMostrarOcultarFacturaProveedor.setVisible((this.isVisibilidadCeldaOrdenFacturaProveedor && this.isPermisoOrdenFacturaProveedor));			
			this.jMenuItemNuevoRelacionesFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor && this.isPermisoNuevoFacturaProveedor));			
			this.jMenuItemNuevoGuardarCambiosFacturaProveedor.setVisible((this.isVisibilidadCeldaNuevoFacturaProveedor && this.isPermisoNuevoFacturaProveedor && this.isPermisoGuardarCambiosFacturaProveedor));									
			
			if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
			this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemModificarFacturaProveedor.setVisible((this.isVisibilidadCeldaModificarFacturaProveedor && this.isPermisoActualizarFacturaProveedor));	
			this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemActualizarFacturaProveedor.setVisible((this.isVisibilidadCeldaActualizarFacturaProveedor && this.isPermisoActualizarFacturaProveedor));	
			this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemEliminarFacturaProveedor.setVisible((this.isVisibilidadCeldaEliminarFacturaProveedor && this.isPermisoEliminarFacturaProveedor));
			this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemCancelarFacturaProveedor.setVisible(this.isVisibilidadCeldaCancelarFacturaProveedor);				
			}
			
			this.jMenuItemGuardarCambiosFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarFacturaProveedor && this.isPermisoGuardarCambiosFacturaProveedor));						
			this.jMenuItemGuardarCambiosTablaFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarCambiosFacturaProveedor && this.isPermisoGuardarCambiosFacturaProveedor));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoFacturaProveedor=this.jButtonNuevoFacturaProveedor.isVisible();
			this.isVisibilidadCeldaDuplicarFacturaProveedor=this.jButtonDuplicarFacturaProveedor.isVisible();
			this.isVisibilidadCeldaCopiarFacturaProveedor=this.jButtonCopiarFacturaProveedor.isVisible();
			this.isVisibilidadCeldaVerFormFacturaProveedor=this.jButtonVerFormFacturaProveedor.isVisible();
			
			this.isVisibilidadCeldaOrdenFacturaProveedor=this.jButtonAbrirOrderByFacturaProveedor.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=this.jButtonNuevoRelacionesFacturaProveedor.isVisible();
			this.isVisibilidadCeldaModificarFacturaProveedor=this.jButtonModificarFacturaProveedor.isVisible();
			
			if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
			this.isVisibilidadCeldaActualizarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jButtonActualizarFacturaProveedor.isVisible();
			this.isVisibilidadCeldaEliminarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jButtonEliminarFacturaProveedor.isVisible();
			this.isVisibilidadCeldaCancelarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jButtonCancelarFacturaProveedor.isVisible();
			this.isVisibilidadCeldaGuardarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jButtonGuardarCambiosFacturaProveedor.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=this.jButtonGuardarCambiosTablaFacturaProveedor.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoFacturaProveedor=this.jButtonNuevoToolBarFacturaProveedor.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=this.jButtonNuevoRelacionesToolBarFacturaProveedor.isVisible();
			
			if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
			this.isVisibilidadCeldaModificarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jButtonModificarToolBarFacturaProveedor.isVisible();
			this.isVisibilidadCeldaActualizarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jButtonActualizarToolBarFacturaProveedor.isVisible();
			this.isVisibilidadCeldaEliminarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jButtonEliminarToolBarFacturaProveedor.isVisible();
			this.isVisibilidadCeldaCancelarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jButtonCancelarToolBarFacturaProveedor.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarFacturaProveedor=this.jButtonGuardarCambiosToolBarFacturaProveedor.isVisible();
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=this.jButtonGuardarCambiosTablaToolBarFacturaProveedor.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoFacturaProveedor=this.jMenuItemNuevoFacturaProveedor.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=this.jMenuItemNuevoRelacionesFacturaProveedor.isVisible();
			
			if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
			this.isVisibilidadCeldaModificarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemModificarFacturaProveedor.isVisible();
			this.isVisibilidadCeldaActualizarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemActualizarFacturaProveedor.isVisible();
			this.isVisibilidadCeldaEliminarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemEliminarFacturaProveedor.isVisible();
			this.isVisibilidadCeldaCancelarFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemCancelarFacturaProveedor.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarFacturaProveedor=this.jMenuItemGuardarCambiosFacturaProveedor.isVisible();
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=this.jMenuItemGuardarCambiosTablaFacturaProveedor.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesFacturaProveedor(Boolean esInicializar) {
		if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {			
			if(this.facturaproveedorSessionBean.getConGuardarRelaciones()) {
				//if(this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesFacturaProveedor();
			}
			
			this.inicializarActualizarBindingBotonesManualFacturaProveedor(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualFacturaProveedor() {
		this.jButtonNuevoFacturaProveedor.setVisible(this.isPermisoNuevoFacturaProveedor);			
		this.jButtonDuplicarFacturaProveedor.setVisible(this.isPermisoDuplicarFacturaProveedor);			
		this.jButtonCopiarFacturaProveedor.setVisible(this.isPermisoCopiarFacturaProveedor);			
		this.jButtonVerFormFacturaProveedor.setVisible(this.isPermisoVerFormFacturaProveedor);			
		
		this.jButtonAbrirOrderByFacturaProveedor.setVisible(this.isPermisoOrdenFacturaProveedor);					
		
		this.jButtonNuevoRelacionesFacturaProveedor.setVisible(this.isPermisoNuevoFacturaProveedor);			
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonModificarFacturaProveedor.setVisible(this.isPermisoActualizarFacturaProveedor);	
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonActualizarFacturaProveedor.setVisible(this.isPermisoActualizarFacturaProveedor);	
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonEliminarFacturaProveedor.setVisible(this.isPermisoEliminarFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonCancelarFacturaProveedor.setVisible(this.isVisibilidadCeldaCancelarFacturaProveedor);						
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonGuardarCambiosFacturaProveedor.setVisible(this.isPermisoGuardarCambiosFacturaProveedor);							
		}
		
		this.jButtonGuardarCambiosTablaFacturaProveedor.setVisible(this.isPermisoActualizarFacturaProveedor);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleFacturaProveedor() {
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonModificarFacturaProveedor.setVisible(this.isPermisoActualizarFacturaProveedor);	
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonActualizarFacturaProveedor.setVisible(this.isPermisoActualizarFacturaProveedor);	
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonEliminarFacturaProveedor.setVisible(this.isPermisoEliminarFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonCancelarFacturaProveedor.setVisible(this.isVisibilidadCeldaCancelarFacturaProveedor);							
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonGuardarCambiosFacturaProveedor.setVisible((this.isVisibilidadCeldaGuardarFacturaProveedor && this.isPermisoGuardarCambiosFacturaProveedor));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosFacturaProveedor() {
		if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualFacturaProveedor();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesFacturaProveedor() {
	}
	
	public void jTableDatosFacturaProveedorListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarFacturaProveedor(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.facturaproveedor.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.facturaproveedor.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.facturaproveedor.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.facturaproveedor.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_periodoFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoperiodo=true;

			idTienePermisoperiodo=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(PeriodoConstantesFunciones.CLASSNAME);

			if(idTienePermisoperiodo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.periodoBeanSwingJInternalFrame=new PeriodoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.periodoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.periodoBeanSwingJInternalFrame.getPeriodoLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_periodo()!=null) {
					this.periodoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.periodoBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_periodo());
					this.periodoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.periodoBeanSwingJInternalFrame.inicializarActualizarBindingTablaPeriodo();
				}

				JInternalFrameBase jinternalFrame =this.periodoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBorderperiodo=(TitledBorder)this.periodoBeanSwingJInternalFrame.jScrollPanelDatosPeriodo.getBorder();

				titledBorderperiodo.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Periodo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_periodoFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_periodo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_periodo = "+this.facturaproveedor.getid_periodo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.facturaproveedor.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.facturaproveedor.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_moduloFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomodulo=true;

			idTienePermisomodulo=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(ModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisomodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.moduloBeanSwingJInternalFrame=new ModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.moduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.moduloBeanSwingJInternalFrame.getModuloLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_modulo()!=null) {
					this.moduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.moduloBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_modulo());
					this.moduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.moduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaModulo();
				}

				JInternalFrameBase jinternalFrame =this.moduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordermodulo=(TitledBorder)this.moduloBeanSwingJInternalFrame.jScrollPanelDatosModulo.getBorder();

				titledBordermodulo.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_moduloFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_modulo = "+this.facturaproveedor.getid_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_plantilla_facturaFacturaProveedorActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.plantillafacturaBeanSwingJInternalFrame=new PlantillaFacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.plantillafacturaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.plantillafacturaBeanSwingJInternalFrame.sTipoBusqueda="PlantillaFactura";

			if(!this.sFinalQueryGeneral_plantillafactura.equals("")) {
				this.plantillafacturaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_plantillafactura);
				this.plantillafacturaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.plantillafacturaBeanSwingJInternalFrame.procesarBusqueda(this.plantillafacturaBeanSwingJInternalFrame.sAccionBusqueda);
				this.plantillafacturaBeanSwingJInternalFrame.inicializarActualizarBindingPlantillaFactura(false);
			}

			if(!this.sFinalQueryComboPlantillaFactura.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.plantillafacturaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaProveedor=null;
			TitledBorder titledBorderplantillafactura=null;

			if(!this.jScrollPanelDatosFacturaProveedor.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				titledBorderplantillafactura=(TitledBorder)this.plantillafacturaBeanSwingJInternalFrame.jScrollPanelDatosPlantillaFactura.getBorder();

				titledBorderplantillafactura.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Plantilla Factura");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_plantilla_facturaFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoplantillafactura=true;

			idTienePermisoplantillafactura=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(PlantillaFacturaConstantesFunciones.CLASSNAME);

			if(idTienePermisoplantillafactura) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.plantillafacturaBeanSwingJInternalFrame=new PlantillaFacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.plantillafacturaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.plantillafacturaBeanSwingJInternalFrame.getPlantillaFacturaLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_plantilla_factura()!=null) {
					this.plantillafacturaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.plantillafacturaBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_plantilla_factura());
					this.plantillafacturaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.plantillafacturaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.plantillafacturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaPlantillaFactura();
				}

				JInternalFrameBase jinternalFrame =this.plantillafacturaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBorderplantillafactura=(TitledBorder)this.plantillafacturaBeanSwingJInternalFrame.jScrollPanelDatosPlantillaFactura.getBorder();

				titledBorderplantillafactura.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Plantilla Factura");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_plantilla_facturaFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_plantilla_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_plantilla_factura = "+this.facturaproveedor.getid_plantilla_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_documentoFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipodocumento=true;

			idTienePermisotipodocumento=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(TipoDocumentoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipodocumento) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.tipodocumentoBeanSwingJInternalFrame=new TipoDocumentoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipodocumentoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipodocumentoBeanSwingJInternalFrame.getTipoDocumentoLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_tipo_documento()!=null) {
					this.tipodocumentoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipodocumentoBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_tipo_documento());
					this.tipodocumentoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipodocumentoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipodocumentoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoDocumento();
				}

				JInternalFrameBase jinternalFrame =this.tipodocumentoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordertipodocumento=(TitledBorder)this.tipodocumentoBeanSwingJInternalFrame.jScrollPanelDatosTipoDocumento.getBorder();

				titledBordertipodocumento.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Tipo Documento");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_documentoFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_tipo_documento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_documento = "+this.facturaproveedor.getid_tipo_documento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonplazoFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getplazo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where plazo = "+this.facturaproveedor.getplazo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_facturaFacturaProveedorActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.facturaBeanSwingJInternalFrame.sTipoBusqueda="Factura";

			if(!this.sFinalQueryGeneral_factura.equals("")) {
				this.facturaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_factura);
				this.facturaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.facturaBeanSwingJInternalFrame.procesarBusqueda(this.facturaBeanSwingJInternalFrame.sAccionBusqueda);
				this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingFactura(false);
			}

			if(!this.sFinalQueryComboFactura.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaProveedor=null;
			TitledBorder titledBorderfactura=null;

			if(!this.jScrollPanelDatosFacturaProveedor.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Factura");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_facturaFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisofactura=true;

			idTienePermisofactura=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(FacturaConstantesFunciones.CLASSNAME);

			if(idTienePermisofactura) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.facturaBeanSwingJInternalFrame=new FacturaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.facturaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.facturaBeanSwingJInternalFrame.getFacturaLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_factura()!=null) {
					this.facturaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.facturaBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_factura());
					this.facturaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.facturaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFactura();
				}

				JInternalFrameBase jinternalFrame =this.facturaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBorderfactura=(TitledBorder)this.facturaBeanSwingJInternalFrame.jScrollPanelDatosFactura.getBorder();

				titledBorderfactura.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Factura");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_facturaFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_factura = "+this.facturaproveedor.getid_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_facturaFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getnumero_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_factura like '%"+this.facturaproveedor.getnumero_factura()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_transaccionFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotransaccion=true;

			idTienePermisotransaccion=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(TransaccionConstantesFunciones.CLASSNAME);

			if(idTienePermisotransaccion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.transaccionBeanSwingJInternalFrame=new TransaccionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.transaccionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.transaccionBeanSwingJInternalFrame.getTransaccionLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_transaccion()!=null) {
					this.transaccionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.transaccionBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_transaccion());
					this.transaccionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.transaccionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.transaccionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTransaccion();
				}

				JInternalFrameBase jinternalFrame =this.transaccionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordertransaccion=(TitledBorder)this.transaccionBeanSwingJInternalFrame.jScrollPanelDatosTransaccion.getBorder();

				titledBordertransaccion.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Transaccion");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_transaccionFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_transaccion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_transaccion = "+this.facturaproveedor.getid_transaccion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_emisionFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getfecha_emision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_emision = '"+Funciones2.getStringPostgresDate(this.facturaproveedor.getfecha_emision())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteFacturaProveedorActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaProveedor=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosFacturaProveedor.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.facturaproveedor.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonrucFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getruc()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ruc like '%"+this.facturaproveedor.getruc()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empleado_solicitaFacturaProveedorActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.empleadosolicitaBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.empleadosolicitaBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.empleadosolicitaBeanSwingJInternalFrame.sTipoBusqueda="EmpleadoSolicita";

			if(!this.sFinalQueryGeneral_empleadosolicita.equals("")) {
				this.empleadosolicitaBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_empleadosolicita);
				this.empleadosolicitaBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.empleadosolicitaBeanSwingJInternalFrame.procesarBusqueda(this.empleadosolicitaBeanSwingJInternalFrame.sAccionBusqueda);
				this.empleadosolicitaBeanSwingJInternalFrame.inicializarActualizarBindingEmpleado(false);
			}

			if(!this.sFinalQueryComboEmpleadoSolicita.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.empleadosolicitaBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaProveedor=null;
			TitledBorder titledBorderempleadosolicita=null;

			if(!this.jScrollPanelDatosFacturaProveedor.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				titledBorderempleadosolicita=(TitledBorder)this.empleadosolicitaBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleadosolicita.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Empleado");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_empleado_solicitaFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleadosolicita=true;

			idTienePermisoempleadosolicita=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleadosolicita) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.empleadosolicitaBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadosolicitaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadosolicitaBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_empleado_solicita()!=null) {
					this.empleadosolicitaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadosolicitaBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_empleado_solicita());
					this.empleadosolicitaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadosolicitaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadosolicitaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadosolicitaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBorderempleadosolicita=(TitledBorder)this.empleadosolicitaBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleadosolicita.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleado_solicitaFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_empleado_solicita()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empleado_solicita = "+this.facturaproveedor.getid_empleado_solicita().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_venceFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getfecha_vence()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_vence = '"+Funciones2.getStringPostgresDate(this.facturaproveedor.getfecha_vence())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_monedaFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomoneda=true;

			idTienePermisomoneda=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(MonedaConstantesFunciones.CLASSNAME);

			if(idTienePermisomoneda) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.monedaBeanSwingJInternalFrame=new MonedaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.monedaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.monedaBeanSwingJInternalFrame.getMonedaLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_moneda()!=null) {
					this.monedaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.monedaBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_moneda());
					this.monedaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.monedaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMoneda();
				}

				JInternalFrameBase jinternalFrame =this.monedaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordermoneda=(TitledBorder)this.monedaBeanSwingJInternalFrame.jScrollPanelDatosMoneda.getBorder();

				titledBordermoneda.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Moneda");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_monedaFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_moneda()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_moneda = "+this.facturaproveedor.getid_moneda().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empleadoFacturaProveedorActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="Empleado";

			if(!this.sFinalQueryGeneral_empleado.equals("")) {
				this.empleadoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_empleado);
				this.empleadoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.empleadoBeanSwingJInternalFrame.procesarBusqueda(this.empleadoBeanSwingJInternalFrame.sAccionBusqueda);
				this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingEmpleado(false);
			}

			if(!this.sFinalQueryComboEmpleado.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaProveedor=null;
			TitledBorder titledBorderempleado=null;

			if(!this.jScrollPanelDatosFacturaProveedor.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Empleado");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_empleadoFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleado=true;

			idTienePermisoempleado=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleado) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadoBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_empleado()!=null) {
					this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadoBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_empleado());
					this.empleadoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleadoFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_empleado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empleado = "+this.facturaproveedor.getid_empleado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_activosFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getcon_activos()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_activos = "+this.facturaproveedor.getcon_activos().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_riseFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getcon_rise()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_rise = "+this.facturaproveedor.getcon_rise().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_sitiosFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getcon_sitios()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_sitios = "+this.facturaproveedor.getcon_sitios().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondetalleFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getdetalle()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where detalle like '%"+this.facturaproveedor.getdetalle()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_bienes12FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getvalor_bienes12()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_bienes12 = "+this.facturaproveedor.getvalor_bienes12().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_servicios12FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getvalor_servicios12()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_servicios12 = "+this.facturaproveedor.getvalor_servicios12().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_valor12FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.gettotal_valor12()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_valor12 = "+this.facturaproveedor.gettotal_valor12().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_bienes0FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getvalor_bienes0()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_bienes0 = "+this.facturaproveedor.getvalor_bienes0().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_servicios0FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getvalor_servicios0()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_servicios0 = "+this.facturaproveedor.getvalor_servicios0().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_valor0FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.gettotal_valor0()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_valor0 = "+this.facturaproveedor.gettotal_valor0().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonbienes_iceFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getbienes_ice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where bienes_ice = "+this.facturaproveedor.getbienes_ice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonservicios_iceFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getservicios_ice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where servicios_ice = "+this.facturaproveedor.getservicios_ice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_iceFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.gettotal_ice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_ice = "+this.facturaproveedor.gettotal_ice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonbienes_ivaFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getbienes_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where bienes_iva = "+this.facturaproveedor.getbienes_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonservicios_ivaFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getservicios_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where servicios_iva = "+this.facturaproveedor.getservicios_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_ivaFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.gettotal_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_iva = "+this.facturaproveedor.gettotal_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniva_porcentajeFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getiva_porcentaje()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva_porcentaje = "+this.facturaproveedor.getiva_porcentaje().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotalFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.gettotal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total = "+this.facturaproveedor.gettotal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncon_monto_objeto_ivaFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getcon_monto_objeto_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where con_monto_objeto_iva = "+this.facturaproveedor.getcon_monto_objeto_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_retencionFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getnumero_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_retencion like '%"+this.facturaproveedor.getnumero_retencion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_serieFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getnumero_serie()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_serie like '%"+this.facturaproveedor.getnumero_serie()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_autorizacionFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getnumero_autorizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_autorizacion like '%"+this.facturaproveedor.getnumero_autorizacion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_validezFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getfecha_validez()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_validez = '"+Funciones2.getStringPostgresDate(this.facturaproveedor.getfecha_validez())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencion_fuente1FacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencionfuente1=true;

			idTienePermisotiporetencionfuente1=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(TipoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencionfuente1) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.tiporetencionfuente1BeanSwingJInternalFrame=new TipoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencionfuente1BeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencionfuente1BeanSwingJInternalFrame.getTipoRetencionLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_tipo_retencion_fuente1()!=null) {
					this.tiporetencionfuente1BeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencionfuente1BeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_tipo_retencion_fuente1());
					this.tiporetencionfuente1BeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencionfuente1BeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencionfuente1BeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencionfuente1BeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordertiporetencionfuente1=(TitledBorder)this.tiporetencionfuente1BeanSwingJInternalFrame.jScrollPanelDatosTipoRetencion.getBorder();

				titledBordertiporetencionfuente1.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Tipo Retencion ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencion_fuente1FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_tipo_retencion_fuente1()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion_fuente1 = "+this.facturaproveedor.getid_tipo_retencion_fuente1().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonret_fuente1_porcentajeFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getret_fuente1_porcentaje()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ret_fuente1_porcentaje = "+this.facturaproveedor.getret_fuente1_porcentaje().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonret_fuente1_baseFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getret_fuente1_base()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ret_fuente1_base = "+this.facturaproveedor.getret_fuente1_base().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonret_fuente1_retenidoFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getret_fuente1_retenido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ret_fuente1_retenido = "+this.facturaproveedor.getret_fuente1_retenido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencion_fuente2FacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencionfuente2=true;

			idTienePermisotiporetencionfuente2=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(TipoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencionfuente2) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.tiporetencionfuente2BeanSwingJInternalFrame=new TipoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencionfuente2BeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencionfuente2BeanSwingJInternalFrame.getTipoRetencionLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_tipo_retencion_fuente2()!=null) {
					this.tiporetencionfuente2BeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencionfuente2BeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_tipo_retencion_fuente2());
					this.tiporetencionfuente2BeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencionfuente2BeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencionfuente2BeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencionfuente2BeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordertiporetencionfuente2=(TitledBorder)this.tiporetencionfuente2BeanSwingJInternalFrame.jScrollPanelDatosTipoRetencion.getBorder();

				titledBordertiporetencionfuente2.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Tipo Retencion ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencion_fuente2FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_tipo_retencion_fuente2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion_fuente2 = "+this.facturaproveedor.getid_tipo_retencion_fuente2().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonret_fuente2_porcentajeFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getret_fuente2_porcentaje()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ret_fuente2_porcentaje = "+this.facturaproveedor.getret_fuente2_porcentaje().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonret_fuente2_baseFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getret_fuente2_base()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ret_fuente2_base = "+this.facturaproveedor.getret_fuente2_base().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonret_fuente2_retenidoFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getret_fuente2_retenido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ret_fuente2_retenido = "+this.facturaproveedor.getret_fuente2_retenido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencion_iva1FacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencioniva1=true;

			idTienePermisotiporetencioniva1=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(TipoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencioniva1) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.tiporetencioniva1BeanSwingJInternalFrame=new TipoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencioniva1BeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencioniva1BeanSwingJInternalFrame.getTipoRetencionLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_tipo_retencion_iva1()!=null) {
					this.tiporetencioniva1BeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencioniva1BeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_tipo_retencion_iva1());
					this.tiporetencioniva1BeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencioniva1BeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencioniva1BeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencioniva1BeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordertiporetencioniva1=(TitledBorder)this.tiporetencioniva1BeanSwingJInternalFrame.jScrollPanelDatosTipoRetencion.getBorder();

				titledBordertiporetencioniva1.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Tipo Retencion ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencion_iva1FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_tipo_retencion_iva1()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion_iva1 = "+this.facturaproveedor.getid_tipo_retencion_iva1().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonret_iva_bien_porcentajeFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getret_iva_bien_porcentaje()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ret_iva_bien_porcentaje = "+this.facturaproveedor.getret_iva_bien_porcentaje().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonret_iva_bien_baseFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getret_iva_bien_base()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ret_iva_bien_base = "+this.facturaproveedor.getret_iva_bien_base().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonret_iva_bien_retenidoFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getret_iva_bien_retenido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ret_iva_bien_retenido = "+this.facturaproveedor.getret_iva_bien_retenido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencion_iva2FacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencioniva2=true;

			idTienePermisotiporetencioniva2=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(TipoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencioniva2) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.tiporetencioniva2BeanSwingJInternalFrame=new TipoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencioniva2BeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencioniva2BeanSwingJInternalFrame.getTipoRetencionLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_tipo_retencion_iva2()!=null) {
					this.tiporetencioniva2BeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencioniva2BeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_tipo_retencion_iva2());
					this.tiporetencioniva2BeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencioniva2BeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencioniva2BeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencioniva2BeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordertiporetencioniva2=(TitledBorder)this.tiporetencioniva2BeanSwingJInternalFrame.jScrollPanelDatosTipoRetencion.getBorder();

				titledBordertiporetencioniva2.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Tipo Retencion ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencion_iva2FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_tipo_retencion_iva2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion_iva2 = "+this.facturaproveedor.getid_tipo_retencion_iva2().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonret_iva_servicio_porcentajeFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getret_iva_servicio_porcentaje()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ret_iva_servicio_porcentaje = "+this.facturaproveedor.getret_iva_servicio_porcentaje().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonret_iva_servicio_baseFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getret_iva_servicio_base()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ret_iva_servicio_base = "+this.facturaproveedor.getret_iva_servicio_base().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonret_iva_servicio_retenidoFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getret_iva_servicio_retenido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ret_iva_servicio_retenido = "+this.facturaproveedor.getret_iva_servicio_retenido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonanexo_numero_autorizacionFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getanexo_numero_autorizacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where anexo_numero_autorizacion like '%"+this.facturaproveedor.getanexo_numero_autorizacion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonanexo_numeso_serieFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getanexo_numeso_serie()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where anexo_numeso_serie like '%"+this.facturaproveedor.getanexo_numeso_serie()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonanexo_fecha_validezFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getanexo_fecha_validez()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where anexo_fecha_validez = '"+Funciones2.getStringPostgresDate(this.facturaproveedor.getanexo_fecha_validez())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_tributarioFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipotributario=true;

			idTienePermisotipotributario=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(TipoTributarioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipotributario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.tipotributarioBeanSwingJInternalFrame=new TipoTributarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipotributarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipotributarioBeanSwingJInternalFrame.getTipoTributarioLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_tipo_tributario()!=null) {
					this.tipotributarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipotributarioBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_tipo_tributario());
					this.tipotributarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipotributarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipotributarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoTributario();
				}

				JInternalFrameBase jinternalFrame =this.tipotributarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordertipotributario=(TitledBorder)this.tipotributarioBeanSwingJInternalFrame.jScrollPanelDatosTipoTributario.getBorder();

				titledBordertipotributario.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Tipo Tributario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_tributarioFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_tipo_tributario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_tributario = "+this.facturaproveedor.getid_tipo_tributario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonanexo_factura_inicioFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getanexo_factura_inicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where anexo_factura_inicio like '%"+this.facturaproveedor.getanexo_factura_inicio()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonanexo_factura_finFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getanexo_factura_fin()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where anexo_factura_fin like '%"+this.facturaproveedor.getanexo_factura_fin()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_credito_fiscal_bienesFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecreditofiscalbienes=true;

			idTienePermisocuentacontablecreditofiscalbienes=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecreditofiscalbienes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.cuentacontablecreditofiscalbienesBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecreditofiscalbienesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecreditofiscalbienesBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_bienes()!=null) {
					this.cuentacontablecreditofiscalbienesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecreditofiscalbienesBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_bienes());
					this.cuentacontablecreditofiscalbienesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecreditofiscalbienesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecreditofiscalbienesBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecreditofiscalbienesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordercuentacontablecreditofiscalbienes=(TitledBorder)this.cuentacontablecreditofiscalbienesBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecreditofiscalbienes.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_credito_fiscal_bienesFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_bienes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_credito_fiscal_bienes = "+this.facturaproveedor.getid_cuenta_contable_credito_fiscal_bienes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_responsable_fondoFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoresponsablefondo=true;

			idTienePermisoresponsablefondo=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(ResponsableFondoConstantesFunciones.CLASSNAME);

			if(idTienePermisoresponsablefondo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.responsablefondoBeanSwingJInternalFrame=new ResponsableFondoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.responsablefondoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.responsablefondoBeanSwingJInternalFrame.getResponsableFondoLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_responsable_fondo()!=null) {
					this.responsablefondoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.responsablefondoBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_responsable_fondo());
					this.responsablefondoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.responsablefondoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.responsablefondoBeanSwingJInternalFrame.inicializarActualizarBindingTablaResponsableFondo();
				}

				JInternalFrameBase jinternalFrame =this.responsablefondoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBorderresponsablefondo=(TitledBorder)this.responsablefondoBeanSwingJInternalFrame.jScrollPanelDatosResponsableFondo.getBorder();

				titledBorderresponsablefondo.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Responsable Fondo Rotativo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_responsable_fondoFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_responsable_fondo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_responsable_fondo = "+this.facturaproveedor.getid_responsable_fondo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecreditofiscalservicios=true;

			idTienePermisocuentacontablecreditofiscalservicios=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecreditofiscalservicios) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_servicios()!=null) {
					this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_servicios());
					this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordercuentacontablecreditofiscalservicios=(TitledBorder)this.cuentacontablecreditofiscalserviciosBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecreditofiscalservicios.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_cuenta_contable_credito_fiscal_servicios()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_credito_fiscal_servicios = "+this.facturaproveedor.getid_cuenta_contable_credito_fiscal_servicios().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencialFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getsecuencial()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial like '%"+this.facturaproveedor.getsecuencial()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_gastoFacturaProveedorActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablegastoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablegastoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablegastoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableGasto";

			if(!this.sFinalQueryGeneral_cuentacontablegasto.equals("")) {
				this.cuentacontablegastoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablegasto);
				this.cuentacontablegastoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablegastoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablegastoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablegastoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableGasto.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablegastoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaProveedor=null;
			TitledBorder titledBordercuentacontablegasto=null;

			if(!this.jScrollPanelDatosFacturaProveedor.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				titledBordercuentacontablegasto=(TitledBorder)this.cuentacontablegastoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablegasto.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_gastoFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablegasto=true;

			idTienePermisocuentacontablegasto=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablegasto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.cuentacontablegastoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablegastoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablegastoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_cuenta_contable_gasto()!=null) {
					this.cuentacontablegastoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablegastoBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_cuenta_contable_gasto());
					this.cuentacontablegastoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablegastoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablegastoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablegastoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordercuentacontablegasto=(TitledBorder)this.cuentacontablegastoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablegasto.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_gastoFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_cuenta_contable_gasto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_gasto = "+this.facturaproveedor.getid_cuenta_contable_gasto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtongasto_valorFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getgasto_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where gasto_valor = "+this.facturaproveedor.getgasto_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_gasto2FacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablegasto2=true;

			idTienePermisocuentacontablegasto2=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablegasto2) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.cuentacontablegasto2BeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablegasto2BeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablegasto2BeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_cuenta_contable_gasto2()!=null) {
					this.cuentacontablegasto2BeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablegasto2BeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_cuenta_contable_gasto2());
					this.cuentacontablegasto2BeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablegasto2BeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablegasto2BeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablegasto2BeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordercuentacontablegasto2=(TitledBorder)this.cuentacontablegasto2BeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablegasto2.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_gasto2FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_cuenta_contable_gasto2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_gasto2 = "+this.facturaproveedor.getid_cuenta_contable_gasto2().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtongasto_valor2FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getgasto_valor2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where gasto_valor2 = "+this.facturaproveedor.getgasto_valor2().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtongasto_nombreFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getgasto_nombre()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where gasto_nombre like '%"+this.facturaproveedor.getgasto_nombre()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtongasto_nombre2FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getgasto_nombre2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where gasto_nombre2 like '%"+this.facturaproveedor.getgasto_nombre2()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_credito_finFacturaProveedorActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecreditofinBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecreditofinBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecreditofinBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCreditoFin";

			if(!this.sFinalQueryGeneral_cuentacontablecreditofin.equals("")) {
				this.cuentacontablecreditofinBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecreditofin);
				this.cuentacontablecreditofinBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecreditofinBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecreditofinBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecreditofinBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCreditoFin.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecreditofinBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaProveedor=null;
			TitledBorder titledBordercuentacontablecreditofin=null;

			if(!this.jScrollPanelDatosFacturaProveedor.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				titledBordercuentacontablecreditofin=(TitledBorder)this.cuentacontablecreditofinBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecreditofin.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_credito_finFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecreditofin=true;

			idTienePermisocuentacontablecreditofin=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecreditofin) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.cuentacontablecreditofinBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecreditofinBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecreditofinBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_cuenta_contable_credito_fin()!=null) {
					this.cuentacontablecreditofinBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecreditofinBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_cuenta_contable_credito_fin());
					this.cuentacontablecreditofinBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecreditofinBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecreditofinBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecreditofinBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordercuentacontablecreditofin=(TitledBorder)this.cuentacontablecreditofinBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecreditofin.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_credito_finFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_cuenta_contable_credito_fin()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_credito_fin = "+this.facturaproveedor.getid_cuenta_contable_credito_fin().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_credito_fin2FacturaProveedorActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecreditofin2BeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecreditofin2BeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecreditofin2BeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCreditoFin2";

			if(!this.sFinalQueryGeneral_cuentacontablecreditofin2.equals("")) {
				this.cuentacontablecreditofin2BeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecreditofin2);
				this.cuentacontablecreditofin2BeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecreditofin2BeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecreditofin2BeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecreditofin2BeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCreditoFin2.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecreditofin2BeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaProveedor=null;
			TitledBorder titledBordercuentacontablecreditofin2=null;

			if(!this.jScrollPanelDatosFacturaProveedor.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				titledBordercuentacontablecreditofin2=(TitledBorder)this.cuentacontablecreditofin2BeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecreditofin2.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_credito_fin2FacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecreditofin2=true;

			idTienePermisocuentacontablecreditofin2=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecreditofin2) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.cuentacontablecreditofin2BeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecreditofin2BeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecreditofin2BeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_cuenta_contable_credito_fin2()!=null) {
					this.cuentacontablecreditofin2BeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecreditofin2BeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_cuenta_contable_credito_fin2());
					this.cuentacontablecreditofin2BeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecreditofin2BeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecreditofin2BeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecreditofin2BeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordercuentacontablecreditofin2=(TitledBorder)this.cuentacontablecreditofin2BeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecreditofin2.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_credito_fin2FacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_cuenta_contable_credito_fin2()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_credito_fin2 = "+this.facturaproveedor.getid_cuenta_contable_credito_fin2().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_creditoFacturaProveedorActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.cuentacontablecreditoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.cuentacontablecreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.cuentacontablecreditoBeanSwingJInternalFrame.sTipoBusqueda="CuentaContableCredito";

			if(!this.sFinalQueryGeneral_cuentacontablecredito.equals("")) {
				this.cuentacontablecreditoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cuentacontablecredito);
				this.cuentacontablecreditoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.cuentacontablecreditoBeanSwingJInternalFrame.procesarBusqueda(this.cuentacontablecreditoBeanSwingJInternalFrame.sAccionBusqueda);
				this.cuentacontablecreditoBeanSwingJInternalFrame.inicializarActualizarBindingCuentaContable(false);
			}

			if(!this.sFinalQueryComboCuentaContableCredito.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.cuentacontablecreditoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaProveedor=null;
			TitledBorder titledBordercuentacontablecredito=null;

			if(!this.jScrollPanelDatosFacturaProveedor.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				titledBordercuentacontablecredito=(TitledBorder)this.cuentacontablecreditoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecredito.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_cuenta_contable_creditoFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecredito=true;

			idTienePermisocuentacontablecredito=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecredito) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.cuentacontablecreditoBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecreditoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecreditoBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_cuenta_contable_credito()!=null) {
					this.cuentacontablecreditoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecreditoBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_cuenta_contable_credito());
					this.cuentacontablecreditoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecreditoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecreditoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecreditoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordercuentacontablecredito=(TitledBorder)this.cuentacontablecreditoBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecredito.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_creditoFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_cuenta_contable_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_credito = "+this.facturaproveedor.getid_cuenta_contable_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.facturaproveedor.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_movimientoFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipomovimiento=true;

			idTienePermisotipomovimiento=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(TipoMovimientoConstantesFunciones.CLASSNAME);

			if(idTienePermisotipomovimiento) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.tipomovimientoBeanSwingJInternalFrame=new TipoMovimientoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipomovimientoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipomovimientoBeanSwingJInternalFrame.getTipoMovimientoLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_tipo_movimiento()!=null) {
					this.tipomovimientoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipomovimientoBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_tipo_movimiento());
					this.tipomovimientoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipomovimientoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipomovimientoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoMovimiento();
				}

				JInternalFrameBase jinternalFrame =this.tipomovimientoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordertipomovimiento=(TitledBorder)this.tipomovimientoBeanSwingJInternalFrame.jScrollPanelDatosTipoMovimiento.getBorder();

				titledBordertipomovimiento.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Tipo Movimiento");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_movimientoFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_tipo_movimiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_movimiento = "+this.facturaproveedor.getid_tipo_movimiento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_movimiento_moduloFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipomovimientomodulo=true;

			idTienePermisotipomovimientomodulo=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(TipoMovimientoModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisotipomovimientomodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.tipomovimientomoduloBeanSwingJInternalFrame=new TipoMovimientoModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipomovimientomoduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipomovimientomoduloBeanSwingJInternalFrame.getTipoMovimientoModuloLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_tipo_movimiento_modulo()!=null) {
					this.tipomovimientomoduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipomovimientomoduloBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_tipo_movimiento_modulo());
					this.tipomovimientomoduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipomovimientomoduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipomovimientomoduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoMovimientoModulo();
				}

				JInternalFrameBase jinternalFrame =this.tipomovimientomoduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordertipomovimientomodulo=(TitledBorder)this.tipomovimientomoduloBeanSwingJInternalFrame.jScrollPanelDatosTipoMovimientoModulo.getBorder();

				titledBordertipomovimientomodulo.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Tipo Movimiento Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_movimiento_moduloFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_tipo_movimiento_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_movimiento_modulo = "+this.facturaproveedor.getid_tipo_movimiento_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_transaccion_moduloFacturaProveedorUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipotransaccionmodulo=true;

			idTienePermisotipotransaccionmodulo=this.tienePermisosUsuarioEnPaginaWebFacturaProveedor(TipoTransaccionModuloConstantesFunciones.CLASSNAME);

			if(idTienePermisotipotransaccionmodulo) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaProveedor.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaProveedor.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);

				this.tipotransaccionmoduloBeanSwingJInternalFrame=new TipoTransaccionModuloBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipotransaccionmoduloBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipotransaccionmoduloBeanSwingJInternalFrame.getTipoTransaccionModuloLogic().setConnexion(this.facturaproveedorLogic.getConnexion());

				if(this.facturaproveedor.getid_tipo_transaccion_modulo()!=null) {
					this.tipotransaccionmoduloBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipotransaccionmoduloBeanSwingJInternalFrame.setIdActual(this.facturaproveedor.getid_tipo_transaccion_modulo());
					this.tipotransaccionmoduloBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipotransaccionmoduloBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipotransaccionmoduloBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoTransaccionModulo();
				}

				JInternalFrameBase jinternalFrame =this.tipotransaccionmoduloBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaProveedor=(TitledBorder)this.jScrollPanelDatosFacturaProveedor.getBorder();
				TitledBorder titledBordertipotransaccionmodulo=(TitledBorder)this.tipotransaccionmoduloBeanSwingJInternalFrame.jScrollPanelDatosTipoTransaccionModulo.getBorder();

				titledBordertipotransaccionmodulo.setTitle(titledBorderFacturaProveedor.getTitle() + " -> Tipo Transaccion Modulo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_transaccion_moduloFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getid_tipo_transaccion_modulo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_transaccion_modulo = "+this.facturaproveedor.getid_tipo_transaccion_modulo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_mayorFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getnumero_mayor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_mayor like '%"+this.facturaproveedor.getnumero_mayor()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigo_asientoFacturaProveedorBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.getfacturaproveedor(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturaproveedor==null) {
						this.facturaproveedor = new FacturaProveedor();
					}

					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);
				}

				if(this.facturaproveedor.getcodigo_asiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo_asiento like '%"+this.facturaproveedor.getcodigo_asiento()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaProveedor(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAnioFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdAnio();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClienteFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdCliente();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCreditoFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdCuentaContableCredito();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCreditoFinFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdCuentaContableCreditoFin();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCreditoFin2FacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdCuentaContableCreditoFin2();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCreditoFiscalBienesFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdCuentaContableCreditoFiscalBienes();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdCuentaContableCreditoFiscalServicios();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableGastoFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdCuentaContableGasto();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableGasto2FacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdCuentaContableGasto2();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdEjercicio();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdEmpleado();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoSolicitaFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdEmpleadoSolicita();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdEmpresa();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFacturaFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdFactura();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdMes();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdModuloFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdModulo();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMonedaFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdMoneda();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPeriodoFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdPeriodo();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPlantillaFacturaFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdPlantillaFactura();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdResponsableFondoFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdResponsableFondo();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdSucursal();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoDocumentoFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdTipoDocumento();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoMovimientoFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdTipoMovimiento();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoMovimientoModuloFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdTipoMovimientoModulo();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoRetencionFuente1FacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdTipoRetencionFuente1();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoRetencionFuente2FacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdTipoRetencionFuente2();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoRetencionIva1FacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdTipoRetencionIva1();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoRetencionIva2FacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdTipoRetencionIva2();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoTransaccionModuloFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdTipoTransaccionModulo();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoTributarioFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdTipoTributario();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTransaccionFacturaProveedorActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaProveedor(false,false);

			this.getFacturaProveedorsFK_IdTransaccion();

			this.inicializarActualizarBindingFacturaProveedor(false);

			//if(FacturaProveedorBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaProveedor(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturaproveedorLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameFacturaProveedor() {
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
		

		if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
			this.jInternalFrameDetalleFormFacturaProveedor.setVisible(false);	    			
			this.jInternalFrameDetalleFormFacturaProveedor.dispose();
			this.jInternalFrameDetalleFormFacturaProveedor=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoFacturaProveedor!=null) {
			this.jInternalFrameReporteDinamicoFacturaProveedor.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoFacturaProveedor.dispose();
			this.jInternalFrameReporteDinamicoFacturaProveedor=null;
		}
		
		if(this.jInternalFrameImportacionFacturaProveedor!=null) {
			this.jInternalFrameImportacionFacturaProveedor.setVisible(false);	    			
			this.jInternalFrameImportacionFacturaProveedor.dispose();
			this.jInternalFrameImportacionFacturaProveedor=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessFacturaProveedor();
			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			
			
			if(sTipo.equals("NuevoFacturaProveedor")) {
				jButtonNuevoFacturaProveedorActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarFacturaProveedor")) {
				jButtonDuplicarFacturaProveedorActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarFacturaProveedor")) {
				jButtonCopiarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("VerFormFacturaProveedor")) {
				jButtonVerFormFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarFacturaProveedor")) {
				jButtonNuevoFacturaProveedorActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarFacturaProveedor")) {
				jButtonDuplicarFacturaProveedorActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoFacturaProveedor")) {
				jButtonNuevoFacturaProveedorActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarFacturaProveedor")) {
				jButtonDuplicarFacturaProveedorActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesFacturaProveedor")) {
				jButtonNuevoFacturaProveedorActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarFacturaProveedor")) {
				jButtonNuevoFacturaProveedorActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesFacturaProveedor")) {
				jButtonNuevoFacturaProveedorActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarFacturaProveedor")) {
				jButtonModificarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarFacturaProveedor")) {
				jButtonModificarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarFacturaProveedor")) {
				jButtonModificarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("ActualizarFacturaProveedor")) {
				jButtonActualizarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarFacturaProveedor")) {
				jButtonActualizarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarFacturaProveedor")) {
				jButtonActualizarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("EliminarFacturaProveedor")) {
				jButtonEliminarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarFacturaProveedor")) {
				jButtonEliminarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarFacturaProveedor")) {
				jButtonEliminarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("CancelarFacturaProveedor")) {
				jButtonCancelarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarFacturaProveedor")) {
				jButtonCancelarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarFacturaProveedor")) {
				jButtonCancelarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("CerrarFacturaProveedor")) {
				jButtonCerrarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarFacturaProveedor")) {
				jButtonCerrarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarFacturaProveedor")) {
				jButtonCerrarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarFacturaProveedor")) {
				jButtonMostrarOcultarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarFacturaProveedor")) {
				jButtonCancelarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosFacturaProveedor")) {
				jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarFacturaProveedor")) {
				jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarFacturaProveedor")) {
				jButtonCopiarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarFacturaProveedor")) {
				jButtonVerFormFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosFacturaProveedor")) {
				jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarFacturaProveedor")) {
				jButtonCopiarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormFacturaProveedor")) {
				jButtonVerFormFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaFacturaProveedor")) {
				jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarFacturaProveedor")) {
				jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaFacturaProveedor")) {
				jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionFacturaProveedor")) {
				jButtonRecargarInformacionFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarFacturaProveedor")) {
				jButtonRecargarInformacionFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionFacturaProveedor")) {
				jButtonRecargarInformacionFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresFacturaProveedor")) {
				jButtonAnterioresFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarFacturaProveedor")) {
				jButtonAnterioresFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreFacturaProveedor")) {
				jButtonAnterioresFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("SiguientesFacturaProveedor")) {
				jButtonSiguientesFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarFacturaProveedor")) {
				jButtonSiguientesFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesFacturaProveedor")) {
				jButtonSiguientesFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByFacturaProveedor") || sTipo.equals("MenuItemDetalleAbrirOrderByFacturaProveedor")) {
				jButtonAbrirOrderByFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarFacturaProveedor") || sTipo.equals("MenuItemDetalleMostrarOcultarFacturaProveedor")) {
				jButtonMostrarOcultarFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosFacturaProveedor")) {
				jButtonNuevoGuardarCambiosFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarFacturaProveedor")) {
				jButtonNuevoGuardarCambiosFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosFacturaProveedor")) {
				jButtonNuevoGuardarCambiosFacturaProveedorActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoFacturaProveedor")) {
				jButtonCerrarReporteDinamicoFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoFacturaProveedor")) {
				jButtonGenerarReporteDinamicoFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoFacturaProveedor")) {
				
				jButtonGenerarExcelReporteDinamicoFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionFacturaProveedor")) {
				jButtonCerrarImportacionFacturaProveedorActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionFacturaProveedor")) {
				
				jButtonGenerarImportacionFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionFacturaProveedor")) {
				
				jButtonAbrirImportacionFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesFacturaProveedor")) {
				jComboBoxTiposAccionesFacturaProveedorActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesFacturaProveedor")) {
				jComboBoxTiposRelacionesFacturaProveedorActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioFacturaProveedor")) {
				jComboBoxTiposAccionesFacturaProveedorActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarFacturaProveedor")) {
				
				jComboBoxTiposSeleccionarFacturaProveedorActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralFacturaProveedor")) {
				jTextFieldValorCampoGeneralFacturaProveedorActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByFacturaProveedor")) {
				jButtonAbrirOrderByFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarFacturaProveedor")) {
				jButtonAbrirOrderByFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByFacturaProveedor")) {
				jButtonCerrarOrderByFacturaProveedorActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idFacturaProveedorBusqueda")) {
				this.jButtonidFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaFacturaProveedorUpdate")) {
				this.jButtonid_empresaFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaFacturaProveedorBusqueda")) {
				this.jButtonid_empresaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalFacturaProveedorUpdate")) {
				this.jButtonid_sucursalFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalFacturaProveedorBusqueda")) {
				this.jButtonid_sucursalFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioFacturaProveedorUpdate")) {
				this.jButtonid_ejercicioFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioFacturaProveedorBusqueda")) {
				this.jButtonid_ejercicioFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoFacturaProveedorUpdate")) {
				this.jButtonid_periodoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoFacturaProveedorBusqueda")) {
				this.jButtonid_periodoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioFacturaProveedorUpdate")) {
				this.jButtonid_anioFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioFacturaProveedorBusqueda")) {
				this.jButtonid_anioFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesFacturaProveedorUpdate")) {
				this.jButtonid_mesFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesFacturaProveedorBusqueda")) {
				this.jButtonid_mesFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloFacturaProveedorUpdate")) {
				this.jButtonid_moduloFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloFacturaProveedorBusqueda")) {
				this.jButtonid_moduloFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_plantilla_facturaFacturaProveedor")) {
				this.jButtonid_plantilla_facturaFacturaProveedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_plantilla_facturaFacturaProveedorUpdate")) {
				this.jButtonid_plantilla_facturaFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_plantilla_facturaFacturaProveedorBusqueda")) {
				this.jButtonid_plantilla_facturaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_documentoFacturaProveedorUpdate")) {
				this.jButtonid_tipo_documentoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_documentoFacturaProveedorBusqueda")) {
				this.jButtonid_tipo_documentoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("plazoFacturaProveedorBusqueda")) {
				this.jButtonplazoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaFacturaProveedor")) {
				this.jButtonid_facturaFacturaProveedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaFacturaProveedorUpdate")) {
				this.jButtonid_facturaFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaFacturaProveedorBusqueda")) {
				this.jButtonid_facturaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_facturaFacturaProveedorBusqueda")) {
				this.jButtonnumero_facturaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccionFacturaProveedorUpdate")) {
				this.jButtonid_transaccionFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccionFacturaProveedorBusqueda")) {
				this.jButtonid_transaccionFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionFacturaProveedorBusqueda")) {
				this.jButtonfecha_emisionFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteFacturaProveedor")) {
				this.jButtonid_clienteFacturaProveedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteFacturaProveedorUpdate")) {
				this.jButtonid_clienteFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteFacturaProveedorBusqueda")) {
				this.jButtonid_clienteFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucFacturaProveedorBusqueda")) {
				this.jButtonrucFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleado_solicitaFacturaProveedor")) {
				this.jButtonid_empleado_solicitaFacturaProveedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleado_solicitaFacturaProveedorUpdate")) {
				this.jButtonid_empleado_solicitaFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleado_solicitaFacturaProveedorBusqueda")) {
				this.jButtonid_empleado_solicitaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_venceFacturaProveedorBusqueda")) {
				this.jButtonfecha_venceFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaFacturaProveedorUpdate")) {
				this.jButtonid_monedaFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaFacturaProveedorBusqueda")) {
				this.jButtonid_monedaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoFacturaProveedor")) {
				this.jButtonid_empleadoFacturaProveedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoFacturaProveedorUpdate")) {
				this.jButtonid_empleadoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoFacturaProveedorBusqueda")) {
				this.jButtonid_empleadoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_activosFacturaProveedorBusqueda")) {
				this.jButtoncon_activosFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_riseFacturaProveedorBusqueda")) {
				this.jButtoncon_riseFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_sitiosFacturaProveedorBusqueda")) {
				this.jButtoncon_sitiosFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("detalleFacturaProveedorBusqueda")) {
				this.jButtondetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_bienes12FacturaProveedorBusqueda")) {
				this.jButtonvalor_bienes12FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_servicios12FacturaProveedorBusqueda")) {
				this.jButtonvalor_servicios12FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_valor12FacturaProveedorBusqueda")) {
				this.jButtontotal_valor12FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_bienes0FacturaProveedorBusqueda")) {
				this.jButtonvalor_bienes0FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_servicios0FacturaProveedorBusqueda")) {
				this.jButtonvalor_servicios0FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_valor0FacturaProveedorBusqueda")) {
				this.jButtontotal_valor0FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("bienes_iceFacturaProveedorBusqueda")) {
				this.jButtonbienes_iceFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("servicios_iceFacturaProveedorBusqueda")) {
				this.jButtonservicios_iceFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_iceFacturaProveedorBusqueda")) {
				this.jButtontotal_iceFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("bienes_ivaFacturaProveedorBusqueda")) {
				this.jButtonbienes_ivaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("servicios_ivaFacturaProveedorBusqueda")) {
				this.jButtonservicios_ivaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaFacturaProveedorBusqueda")) {
				this.jButtontotal_ivaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iva_porcentajeFacturaProveedorBusqueda")) {
				this.jButtoniva_porcentajeFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalFacturaProveedorBusqueda")) {
				this.jButtontotalFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_monto_objeto_ivaFacturaProveedorBusqueda")) {
				this.jButtoncon_monto_objeto_ivaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_retencionFacturaProveedorBusqueda")) {
				this.jButtonnumero_retencionFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_serieFacturaProveedorBusqueda")) {
				this.jButtonnumero_serieFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_autorizacionFacturaProveedorBusqueda")) {
				this.jButtonnumero_autorizacionFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_validezFacturaProveedorBusqueda")) {
				this.jButtonfecha_validezFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente1FacturaProveedorUpdate")) {
				this.jButtonid_tipo_retencion_fuente1FacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente1FacturaProveedorBusqueda")) {
				this.jButtonid_tipo_retencion_fuente1FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_fuente1_porcentajeFacturaProveedorBusqueda")) {
				this.jButtonret_fuente1_porcentajeFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_fuente1_baseFacturaProveedorBusqueda")) {
				this.jButtonret_fuente1_baseFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_fuente1_retenidoFacturaProveedorBusqueda")) {
				this.jButtonret_fuente1_retenidoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente2FacturaProveedorUpdate")) {
				this.jButtonid_tipo_retencion_fuente2FacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente2FacturaProveedorBusqueda")) {
				this.jButtonid_tipo_retencion_fuente2FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_fuente2_porcentajeFacturaProveedorBusqueda")) {
				this.jButtonret_fuente2_porcentajeFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_fuente2_baseFacturaProveedorBusqueda")) {
				this.jButtonret_fuente2_baseFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_fuente2_retenidoFacturaProveedorBusqueda")) {
				this.jButtonret_fuente2_retenidoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva1FacturaProveedorUpdate")) {
				this.jButtonid_tipo_retencion_iva1FacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva1FacturaProveedorBusqueda")) {
				this.jButtonid_tipo_retencion_iva1FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_iva_bien_porcentajeFacturaProveedorBusqueda")) {
				this.jButtonret_iva_bien_porcentajeFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_iva_bien_baseFacturaProveedorBusqueda")) {
				this.jButtonret_iva_bien_baseFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_iva_bien_retenidoFacturaProveedorBusqueda")) {
				this.jButtonret_iva_bien_retenidoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva2FacturaProveedorUpdate")) {
				this.jButtonid_tipo_retencion_iva2FacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva2FacturaProveedorBusqueda")) {
				this.jButtonid_tipo_retencion_iva2FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_iva_servicio_porcentajeFacturaProveedorBusqueda")) {
				this.jButtonret_iva_servicio_porcentajeFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_iva_servicio_baseFacturaProveedorBusqueda")) {
				this.jButtonret_iva_servicio_baseFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_iva_servicio_retenidoFacturaProveedorBusqueda")) {
				this.jButtonret_iva_servicio_retenidoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_numero_autorizacionFacturaProveedorBusqueda")) {
				this.jButtonanexo_numero_autorizacionFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_numeso_serieFacturaProveedorBusqueda")) {
				this.jButtonanexo_numeso_serieFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_fecha_validezFacturaProveedorBusqueda")) {
				this.jButtonanexo_fecha_validezFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_tributarioFacturaProveedorUpdate")) {
				this.jButtonid_tipo_tributarioFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_tributarioFacturaProveedorBusqueda")) {
				this.jButtonid_tipo_tributarioFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_factura_inicioFacturaProveedorBusqueda")) {
				this.jButtonanexo_factura_inicioFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_factura_finFacturaProveedorBusqueda")) {
				this.jButtonanexo_factura_finFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fiscal_bienesFacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_credito_fiscal_bienesFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fiscal_bienesFacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_credito_fiscal_bienesFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_responsable_fondoFacturaProveedorUpdate")) {
				this.jButtonid_responsable_fondoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_responsable_fondoFacturaProveedorBusqueda")) {
				this.jButtonid_responsable_fondoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencialFacturaProveedorBusqueda")) {
				this.jButtonsecuencialFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoFacturaProveedor")) {
				this.jButtonid_cuenta_contable_gastoFacturaProveedorActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoFacturaProveedorArbol")) {
				this.abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoFacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_gastoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoFacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_gastoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_valorFacturaProveedorBusqueda")) {
				this.jButtongasto_valorFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_gasto2FacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_gasto2FacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gasto2FacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_gasto2FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_valor2FacturaProveedorBusqueda")) {
				this.jButtongasto_valor2FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_nombreFacturaProveedorBusqueda")) {
				this.jButtongasto_nombreFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_nombre2FacturaProveedorBusqueda")) {
				this.jButtongasto_nombre2FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_finFacturaProveedor")) {
				this.jButtonid_cuenta_contable_credito_finFacturaProveedorActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_finFacturaProveedorArbol")) {
				this.abrirFrameTreeCuentaContableCreditoFin("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_finFacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_credito_finFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_finFacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_credito_finFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fin2FacturaProveedor")) {
				this.jButtonid_cuenta_contable_credito_fin2FacturaProveedorActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fin2FacturaProveedorArbol")) {
				this.abrirFrameTreeCuentaContableCreditoFin2("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fin2FacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_credito_fin2FacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fin2FacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_credito_fin2FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoFacturaProveedor")) {
				this.jButtonid_cuenta_contable_creditoFacturaProveedorActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoFacturaProveedorArbol")) {
				this.abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoFacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_creditoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoFacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_creditoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionFacturaProveedorBusqueda")) {
				this.jButtondescripcionFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_movimientoFacturaProveedorUpdate")) {
				this.jButtonid_tipo_movimientoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_movimientoFacturaProveedorBusqueda")) {
				this.jButtonid_tipo_movimientoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_movimiento_moduloFacturaProveedorUpdate")) {
				this.jButtonid_tipo_movimiento_moduloFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_movimiento_moduloFacturaProveedorBusqueda")) {
				this.jButtonid_tipo_movimiento_moduloFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloFacturaProveedorUpdate")) {
				this.jButtonid_tipo_transaccion_moduloFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloFacturaProveedorBusqueda")) {
				this.jButtonid_tipo_transaccion_moduloFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_mayorFacturaProveedorBusqueda")) {
				this.jButtonnumero_mayorFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_asientoFacturaProveedorBusqueda")) {
				this.jButtoncodigo_asientoFacturaProveedorBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_clienteFacturaProveedor")) {
				this.jButtonid_clienteFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("id_empleadoFacturaProveedor")) {
				this.jButtonid_empleadoFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("id_plantilla_facturaFacturaProveedor")) {
				this.jButtonid_plantilla_facturaFacturaProveedorActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdClienteFacturaProveedor")) {
				this.jButtonFK_IdClienteFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableCreditoFiscalBienesFacturaProveedor")) {
				this.jButtonFK_IdCuentaContableCreditoFiscalBienesFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor")) {
				this.jButtonFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableGasto2FacturaProveedor")) {
				this.jButtonFK_IdCuentaContableGasto2FacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEmpleadoFacturaProveedor")) {
				this.jButtonFK_IdEmpleadoFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdPlantillaFacturaFacturaProveedor")) {
				this.jButtonFK_IdPlantillaFacturaFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdResponsableFondoFacturaProveedor")) {
				this.jButtonFK_IdResponsableFondoFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoDocumentoFacturaProveedor")) {
				this.jButtonFK_IdTipoDocumentoFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoMovimientoModuloFacturaProveedor")) {
				this.jButtonFK_IdTipoMovimientoModuloFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoRetencionFuente1FacturaProveedor")) {
				this.jButtonFK_IdTipoRetencionFuente1FacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoRetencionIva1FacturaProveedor")) {
				this.jButtonFK_IdTipoRetencionIva1FacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoTransaccionModuloFacturaProveedor")) {
				this.jButtonFK_IdTipoTransaccionModuloFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoTributarioFacturaProveedor")) {
				this.jButtonFK_IdTipoTributarioFacturaProveedorActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTransaccionFacturaProveedor")) {
				this.jButtonFK_IdTransaccionFacturaProveedorActionPerformed(evt);
			}
			
			;
			
			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessFacturaProveedor();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				


				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			FacturaProveedor facturaproveedorLocal=null;
			
			if(!this.getEsControlTabla()) {
				facturaproveedorLocal=this.facturaproveedor;
			} else {
				facturaproveedorLocal=this.facturaproveedorAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
							
				
				


				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
								
						
				


				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedor.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
								
				
				


				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
			
			this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
							
				
				


				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedor.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
			
			this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
								
				
				


				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
			
			this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosFacturaProveedor")) {
					jCheckBoxSeleccionarTodosFacturaProveedorItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosFacturaProveedor")) {
					jCheckBoxSeleccionadosFacturaProveedorItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarFacturaProveedor")) {
					
				}
				
				


				
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
												
				
				


				
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedor.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_tipo_transaccion_moduloFacturaProveedor")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor;
				}

				if(this.facturaproveedorSessionBean.getConGuardarRelaciones()) {
					//classes=FacturaProveedorConstantesFunciones.getClassesRelationshipsOfFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyTipoTransaccionModulo(jComboBoxGenerico,"Formulario");

				this.recargarFormFacturaProveedor(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor")) {
				this.procesarActionsCombosForeignKeyTipoTransaccionModulo(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor,"FK_IdTipoTransaccionModulo");
				//recargarFormFacturaProveedorTipoTransaccionModulo(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor,"FK_IdTipoTransaccionModulo");
			}
			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaProveedorActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_tipo_transaccion_moduloFacturaProveedor")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor;
				}

				if(this.facturaproveedorSessionBean.getConGuardarRelaciones()) {
					//classes=FacturaProveedorConstantesFunciones.getClassesRelationshipsOfFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyTipoTransaccionModulo(jComboBoxGenerico,"Formulario");

				this.recargarFormFacturaProveedor(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor")) {
				this.procesarActionsCombosForeignKeyTipoTransaccionModulo(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor,"FK_IdTipoTransaccionModulo");
				//recargarFormFacturaProveedorTipoTransaccionModulo(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor,"FK_IdTipoTransaccionModulo");
			}
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedor.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedor.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturaproveedor);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturaproveedor);
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_tipo_transaccion_moduloFacturaProveedor")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor;
				}

				if(this.facturaproveedorSessionBean.getConGuardarRelaciones()) {
					//classes=FacturaProveedorConstantesFunciones.getClassesRelationshipsOfFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyTipoTransaccionModulo(jComboBoxGenerico,"Formulario");

				this.recargarFormFacturaProveedor(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor")) {
				this.procesarActionsCombosForeignKeyTipoTransaccionModulo(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor,"FK_IdTipoTransaccionModulo");
				//recargarFormFacturaProveedorTipoTransaccionModulo(jComboBoxid_tipo_transaccion_moduloFK_IdTipoTransaccionModuloFacturaProveedor,"FK_IdTipoTransaccionModulo");
			}
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaProveedor.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaProveedor.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaProveedorActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturaproveedorAnterior =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarFacturaProveedor")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosFacturaProveedorListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosFacturaProveedor.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.facturaproveedor =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.facturaproveedor =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.facturaproveedor);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarFacturaProveedor")) {
				
				}
				
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarFacturaProveedor")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosFacturaProveedor.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarFacturaProveedor")) {
			
			}
			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessFacturaProveedor();
			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			
			if(sTipo.equals("NuevoFacturaProveedor")) {
				jButtonNuevoFacturaProveedorActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarFacturaProveedor")) {
				jButtonDuplicarFacturaProveedorActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarFacturaProveedor")) {
				jButtonCopiarFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormFacturaProveedor")) {
				jButtonVerFormFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesFacturaProveedor")) {
				jButtonNuevoFacturaProveedorActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarFacturaProveedor")) {
				jButtonModificarFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarFacturaProveedor")) {
				jButtonActualizarFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarFacturaProveedor")) {
				jButtonEliminarFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaFacturaProveedor")) {
				jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarFacturaProveedor")) {
				jButtonCancelarFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarFacturaProveedor")) {
				jButtonCerrarFacturaProveedorActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosFacturaProveedor")) {
				jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosFacturaProveedor")) {
				jButtonNuevoGuardarCambiosFacturaProveedorActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByFacturaProveedor")) {
				jButtonAbrirOrderByFacturaProveedorActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionFacturaProveedor")) {
				jButtonRecargarInformacionFacturaProveedorActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresFacturaProveedor")) {
				jButtonAnterioresFacturaProveedorActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesFacturaProveedor")) {
				jButtonSiguientesFacturaProveedorActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idFacturaProveedorBusqueda")) {
				this.jButtonidFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaFacturaProveedorUpdate")) {
				this.jButtonid_empresaFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaFacturaProveedorBusqueda")) {
				this.jButtonid_empresaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalFacturaProveedorUpdate")) {
				this.jButtonid_sucursalFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalFacturaProveedorBusqueda")) {
				this.jButtonid_sucursalFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioFacturaProveedorUpdate")) {
				this.jButtonid_ejercicioFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioFacturaProveedorBusqueda")) {
				this.jButtonid_ejercicioFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_periodoFacturaProveedorUpdate")) {
				this.jButtonid_periodoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_periodoFacturaProveedorBusqueda")) {
				this.jButtonid_periodoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioFacturaProveedorUpdate")) {
				this.jButtonid_anioFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioFacturaProveedorBusqueda")) {
				this.jButtonid_anioFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesFacturaProveedorUpdate")) {
				this.jButtonid_mesFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesFacturaProveedorBusqueda")) {
				this.jButtonid_mesFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_moduloFacturaProveedorUpdate")) {
				this.jButtonid_moduloFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_moduloFacturaProveedorBusqueda")) {
				this.jButtonid_moduloFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_plantilla_facturaFacturaProveedor")) {
				this.jButtonid_plantilla_facturaFacturaProveedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_plantilla_facturaFacturaProveedorUpdate")) {
				this.jButtonid_plantilla_facturaFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_plantilla_facturaFacturaProveedorBusqueda")) {
				this.jButtonid_plantilla_facturaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_documentoFacturaProveedorUpdate")) {
				this.jButtonid_tipo_documentoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_documentoFacturaProveedorBusqueda")) {
				this.jButtonid_tipo_documentoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("plazoFacturaProveedorBusqueda")) {
				this.jButtonplazoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_facturaFacturaProveedor")) {
				this.jButtonid_facturaFacturaProveedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_facturaFacturaProveedorUpdate")) {
				this.jButtonid_facturaFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_facturaFacturaProveedorBusqueda")) {
				this.jButtonid_facturaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_facturaFacturaProveedorBusqueda")) {
				this.jButtonnumero_facturaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_transaccionFacturaProveedorUpdate")) {
				this.jButtonid_transaccionFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_transaccionFacturaProveedorBusqueda")) {
				this.jButtonid_transaccionFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_emisionFacturaProveedorBusqueda")) {
				this.jButtonfecha_emisionFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteFacturaProveedor")) {
				this.jButtonid_clienteFacturaProveedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteFacturaProveedorUpdate")) {
				this.jButtonid_clienteFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteFacturaProveedorBusqueda")) {
				this.jButtonid_clienteFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("rucFacturaProveedorBusqueda")) {
				this.jButtonrucFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleado_solicitaFacturaProveedor")) {
				this.jButtonid_empleado_solicitaFacturaProveedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleado_solicitaFacturaProveedorUpdate")) {
				this.jButtonid_empleado_solicitaFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleado_solicitaFacturaProveedorBusqueda")) {
				this.jButtonid_empleado_solicitaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_venceFacturaProveedorBusqueda")) {
				this.jButtonfecha_venceFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_monedaFacturaProveedorUpdate")) {
				this.jButtonid_monedaFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_monedaFacturaProveedorBusqueda")) {
				this.jButtonid_monedaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_empleadoFacturaProveedor")) {
				this.jButtonid_empleadoFacturaProveedorActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoFacturaProveedorUpdate")) {
				this.jButtonid_empleadoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoFacturaProveedorBusqueda")) {
				this.jButtonid_empleadoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_activosFacturaProveedorBusqueda")) {
				this.jButtoncon_activosFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_riseFacturaProveedorBusqueda")) {
				this.jButtoncon_riseFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_sitiosFacturaProveedorBusqueda")) {
				this.jButtoncon_sitiosFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("detalleFacturaProveedorBusqueda")) {
				this.jButtondetalleFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_bienes12FacturaProveedorBusqueda")) {
				this.jButtonvalor_bienes12FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_servicios12FacturaProveedorBusqueda")) {
				this.jButtonvalor_servicios12FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_valor12FacturaProveedorBusqueda")) {
				this.jButtontotal_valor12FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_bienes0FacturaProveedorBusqueda")) {
				this.jButtonvalor_bienes0FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_servicios0FacturaProveedorBusqueda")) {
				this.jButtonvalor_servicios0FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_valor0FacturaProveedorBusqueda")) {
				this.jButtontotal_valor0FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("bienes_iceFacturaProveedorBusqueda")) {
				this.jButtonbienes_iceFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("servicios_iceFacturaProveedorBusqueda")) {
				this.jButtonservicios_iceFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_iceFacturaProveedorBusqueda")) {
				this.jButtontotal_iceFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("bienes_ivaFacturaProveedorBusqueda")) {
				this.jButtonbienes_ivaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("servicios_ivaFacturaProveedorBusqueda")) {
				this.jButtonservicios_ivaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaFacturaProveedorBusqueda")) {
				this.jButtontotal_ivaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iva_porcentajeFacturaProveedorBusqueda")) {
				this.jButtoniva_porcentajeFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalFacturaProveedorBusqueda")) {
				this.jButtontotalFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("con_monto_objeto_ivaFacturaProveedorBusqueda")) {
				this.jButtoncon_monto_objeto_ivaFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_retencionFacturaProveedorBusqueda")) {
				this.jButtonnumero_retencionFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_serieFacturaProveedorBusqueda")) {
				this.jButtonnumero_serieFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_autorizacionFacturaProveedorBusqueda")) {
				this.jButtonnumero_autorizacionFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_validezFacturaProveedorBusqueda")) {
				this.jButtonfecha_validezFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente1FacturaProveedorUpdate")) {
				this.jButtonid_tipo_retencion_fuente1FacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente1FacturaProveedorBusqueda")) {
				this.jButtonid_tipo_retencion_fuente1FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_fuente1_porcentajeFacturaProveedorBusqueda")) {
				this.jButtonret_fuente1_porcentajeFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_fuente1_baseFacturaProveedorBusqueda")) {
				this.jButtonret_fuente1_baseFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_fuente1_retenidoFacturaProveedorBusqueda")) {
				this.jButtonret_fuente1_retenidoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente2FacturaProveedorUpdate")) {
				this.jButtonid_tipo_retencion_fuente2FacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_fuente2FacturaProveedorBusqueda")) {
				this.jButtonid_tipo_retencion_fuente2FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_fuente2_porcentajeFacturaProveedorBusqueda")) {
				this.jButtonret_fuente2_porcentajeFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_fuente2_baseFacturaProveedorBusqueda")) {
				this.jButtonret_fuente2_baseFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_fuente2_retenidoFacturaProveedorBusqueda")) {
				this.jButtonret_fuente2_retenidoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva1FacturaProveedorUpdate")) {
				this.jButtonid_tipo_retencion_iva1FacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva1FacturaProveedorBusqueda")) {
				this.jButtonid_tipo_retencion_iva1FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_iva_bien_porcentajeFacturaProveedorBusqueda")) {
				this.jButtonret_iva_bien_porcentajeFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_iva_bien_baseFacturaProveedorBusqueda")) {
				this.jButtonret_iva_bien_baseFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_iva_bien_retenidoFacturaProveedorBusqueda")) {
				this.jButtonret_iva_bien_retenidoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva2FacturaProveedorUpdate")) {
				this.jButtonid_tipo_retencion_iva2FacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_iva2FacturaProveedorBusqueda")) {
				this.jButtonid_tipo_retencion_iva2FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_iva_servicio_porcentajeFacturaProveedorBusqueda")) {
				this.jButtonret_iva_servicio_porcentajeFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_iva_servicio_baseFacturaProveedorBusqueda")) {
				this.jButtonret_iva_servicio_baseFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ret_iva_servicio_retenidoFacturaProveedorBusqueda")) {
				this.jButtonret_iva_servicio_retenidoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_numero_autorizacionFacturaProveedorBusqueda")) {
				this.jButtonanexo_numero_autorizacionFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_numeso_serieFacturaProveedorBusqueda")) {
				this.jButtonanexo_numeso_serieFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_fecha_validezFacturaProveedorBusqueda")) {
				this.jButtonanexo_fecha_validezFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_tributarioFacturaProveedorUpdate")) {
				this.jButtonid_tipo_tributarioFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_tributarioFacturaProveedorBusqueda")) {
				this.jButtonid_tipo_tributarioFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_factura_inicioFacturaProveedorBusqueda")) {
				this.jButtonanexo_factura_inicioFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("anexo_factura_finFacturaProveedorBusqueda")) {
				this.jButtonanexo_factura_finFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fiscal_bienesFacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_credito_fiscal_bienesFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fiscal_bienesFacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_credito_fiscal_bienesFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_responsable_fondoFacturaProveedorUpdate")) {
				this.jButtonid_responsable_fondoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_responsable_fondoFacturaProveedorBusqueda")) {
				this.jButtonid_responsable_fondoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencialFacturaProveedorBusqueda")) {
				this.jButtonsecuencialFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoFacturaProveedor")) {
				this.jButtonid_cuenta_contable_gastoFacturaProveedorActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoFacturaProveedorArbol")) {
				this.abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoFacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_gastoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gastoFacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_gastoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_valorFacturaProveedorBusqueda")) {
				this.jButtongasto_valorFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_gasto2FacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_gasto2FacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_gasto2FacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_gasto2FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_valor2FacturaProveedorBusqueda")) {
				this.jButtongasto_valor2FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_nombreFacturaProveedorBusqueda")) {
				this.jButtongasto_nombreFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_nombre2FacturaProveedorBusqueda")) {
				this.jButtongasto_nombre2FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_finFacturaProveedor")) {
				this.jButtonid_cuenta_contable_credito_finFacturaProveedorActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_finFacturaProveedorArbol")) {
				this.abrirFrameTreeCuentaContableCreditoFin("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_finFacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_credito_finFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_finFacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_credito_finFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fin2FacturaProveedor")) {
				this.jButtonid_cuenta_contable_credito_fin2FacturaProveedorActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fin2FacturaProveedorArbol")) {
				this.abrirFrameTreeCuentaContableCreditoFin2("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fin2FacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_credito_fin2FacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_credito_fin2FacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_credito_fin2FacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoFacturaProveedor")) {
				this.jButtonid_cuenta_contable_creditoFacturaProveedorActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoFacturaProveedorArbol")) {
				this.abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoFacturaProveedorUpdate")) {
				this.jButtonid_cuenta_contable_creditoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_creditoFacturaProveedorBusqueda")) {
				this.jButtonid_cuenta_contable_creditoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionFacturaProveedorBusqueda")) {
				this.jButtondescripcionFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_movimientoFacturaProveedorUpdate")) {
				this.jButtonid_tipo_movimientoFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_movimientoFacturaProveedorBusqueda")) {
				this.jButtonid_tipo_movimientoFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_movimiento_moduloFacturaProveedorUpdate")) {
				this.jButtonid_tipo_movimiento_moduloFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_movimiento_moduloFacturaProveedorBusqueda")) {
				this.jButtonid_tipo_movimiento_moduloFacturaProveedorBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloFacturaProveedorUpdate")) {
				this.jButtonid_tipo_transaccion_moduloFacturaProveedorUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_transaccion_moduloFacturaProveedorBusqueda")) {
				this.jButtonid_tipo_transaccion_moduloFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_mayorFacturaProveedorBusqueda")) {
				this.jButtonnumero_mayorFacturaProveedorBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_asientoFacturaProveedorBusqueda")) {
				this.jButtoncodigo_asientoFacturaProveedorBusquedaActionPerformed(evt);
			}
			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessFacturaProveedor();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameFacturaProveedor")) {
				closingInternalFrameFacturaProveedor();
				
			} else if(sTipo.equals("jButtonCancelarFacturaProveedor")) {
				JInternalFrameBase jInternalFrameDetalleFormFacturaProveedor = (JInternalFrameBase)evt.getSource();
	            	
	            FacturaProveedorBeanSwingJInternalFrame jInternalFrameParent=(FacturaProveedorBeanSwingJInternalFrame)jInternalFrameDetalleFormFacturaProveedor.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarFacturaProveedorActionPerformed(null);
			}
			
			FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.facturaproveedor,new Object(),this.facturaproveedorParameterGeneral,this.facturaproveedorReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormFacturaProveedor(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormFacturaProveedor(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormFacturaProveedor(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.facturaproveedor)) {
			if(!esControlTabla) {
				if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);			
				}
				
				if(this.facturaproveedorSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualFacturaProveedor(this.facturaproveedor,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.facturaproveedorReturnGeneral=facturaproveedorLogic.procesarEventosFacturaProveedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturaproveedorLogic.getFacturaProveedors(),this.facturaproveedor,this.facturaproveedorParameterGeneral,this.isEsNuevoFacturaProveedor,classes);//this.facturaproveedorLogic.getFacturaProveedor()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanFacturaProveedor(this.facturaproveedorReturnGeneral,this.facturaproveedorBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.facturaproveedorSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanFacturaProveedor(classes,this.facturaproveedorReturnGeneral,this.facturaproveedorBean,false);
					}
						
					if(this.facturaproveedorReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyFacturaProveedor(this.facturaproveedorReturnGeneral.getFacturaProveedor());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioFacturaProveedor(this.facturaproveedorReturnGeneral.getFacturaProveedor());	
					}
						
					if(this.facturaproveedorReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioFacturaProveedor(this.facturaproveedorReturnGeneral.getFacturaProveedor(),classes);//this.facturaproveedorBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioFacturaProveedor(this.facturaproveedor,classes);//this.facturaproveedorBean);									
				}
			
				if(FacturaProveedorJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualFacturaProveedor(this.facturaproveedor,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaProveedor(this.facturaproveedor);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.facturaproveedorAnterior!=null) {
						this.facturaproveedor=this.facturaproveedorAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.facturaproveedorReturnGeneral=facturaproveedorLogic.procesarEventosFacturaProveedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturaproveedorLogic.getFacturaProveedors(),this.facturaproveedor,this.facturaproveedorParameterGeneral,this.isEsNuevoFacturaProveedor,classes);//this.facturaproveedorLogic.getFacturaProveedor()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.facturaproveedorSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.facturaproveedorSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.facturaproveedorReturnGeneral.getFacturaProveedor(),facturaproveedorLogic.getFacturaProveedors());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.facturaproveedorReturnGeneral.getFacturaProveedor(),this.facturaproveedors);
				}
				//ARCHITECTURE
				
				//this.jTableDatosFacturaProveedor.repaint();
				
				//((AbstractTableModel) this.jTableDatosFacturaProveedor.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosFacturaProveedor();
			}
		}
	}
	
	public void actualizarVisualTableDatosFacturaProveedor() throws Exception {
		
		FacturaProveedorModel facturaproveedorModel=(FacturaProveedorModel)this.jTableDatosFacturaProveedor.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			facturaproveedorModel.facturaproveedors=this.facturaproveedorLogic.getFacturaProveedors();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			facturaproveedorModel.facturaproveedors=this.facturaproveedors;
		}
		
		
		((FacturaProveedorModel) this.jTableDatosFacturaProveedor.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaFacturaProveedor() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getfacturaproveedorAnterior(),this.facturaproveedorLogic.getFacturaProveedors());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getfacturaproveedorAnterior(),this.facturaproveedors);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosFacturaProveedor();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioFacturaProveedor(FacturaProveedor facturaproveedor,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleFacturaProveedor.class)) {
					this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.setDetalleFacturaProveedors(facturaproveedor.getDetalleFacturaProveedors());
					this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturaproveedor,new Object(),generalEntityParameterGeneral,this.facturaproveedorReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.facturaproveedorSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=FacturaProveedorConstantesFunciones.getClassesRelationshipsOfFacturaProveedor(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=FacturaProveedorConstantesFunciones.getClassesRelationshipsFromStringsOfFacturaProveedor(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormFacturaProveedor(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				FacturaProveedorBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturaproveedor,new Object(),generalEntityParameterGeneral,this.facturaproveedorReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioFacturaProveedor(FacturaProveedorBean facturaproveedorBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleFacturaProveedor.class)) {
					this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.setDetalleFacturaProveedors(facturaproveedor.getDetalleFacturaProveedors());
					this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleFacturaProveedor(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanFacturaProveedor(ArrayList<Classe> classes,FacturaProveedorReturnGeneral facturaproveedorReturnGeneral,FacturaProveedorBean facturaproveedorBean,Boolean conDefault) throws Exception {
		
			this.facturaproveedorBean.setDetalleFacturaProveedors(facturaproveedorReturnGeneral.getFacturaProveedor().getDetalleFacturaProveedors());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualFacturaProveedor(FacturaProveedor facturaproveedor,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleFacturaProveedor.class)) {
					facturaproveedor.setDetalleFacturaProveedors(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorBeanSwingJInternalFrame.detallefacturaproveedorLogic.getDetalleFacturaProveedors());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.facturaproveedor)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormFacturaProveedor = new FacturaProveedorDetalleFormJInternalFrame(jDesktopPane,this.facturaproveedorSessionBean.getConGuardarRelaciones(),this.facturaproveedorSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.setVisible(false);
		this.jInternalFrameDetalleFormFacturaProveedor.setSelected(false);						
		
		this.jInternalFrameDetalleFormFacturaProveedor.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormFacturaProveedor.facturaproveedorLogic=this.facturaproveedorLogic;
		
		this.cargarCombosFrameForeignKeyFacturaProveedor("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleFacturaProveedor();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleFacturaProveedor();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyFacturaProveedor("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyFacturaProveedor();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormFacturaProveedor.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarFacturaProveedor"));
		
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonModificarFacturaProveedor.addActionListener(new ButtonActionListener(this,"ModificarFacturaProveedor"));

		
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonModificarToolBarFacturaProveedor.addActionListener(new ButtonActionListener(this,"ModificarToolBarFacturaProveedor"));
					
		this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemModificarFacturaProveedor.addActionListener(new ButtonActionListener(this,"MenuItemModificarFacturaProveedor"));		
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonActualizarFacturaProveedor.addActionListener (new ButtonActionListener(this,"ActualizarFacturaProveedor"));
		
		
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonActualizarToolBarFacturaProveedor.addActionListener(new ButtonActionListener(this,"ActualizarToolBarFacturaProveedor"));
						
		this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemActualizarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemActualizarFacturaProveedor"));		
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonEliminarFacturaProveedor.addActionListener (new ButtonActionListener(this,"EliminarFacturaProveedor"));
		
		
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonEliminarToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"EliminarToolBarFacturaProveedor"));
								
		this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemEliminarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemEliminarFacturaProveedor"));		
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonCancelarFacturaProveedor.addActionListener (new ButtonActionListener(this,"CancelarFacturaProveedor"));
		
		
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonCancelarToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"CancelarToolBarFacturaProveedor"));
					
		this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemCancelarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemCancelarFacturaProveedor"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemDetalleCerrarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarFacturaProveedor"));		
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonGuardarCambiosToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarFacturaProveedor"));
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonGuardarCambiosToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarFacturaProveedor"));
		
		
		
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioFacturaProveedor"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonidFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"idFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empresaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_empresaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empresaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_sucursalFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_sucursalFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_ejercicioFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_ejercicioFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_periodoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_periodoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_periodoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_anioFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_anioFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_anioFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_anioFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_mesFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_mesFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_mesFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_mesFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_moduloFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_moduloFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_moduloFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloFacturaProveedorBusqueda"));
		//jButtonid_plantilla_facturaFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_plantilla_facturaFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_plantilla_facturaFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_plantilla_facturaFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_plantilla_facturaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_plantilla_facturaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_plantilla_facturaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_plantilla_facturaFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_documentoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_documentoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_documentoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_documentoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonplazoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"plazoFacturaProveedorBusqueda"));
		//jButtonid_facturaFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_facturaFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_facturaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_facturaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_facturaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_transaccionFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_transaccionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonfecha_emisionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionFacturaProveedorBusqueda"));
		//jButtonid_clienteFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_clienteFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_clienteFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_clienteFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonrucFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"rucFacturaProveedorBusqueda"));
		//jButtonid_empleado_solicitaFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleado_solicitaFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleado_solicitaFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleado_solicitaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleado_solicitaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonfecha_venceFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_venceFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_monedaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_monedaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_monedaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaFacturaProveedorBusqueda"));
		//jButtonid_empleadoFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleadoFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleadoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleadoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncon_activosFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"con_activosFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncon_riseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"con_riseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncon_sitiosFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"con_sitiosFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtondetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"detalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonvalor_bienes12FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"valor_bienes12FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonvalor_servicios12FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"valor_servicios12FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotal_valor12FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"total_valor12FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonvalor_bienes0FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"valor_bienes0FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonvalor_servicios0FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"valor_servicios0FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotal_valor0FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"total_valor0FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonbienes_iceFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"bienes_iceFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonservicios_iceFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"servicios_iceFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotal_iceFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"total_iceFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonbienes_ivaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"bienes_ivaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonservicios_ivaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"servicios_ivaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotal_ivaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoniva_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"iva_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotalFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"totalFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncon_monto_objeto_ivaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"con_monto_objeto_ivaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_retencionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_retencionFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_serieFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_serieFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_autorizacionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_autorizacionFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonfecha_validezFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_validezFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_fuente1FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente1FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_fuente1FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente1FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente1_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente1_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente1_baseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente1_baseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente1_retenidoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente1_retenidoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_fuente2FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente2FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_fuente2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente2FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente2_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente2_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente2_baseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente2_baseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente2_retenidoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente2_retenidoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_iva1FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva1FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_iva1FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva1FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_bien_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_bien_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_bien_baseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_bien_baseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_bien_retenidoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_bien_retenidoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_iva2FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva2FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_iva2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva2FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_servicio_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_servicio_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_servicio_baseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_servicio_baseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_servicio_retenidoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_servicio_retenidoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_numero_autorizacionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_numero_autorizacionFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_numeso_serieFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_numeso_serieFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_fecha_validezFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_fecha_validezFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_tributarioFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_tributarioFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_factura_inicioFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_factura_inicioFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_factura_finFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_factura_finFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fiscal_bienesFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_bienesFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fiscal_bienesFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_bienesFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_responsable_fondoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_responsable_fondoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_responsable_fondoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_responsable_fondoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonsecuencialFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"secuencialFacturaProveedorBusqueda"));
		//jButtonid_cuenta_contable_gastoFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_gastoFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoFacturaProveedor"));
		//jButtonid_cuenta_contable_gastoFacturaProveedorArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedorArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoFacturaProveedorArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtongasto_valorFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"gasto_valorFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gasto2FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gasto2FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gasto2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gasto2FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtongasto_valor2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"gasto_valor2FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtongasto_nombreFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"gasto_nombreFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtongasto_nombre2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"gasto_nombre2FacturaProveedorBusqueda"));
		//jButtonid_cuenta_contable_credito_finFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_credito_finFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_finFacturaProveedor"));
		//jButtonid_cuenta_contable_credito_finFacturaProveedorArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCreditoFin("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedorArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_finFacturaProveedorArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_finFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_finFacturaProveedorBusqueda"));
		//jButtonid_cuenta_contable_credito_fin2FacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_credito_fin2FacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedor.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fin2FacturaProveedor"));
		//jButtonid_cuenta_contable_credito_fin2FacturaProveedorArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCreditoFin2("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedorArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fin2FacturaProveedorArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fin2FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fin2FacturaProveedorBusqueda"));
		//jButtonid_cuenta_contable_creditoFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_creditoFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoFacturaProveedor"));
		//jButtonid_cuenta_contable_creditoFacturaProveedorArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedorArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoFacturaProveedorArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtondescripcionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descripcionFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_movimientoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_movimientoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_movimiento_moduloFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_movimiento_moduloFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_transaccion_moduloFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_transaccion_moduloFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_mayorFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_mayorFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncodigo_asientoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"codigo_asientoFacturaProveedorBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormFacturaProveedor.jTabbedPaneRelacionesFacturaProveedor.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesFacturaProveedor"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameFacturaProveedor"));
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarFacturaProveedor"));
		}
		
		this.jTableDatosFacturaProveedor.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarFacturaProveedor"));
		
		this.jTableDatosFacturaProveedor.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarFacturaProveedor"));
		
		this.jButtonNuevoFacturaProveedor.addActionListener(new ButtonActionListener(this,"NuevoFacturaProveedor"));
		
		this.jButtonDuplicarFacturaProveedor.addActionListener(new ButtonActionListener(this,"DuplicarFacturaProveedor"));
		
		this.jButtonCopiarFacturaProveedor.addActionListener(new ButtonActionListener(this,"CopiarFacturaProveedor"));
		
		this.jButtonVerFormFacturaProveedor.addActionListener(new ButtonActionListener(this,"VerFormFacturaProveedor"));
		
		
		this.jButtonNuevoToolBarFacturaProveedor.addActionListener(new ButtonActionListener(this,"NuevoToolBarFacturaProveedor"));
			
		this.jButtonDuplicarToolBarFacturaProveedor.addActionListener(new ButtonActionListener(this,"DuplicarToolBarFacturaProveedor"));
			
		this.jMenuItemNuevoFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemNuevoFacturaProveedor"));
			
		this.jMenuItemDuplicarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarFacturaProveedor"));		
		
		
		this.jButtonNuevoRelacionesFacturaProveedor.addActionListener (new ButtonActionListener(this,"NuevoRelacionesFacturaProveedor"));
		
		
		this.jButtonNuevoRelacionesToolBarFacturaProveedor.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarFacturaProveedor"));
			
		this.jMenuItemNuevoRelacionesFacturaProveedor.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesFacturaProveedor"));		
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonModificarFacturaProveedor.addActionListener(new ButtonActionListener(this,"ModificarFacturaProveedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonModificarToolBarFacturaProveedor.addActionListener(new ButtonActionListener(this,"ModificarToolBarFacturaProveedor"));
			
			this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemModificarFacturaProveedor.addActionListener(new ButtonActionListener(this,"MenuItemModificarFacturaProveedor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonActualizarFacturaProveedor.addActionListener (new ButtonActionListener(this,"ActualizarFacturaProveedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonActualizarToolBarFacturaProveedor.addActionListener(new ButtonActionListener(this,"ActualizarToolBarFacturaProveedor"));
				
			this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemActualizarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemActualizarFacturaProveedor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonEliminarFacturaProveedor.addActionListener (new ButtonActionListener(this,"EliminarFacturaProveedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonEliminarToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"EliminarToolBarFacturaProveedor"));
						
			this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemEliminarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemEliminarFacturaProveedor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonCancelarFacturaProveedor.addActionListener (new ButtonActionListener(this,"CancelarFacturaProveedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonCancelarToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"CancelarToolBarFacturaProveedor"));
			
			this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemCancelarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemCancelarFacturaProveedor"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarFacturaProveedor"));		
		
		
		this.jButtonCerrarFacturaProveedor.addActionListener (new ButtonActionListener(this,"CerrarFacturaProveedor"));
		
		
		this.jButtonCerrarToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"CerrarToolBarFacturaProveedor"));
			
		this.jMenuItemCerrarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemCerrarFacturaProveedor"));
			
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.jMenuItemDetalleCerrarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarFacturaProveedor"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonGuardarCambiosFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosFacturaProveedor"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonGuardarCambiosToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarFacturaProveedor"));
		}
		
		this.jButtonCopiarToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"CopiarToolBarFacturaProveedor"));
			
		this.jButtonVerFormToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"VerFormToolBarFacturaProveedor"));
		
		this.jMenuItemGuardarCambiosFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosFacturaProveedor"));
			
		this.jMenuItemCopiarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemCopiarFacturaProveedor"));		
		
		this.jMenuItemVerFormFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemVerFormFacturaProveedor"));		
		
		
		this.jButtonGuardarCambiosTablaFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaFacturaProveedor"));
		
		
		this.jButtonGuardarCambiosTablaToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarFacturaProveedor"));
			
		this.jMenuItemGuardarCambiosTablaFacturaProveedor.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaFacturaProveedor"));		
		
		
		
		this.jButtonRecargarInformacionFacturaProveedor.addActionListener (new ButtonActionListener(this,"RecargarInformacionFacturaProveedor"));
					
		this.jButtonRecargarInformacionToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarFacturaProveedor"));
		
		this.jMenuItemRecargarInformacionFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionFacturaProveedor"));		
		
		
		
		this.jButtonAnterioresFacturaProveedor.addActionListener (new ButtonActionListener(this,"AnterioresFacturaProveedor"));
		
		
		this.jButtonAnterioresToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"AnterioresToolBarFacturaProveedor"));
		
		this.jMenuItemAnterioresFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresFacturaProveedor"));		
		
		
		this.jButtonSiguientesFacturaProveedor.addActionListener (new ButtonActionListener(this,"SiguientesFacturaProveedor"));
		
		
		this.jButtonSiguientesToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"SiguientesToolBarFacturaProveedor"));
			
		this.jMenuItemSiguientesFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesFacturaProveedor"));
			
		this.jMenuItemAbrirOrderByFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByFacturaProveedor"));
			
		this.jMenuItemMostrarOcultarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarFacturaProveedor"));
			
		this.jMenuItemDetalleAbrirOrderByFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByFacturaProveedor"));
			
		this.jMenuItemDetalleMostarOcultarFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarFacturaProveedor"));		
		
		
		this.jButtonNuevoGuardarCambiosFacturaProveedor.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosFacturaProveedor"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarFacturaProveedor"));
			
		this.jMenuItemNuevoGuardarCambiosFacturaProveedor.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosFacturaProveedor"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosFacturaProveedor.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosFacturaProveedor"));

		this.jCheckBoxSeleccionadosFacturaProveedor.addItemListener(new CheckBoxItemListener(this,"SeleccionadosFacturaProveedor"));
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioFacturaProveedor"));
		}
		
		
		this.jComboBoxTiposRelacionesFacturaProveedor.addActionListener (new ButtonActionListener(this,"TiposRelacionesFacturaProveedor"));
			
		this.jComboBoxTiposAccionesFacturaProveedor.addActionListener (new ButtonActionListener(this,"TiposAccionesFacturaProveedor"));
					
		this.jComboBoxTiposSeleccionarFacturaProveedor.addActionListener (new ButtonActionListener(this,"TiposSeleccionarFacturaProveedor"));
			
		this.jTextFieldValorCampoGeneralFacturaProveedor.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralFacturaProveedor"));		
		
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonidFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"idFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empresaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_empresaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empresaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_sucursalFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_sucursalFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_ejercicioFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_ejercicioFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_periodoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_periodoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_periodoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_anioFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_anioFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_anioFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_anioFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_mesFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_mesFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_mesFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_mesFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_moduloFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_moduloFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_moduloFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloFacturaProveedorBusqueda"));
		//jButtonid_plantilla_facturaFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_plantilla_facturaFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_plantilla_facturaFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_plantilla_facturaFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_plantilla_facturaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_plantilla_facturaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_plantilla_facturaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_plantilla_facturaFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_documentoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_documentoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_documentoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_documentoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonplazoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"plazoFacturaProveedorBusqueda"));
		//jButtonid_facturaFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_facturaFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_facturaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_facturaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_facturaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_transaccionFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_transaccionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonfecha_emisionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionFacturaProveedorBusqueda"));
		//jButtonid_clienteFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_clienteFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_clienteFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_clienteFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonrucFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"rucFacturaProveedorBusqueda"));
		//jButtonid_empleado_solicitaFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleado_solicitaFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleado_solicitaFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleado_solicitaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleado_solicitaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonfecha_venceFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_venceFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_monedaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_monedaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_monedaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaFacturaProveedorBusqueda"));
		//jButtonid_empleadoFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleadoFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleadoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleadoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncon_activosFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"con_activosFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncon_riseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"con_riseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncon_sitiosFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"con_sitiosFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtondetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"detalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonvalor_bienes12FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"valor_bienes12FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonvalor_servicios12FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"valor_servicios12FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotal_valor12FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"total_valor12FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonvalor_bienes0FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"valor_bienes0FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonvalor_servicios0FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"valor_servicios0FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotal_valor0FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"total_valor0FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonbienes_iceFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"bienes_iceFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonservicios_iceFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"servicios_iceFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotal_iceFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"total_iceFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonbienes_ivaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"bienes_ivaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonservicios_ivaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"servicios_ivaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotal_ivaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoniva_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"iva_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotalFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"totalFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncon_monto_objeto_ivaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"con_monto_objeto_ivaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_retencionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_retencionFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_serieFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_serieFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_autorizacionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_autorizacionFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonfecha_validezFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_validezFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_fuente1FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente1FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_fuente1FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente1FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente1_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente1_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente1_baseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente1_baseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente1_retenidoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente1_retenidoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_fuente2FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente2FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_fuente2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente2FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente2_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente2_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente2_baseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente2_baseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente2_retenidoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente2_retenidoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_iva1FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva1FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_iva1FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva1FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_bien_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_bien_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_bien_baseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_bien_baseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_bien_retenidoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_bien_retenidoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_iva2FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva2FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_iva2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva2FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_servicio_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_servicio_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_servicio_baseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_servicio_baseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_servicio_retenidoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_servicio_retenidoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_numero_autorizacionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_numero_autorizacionFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_numeso_serieFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_numeso_serieFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_fecha_validezFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_fecha_validezFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_tributarioFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_tributarioFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_factura_inicioFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_factura_inicioFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_factura_finFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_factura_finFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fiscal_bienesFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_bienesFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fiscal_bienesFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_bienesFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_responsable_fondoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_responsable_fondoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_responsable_fondoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_responsable_fondoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonsecuencialFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"secuencialFacturaProveedorBusqueda"));
		//jButtonid_cuenta_contable_gastoFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_gastoFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoFacturaProveedor"));
		//jButtonid_cuenta_contable_gastoFacturaProveedorArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedorArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoFacturaProveedorArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtongasto_valorFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"gasto_valorFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gasto2FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gasto2FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gasto2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gasto2FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtongasto_valor2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"gasto_valor2FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtongasto_nombreFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"gasto_nombreFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtongasto_nombre2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"gasto_nombre2FacturaProveedorBusqueda"));
		//jButtonid_cuenta_contable_credito_finFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_credito_finFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_finFacturaProveedor"));
		//jButtonid_cuenta_contable_credito_finFacturaProveedorArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCreditoFin("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedorArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_finFacturaProveedorArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_finFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_finFacturaProveedorBusqueda"));
		//jButtonid_cuenta_contable_credito_fin2FacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_credito_fin2FacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedor.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fin2FacturaProveedor"));
		//jButtonid_cuenta_contable_credito_fin2FacturaProveedorArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCreditoFin2("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedorArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fin2FacturaProveedorArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fin2FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fin2FacturaProveedorBusqueda"));
		//jButtonid_cuenta_contable_creditoFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_creditoFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoFacturaProveedor"));
		//jButtonid_cuenta_contable_creditoFacturaProveedorArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedorArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoFacturaProveedorArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtondescripcionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descripcionFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_movimientoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_movimientoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_movimiento_moduloFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_movimiento_moduloFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_transaccion_moduloFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_transaccion_moduloFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_mayorFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_mayorFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncodigo_asientoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"codigo_asientoFacturaProveedorBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdClienteFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdClienteFacturaProveedor"));

			this.jButtonBuscarFK_IdClienteid_clienteFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedor"));

			this.jButtonFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCreditoFiscalBienesFacturaProveedor"));

			this.jButtonFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor"));

			this.jButtonFK_IdCuentaContableGasto2FacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableGasto2FacturaProveedor"));

			this.jButtonFK_IdEmpleadoFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoFacturaProveedor"));

			this.jButtonBuscarFK_IdEmpleadoid_empleadoFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedor"));

			this.jButtonFK_IdPlantillaFacturaFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdPlantillaFacturaFacturaProveedor"));

			this.jButtonBuscarFK_IdPlantillaFacturaid_plantilla_facturaFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_plantilla_facturaFacturaProveedor"));

			this.jButtonFK_IdResponsableFondoFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdResponsableFondoFacturaProveedor"));

			this.jButtonFK_IdTipoDocumentoFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTipoDocumentoFacturaProveedor"));

			this.jButtonFK_IdTipoMovimientoModuloFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTipoMovimientoModuloFacturaProveedor"));

			this.jButtonFK_IdTipoRetencionFuente1FacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionFuente1FacturaProveedor"));

			this.jButtonFK_IdTipoRetencionIva1FacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionIva1FacturaProveedor"));

			this.jButtonFK_IdTipoTransaccionModuloFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTipoTransaccionModuloFacturaProveedor"));

			this.jButtonFK_IdTipoTributarioFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTipoTributarioFacturaProveedor"));

			this.jButtonFK_IdTransaccionFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionFacturaProveedor"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoFacturaProveedor!=null) {
				this.jInternalFrameReporteDinamicoFacturaProveedor.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoFacturaProveedor"));
				this.jInternalFrameReporteDinamicoFacturaProveedor.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoFacturaProveedor"));
				this.jInternalFrameReporteDinamicoFacturaProveedor.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoFacturaProveedor"));
			}
			
			//this.jButtonCerrarReporteDinamicoFacturaProveedor.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoFacturaProveedor"));				
			//this.jButtonGenerarReporteDinamicoFacturaProveedor.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoFacturaProveedor"));
			//this.jButtonGenerarExcelReporteDinamicoFacturaProveedor.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoFacturaProveedor"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionFacturaProveedor!=null) {
				this.jInternalFrameImportacionFacturaProveedor.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionFacturaProveedor"));
				this.jInternalFrameImportacionFacturaProveedor.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionFacturaProveedor"));
				this.jInternalFrameImportacionFacturaProveedor.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionFacturaProveedor"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByFacturaProveedor.addActionListener (new ButtonActionListener(this,"AbrirOrderByFacturaProveedor"));
			
			this.jButtonAbrirOrderByToolBarFacturaProveedor.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarFacturaProveedor"));			
			
			if(this.jInternalFrameOrderByFacturaProveedor!=null) {
				this.jInternalFrameOrderByFacturaProveedor.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByFacturaProveedor"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaProveedor.jTabbedPaneRelacionesFacturaProveedor.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesFacturaProveedor"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameFacturaProveedor();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormFacturaProveedor.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormFacturaProveedor = (JInternalFrameBase)event.getSource();
	            	
	            FacturaProveedorBeanSwingJInternalFrame jInternalFrameParent=(FacturaProveedorBeanSwingJInternalFrame)jInternalFrameDetalleFormFacturaProveedor.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarFacturaProveedorActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosFacturaProveedor.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosFacturaProveedorListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosFacturaProveedor.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosFacturaProveedor.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaProveedorActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaProveedorActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaProveedorActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoFacturaProveedor";
		inputMap = this.jButtonNuevoFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoFacturaProveedorActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaProveedorActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaProveedorActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaProveedorActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesFacturaProveedor";
		inputMap = this.jButtonNuevoRelacionesFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoFacturaProveedorActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarFacturaProveedor";
		inputMap = this.jButtonModificarFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarFacturaProveedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarFacturaProveedor";
		inputMap = this.jButtonActualizarFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarFacturaProveedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarFacturaProveedor";
		inputMap = this.jButtonEliminarFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarFacturaProveedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarFacturaProveedor";
		inputMap = this.jButtonCancelarFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarFacturaProveedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarFacturaProveedor";
		inputMap = this.jButtonCerrarFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarFacturaProveedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonGuardarCambiosFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosFacturaProveedor";
		inputMap = this.jInternalFrameDetalleFormFacturaProveedor.jButtonGuardarCambiosFacturaProveedor.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonGuardarCambiosFacturaProveedor.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosFacturaProveedorActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosFacturaProveedor.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosFacturaProveedorItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesFacturaProveedor.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesFacturaProveedorActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarFacturaProveedor.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarFacturaProveedorActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralFacturaProveedor.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralFacturaProveedorActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonidFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"idFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empresaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_empresaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empresaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_sucursalFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_sucursalFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_ejercicioFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_ejercicioFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_periodoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_periodoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_periodoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_periodoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_anioFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_anioFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_anioFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_anioFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_mesFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_mesFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_mesFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_mesFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_moduloFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_moduloFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_moduloFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_moduloFacturaProveedorBusqueda"));
		//jButtonid_plantilla_facturaFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_plantilla_facturaFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_plantilla_facturaFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_plantilla_facturaFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_plantilla_facturaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_plantilla_facturaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_plantilla_facturaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_plantilla_facturaFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_documentoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_documentoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_documentoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_documentoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonplazoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"plazoFacturaProveedorBusqueda"));
		//jButtonid_facturaFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_facturaFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_facturaFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_facturaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_facturaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_facturaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_facturaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_facturaFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_transaccionFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_transaccionFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_transaccionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_transaccionFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonfecha_emisionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_emisionFacturaProveedorBusqueda"));
		//jButtonid_clienteFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_clienteFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_clienteFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_clienteFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonrucFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"rucFacturaProveedorBusqueda"));
		//jButtonid_empleado_solicitaFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleado_solicitaFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleado_solicitaFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleado_solicitaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleado_solicitaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empleado_solicitaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonfecha_venceFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_venceFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_monedaFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_monedaFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_monedaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_monedaFacturaProveedorBusqueda"));
		//jButtonid_empleadoFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_empleadoFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleadoFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedor"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleadoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleadoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncon_activosFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"con_activosFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncon_riseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"con_riseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncon_sitiosFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"con_sitiosFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtondetalleFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"detalleFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonvalor_bienes12FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"valor_bienes12FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonvalor_servicios12FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"valor_servicios12FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotal_valor12FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"total_valor12FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonvalor_bienes0FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"valor_bienes0FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonvalor_servicios0FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"valor_servicios0FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotal_valor0FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"total_valor0FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonbienes_iceFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"bienes_iceFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonservicios_iceFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"servicios_iceFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotal_iceFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"total_iceFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonbienes_ivaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"bienes_ivaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonservicios_ivaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"servicios_ivaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotal_ivaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoniva_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"iva_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtontotalFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"totalFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncon_monto_objeto_ivaFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"con_monto_objeto_ivaFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_retencionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_retencionFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_serieFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_serieFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_autorizacionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_autorizacionFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonfecha_validezFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"fecha_validezFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_fuente1FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente1FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_fuente1FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente1FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente1_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente1_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente1_baseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente1_baseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente1_retenidoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente1_retenidoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_fuente2FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente2FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_fuente2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_fuente2FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente2_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente2_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente2_baseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente2_baseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_fuente2_retenidoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_fuente2_retenidoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_iva1FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva1FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_iva1FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva1FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_bien_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_bien_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_bien_baseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_bien_baseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_bien_retenidoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_bien_retenidoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_iva2FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva2FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_retencion_iva2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_iva2FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_servicio_porcentajeFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_servicio_porcentajeFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_servicio_baseFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_servicio_baseFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonret_iva_servicio_retenidoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"ret_iva_servicio_retenidoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_numero_autorizacionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_numero_autorizacionFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_numeso_serieFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_numeso_serieFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_fecha_validezFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_fecha_validezFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_tributarioFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_tributarioFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_tributarioFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_factura_inicioFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_factura_inicioFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonanexo_factura_finFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"anexo_factura_finFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fiscal_bienesFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_bienesFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fiscal_bienesFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_bienesFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_responsable_fondoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_responsable_fondoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_responsable_fondoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_responsable_fondoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fiscal_serviciosFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fiscal_serviciosFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonsecuencialFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"secuencialFacturaProveedorBusqueda"));
		//jButtonid_cuenta_contable_gastoFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_gastoFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoFacturaProveedor"));
		//jButtonid_cuenta_contable_gastoFacturaProveedorArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableGasto("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedorArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoFacturaProveedorArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gastoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtongasto_valorFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"gasto_valorFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gasto2FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gasto2FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gasto2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_gasto2FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtongasto_valor2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"gasto_valor2FacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtongasto_nombreFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"gasto_nombreFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtongasto_nombre2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"gasto_nombre2FacturaProveedorBusqueda"));
		//jButtonid_cuenta_contable_credito_finFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_credito_finFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_finFacturaProveedor"));
		//jButtonid_cuenta_contable_credito_finFacturaProveedorArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCreditoFin("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedorArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_finFacturaProveedorArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_finFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_finFacturaProveedorBusqueda"));
		//jButtonid_cuenta_contable_credito_fin2FacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_credito_fin2FacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedor.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fin2FacturaProveedor"));
		//jButtonid_cuenta_contable_credito_fin2FacturaProveedorArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCreditoFin2("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedorArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fin2FacturaProveedorArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fin2FacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_credito_fin2FacturaProveedorBusqueda"));
		//jButtonid_cuenta_contable_creditoFacturaProveedor.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_cuenta_contable_creditoFacturaProveedorActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoFacturaProveedor"));
		//jButtonid_cuenta_contable_creditoFacturaProveedorArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeCuentaContableCredito("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedorArbol.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoFacturaProveedorArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_creditoFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtondescripcionFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"descripcionFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_movimientoFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_movimientoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimientoFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_movimiento_moduloFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_movimiento_moduloFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_movimiento_moduloFacturaProveedorBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_transaccion_moduloFacturaProveedorUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloFacturaProveedorUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_tipo_transaccion_moduloFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_transaccion_moduloFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtonnumero_mayorFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"numero_mayorFacturaProveedorBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaProveedor.jButtoncodigo_asientoFacturaProveedorBusqueda.addActionListener(new ButtonActionListener(this,"codigo_asientoFacturaProveedorBusqueda"));
		
		
		this.jButtonFK_IdClienteFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdClienteFacturaProveedor"));

		this.jButtonBuscarFK_IdClienteid_clienteFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_clienteFacturaProveedor"));

		this.jButtonFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCreditoFiscalBienesFacturaProveedor"));

		this.jButtonFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor"));

		this.jButtonFK_IdCuentaContableGasto2FacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableGasto2FacturaProveedor"));

		this.jButtonFK_IdEmpleadoFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoFacturaProveedor"));

		this.jButtonBuscarFK_IdEmpleadoid_empleadoFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_empleadoFacturaProveedor"));

		this.jButtonFK_IdPlantillaFacturaFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdPlantillaFacturaFacturaProveedor"));

		this.jButtonBuscarFK_IdPlantillaFacturaid_plantilla_facturaFacturaProveedor.addActionListener(new ButtonActionListener(this,"id_plantilla_facturaFacturaProveedor"));

		this.jButtonFK_IdResponsableFondoFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdResponsableFondoFacturaProveedor"));

		this.jButtonFK_IdTipoDocumentoFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTipoDocumentoFacturaProveedor"));

		this.jButtonFK_IdTipoMovimientoModuloFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTipoMovimientoModuloFacturaProveedor"));

		this.jButtonFK_IdTipoRetencionFuente1FacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionFuente1FacturaProveedor"));

		this.jButtonFK_IdTipoRetencionIva1FacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionIva1FacturaProveedor"));

		this.jButtonFK_IdTipoTransaccionModuloFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTipoTransaccionModuloFacturaProveedor"));

		this.jButtonFK_IdTipoTributarioFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTipoTributarioFacturaProveedor"));

		this.jButtonFK_IdTransaccionFacturaProveedor.addActionListener(new ButtonActionListener(this,"FK_IdTransaccionFacturaProveedor"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionFacturaProveedor.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionFacturaProveedorActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarFacturaProveedorActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarFacturaProveedor.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosFacturaProveedor(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(FacturaProveedor facturaproveedorAux:this.facturaproveedorLogic.getFacturaProveedors()) {
					facturaproveedorAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(FacturaProveedor facturaproveedorAux:facturaproveedors) {
					facturaproveedorAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosFacturaProveedorItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingFacturaProveedor(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(FacturaProveedor facturaproveedorAux:this.facturaproveedorLogic.getFacturaProveedors()) {
						facturaproveedorAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(FacturaProveedor facturaproveedorAux:facturaproveedors) {
						facturaproveedorAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(FacturaProveedor facturaproveedorAux:this.facturaproveedorLogic.getFacturaProveedors()) {
					
						if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS)) {
							existe=true;
							facturaproveedorAux.setcon_activos(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CONRISE)) {
							existe=true;
							facturaproveedorAux.setcon_rise(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CONSITIOS)) {
							existe=true;
							facturaproveedorAux.setcon_sitios(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA)) {
							existe=true;
							facturaproveedorAux.setcon_monto_objeto_iva(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(FacturaProveedor facturaproveedorAux:facturaproveedors) {
						
						if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS)) {
							existe=true;
							facturaproveedorAux.setcon_activos(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CONRISE)) {
							existe=true;
							facturaproveedorAux.setcon_rise(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CONSITIOS)) {
							existe=true;
							facturaproveedorAux.setcon_sitios(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA)) {
							existe=true;
							facturaproveedorAux.setcon_monto_objeto_iva(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaFacturaProveedor(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosFacturaProveedor.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosFacturaProveedor.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosFacturaProveedorItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingFacturaProveedor(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosFacturaProveedor.getSelectedRows();
			
			FacturaProveedor facturaproveedorLocal=new FacturaProveedor();
			
			//this.seleccionarTodosFacturaProveedor(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturaproveedorLocal =(FacturaProveedor) this.facturaproveedorLogic.getFacturaProveedors().toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					facturaproveedorLocal =(FacturaProveedor) this.facturaproveedors.toArray()[this.jTableDatosFacturaProveedor.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				facturaproveedorLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(FacturaProveedor facturaproveedorAux:this.facturaproveedorLogic.getFacturaProveedors()) {
						facturaproveedorAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(FacturaProveedor facturaproveedorAux:facturaproveedors) {
						facturaproveedorAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaFacturaProveedor(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosFacturaProveedor.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosFacturaProveedor.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosFacturaProveedor,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualFacturaProveedorItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarFacturaProveedorParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralFacturaProveedorActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingFacturaProveedor(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralFacturaProveedor.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(FacturaProveedor facturaproveedorAux:this.facturaproveedorLogic.getFacturaProveedors()) {
				
						if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_PLAZO)) {
							existe=true;
							facturaproveedorAux.setplazo(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA)) {
							existe=true;
							facturaproveedorAux.setnumero_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							facturaproveedorAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RUC)) {
							existe=true;
							facturaproveedorAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE)) {
							existe=true;
							facturaproveedorAux.setfecha_vence(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_DETALLE)) {
							existe=true;
							facturaproveedorAux.setdetalle(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12)) {
							existe=true;
							facturaproveedorAux.setvalor_bienes12(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12)) {
							existe=true;
							facturaproveedorAux.setvalor_servicios12(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12)) {
							existe=true;
							facturaproveedorAux.settotal_valor12(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0)) {
							existe=true;
							facturaproveedorAux.setvalor_bienes0(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0)) {
							existe=true;
							facturaproveedorAux.setvalor_servicios0(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0)) {
							existe=true;
							facturaproveedorAux.settotal_valor0(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_BIENESICE)) {
							existe=true;
							facturaproveedorAux.setbienes_ice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE)) {
							existe=true;
							facturaproveedorAux.setservicios_ice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_TOTALICE)) {
							existe=true;
							facturaproveedorAux.settotal_ice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_BIENESIVA)) {
							existe=true;
							facturaproveedorAux.setbienes_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA)) {
							existe=true;
							facturaproveedorAux.setservicios_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							facturaproveedorAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE)) {
							existe=true;
							facturaproveedorAux.setiva_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							facturaproveedorAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION)) {
							existe=true;
							facturaproveedorAux.setnumero_retencion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE)) {
							existe=true;
							facturaproveedorAux.setnumero_serie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION)) {
							existe=true;
							facturaproveedorAux.setnumero_autorizacion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ)) {
							existe=true;
							facturaproveedorAux.setfecha_validez(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE)) {
							existe=true;
							facturaproveedorAux.setret_fuente1_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE)) {
							existe=true;
							facturaproveedorAux.setret_fuente1_base(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO)) {
							existe=true;
							facturaproveedorAux.setret_fuente1_retenido(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE)) {
							existe=true;
							facturaproveedorAux.setret_fuente2_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE)) {
							existe=true;
							facturaproveedorAux.setret_fuente2_base(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO)) {
							existe=true;
							facturaproveedorAux.setret_fuente2_retenido(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE)) {
							existe=true;
							facturaproveedorAux.setret_iva_bien_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE)) {
							existe=true;
							facturaproveedorAux.setret_iva_bien_base(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO)) {
							existe=true;
							facturaproveedorAux.setret_iva_bien_retenido(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE)) {
							existe=true;
							facturaproveedorAux.setret_iva_servicio_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE)) {
							existe=true;
							facturaproveedorAux.setret_iva_servicio_base(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO)) {
							existe=true;
							facturaproveedorAux.setret_iva_servicio_retenido(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION)) {
							existe=true;
							facturaproveedorAux.setanexo_numero_autorizacion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE)) {
							existe=true;
							facturaproveedorAux.setanexo_numeso_serie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ)) {
							existe=true;
							facturaproveedorAux.setanexo_fecha_validez(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO)) {
							existe=true;
							facturaproveedorAux.setanexo_factura_inicio(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN)) {
							existe=true;
							facturaproveedorAux.setanexo_factura_fin(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL)) {
							existe=true;
							facturaproveedorAux.setsecuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR)) {
							existe=true;
							facturaproveedorAux.setgasto_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2)) {
							existe=true;
							facturaproveedorAux.setgasto_valor2(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE)) {
							existe=true;
							facturaproveedorAux.setgasto_nombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE2)) {
							existe=true;
							facturaproveedorAux.setgasto_nombre2(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							facturaproveedorAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMEROMAYOR)) {
							existe=true;
							facturaproveedorAux.setnumero_mayor(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CODIGOASIENTO)) {
							existe=true;
							facturaproveedorAux.setcodigo_asiento(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(FacturaProveedor facturaproveedorAux:facturaproveedors) {
					
						if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_PLAZO)) {
							existe=true;
							facturaproveedorAux.setplazo(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA)) {
							existe=true;
							facturaproveedorAux.setnumero_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION)) {
							existe=true;
							facturaproveedorAux.setfecha_emision(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RUC)) {
							existe=true;
							facturaproveedorAux.setruc(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE)) {
							existe=true;
							facturaproveedorAux.setfecha_vence(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_DETALLE)) {
							existe=true;
							facturaproveedorAux.setdetalle(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12)) {
							existe=true;
							facturaproveedorAux.setvalor_bienes12(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12)) {
							existe=true;
							facturaproveedorAux.setvalor_servicios12(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12)) {
							existe=true;
							facturaproveedorAux.settotal_valor12(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0)) {
							existe=true;
							facturaproveedorAux.setvalor_bienes0(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0)) {
							existe=true;
							facturaproveedorAux.setvalor_servicios0(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0)) {
							existe=true;
							facturaproveedorAux.settotal_valor0(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_BIENESICE)) {
							existe=true;
							facturaproveedorAux.setbienes_ice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE)) {
							existe=true;
							facturaproveedorAux.setservicios_ice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_TOTALICE)) {
							existe=true;
							facturaproveedorAux.settotal_ice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_BIENESIVA)) {
							existe=true;
							facturaproveedorAux.setbienes_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA)) {
							existe=true;
							facturaproveedorAux.setservicios_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							facturaproveedorAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE)) {
							existe=true;
							facturaproveedorAux.setiva_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							facturaproveedorAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION)) {
							existe=true;
							facturaproveedorAux.setnumero_retencion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE)) {
							existe=true;
							facturaproveedorAux.setnumero_serie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION)) {
							existe=true;
							facturaproveedorAux.setnumero_autorizacion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ)) {
							existe=true;
							facturaproveedorAux.setfecha_validez(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE)) {
							existe=true;
							facturaproveedorAux.setret_fuente1_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE)) {
							existe=true;
							facturaproveedorAux.setret_fuente1_base(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO)) {
							existe=true;
							facturaproveedorAux.setret_fuente1_retenido(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE)) {
							existe=true;
							facturaproveedorAux.setret_fuente2_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE)) {
							existe=true;
							facturaproveedorAux.setret_fuente2_base(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO)) {
							existe=true;
							facturaproveedorAux.setret_fuente2_retenido(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE)) {
							existe=true;
							facturaproveedorAux.setret_iva_bien_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE)) {
							existe=true;
							facturaproveedorAux.setret_iva_bien_base(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO)) {
							existe=true;
							facturaproveedorAux.setret_iva_bien_retenido(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE)) {
							existe=true;
							facturaproveedorAux.setret_iva_servicio_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE)) {
							existe=true;
							facturaproveedorAux.setret_iva_servicio_base(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO)) {
							existe=true;
							facturaproveedorAux.setret_iva_servicio_retenido(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION)) {
							existe=true;
							facturaproveedorAux.setanexo_numero_autorizacion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE)) {
							existe=true;
							facturaproveedorAux.setanexo_numeso_serie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ)) {
							existe=true;
							facturaproveedorAux.setanexo_fecha_validez(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO)) {
							existe=true;
							facturaproveedorAux.setanexo_factura_inicio(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN)) {
							existe=true;
							facturaproveedorAux.setanexo_factura_fin(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL)) {
							existe=true;
							facturaproveedorAux.setsecuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR)) {
							existe=true;
							facturaproveedorAux.setgasto_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2)) {
							existe=true;
							facturaproveedorAux.setgasto_valor2(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE)) {
							existe=true;
							facturaproveedorAux.setgasto_nombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE2)) {
							existe=true;
							facturaproveedorAux.setgasto_nombre2(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							facturaproveedorAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMEROMAYOR)) {
							existe=true;
							facturaproveedorAux.setnumero_mayor(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CODIGOASIENTO)) {
							existe=true;
							facturaproveedorAux.setcodigo_asiento(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaFacturaProveedor(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesFacturaProveedorActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingFacturaProveedor(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioFacturaProveedor=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesFacturaProveedor.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteFacturaProveedor) {				
					conSplash=true;//false;										
					
					//this.startProcessFacturaProveedor(conSplash);
				
					this.generarReporteFacturaProveedorsSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFacturaProveedor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoFacturaProveedorsSeleccionados();
				//this.jComboBoxTiposAccionesFacturaProveedor.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoFacturaProveedorsSeleccionados(false);
				//this.jComboBoxTiposAccionesFacturaProveedor.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoFacturaProveedorsSeleccionados(true);
				//this.jComboBoxTiposAccionesFacturaProveedor.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessFacturaProveedor();
				
				this.exportarFacturaProveedorsSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFacturaProveedor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionFacturaProveedors();
				//this.importarFacturaProveedors();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFacturaProveedor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessFacturaProveedor();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelFacturaProveedorsSeleccionados();
				//this.jComboBoxTiposAccionesFacturaProveedor.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Factura Proveedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessFacturaProveedor();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoFacturaProveedor)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyFacturaProveedor(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFacturaProveedor.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.setSelectedIndex(0);					
				}	
			} 			
			else if(FacturaProveedorBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteFacturaProveedor) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessFacturaProveedor(conSplash);
					
						//this.actualizarParametrosGeneralFacturaProveedor();
						
						this.generarReporteProcesoAccionFacturaProveedorsSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesFacturaProveedor.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(FacturaProveedorBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Factura ProveedorS SELECCIONADOS?", "MANTENIMIENTO DE Factura Proveedor", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessFacturaProveedor();
				
						this.actualizarParametrosGeneralFacturaProveedor();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.facturaproveedorReturnGeneral=facturaproveedorLogic.procesarAccionFacturaProveedorsWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.facturaproveedorLogic.getFacturaProveedors(),this.facturaproveedorParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarFacturaProveedorReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesFacturaProveedor.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralFacturaProveedor();
					
					FacturaProveedorBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarFacturaProveedorReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesFacturaProveedor.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxTiposAccionesFormularioFacturaProveedor.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessFacturaProveedor(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesFacturaProveedorActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessFacturaProveedor();
			
			if(this.jInternalFrameDetalleFormFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();		
			FacturaProveedor facturaproveedor=new FacturaProveedor();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingFacturaProveedor(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesFacturaProveedor.getSelectedItem();
			
			
			
			
			facturaproveedorsSeleccionados=this.getFacturaProveedorsSeleccionados(true);
			//this.sTipoAccion;
			
			if(facturaproveedorsSeleccionados.size()==1) {
				for(FacturaProveedor facturaproveedorAux:facturaproveedorsSeleccionados) {
					facturaproveedor=facturaproveedorAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Detalle Factura Proveedor")) {
					jButtonDetalleFacturaProveedorActionPerformed(null,rowIndex,true,false,facturaproveedor);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessFacturaProveedor();
			
      		//this.finishProcessFacturaProveedor(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarFacturaProveedorReturnGeneral() throws Exception {
		if(this.facturaproveedorReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.facturaproveedorReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.facturaproveedorReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.facturaproveedorReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.facturaproveedorReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.facturaproveedorReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingFacturaProveedor(false);
		}
		
		if(this.facturaproveedorReturnGeneral.getConRetornoLista() || this.facturaproveedorReturnGeneral.getConRetornoObjeto()) {
			if(this.facturaproveedorReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.facturaproveedorLogic.setFacturaProveedors(this.facturaproveedorReturnGeneral.getFacturaProveedors());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.facturaproveedorReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.facturaproveedorLogic.setFacturaProveedor(this.facturaproveedorReturnGeneral.getFacturaProveedor());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingFacturaProveedor(false);
		}
	}
	
	public void actualizarParametrosGeneralFacturaProveedor() throws Exception {
		
		
	}
	
	public ArrayList<FacturaProveedor> getFacturaProveedorsSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioFacturaProveedor) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(FacturaProveedor facturaproveedorAux:facturaproveedorLogic.getFacturaProveedors()) {
					if(facturaproveedorAux.getIsSelected()) {
						facturaproveedorsSeleccionados.add(facturaproveedorAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(FacturaProveedor facturaproveedorAux:this.facturaproveedors) {
					if(facturaproveedorAux.getIsSelected()) {
						facturaproveedorsSeleccionados.add(facturaproveedorAux);				
					}
				}
			}
			
			if(facturaproveedorsSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						facturaproveedorsSeleccionados.addAll(this.facturaproveedorLogic.getFacturaProveedors());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						facturaproveedorsSeleccionados.addAll(this.facturaproveedors);				
					}
				}
			}
		} else {
			facturaproveedorsSeleccionados.add(this.facturaproveedor);
		}
		
		return facturaproveedorsSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteFacturaProveedorsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalFacturaProveedorsSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoFacturaProveedorsSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoFacturaProveedorsSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoFacturaProveedorsSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesFacturaProveedorsSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Factura Proveedor",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesFacturaProveedorsSeleccionados() throws Exception {
		ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();		
		
		facturaproveedorsSeleccionados=this.getFacturaProveedorsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteFacturaProveedors("Todos",facturaproveedorsSeleccionados);
		
	}	
	
	public void generarReporteNormalFacturaProveedorsSeleccionados() throws Exception {
		ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();		
		
		facturaproveedorsSeleccionados=this.getFacturaProveedorsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteFacturaProveedors("Todos",facturaproveedorsSeleccionados);
	}		
	
	public void generarReporteProcesoAccionFacturaProveedorsSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();
		
		facturaproveedorsSeleccionados=this.getFacturaProveedorsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteFacturaProveedors("Todos",facturaproveedorsSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoFacturaProveedorsSeleccionados() throws Exception {
		ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();		
		
		
		this.abrirInicializarFrameReporteDinamicoFacturaProveedor();
		
		
		facturaproveedorsSeleccionados=this.getFacturaProveedorsSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoFacturaProveedor();
		
		
		//this.generarReporteFacturaProveedors("Todos",facturaproveedorsSeleccionados ,facturaproveedorImplementable,facturaproveedorImplementableHome);
	}
	
	public void mostrarImportacionFacturaProveedors() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionFacturaProveedor();
		
		this.abrirFrameImportacionFacturaProveedor();		
		
			
		//this.generarReporteFacturaProveedors("Todos",facturaproveedorsSeleccionados ,facturaproveedorImplementable,facturaproveedorImplementableHome);
	}
	
	public void importarFacturaProveedors() throws Exception {		
	
	}
	
	public void exportarFacturaProveedorsSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelFacturaProveedorsSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoFacturaProveedorsSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlFacturaProveedorsSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Factura Proveedor",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoFacturaProveedorsSeleccionados() throws Exception {
		ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();		
		
		facturaproveedorsSeleccionados=this.getFacturaProveedorsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedor."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarFacturaProveedor(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(FacturaProveedor facturaproveedorAux:facturaproveedorsSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarFacturaProveedor(facturaproveedorAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//facturaproveedorAux.setsDetalleGeneralEntityReporte(facturaproveedorAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarFacturaProveedor(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDPERIODO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_PLAZO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_RUC;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDMONEDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_CONRISE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_CONSITIOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_DETALLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_BIENESICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_TOTALICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_BIENESIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_TOTALIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_TOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN2;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_NUMEROMAYOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaProveedorConstantesFunciones.LABEL_CODIGOASIENTO;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarFacturaProveedor(FacturaProveedor facturaproveedor,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=facturaproveedor.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getperiodo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getplantillafactura_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettipodocumento_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getplazo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getfactura_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getnumero_factura();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettransaccion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getfecha_emision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getruc();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getempleadosolicita_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getfecha_vence().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getmoneda_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getempleado_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getcon_activos().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getcon_rise().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getcon_sitios().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getdetalle();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getvalor_bienes12().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getvalor_servicios12().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettotal_valor12().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getvalor_bienes0().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getvalor_servicios0().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettotal_valor0().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getbienes_ice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getservicios_ice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettotal_ice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getbienes_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getservicios_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettotal_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getiva_porcentaje().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettotal().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getcon_monto_objeto_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getnumero_retencion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getnumero_serie();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getnumero_autorizacion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getfecha_validez().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettiporetencionfuente1_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getret_fuente1_porcentaje().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getret_fuente1_base().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getret_fuente1_retenido().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettiporetencionfuente2_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getret_fuente2_porcentaje().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getret_fuente2_base().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getret_fuente2_retenido().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettiporetencioniva1_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getret_iva_bien_porcentaje().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getret_iva_bien_base().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getret_iva_bien_retenido().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettiporetencioniva2_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getret_iva_servicio_porcentaje().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getret_iva_servicio_base().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getret_iva_servicio_retenido().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getanexo_numero_autorizacion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getanexo_numeso_serie();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getanexo_fecha_validez().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettipotributario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getanexo_factura_inicio();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getanexo_factura_fin();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getcuentacontablecreditofiscalbienes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getresponsablefondo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getcuentacontablecreditofiscalservicios_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getsecuencial();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getcuentacontablegasto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getgasto_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getcuentacontablegasto2_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getgasto_valor2().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getgasto_nombre();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getgasto_nombre2();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getcuentacontablecreditofin_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getcuentacontablecreditofin2_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getcuentacontablecredito_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettipomovimiento_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettipomovimientomodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.gettipotransaccionmodulo_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getnumero_mayor();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturaproveedor.getcodigo_asiento();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelFacturaProveedorsSeleccionados() throws Exception {
		ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();		
		
		facturaproveedorsSeleccionados=this.getFacturaProveedorsSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedor.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("FacturaProveedors");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelFacturaProveedor(row);				
				iRow++;
			}				
			
			for(FacturaProveedor facturaproveedorAux:facturaproveedorsSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelFacturaProveedor(facturaproveedorAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlFacturaProveedorsSeleccionados() throws Exception {
		ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();		
		
		facturaproveedorsSeleccionados=this.getFacturaProveedorsSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturaproveedor.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("facturaproveedors");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("facturaproveedor");
			//elementRoot.appendChild(element);
		
			for(FacturaProveedor facturaproveedorAux:facturaproveedorsSeleccionados) {
				element = document.createElement("facturaproveedor");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlFacturaProveedor(facturaproveedorAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Proveedor",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelFacturaProveedor(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDPERIODO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_PLAZO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RUC);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDMONEDA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CONRISE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CONSITIOS);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_DETALLE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_VALORBIENES12);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS12);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR12);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_VALORBIENES0);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_VALORSERVICIOS0);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTALVALOR0);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_BIENESICE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_SERVICIOSICE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTALICE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_BIENESIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_SERVICIOSIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTALIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IVAPORCENTAJE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_TOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1PORCENTAJE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1BASE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE1RETENIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2PORCENTAJE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2BASE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETFUENTE2RETENIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENPORCENTAJE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENBASE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVABIENRETENIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOPORCENTAJE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIOBASE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_RETIVASERVICIORETENIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_GASTOVALOR2);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE2);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN2);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_NUMEROMAYOR);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaProveedorConstantesFunciones.LABEL_CODIGOASIENTO);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelFacturaProveedor(FacturaProveedor facturaproveedor,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getperiodo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getplantillafactura_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettipodocumento_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getplazo());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getfactura_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getnumero_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettransaccion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getfecha_emision());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getruc());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getempleadosolicita_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getfecha_vence());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getmoneda_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getempleado_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getcon_activos());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getcon_rise());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getcon_sitios());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getdetalle());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getvalor_bienes12());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getvalor_servicios12());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettotal_valor12());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getvalor_bienes0());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getvalor_servicios0());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettotal_valor0());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getbienes_ice());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getservicios_ice());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettotal_ice());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getbienes_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getservicios_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettotal_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getiva_porcentaje());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettotal());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getcon_monto_objeto_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getnumero_retencion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getnumero_serie());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getnumero_autorizacion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getfecha_validez());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettiporetencionfuente1_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getret_fuente1_porcentaje());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getret_fuente1_base());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getret_fuente1_retenido());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettiporetencionfuente2_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getret_fuente2_porcentaje());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getret_fuente2_base());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getret_fuente2_retenido());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettiporetencioniva1_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getret_iva_bien_porcentaje());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getret_iva_bien_base());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getret_iva_bien_retenido());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettiporetencioniva2_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getret_iva_servicio_porcentaje());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getret_iva_servicio_base());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getret_iva_servicio_retenido());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getanexo_numero_autorizacion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getanexo_numeso_serie());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getanexo_fecha_validez());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettipotributario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getanexo_factura_inicio());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getanexo_factura_fin());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getcuentacontablecreditofiscalbienes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getresponsablefondo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getcuentacontablecreditofiscalservicios_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getsecuencial());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getcuentacontablegasto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getgasto_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getcuentacontablegasto2_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getgasto_valor2());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getgasto_nombre());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getgasto_nombre2());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getcuentacontablecreditofin_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getcuentacontablecreditofin2_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getcuentacontablecredito_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettipomovimiento_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettipomovimientomodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.gettipotransaccionmodulo_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getnumero_mayor());
		cell = row.createCell(iColumn++);cell.setCellValue(facturaproveedor.getcodigo_asiento());				
	}
	
	public void setFilaDatosExportarXmlFacturaProveedor(FacturaProveedor facturaproveedor,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(FacturaProveedorConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(facturaproveedor.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(FacturaProveedorConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(facturaproveedor.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(facturaproveedor.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(facturaproveedor.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementejercicio_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(facturaproveedor.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementperiodo_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDPERIODO);
		elementperiodo_descripcion.appendChild(document.createTextNode(facturaproveedor.getperiodo_descripcion()));
		element.appendChild(elementperiodo_descripcion);

		Element elementanio_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(facturaproveedor.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(facturaproveedor.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementmodulo_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDMODULO);
		elementmodulo_descripcion.appendChild(document.createTextNode(facturaproveedor.getmodulo_descripcion()));
		element.appendChild(elementmodulo_descripcion);

		Element elementplantillafactura_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDPLANTILLAFACTURA);
		elementplantillafactura_descripcion.appendChild(document.createTextNode(facturaproveedor.getplantillafactura_descripcion()));
		element.appendChild(elementplantillafactura_descripcion);

		Element elementtipodocumento_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDTIPODOCUMENTO);
		elementtipodocumento_descripcion.appendChild(document.createTextNode(facturaproveedor.gettipodocumento_descripcion()));
		element.appendChild(elementtipodocumento_descripcion);

		Element elementplazo = document.createElement(FacturaProveedorConstantesFunciones.PLAZO);
		elementplazo.appendChild(document.createTextNode(facturaproveedor.getplazo().toString().trim()));
		element.appendChild(elementplazo);

		Element elementfactura_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDFACTURA);
		elementfactura_descripcion.appendChild(document.createTextNode(facturaproveedor.getfactura_descripcion()));
		element.appendChild(elementfactura_descripcion);

		Element elementnumero_factura = document.createElement(FacturaProveedorConstantesFunciones.NUMEROFACTURA);
		elementnumero_factura.appendChild(document.createTextNode(facturaproveedor.getnumero_factura().trim()));
		element.appendChild(elementnumero_factura);

		Element elementtransaccion_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDTRANSACCION);
		elementtransaccion_descripcion.appendChild(document.createTextNode(facturaproveedor.gettransaccion_descripcion()));
		element.appendChild(elementtransaccion_descripcion);

		Element elementfecha_emision = document.createElement(FacturaProveedorConstantesFunciones.FECHAEMISION);
		elementfecha_emision.appendChild(document.createTextNode(facturaproveedor.getfecha_emision().toString().trim()));
		element.appendChild(elementfecha_emision);

		Element elementcliente_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(facturaproveedor.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementruc = document.createElement(FacturaProveedorConstantesFunciones.RUC);
		elementruc.appendChild(document.createTextNode(facturaproveedor.getruc().trim()));
		element.appendChild(elementruc);

		Element elementempleadosolicita_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDEMPLEADOSOLICITA);
		elementempleadosolicita_descripcion.appendChild(document.createTextNode(facturaproveedor.getempleadosolicita_descripcion()));
		element.appendChild(elementempleadosolicita_descripcion);

		Element elementfecha_vence = document.createElement(FacturaProveedorConstantesFunciones.FECHAVENCE);
		elementfecha_vence.appendChild(document.createTextNode(facturaproveedor.getfecha_vence().toString().trim()));
		element.appendChild(elementfecha_vence);

		Element elementmoneda_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDMONEDA);
		elementmoneda_descripcion.appendChild(document.createTextNode(facturaproveedor.getmoneda_descripcion()));
		element.appendChild(elementmoneda_descripcion);

		Element elementempleado_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDEMPLEADO);
		elementempleado_descripcion.appendChild(document.createTextNode(facturaproveedor.getempleado_descripcion()));
		element.appendChild(elementempleado_descripcion);

		Element elementcon_activos = document.createElement(FacturaProveedorConstantesFunciones.CONACTIVOS);
		elementcon_activos.appendChild(document.createTextNode(facturaproveedor.getcon_activos().toString().trim()));
		element.appendChild(elementcon_activos);

		Element elementcon_rise = document.createElement(FacturaProveedorConstantesFunciones.CONRISE);
		elementcon_rise.appendChild(document.createTextNode(facturaproveedor.getcon_rise().toString().trim()));
		element.appendChild(elementcon_rise);

		Element elementcon_sitios = document.createElement(FacturaProveedorConstantesFunciones.CONSITIOS);
		elementcon_sitios.appendChild(document.createTextNode(facturaproveedor.getcon_sitios().toString().trim()));
		element.appendChild(elementcon_sitios);

		Element elementdetalle = document.createElement(FacturaProveedorConstantesFunciones.DETALLE);
		elementdetalle.appendChild(document.createTextNode(facturaproveedor.getdetalle().trim()));
		element.appendChild(elementdetalle);

		Element elementvalor_bienes12 = document.createElement(FacturaProveedorConstantesFunciones.VALORBIENES12);
		elementvalor_bienes12.appendChild(document.createTextNode(facturaproveedor.getvalor_bienes12().toString().trim()));
		element.appendChild(elementvalor_bienes12);

		Element elementvalor_servicios12 = document.createElement(FacturaProveedorConstantesFunciones.VALORSERVICIOS12);
		elementvalor_servicios12.appendChild(document.createTextNode(facturaproveedor.getvalor_servicios12().toString().trim()));
		element.appendChild(elementvalor_servicios12);

		Element elementtotal_valor12 = document.createElement(FacturaProveedorConstantesFunciones.TOTALVALOR12);
		elementtotal_valor12.appendChild(document.createTextNode(facturaproveedor.gettotal_valor12().toString().trim()));
		element.appendChild(elementtotal_valor12);

		Element elementvalor_bienes0 = document.createElement(FacturaProveedorConstantesFunciones.VALORBIENES0);
		elementvalor_bienes0.appendChild(document.createTextNode(facturaproveedor.getvalor_bienes0().toString().trim()));
		element.appendChild(elementvalor_bienes0);

		Element elementvalor_servicios0 = document.createElement(FacturaProveedorConstantesFunciones.VALORSERVICIOS0);
		elementvalor_servicios0.appendChild(document.createTextNode(facturaproveedor.getvalor_servicios0().toString().trim()));
		element.appendChild(elementvalor_servicios0);

		Element elementtotal_valor0 = document.createElement(FacturaProveedorConstantesFunciones.TOTALVALOR0);
		elementtotal_valor0.appendChild(document.createTextNode(facturaproveedor.gettotal_valor0().toString().trim()));
		element.appendChild(elementtotal_valor0);

		Element elementbienes_ice = document.createElement(FacturaProveedorConstantesFunciones.BIENESICE);
		elementbienes_ice.appendChild(document.createTextNode(facturaproveedor.getbienes_ice().toString().trim()));
		element.appendChild(elementbienes_ice);

		Element elementservicios_ice = document.createElement(FacturaProveedorConstantesFunciones.SERVICIOSICE);
		elementservicios_ice.appendChild(document.createTextNode(facturaproveedor.getservicios_ice().toString().trim()));
		element.appendChild(elementservicios_ice);

		Element elementtotal_ice = document.createElement(FacturaProveedorConstantesFunciones.TOTALICE);
		elementtotal_ice.appendChild(document.createTextNode(facturaproveedor.gettotal_ice().toString().trim()));
		element.appendChild(elementtotal_ice);

		Element elementbienes_iva = document.createElement(FacturaProveedorConstantesFunciones.BIENESIVA);
		elementbienes_iva.appendChild(document.createTextNode(facturaproveedor.getbienes_iva().toString().trim()));
		element.appendChild(elementbienes_iva);

		Element elementservicios_iva = document.createElement(FacturaProveedorConstantesFunciones.SERVICIOSIVA);
		elementservicios_iva.appendChild(document.createTextNode(facturaproveedor.getservicios_iva().toString().trim()));
		element.appendChild(elementservicios_iva);

		Element elementtotal_iva = document.createElement(FacturaProveedorConstantesFunciones.TOTALIVA);
		elementtotal_iva.appendChild(document.createTextNode(facturaproveedor.gettotal_iva().toString().trim()));
		element.appendChild(elementtotal_iva);

		Element elementiva_porcentaje = document.createElement(FacturaProveedorConstantesFunciones.IVAPORCENTAJE);
		elementiva_porcentaje.appendChild(document.createTextNode(facturaproveedor.getiva_porcentaje().toString().trim()));
		element.appendChild(elementiva_porcentaje);

		Element elementtotal = document.createElement(FacturaProveedorConstantesFunciones.TOTAL);
		elementtotal.appendChild(document.createTextNode(facturaproveedor.gettotal().toString().trim()));
		element.appendChild(elementtotal);

		Element elementcon_monto_objeto_iva = document.createElement(FacturaProveedorConstantesFunciones.CONMONTOOBJETOIVA);
		elementcon_monto_objeto_iva.appendChild(document.createTextNode(facturaproveedor.getcon_monto_objeto_iva().toString().trim()));
		element.appendChild(elementcon_monto_objeto_iva);

		Element elementnumero_retencion = document.createElement(FacturaProveedorConstantesFunciones.NUMERORETENCION);
		elementnumero_retencion.appendChild(document.createTextNode(facturaproveedor.getnumero_retencion().trim()));
		element.appendChild(elementnumero_retencion);

		Element elementnumero_serie = document.createElement(FacturaProveedorConstantesFunciones.NUMEROSERIE);
		elementnumero_serie.appendChild(document.createTextNode(facturaproveedor.getnumero_serie().trim()));
		element.appendChild(elementnumero_serie);

		Element elementnumero_autorizacion = document.createElement(FacturaProveedorConstantesFunciones.NUMEROAUTORIZACION);
		elementnumero_autorizacion.appendChild(document.createTextNode(facturaproveedor.getnumero_autorizacion().trim()));
		element.appendChild(elementnumero_autorizacion);

		Element elementfecha_validez = document.createElement(FacturaProveedorConstantesFunciones.FECHAVALIDEZ);
		elementfecha_validez.appendChild(document.createTextNode(facturaproveedor.getfecha_validez().toString().trim()));
		element.appendChild(elementfecha_validez);

		Element elementtiporetencionfuente1_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDTIPORETENCIONFUENTE1);
		elementtiporetencionfuente1_descripcion.appendChild(document.createTextNode(facturaproveedor.gettiporetencionfuente1_descripcion()));
		element.appendChild(elementtiporetencionfuente1_descripcion);

		Element elementret_fuente1_porcentaje = document.createElement(FacturaProveedorConstantesFunciones.RETFUENTE1PORCENTAJE);
		elementret_fuente1_porcentaje.appendChild(document.createTextNode(facturaproveedor.getret_fuente1_porcentaje().toString().trim()));
		element.appendChild(elementret_fuente1_porcentaje);

		Element elementret_fuente1_base = document.createElement(FacturaProveedorConstantesFunciones.RETFUENTE1BASE);
		elementret_fuente1_base.appendChild(document.createTextNode(facturaproveedor.getret_fuente1_base().toString().trim()));
		element.appendChild(elementret_fuente1_base);

		Element elementret_fuente1_retenido = document.createElement(FacturaProveedorConstantesFunciones.RETFUENTE1RETENIDO);
		elementret_fuente1_retenido.appendChild(document.createTextNode(facturaproveedor.getret_fuente1_retenido().toString().trim()));
		element.appendChild(elementret_fuente1_retenido);

		Element elementtiporetencionfuente2_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDTIPORETENCIONFUENTE2);
		elementtiporetencionfuente2_descripcion.appendChild(document.createTextNode(facturaproveedor.gettiporetencionfuente2_descripcion()));
		element.appendChild(elementtiporetencionfuente2_descripcion);

		Element elementret_fuente2_porcentaje = document.createElement(FacturaProveedorConstantesFunciones.RETFUENTE2PORCENTAJE);
		elementret_fuente2_porcentaje.appendChild(document.createTextNode(facturaproveedor.getret_fuente2_porcentaje().toString().trim()));
		element.appendChild(elementret_fuente2_porcentaje);

		Element elementret_fuente2_base = document.createElement(FacturaProveedorConstantesFunciones.RETFUENTE2BASE);
		elementret_fuente2_base.appendChild(document.createTextNode(facturaproveedor.getret_fuente2_base().toString().trim()));
		element.appendChild(elementret_fuente2_base);

		Element elementret_fuente2_retenido = document.createElement(FacturaProveedorConstantesFunciones.RETFUENTE2RETENIDO);
		elementret_fuente2_retenido.appendChild(document.createTextNode(facturaproveedor.getret_fuente2_retenido().toString().trim()));
		element.appendChild(elementret_fuente2_retenido);

		Element elementtiporetencioniva1_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDTIPORETENCIONIVA1);
		elementtiporetencioniva1_descripcion.appendChild(document.createTextNode(facturaproveedor.gettiporetencioniva1_descripcion()));
		element.appendChild(elementtiporetencioniva1_descripcion);

		Element elementret_iva_bien_porcentaje = document.createElement(FacturaProveedorConstantesFunciones.RETIVABIENPORCENTAJE);
		elementret_iva_bien_porcentaje.appendChild(document.createTextNode(facturaproveedor.getret_iva_bien_porcentaje().toString().trim()));
		element.appendChild(elementret_iva_bien_porcentaje);

		Element elementret_iva_bien_base = document.createElement(FacturaProveedorConstantesFunciones.RETIVABIENBASE);
		elementret_iva_bien_base.appendChild(document.createTextNode(facturaproveedor.getret_iva_bien_base().toString().trim()));
		element.appendChild(elementret_iva_bien_base);

		Element elementret_iva_bien_retenido = document.createElement(FacturaProveedorConstantesFunciones.RETIVABIENRETENIDO);
		elementret_iva_bien_retenido.appendChild(document.createTextNode(facturaproveedor.getret_iva_bien_retenido().toString().trim()));
		element.appendChild(elementret_iva_bien_retenido);

		Element elementtiporetencioniva2_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDTIPORETENCIONIVA2);
		elementtiporetencioniva2_descripcion.appendChild(document.createTextNode(facturaproveedor.gettiporetencioniva2_descripcion()));
		element.appendChild(elementtiporetencioniva2_descripcion);

		Element elementret_iva_servicio_porcentaje = document.createElement(FacturaProveedorConstantesFunciones.RETIVASERVICIOPORCENTAJE);
		elementret_iva_servicio_porcentaje.appendChild(document.createTextNode(facturaproveedor.getret_iva_servicio_porcentaje().toString().trim()));
		element.appendChild(elementret_iva_servicio_porcentaje);

		Element elementret_iva_servicio_base = document.createElement(FacturaProveedorConstantesFunciones.RETIVASERVICIOBASE);
		elementret_iva_servicio_base.appendChild(document.createTextNode(facturaproveedor.getret_iva_servicio_base().toString().trim()));
		element.appendChild(elementret_iva_servicio_base);

		Element elementret_iva_servicio_retenido = document.createElement(FacturaProveedorConstantesFunciones.RETIVASERVICIORETENIDO);
		elementret_iva_servicio_retenido.appendChild(document.createTextNode(facturaproveedor.getret_iva_servicio_retenido().toString().trim()));
		element.appendChild(elementret_iva_servicio_retenido);

		Element elementanexo_numero_autorizacion = document.createElement(FacturaProveedorConstantesFunciones.ANEXONUMEROAUTORIZACION);
		elementanexo_numero_autorizacion.appendChild(document.createTextNode(facturaproveedor.getanexo_numero_autorizacion().trim()));
		element.appendChild(elementanexo_numero_autorizacion);

		Element elementanexo_numeso_serie = document.createElement(FacturaProveedorConstantesFunciones.ANEXONUMESOSERIE);
		elementanexo_numeso_serie.appendChild(document.createTextNode(facturaproveedor.getanexo_numeso_serie().trim()));
		element.appendChild(elementanexo_numeso_serie);

		Element elementanexo_fecha_validez = document.createElement(FacturaProveedorConstantesFunciones.ANEXOFECHAVALIDEZ);
		elementanexo_fecha_validez.appendChild(document.createTextNode(facturaproveedor.getanexo_fecha_validez().toString().trim()));
		element.appendChild(elementanexo_fecha_validez);

		Element elementtipotributario_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDTIPOTRIBUTARIO);
		elementtipotributario_descripcion.appendChild(document.createTextNode(facturaproveedor.gettipotributario_descripcion()));
		element.appendChild(elementtipotributario_descripcion);

		Element elementanexo_factura_inicio = document.createElement(FacturaProveedorConstantesFunciones.ANEXOFACTURAINICIO);
		elementanexo_factura_inicio.appendChild(document.createTextNode(facturaproveedor.getanexo_factura_inicio().trim()));
		element.appendChild(elementanexo_factura_inicio);

		Element elementanexo_factura_fin = document.createElement(FacturaProveedorConstantesFunciones.ANEXOFACTURAFIN);
		elementanexo_factura_fin.appendChild(document.createTextNode(facturaproveedor.getanexo_factura_fin().trim()));
		element.appendChild(elementanexo_factura_fin);

		Element elementcuentacontablecreditofiscalbienes_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDCUENTACONTABLECREDITOFISCALBIENES);
		elementcuentacontablecreditofiscalbienes_descripcion.appendChild(document.createTextNode(facturaproveedor.getcuentacontablecreditofiscalbienes_descripcion()));
		element.appendChild(elementcuentacontablecreditofiscalbienes_descripcion);

		Element elementresponsablefondo_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDRESPONSABLEFONDO);
		elementresponsablefondo_descripcion.appendChild(document.createTextNode(facturaproveedor.getresponsablefondo_descripcion()));
		element.appendChild(elementresponsablefondo_descripcion);

		Element elementcuentacontablecreditofiscalservicios_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDCUENTACONTABLECREDITOFISCALSERVICIOS);
		elementcuentacontablecreditofiscalservicios_descripcion.appendChild(document.createTextNode(facturaproveedor.getcuentacontablecreditofiscalservicios_descripcion()));
		element.appendChild(elementcuentacontablecreditofiscalservicios_descripcion);

		Element elementsecuencial = document.createElement(FacturaProveedorConstantesFunciones.SECUENCIAL);
		elementsecuencial.appendChild(document.createTextNode(facturaproveedor.getsecuencial().trim()));
		element.appendChild(elementsecuencial);

		Element elementcuentacontablegasto_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDCUENTACONTABLEGASTO);
		elementcuentacontablegasto_descripcion.appendChild(document.createTextNode(facturaproveedor.getcuentacontablegasto_descripcion()));
		element.appendChild(elementcuentacontablegasto_descripcion);

		Element elementgasto_valor = document.createElement(FacturaProveedorConstantesFunciones.GASTOVALOR);
		elementgasto_valor.appendChild(document.createTextNode(facturaproveedor.getgasto_valor().toString().trim()));
		element.appendChild(elementgasto_valor);

		Element elementcuentacontablegasto2_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDCUENTACONTABLEGASTO2);
		elementcuentacontablegasto2_descripcion.appendChild(document.createTextNode(facturaproveedor.getcuentacontablegasto2_descripcion()));
		element.appendChild(elementcuentacontablegasto2_descripcion);

		Element elementgasto_valor2 = document.createElement(FacturaProveedorConstantesFunciones.GASTOVALOR2);
		elementgasto_valor2.appendChild(document.createTextNode(facturaproveedor.getgasto_valor2().toString().trim()));
		element.appendChild(elementgasto_valor2);

		Element elementgasto_nombre = document.createElement(FacturaProveedorConstantesFunciones.GASTONOMBRE);
		elementgasto_nombre.appendChild(document.createTextNode(facturaproveedor.getgasto_nombre().trim()));
		element.appendChild(elementgasto_nombre);

		Element elementgasto_nombre2 = document.createElement(FacturaProveedorConstantesFunciones.GASTONOMBRE2);
		elementgasto_nombre2.appendChild(document.createTextNode(facturaproveedor.getgasto_nombre2().trim()));
		element.appendChild(elementgasto_nombre2);

		Element elementcuentacontablecreditofin_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDCUENTACONTABLECREDITOFIN);
		elementcuentacontablecreditofin_descripcion.appendChild(document.createTextNode(facturaproveedor.getcuentacontablecreditofin_descripcion()));
		element.appendChild(elementcuentacontablecreditofin_descripcion);

		Element elementcuentacontablecreditofin2_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDCUENTACONTABLECREDITOFIN2);
		elementcuentacontablecreditofin2_descripcion.appendChild(document.createTextNode(facturaproveedor.getcuentacontablecreditofin2_descripcion()));
		element.appendChild(elementcuentacontablecreditofin2_descripcion);

		Element elementcuentacontablecredito_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDCUENTACONTABLECREDITO);
		elementcuentacontablecredito_descripcion.appendChild(document.createTextNode(facturaproveedor.getcuentacontablecredito_descripcion()));
		element.appendChild(elementcuentacontablecredito_descripcion);

		Element elementdescripcion = document.createElement(FacturaProveedorConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(facturaproveedor.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementtipomovimiento_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDTIPOMOVIMIENTO);
		elementtipomovimiento_descripcion.appendChild(document.createTextNode(facturaproveedor.gettipomovimiento_descripcion()));
		element.appendChild(elementtipomovimiento_descripcion);

		Element elementtipomovimientomodulo_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDTIPOMOVIMIENTOMODULO);
		elementtipomovimientomodulo_descripcion.appendChild(document.createTextNode(facturaproveedor.gettipomovimientomodulo_descripcion()));
		element.appendChild(elementtipomovimientomodulo_descripcion);

		Element elementtipotransaccionmodulo_descripcion = document.createElement(FacturaProveedorConstantesFunciones.IDTIPOTRANSACCIONMODULO);
		elementtipotransaccionmodulo_descripcion.appendChild(document.createTextNode(facturaproveedor.gettipotransaccionmodulo_descripcion()));
		element.appendChild(elementtipotransaccionmodulo_descripcion);

		Element elementnumero_mayor = document.createElement(FacturaProveedorConstantesFunciones.NUMEROMAYOR);
		elementnumero_mayor.appendChild(document.createTextNode(facturaproveedor.getnumero_mayor().trim()));
		element.appendChild(elementnumero_mayor);

		Element elementcodigo_asiento = document.createElement(FacturaProveedorConstantesFunciones.CODIGOASIENTO);
		elementcodigo_asiento.appendChild(document.createTextNode(facturaproveedor.getcodigo_asiento().trim()));
		element.appendChild(elementcodigo_asiento);
	}
	
	public void generarReporteGroupGenericoFacturaProveedorsSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<FacturaProveedor> facturaproveedorsSeleccionados=new ArrayList<FacturaProveedor>();
		
		facturaproveedorsSeleccionados=this.getFacturaProveedorsSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoFacturaProveedor(facturaproveedorsSeleccionados);
		
		this.generarReporteFacturaProveedors("Todos",facturaproveedorsSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoFacturaProveedor(ArrayList<FacturaProveedor> facturaproveedorsSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(FacturaProveedor facturaproveedorAux:facturaproveedorsSeleccionados) {
				facturaproveedorAux.setsDetalleGeneralEntityReporte(facturaproveedorAux.toString());
			
				if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDPERIODO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getperiodo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDMODULO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDPLANTILLAFACTURA)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getplantillafactura_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDTIPODOCUMENTO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.gettipodocumento_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_PLAZO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getplazo().toString());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDFACTURA)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getfactura_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMEROFACTURA)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getnumero_factura());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDTRANSACCION)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.gettransaccion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_FECHAEMISION)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaproveedorAux.getfecha_emision()));
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_RUC)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getruc());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADOSOLICITA)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getempleadosolicita_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_FECHAVENCE)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaproveedorAux.getfecha_vence()));
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDMONEDA)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getmoneda_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDEMPLEADO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getempleado_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CONACTIVOS)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(facturaproveedorAux.getcon_activos()));
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CONRISE)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(facturaproveedorAux.getcon_rise()));
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CONSITIOS)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(facturaproveedorAux.getcon_sitios()));
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_DETALLE)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getdetalle());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CONMONTOOBJETOIVA)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(facturaproveedorAux.getcon_monto_objeto_iva()));
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMERORETENCION)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getnumero_retencion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMEROSERIE)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getnumero_serie());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMEROAUTORIZACION)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getnumero_autorizacion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_FECHAVALIDEZ)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaproveedorAux.getfecha_validez()));
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE1)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.gettiporetencionfuente1_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONFUENTE2)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.gettiporetencionfuente2_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA1)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.gettiporetencioniva1_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDTIPORETENCIONIVA2)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.gettiporetencioniva2_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMEROAUTORIZACION)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getanexo_numero_autorizacion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXONUMESOSERIE)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getanexo_numeso_serie());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXOFECHAVALIDEZ)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturaproveedorAux.getanexo_fecha_validez()));
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRIBUTARIO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.gettipotributario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAINICIO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getanexo_factura_inicio());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_ANEXOFACTURAFIN)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getanexo_factura_fin());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALBIENES)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getcuentacontablecreditofiscalbienes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDRESPONSABLEFONDO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getresponsablefondo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFISCALSERVICIOS)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getcuentacontablecreditofiscalservicios_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_SECUENCIAL)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getsecuencial());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getcuentacontablegasto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLEGASTO2)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getcuentacontablegasto2_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getgasto_nombre());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_GASTONOMBRE2)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getgasto_nombre2());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getcuentacontablecreditofin_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITOFIN2)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getcuentacontablecreditofin2_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDCUENTACONTABLECREDITO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getcuentacontablecredito_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.gettipomovimiento_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDTIPOMOVIMIENTOMODULO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.gettipomovimientomodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_IDTIPOTRANSACCIONMODULO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.gettipotransaccionmodulo_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_NUMEROMAYOR)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getnumero_mayor());
				}
				 else if(sTipoSeleccionar.equals(FacturaProveedorConstantesFunciones.LABEL_CODIGOASIENTO)) {
					existe=true;
					facturaproveedorAux.setsDescripcionGeneralEntityReporte1(facturaproveedorAux.getcodigo_asiento());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaProveedorConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesFacturaProveedor(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoFacturaProveedor=true;
				this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=true;
				this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=true;
			}
			
			this.isVisibilidadCeldaModificarFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarFacturaProveedor=false;
			this.isVisibilidadCeldaEliminarFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarFacturaProveedor=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedor=true;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedor=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoFacturaProveedor=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=false;
			this.isVisibilidadCeldaModificarFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarFacturaProveedor=true;
			this.isVisibilidadCeldaEliminarFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarFacturaProveedor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedor=true;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedor=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoFacturaProveedor=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=false;
			this.isVisibilidadCeldaModificarFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarFacturaProveedor=true;
			this.isVisibilidadCeldaEliminarFacturaProveedor=true;
			this.isVisibilidadCeldaCancelarFacturaProveedor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedor=true;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedor=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoFacturaProveedor=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=false;
			this.isVisibilidadCeldaModificarFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarFacturaProveedor=true;
			this.isVisibilidadCeldaEliminarFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarFacturaProveedor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedor=false;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedor=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoFacturaProveedor=true;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=true;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=true;
			this.isVisibilidadCeldaModificarFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarFacturaProveedor=false;
			this.isVisibilidadCeldaEliminarFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarFacturaProveedor=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedor=true;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedor=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoFacturaProveedor=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=false;
			this.isVisibilidadCeldaActualizarFacturaProveedor=false;
			this.isVisibilidadCeldaEliminarFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarFacturaProveedor=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedor=false;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedor=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoFacturaProveedor=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=false;
			this.isVisibilidadCeldaModificarFacturaProveedor=true;
			this.isVisibilidadCeldaActualizarFacturaProveedor=false;
			this.isVisibilidadCeldaEliminarFacturaProveedor=false;
			this.isVisibilidadCeldaCancelarFacturaProveedor=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaProveedor=false;
				} else {
					this.isVisibilidadCeldaGuardarFacturaProveedor=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(FacturaProveedorJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoFacturaProveedor=true;
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=true;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=true;
		} else {
			this.actualizarEstadoPanelsFacturaProveedor(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarFacturaProveedor=false;
			//this.isVisibilidadCeldaVerFormFacturaProveedor=false;
			this.isVisibilidadCeldaDuplicarFacturaProveedor=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!facturaproveedorSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=false;
		} else {
			this.isVisibilidadCeldaNuevoFacturaProveedor=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(facturaproveedorSessionBean.getEsGuardarRelacionado()) {
			if(!facturaproveedorSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=false;												
			}
			
			this.jButtonCerrarFacturaProveedor.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesFacturaProveedor=false;
		}
		
		if(!this.permiteMantenimiento(this.facturaproveedor)) {
			this.isVisibilidadCeldaActualizarFacturaProveedor=false;
			this.isVisibilidadCeldaEliminarFacturaProveedor=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesFacturaProveedor() {
		this.isVisibilidadCeldaNuevoFacturaProveedor=false;
		this.isVisibilidadCeldaGuardarCambiosFacturaProveedor=false;
	}
	
	public void actualizarEstadoPanelsFacturaProveedor(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedor.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasFacturaProveedor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFacturaProveedor!=null) {
				this.jScrollPanelDatosFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelPaginacionFacturaProveedor!=null) {
				this.jPanelPaginacionFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedor!=null) {
				this.jPanelParametrosReportesFacturaProveedor.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedor.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasFacturaProveedor.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosFacturaProveedor!=null) {
				this.jScrollPanelDatosFacturaProveedor.setVisible(false);
			}
			
			if(this.jPanelPaginacionFacturaProveedor!=null) {
				this.jPanelPaginacionFacturaProveedor.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedor!=null) {
				this.jPanelParametrosReportesFacturaProveedor.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedor.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasFacturaProveedor.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosFacturaProveedor!=null) {
				this.jScrollPanelDatosFacturaProveedor.setVisible(false);
			}
			
			if(this.jPanelPaginacionFacturaProveedor!=null) {
				this.jPanelPaginacionFacturaProveedor.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedor!=null) {
				this.jPanelParametrosReportesFacturaProveedor.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedor.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasFacturaProveedor.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosFacturaProveedor!=null) {
				this.jScrollPanelDatosFacturaProveedor.setVisible(false);
			}
			
			if(this.jPanelPaginacionFacturaProveedor!=null) {
				this.jPanelPaginacionFacturaProveedor.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedor!=null) {
				this.jPanelParametrosReportesFacturaProveedor.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedor.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasFacturaProveedor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFacturaProveedor!=null) {
				this.jScrollPanelDatosFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelPaginacionFacturaProveedor!=null) {
				this.jPanelPaginacionFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedor!=null) {
				this.jPanelParametrosReportesFacturaProveedor.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedor.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasFacturaProveedor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFacturaProveedor!=null) {
				this.jScrollPanelDatosFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelPaginacionFacturaProveedor!=null) {
				this.jPanelPaginacionFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedor!=null) {
				this.jPanelParametrosReportesFacturaProveedor.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionFacturaProveedor!=null) {
				this.jScrollPanelDatosEdicionFacturaProveedor.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasFacturaProveedor.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFacturaProveedor!=null) {
				this.jScrollPanelDatosFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelPaginacionFacturaProveedor!=null) {
				this.jPanelPaginacionFacturaProveedor.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFacturaProveedor!=null) {
				this.jPanelParametrosReportesFacturaProveedor.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasFacturaProveedor!=null) {
					this.jTabbedPaneBusquedasFacturaProveedor.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesFacturaProveedor!=null) {
				this.jPanelParametrosReportesFacturaProveedor.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.facturaproveedorSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaProveedor!=null) {
				this.jTabbedPaneBusquedasFacturaProveedor.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesFacturaProveedor!=null) {
				this.jPanelParametrosReportesFacturaProveedor.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdCliente=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaPeriodo(Boolean isParaPeriodo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPeriodoNegation=!isParaPeriodo;

			this.isVisibilidadFK_IdCliente=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaPeriodoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdCliente=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdCliente=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaMesNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaMesNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaMesNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaModulo(Boolean isParaModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaModuloNegation=!isParaModulo;

			this.isVisibilidadFK_IdCliente=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaModuloNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaPlantillaFactura(Boolean isParaPlantillaFactura){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPlantillaFacturaNegation=!isParaPlantillaFactura;

			this.isVisibilidadFK_IdCliente=isParaPlantillaFacturaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaPlantillaFacturaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaPlantillaFacturaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaPlantillaFacturaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaPlantillaFacturaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaPlantillaFactura;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaPlantillaFacturaNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaPlantillaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaPlantillaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaPlantillaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaPlantillaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaPlantillaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaPlantillaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaPlantillaFacturaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoDocumento(Boolean isParaTipoDocumento){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoDocumentoNegation=!isParaTipoDocumento;

			this.isVisibilidadFK_IdCliente=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoDocumento;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoDocumentoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaFactura(Boolean isParaFactura){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFacturaNegation=!isParaFactura;

			this.isVisibilidadFK_IdCliente=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaFacturaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaTransaccion(Boolean isParaTransaccion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTransaccionNegation=!isParaTransaccion;

			this.isVisibilidadFK_IdCliente=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaTransaccionNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaTransaccion;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpleadoSolicita(Boolean isParaEmpleadoSolicita){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoSolicitaNegation=!isParaEmpleadoSolicita;

			this.isVisibilidadFK_IdCliente=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaEmpleadoSolicitaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaMoneda(Boolean isParaMoneda){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMonedaNegation=!isParaMoneda;

			this.isVisibilidadFK_IdCliente=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaMonedaNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpleado(Boolean isParaEmpleado){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoNegation=!isParaEmpleado;

			this.isVisibilidadFK_IdCliente=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpleado;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoRetencionFuente1(Boolean isParaTipoRetencionFuente1){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionFuente1Negation=!isParaTipoRetencionFuente1;

			this.isVisibilidadFK_IdCliente=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoRetencionFuente1;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoRetencionFuente1Negation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoRetencionFuente2(Boolean isParaTipoRetencionFuente2){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionFuente2Negation=!isParaTipoRetencionFuente2;

			this.isVisibilidadFK_IdCliente=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoRetencionFuente2Negation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoRetencionIva1(Boolean isParaTipoRetencionIva1){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionIva1Negation=!isParaTipoRetencionIva1;

			this.isVisibilidadFK_IdCliente=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoRetencionIva1;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoRetencionIva1Negation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoRetencionIva2(Boolean isParaTipoRetencionIva2){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionIva2Negation=!isParaTipoRetencionIva2;

			this.isVisibilidadFK_IdCliente=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoRetencionIva2Negation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoTributario(Boolean isParaTipoTributario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoTributarioNegation=!isParaTipoTributario;

			this.isVisibilidadFK_IdCliente=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoTributario;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoTributarioNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCreditoFiscalBienes(Boolean isParaCuentaContableCreditoFiscalBienes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCreditoFiscalBienesNegation=!isParaCuentaContableCreditoFiscalBienes;

			this.isVisibilidadFK_IdCliente=isParaCuentaContableCreditoFiscalBienesNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaCuentaContableCreditoFiscalBienes;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaCuentaContableCreditoFiscalBienesNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaCuentaContableCreditoFiscalBienesNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableCreditoFiscalBienesNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaCuentaContableCreditoFiscalBienesNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaCuentaContableCreditoFiscalBienesNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaCuentaContableCreditoFiscalBienesNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaCuentaContableCreditoFiscalBienesNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaCuentaContableCreditoFiscalBienesNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaCuentaContableCreditoFiscalBienesNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaCuentaContableCreditoFiscalBienesNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaCuentaContableCreditoFiscalBienesNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaCuentaContableCreditoFiscalBienesNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaResponsableFondo(Boolean isParaResponsableFondo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaResponsableFondoNegation=!isParaResponsableFondo;

			this.isVisibilidadFK_IdCliente=isParaResponsableFondoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaResponsableFondoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaResponsableFondoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaResponsableFondoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaResponsableFondoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaResponsableFondoNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaResponsableFondo;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaResponsableFondoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaResponsableFondoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaResponsableFondoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaResponsableFondoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaResponsableFondoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaResponsableFondoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaResponsableFondoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCreditoFiscalServicios(Boolean isParaCuentaContableCreditoFiscalServicios){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCreditoFiscalServiciosNegation=!isParaCuentaContableCreditoFiscalServicios;

			this.isVisibilidadFK_IdCliente=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaCuentaContableCreditoFiscalServicios;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaCuentaContableCreditoFiscalServiciosNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableGasto(Boolean isParaCuentaContableGasto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableGastoNegation=!isParaCuentaContableGasto;

			this.isVisibilidadFK_IdCliente=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaCuentaContableGastoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableGasto2(Boolean isParaCuentaContableGasto2){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableGasto2Negation=!isParaCuentaContableGasto2;

			this.isVisibilidadFK_IdCliente=isParaCuentaContableGasto2Negation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaCuentaContableGasto2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaCuentaContableGasto2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaCuentaContableGasto2;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableGasto2Negation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaCuentaContableGasto2Negation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaCuentaContableGasto2Negation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaCuentaContableGasto2Negation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaCuentaContableGasto2Negation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaCuentaContableGasto2Negation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaCuentaContableGasto2Negation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaCuentaContableGasto2Negation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaCuentaContableGasto2Negation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaCuentaContableGasto2Negation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCreditoFin(Boolean isParaCuentaContableCreditoFin){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCreditoFinNegation=!isParaCuentaContableCreditoFin;

			this.isVisibilidadFK_IdCliente=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaCuentaContableCreditoFinNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCreditoFin2(Boolean isParaCuentaContableCreditoFin2){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCreditoFin2Negation=!isParaCuentaContableCreditoFin2;

			this.isVisibilidadFK_IdCliente=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaCuentaContableCreditoFin2Negation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableCredito(Boolean isParaCuentaContableCredito){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableCreditoNegation=!isParaCuentaContableCredito;

			this.isVisibilidadFK_IdCliente=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaCuentaContableCreditoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoMovimiento(Boolean isParaTipoMovimiento){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoMovimientoNegation=!isParaTipoMovimiento;

			this.isVisibilidadFK_IdCliente=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoMovimientoNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoMovimientoModulo(Boolean isParaTipoMovimientoModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoMovimientoModuloNegation=!isParaTipoMovimientoModulo;

			this.isVisibilidadFK_IdCliente=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoMovimientoModulo;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoMovimientoModuloNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoTransaccionModulo(Boolean isParaTipoTransaccionModulo){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoTransaccionModuloNegation=!isParaTipoTransaccionModulo;

			this.isVisibilidadFK_IdCliente=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdClienteFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalBienes) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContableCreditoFiscalServicios) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);}

			this.isVisibilidadFK_IdCuentaContableGasto2=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdCuentaContableGasto2) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdCuentaContableGasto2FacturaProveedor);}

			this.isVisibilidadFK_IdEmpleado=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdEmpleadoFacturaProveedor);}

			this.isVisibilidadFK_IdPlantillaFactura=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdPlantillaFactura) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdPlantillaFacturaFacturaProveedor);}

			this.isVisibilidadFK_IdResponsableFondo=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdResponsableFondo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdResponsableFondoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoDocumento=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoDocumento) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoDocumentoFacturaProveedor);}

			this.isVisibilidadFK_IdTipoMovimientoModulo=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoMovimientoModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoMovimientoModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionFuente1=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionFuente1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionFuente1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoRetencionIva1=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva1) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoRetencionIva1FacturaProveedor);}

			this.isVisibilidadFK_IdTipoTransaccionModulo=isParaTipoTransaccionModulo;
			if(!this.isVisibilidadFK_IdTipoTransaccionModulo) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTransaccionModuloFacturaProveedor);}

			this.isVisibilidadFK_IdTipoTributario=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTipoTributario) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTipoTributarioFacturaProveedor);}

			this.isVisibilidadFK_IdTransaccion=isParaTipoTransaccionModuloNegation;
			if(!this.isVisibilidadFK_IdTransaccion) {this.jTabbedPaneBusquedasFacturaProveedor.remove(jPanelFK_IdTransaccionFacturaProveedor);}
		}
		
	}
	
	

	public String registrarSesionFacturaProveedorParaDetalleFacturaProveedores() throws Exception {
		Boolean isPaginaPopupDetalleFacturaProveedor=false;

		try {

			if(this.facturaproveedorSessionBean==null) {
				this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorSessionBean==null) {
				this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorSessionBean=new DetalleFacturaProveedorSessionBean();
			}

			this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorSessionBean.setsPathNavegacionActual(facturaproveedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetalleFacturaProveedorConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetalleFacturaProveedor=this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetalleFacturaProveedor(true);
			this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetalleFacturaProveedor(FacturaProveedorConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedor(true);
			this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorSessionBean.setlidFacturaProveedorActual(this.idFacturaProveedorActual);
			this.jInternalFrameDetalleFormFacturaProveedor.detallefacturaproveedorSessionBean.setNoMantenimiento(true);

			facturaproveedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedor(true);
			facturaproveedorSessionBean.setlIdFacturaProveedorActualForeignKey(this.idFacturaProveedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionFacturaProveedorParaBusquedaPlantillaFacturas() throws Exception {
		Boolean isPaginaPopupPlantillaFactura=false;

		try {

			if(facturaproveedorSessionBean==null) {
				facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(plantillafacturaSessionBean==null) {
				plantillafacturaSessionBean=new PlantillaFacturaSessionBean();
			}

			plantillafacturaSessionBean.setsPathNavegacionActual(facturaproveedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+PlantillaFacturaConstantesFunciones.SCLASSWEBTITULO);
			plantillafacturaSessionBean.setisPermiteRecargarInformacion(false);
			plantillafacturaSessionBean.setisPaginaPopup(true);
			isPaginaPopupPlantillaFactura=plantillafacturaSessionBean.getisPaginaPopup();
			plantillafacturaSessionBean.setisPaginaPopup(false);
			plantillafacturaSessionBean.setEstaModoBusqueda(true);
			plantillafacturaSessionBean.setsFuncionBusquedaRapida("window.opener.facturaproveedorFuncionGeneral.setCombosCodigoDesdeBusquedaid_plantilla_factura(TO_REPLACE);");
			plantillafacturaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdePlantillaFactura(true);
			plantillafacturaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdePlantillaFactura(FacturaProveedorConstantesFunciones.SNOMBREOPCION);
			//plantillafacturaSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedor(true);
			//plantillafacturaSessionBean.setlidFacturaProveedorActual(this.idFacturaProveedorActual);

			facturaproveedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedor(true);
			facturaproveedorSessionBean.setlIdFacturaProveedorActualForeignKey(this.idFacturaProveedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaProveedorParaBusquedaFacturas() throws Exception {
		Boolean isPaginaPopupFactura=false;

		try {

			if(facturaproveedorSessionBean==null) {
				facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(facturaSessionBean==null) {
				facturaSessionBean=new FacturaSessionBean();
			}

			facturaSessionBean.setsPathNavegacionActual(facturaproveedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+FacturaConstantesFunciones.SCLASSWEBTITULO);
			facturaSessionBean.setisPermiteRecargarInformacion(false);
			facturaSessionBean.setisPaginaPopup(true);
			isPaginaPopupFactura=facturaSessionBean.getisPaginaPopup();
			facturaSessionBean.setisPaginaPopup(false);
			facturaSessionBean.setEstaModoBusqueda(true);
			facturaSessionBean.setsFuncionBusquedaRapida("window.opener.facturaproveedorFuncionGeneral.setCombosCodigoDesdeBusquedaid_factura(TO_REPLACE);");
			facturaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeFactura(true);
			facturaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeFactura(FacturaProveedorConstantesFunciones.SNOMBREOPCION);
			//facturaSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedor(true);
			//facturaSessionBean.setlidFacturaProveedorActual(this.idFacturaProveedorActual);

			facturaproveedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedor(true);
			facturaproveedorSessionBean.setlIdFacturaProveedorActualForeignKey(this.idFacturaProveedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaProveedorParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(facturaproveedorSessionBean==null) {
				facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(facturaproveedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.facturaproveedorFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(FacturaProveedorConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedor(true);
			//clienteSessionBean.setlidFacturaProveedorActual(this.idFacturaProveedorActual);

			facturaproveedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedor(true);
			facturaproveedorSessionBean.setlIdFacturaProveedorActualForeignKey(this.idFacturaProveedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaProveedorParaBusquedaEmpleadoSolicitas() throws Exception {
		Boolean isPaginaPopupEmpleado=false;

		try {

			if(facturaproveedorSessionBean==null) {
				facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(empleadosolicitaSessionBean==null) {
				empleadosolicitaSessionBean=new EmpleadoSessionBean();
			}

			empleadosolicitaSessionBean.setsPathNavegacionActual(facturaproveedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+EmpleadoConstantesFunciones.SCLASSWEBTITULO);
			empleadosolicitaSessionBean.setisPermiteRecargarInformacion(false);
			empleadosolicitaSessionBean.setisPaginaPopup(true);
			isPaginaPopupEmpleado=empleadosolicitaSessionBean.getisPaginaPopup();
			empleadosolicitaSessionBean.setisPaginaPopup(false);
			empleadosolicitaSessionBean.setEstaModoBusqueda(true);
			empleadosolicitaSessionBean.setsFuncionBusquedaRapida("window.opener.facturaproveedorFuncionGeneral.setCombosCodigoDesdeBusquedaid_empleado_solicita(TO_REPLACE);");
			empleadosolicitaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeEmpleado(true);
			empleadosolicitaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeEmpleado(FacturaProveedorConstantesFunciones.SNOMBREOPCION);
			//empleadoSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedor(true);
			//empleadoSessionBean.setlidFacturaProveedorActual(this.idFacturaProveedorActual);

			facturaproveedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedor(true);
			facturaproveedorSessionBean.setlIdFacturaProveedorActualForeignKey(this.idFacturaProveedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaProveedorParaBusquedaEmpleados() throws Exception {
		Boolean isPaginaPopupEmpleado=false;

		try {

			if(facturaproveedorSessionBean==null) {
				facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(empleadoSessionBean==null) {
				empleadoSessionBean=new EmpleadoSessionBean();
			}

			empleadoSessionBean.setsPathNavegacionActual(facturaproveedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+EmpleadoConstantesFunciones.SCLASSWEBTITULO);
			empleadoSessionBean.setisPermiteRecargarInformacion(false);
			empleadoSessionBean.setisPaginaPopup(true);
			isPaginaPopupEmpleado=empleadoSessionBean.getisPaginaPopup();
			empleadoSessionBean.setisPaginaPopup(false);
			empleadoSessionBean.setEstaModoBusqueda(true);
			empleadoSessionBean.setsFuncionBusquedaRapida("window.opener.facturaproveedorFuncionGeneral.setCombosCodigoDesdeBusquedaid_empleado(TO_REPLACE);");
			empleadoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeEmpleado(true);
			empleadoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeEmpleado(FacturaProveedorConstantesFunciones.SNOMBREOPCION);
			//empleadoSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedor(true);
			//empleadoSessionBean.setlidFacturaProveedorActual(this.idFacturaProveedorActual);

			facturaproveedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedor(true);
			facturaproveedorSessionBean.setlIdFacturaProveedorActualForeignKey(this.idFacturaProveedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaProveedorParaBusquedaCuentaContableGastos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(facturaproveedorSessionBean==null) {
				facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(cuentacontablegastoSessionBean==null) {
				cuentacontablegastoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablegastoSessionBean.setsPathNavegacionActual(facturaproveedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablegastoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablegastoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablegastoSessionBean.getisPaginaPopup();
			cuentacontablegastoSessionBean.setisPaginaPopup(false);
			cuentacontablegastoSessionBean.setEstaModoBusqueda(true);
			cuentacontablegastoSessionBean.setsFuncionBusquedaRapida("window.opener.facturaproveedorFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_gasto(TO_REPLACE);");
			cuentacontablegastoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablegastoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(FacturaProveedorConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedor(true);
			//cuentacontableSessionBean.setlidFacturaProveedorActual(this.idFacturaProveedorActual);

			facturaproveedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedor(true);
			facturaproveedorSessionBean.setlIdFacturaProveedorActualForeignKey(this.idFacturaProveedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaProveedorParaBusquedaCuentaContableCreditoFins() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(facturaproveedorSessionBean==null) {
				facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(cuentacontablecreditofinSessionBean==null) {
				cuentacontablecreditofinSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecreditofinSessionBean.setsPathNavegacionActual(facturaproveedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecreditofinSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecreditofinSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecreditofinSessionBean.getisPaginaPopup();
			cuentacontablecreditofinSessionBean.setisPaginaPopup(false);
			cuentacontablecreditofinSessionBean.setEstaModoBusqueda(true);
			cuentacontablecreditofinSessionBean.setsFuncionBusquedaRapida("window.opener.facturaproveedorFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito_fin(TO_REPLACE);");
			cuentacontablecreditofinSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecreditofinSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(FacturaProveedorConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedor(true);
			//cuentacontableSessionBean.setlidFacturaProveedorActual(this.idFacturaProveedorActual);

			facturaproveedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedor(true);
			facturaproveedorSessionBean.setlIdFacturaProveedorActualForeignKey(this.idFacturaProveedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaProveedorParaBusquedaCuentaContableCreditoFin2s() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(facturaproveedorSessionBean==null) {
				facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(cuentacontablecreditofin2SessionBean==null) {
				cuentacontablecreditofin2SessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecreditofin2SessionBean.setsPathNavegacionActual(facturaproveedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecreditofin2SessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecreditofin2SessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecreditofin2SessionBean.getisPaginaPopup();
			cuentacontablecreditofin2SessionBean.setisPaginaPopup(false);
			cuentacontablecreditofin2SessionBean.setEstaModoBusqueda(true);
			cuentacontablecreditofin2SessionBean.setsFuncionBusquedaRapida("window.opener.facturaproveedorFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito_fin2(TO_REPLACE);");
			cuentacontablecreditofin2SessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecreditofin2SessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(FacturaProveedorConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedor(true);
			//cuentacontableSessionBean.setlidFacturaProveedorActual(this.idFacturaProveedorActual);

			facturaproveedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedor(true);
			facturaproveedorSessionBean.setlIdFacturaProveedorActualForeignKey(this.idFacturaProveedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaProveedorParaBusquedaCuentaContableCreditos() throws Exception {
		Boolean isPaginaPopupCuentaContable=false;

		try {

			if(facturaproveedorSessionBean==null) {
				facturaproveedorSessionBean=new FacturaProveedorSessionBean();
			}

			if(cuentacontablecreditoSessionBean==null) {
				cuentacontablecreditoSessionBean=new CuentaContableSessionBean();
			}

			cuentacontablecreditoSessionBean.setsPathNavegacionActual(facturaproveedorSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CuentaContableConstantesFunciones.SCLASSWEBTITULO);
			cuentacontablecreditoSessionBean.setisPermiteRecargarInformacion(false);
			cuentacontablecreditoSessionBean.setisPaginaPopup(true);
			isPaginaPopupCuentaContable=cuentacontablecreditoSessionBean.getisPaginaPopup();
			cuentacontablecreditoSessionBean.setisPaginaPopup(false);
			cuentacontablecreditoSessionBean.setEstaModoBusqueda(true);
			cuentacontablecreditoSessionBean.setsFuncionBusquedaRapida("window.opener.facturaproveedorFuncionGeneral.setCombosCodigoDesdeBusquedaid_cuenta_contable_credito(TO_REPLACE);");
			cuentacontablecreditoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCuentaContable(true);
			cuentacontablecreditoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCuentaContable(FacturaProveedorConstantesFunciones.SNOMBREOPCION);
			//cuentacontableSessionBean.setisBusquedaDesdeForeignKeySesionFacturaProveedor(true);
			//cuentacontableSessionBean.setlidFacturaProveedorActual(this.idFacturaProveedorActual);

			facturaproveedorSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaProveedor(true);
			facturaproveedorSessionBean.setlIdFacturaProveedorActualForeignKey(this.idFacturaProveedorActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//FacturaProveedorSessionBean facturaproveedorSessionBean=new FacturaProveedorSessionBean();
		
		if(this.facturaproveedorSessionBean==null) {
			this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
		}
		
		this.facturaproveedorSessionBean.setsUltimaBusquedaFacturaProveedor(this.getsAccionBusqueda());
		this.facturaproveedorSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.facturaproveedorSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			facturaproveedorSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCreditoFiscalBienes")) {
			facturaproveedorSessionBean.setid_cuenta_contable_credito_fiscal_bienes(this.getid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCreditoFiscalServicios")) {
			facturaproveedorSessionBean.setid_cuenta_contable_credito_fiscal_servicios(this.getid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableGasto2")) {
			facturaproveedorSessionBean.setid_cuenta_contable_gasto2(this.getid_cuenta_contable_gasto2FK_IdCuentaContableGasto2());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			facturaproveedorSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
			facturaproveedorSessionBean.setid_empleado(this.getid_empleadoFK_IdEmpleado());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			facturaproveedorSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
			facturaproveedorSessionBean.setid_modulo(this.getid_moduloFK_IdModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
			facturaproveedorSessionBean.setid_periodo(this.getid_periodoFK_IdPeriodo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPlantillaFactura")) {
			facturaproveedorSessionBean.setid_plantilla_factura(this.getid_plantilla_facturaFK_IdPlantillaFactura());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdResponsableFondo")) {
			facturaproveedorSessionBean.setid_responsable_fondo(this.getid_responsable_fondoFK_IdResponsableFondo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			facturaproveedorSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoDocumento")) {
			facturaproveedorSessionBean.setid_tipo_documento(this.getid_tipo_documentoFK_IdTipoDocumento());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoMovimientoModulo")) {
			facturaproveedorSessionBean.setid_tipo_movimiento_modulo(this.getid_tipo_movimiento_moduloFK_IdTipoMovimientoModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionFuente1")) {
			facturaproveedorSessionBean.setid_tipo_retencion_fuente1(this.getid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionIva1")) {
			facturaproveedorSessionBean.setid_tipo_retencion_iva1(this.getid_tipo_retencion_iva1FK_IdTipoRetencionIva1());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoTransaccionModulo")) {
			facturaproveedorSessionBean.setid_tipo_transaccion_modulo(this.getid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoTributario")) {
			facturaproveedorSessionBean.setid_tipo_tributario(this.getid_tipo_tributarioFK_IdTipoTributario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTransaccion")) {
			facturaproveedorSessionBean.setid_transaccion(this.getid_transaccionFK_IdTransaccion());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//FacturaProveedorSessionBean facturaproveedorSessionBean=new FacturaProveedorSessionBean();
		
		if(this.facturaproveedorSessionBean==null) {
			this.facturaproveedorSessionBean=new FacturaProveedorSessionBean();
		}
		
		if(this.facturaproveedorSessionBean.getsUltimaBusquedaFacturaProveedor()!=null&&!this.facturaproveedorSessionBean.getsUltimaBusquedaFacturaProveedor().equals("")) {
			this.setsAccionBusqueda(facturaproveedorSessionBean.getsUltimaBusquedaFacturaProveedor());
			this.setiNumeroPaginacion(facturaproveedorSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(facturaproveedorSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(facturaproveedorSessionBean.getid_cliente());
				facturaproveedorSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCreditoFiscalBienes")) {
				this.setid_cuenta_contable_credito_fiscal_bienesFK_IdCuentaContableCreditoFiscalBienes(facturaproveedorSessionBean.getid_cuenta_contable_credito_fiscal_bienes());
				facturaproveedorSessionBean.setid_cuenta_contable_credito_fiscal_bienes(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableCreditoFiscalServicios")) {
				this.setid_cuenta_contable_credito_fiscal_serviciosFK_IdCuentaContableCreditoFiscalServicios(facturaproveedorSessionBean.getid_cuenta_contable_credito_fiscal_servicios());
				facturaproveedorSessionBean.setid_cuenta_contable_credito_fiscal_servicios(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableGasto2")) {
				this.setid_cuenta_contable_gasto2FK_IdCuentaContableGasto2(facturaproveedorSessionBean.getid_cuenta_contable_gasto2());
				facturaproveedorSessionBean.setid_cuenta_contable_gasto2(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(facturaproveedorSessionBean.getid_ejercicio());
				facturaproveedorSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
				this.setid_empleadoFK_IdEmpleado(facturaproveedorSessionBean.getid_empleado());
				facturaproveedorSessionBean.setid_empleado(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(facturaproveedorSessionBean.getid_empresa());
				facturaproveedorSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdModulo")) {
				this.setid_moduloFK_IdModulo(facturaproveedorSessionBean.getid_modulo());
				facturaproveedorSessionBean.setid_modulo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPeriodo")) {
				this.setid_periodoFK_IdPeriodo(facturaproveedorSessionBean.getid_periodo());
				facturaproveedorSessionBean.setid_periodo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPlantillaFactura")) {
				this.setid_plantilla_facturaFK_IdPlantillaFactura(facturaproveedorSessionBean.getid_plantilla_factura());
				facturaproveedorSessionBean.setid_plantilla_factura(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdResponsableFondo")) {
				this.setid_responsable_fondoFK_IdResponsableFondo(facturaproveedorSessionBean.getid_responsable_fondo());
				facturaproveedorSessionBean.setid_responsable_fondo(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(facturaproveedorSessionBean.getid_sucursal());
				facturaproveedorSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoDocumento")) {
				this.setid_tipo_documentoFK_IdTipoDocumento(facturaproveedorSessionBean.getid_tipo_documento());
				facturaproveedorSessionBean.setid_tipo_documento(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoMovimientoModulo")) {
				this.setid_tipo_movimiento_moduloFK_IdTipoMovimientoModulo(facturaproveedorSessionBean.getid_tipo_movimiento_modulo());
				facturaproveedorSessionBean.setid_tipo_movimiento_modulo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionFuente1")) {
				this.setid_tipo_retencion_fuente1FK_IdTipoRetencionFuente1(facturaproveedorSessionBean.getid_tipo_retencion_fuente1());
				facturaproveedorSessionBean.setid_tipo_retencion_fuente1(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionIva1")) {
				this.setid_tipo_retencion_iva1FK_IdTipoRetencionIva1(facturaproveedorSessionBean.getid_tipo_retencion_iva1());
				facturaproveedorSessionBean.setid_tipo_retencion_iva1(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoTransaccionModulo")) {
				this.setid_tipo_transaccion_moduloFK_IdTipoTransaccionModulo(facturaproveedorSessionBean.getid_tipo_transaccion_modulo());
				facturaproveedorSessionBean.setid_tipo_transaccion_modulo(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoTributario")) {
				this.setid_tipo_tributarioFK_IdTipoTributario(facturaproveedorSessionBean.getid_tipo_tributario());
				facturaproveedorSessionBean.setid_tipo_tributario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTransaccion")) {
				this.setid_transaccionFK_IdTransaccion(facturaproveedorSessionBean.getid_transaccion());
				facturaproveedorSessionBean.setid_transaccion(-1L);
			}
		}
		
		this.facturaproveedorSessionBean.setsUltimaBusquedaFacturaProveedor("");
		this.facturaproveedorSessionBean.setiNumeroPaginacion(FacturaProveedorConstantesFunciones.INUMEROPAGINACION);
		this.facturaproveedorSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaFacturaProveedor(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioFacturaProveedor() {
		this.updateBorderResaltarBusquedasFormularioFacturaProveedor();
		this.updateVisibilidadBusquedasFormularioFacturaProveedor();
		this.updateHabilitarBusquedasFormularioFacturaProveedor();
	}
	
	public void updateBorderResaltarBusquedasFormularioFacturaProveedor() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasFacturaProveedor.getComponents().length>0) {
	

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdClienteFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdClienteFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdClienteFacturaProveedor);
			}
		}

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);
			}
		}

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);
			}
		}

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdCuentaContableGasto2FacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableGasto2FacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdCuentaContableGasto2FacturaProveedor);
			}
		}

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdEmpleadoFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdEmpleadoFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdEmpleadoFacturaProveedor);
			}
		}

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdPlantillaFacturaFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdPlantillaFacturaFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdPlantillaFacturaFacturaProveedor);
			}
		}

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdResponsableFondoFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdResponsableFondoFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdResponsableFondoFacturaProveedor);
			}
		}

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoDocumentoFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoDocumentoFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoDocumentoFacturaProveedor);
			}
		}

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoMovimientoModuloFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoMovimientoModuloFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoMovimientoModuloFacturaProveedor);
			}
		}

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoRetencionFuente1FacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoRetencionFuente1FacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoRetencionFuente1FacturaProveedor);
			}
		}

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoRetencionIva1FacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoRetencionIva1FacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoRetencionIva1FacturaProveedor);
			}
		}

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoTransaccionModuloFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoTransaccionModuloFacturaProveedor);
			}
		}

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoTributarioFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoTributarioFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoTributarioFacturaProveedor);
			}
		}

		if(this.facturaproveedorConstantesFunciones.resaltarFK_IdTransaccionFacturaProveedor!=null) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTransaccionFacturaProveedor);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTransaccionFacturaProveedor);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioFacturaProveedor() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasFacturaProveedor.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdClienteFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdClienteFacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdClienteFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableGasto2FacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdCuentaContableGasto2FacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdCuentaContableGasto2FacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdEmpleadoFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdEmpleadoFacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdEmpleadoFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdPlantillaFacturaFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdPlantillaFacturaFacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdPlantillaFacturaFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdResponsableFondoFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdResponsableFondoFacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdResponsableFondoFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoDocumentoFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdTipoDocumentoFacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdTipoDocumentoFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoMovimientoModuloFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdTipoMovimientoModuloFacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdTipoMovimientoModuloFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoRetencionFuente1FacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdTipoRetencionFuente1FacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdTipoRetencionFuente1FacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoRetencionIva1FacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdTipoRetencionIva1FacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdTipoRetencionIva1FacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdTipoTransaccionModuloFacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdTipoTransaccionModuloFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoTributarioFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdTipoTributarioFacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdTipoTributarioFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTransaccionFacturaProveedor);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturaproveedorConstantesFunciones.mostrarFK_IdTransaccionFacturaProveedor);
			if(!this.facturaproveedorConstantesFunciones.mostrarFK_IdTransaccionFacturaProveedor && index>-1) {
				this.jTabbedPaneBusquedasFacturaProveedor.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioFacturaProveedor() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasFacturaProveedor.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdClienteFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdClienteFacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdClienteFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableGasto2FacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdCuentaContableGasto2FacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdCuentaContableGasto2FacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdEmpleadoFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdEmpleadoFacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdEmpleadoFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdPlantillaFacturaFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdPlantillaFacturaFacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdPlantillaFacturaFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdResponsableFondoFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdResponsableFondoFacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdResponsableFondoFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoDocumentoFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdTipoDocumentoFacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdTipoDocumentoFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoMovimientoModuloFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdTipoMovimientoModuloFacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdTipoMovimientoModuloFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoRetencionFuente1FacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdTipoRetencionFuente1FacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdTipoRetencionFuente1FacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoRetencionIva1FacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdTipoRetencionIva1FacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdTipoRetencionIva1FacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdTipoTransaccionModuloFacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdTipoTransaccionModuloFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoTributarioFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdTipoTributarioFacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdTipoTributarioFacturaProveedor);
			}

			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTransaccionFacturaProveedor);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturaproveedorConstantesFunciones.activarFK_IdTransaccionFacturaProveedor);
				this.jTabbedPaneBusquedasFacturaProveedor.setEnabledAt(index,this.facturaproveedorConstantesFunciones.activarFK_IdTransaccionFacturaProveedor);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaFacturaProveedor(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdClienteFacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdClienteFacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdClienteFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableCreditoFiscalBienes")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdCuentaContableCreditoFiscalBienesFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableCreditoFiscalServicios")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdCuentaContableCreditoFiscalServiciosFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableGasto2")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdCuentaContableGasto2FacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdCuentaContableGasto2FacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdCuentaContableGasto2FacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEmpleado")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdEmpleadoFacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdEmpleadoFacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdEmpleadoFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdPlantillaFactura")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdPlantillaFacturaFacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdPlantillaFacturaFacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdPlantillaFacturaFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdResponsableFondo")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdResponsableFondoFacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdResponsableFondoFacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdResponsableFondoFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoDocumento")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoDocumentoFacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdTipoDocumentoFacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoDocumentoFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoMovimientoModulo")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoMovimientoModuloFacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdTipoMovimientoModuloFacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoMovimientoModuloFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoRetencionFuente1")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoRetencionFuente1FacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdTipoRetencionFuente1FacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoRetencionFuente1FacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoRetencionIva1")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoRetencionIva1FacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdTipoRetencionIva1FacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoRetencionIva1FacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoTransaccionModulo")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoTransaccionModuloFacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdTipoTransaccionModuloFacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoTransaccionModuloFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoTributario")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTipoTributarioFacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdTipoTributarioFacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTipoTributarioFacturaProveedor);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTransaccion")) {
			index= this.jTabbedPaneBusquedasFacturaProveedor.indexOfComponent(this.jPanelFK_IdTransaccionFacturaProveedor);

			this.jTabbedPaneBusquedasFacturaProveedor.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaProveedor.getComponent(index);

			this.facturaproveedorConstantesFunciones.setResaltarFK_IdTransaccionFacturaProveedor(resaltar);

			jPanel.setBorder(this.facturaproveedorConstantesFunciones.resaltarFK_IdTransaccionFacturaProveedor);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarFacturaProveedor.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioFacturaProveedor() throws Exception {

		if(this.jInternalFrameDetalleFormFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioFacturaProveedor();
		this.updateVisibilidadResaltarControlesFormularioFacturaProveedor();
		this.updateHabilitarResaltarControlesFormularioFacturaProveedor();
		
	}
	
	public void updateBorderResaltarControlesFormularioFacturaProveedor() throws Exception {
		if(this.jInternalFrameDetalleFormFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.facturaproveedorConstantesFunciones.resaltaridFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jLabelidFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltaridFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_empresaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_empresaFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_sucursalFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_sucursalFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_ejercicioFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_ejercicioFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_periodoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_periodoFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_anioFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_anioFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_mesFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_mesFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_moduloFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_moduloFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_plantilla_facturaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_plantilla_facturaFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_tipo_documentoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_tipo_documentoFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarplazoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldplazoFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarplazoFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_facturaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_facturaFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarnumero_facturaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_facturaFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarnumero_facturaFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_transaccionFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_transaccionFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarfecha_emisionFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_emisionFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarfecha_emisionFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_clienteFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_clienteFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarrucFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldrucFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarrucFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_empleado_solicitaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_empleado_solicitaFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarfecha_venceFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_venceFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarfecha_venceFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_monedaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_monedaFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_empleadoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_empleadoFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarcon_activosFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_activosFacturaProveedor.setBorderPainted(true);this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_activosFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarcon_activosFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarcon_riseFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_riseFacturaProveedor.setBorderPainted(true);this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_riseFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarcon_riseFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarcon_sitiosFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_sitiosFacturaProveedor.setBorderPainted(true);this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_sitiosFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarcon_sitiosFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltardetalleFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextAreadetalleFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltardetalleFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarvalor_bienes12FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes12FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarvalor_bienes12FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarvalor_servicios12FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios12FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarvalor_servicios12FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltartotal_valor12FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor12FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltartotal_valor12FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarvalor_bienes0FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes0FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarvalor_bienes0FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarvalor_servicios0FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios0FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarvalor_servicios0FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltartotal_valor0FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor0FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltartotal_valor0FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarbienes_iceFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_iceFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarbienes_iceFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarservicios_iceFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_iceFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarservicios_iceFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltartotal_iceFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_iceFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltartotal_iceFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarbienes_ivaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_ivaFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarbienes_ivaFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarservicios_ivaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_ivaFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarservicios_ivaFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltartotal_ivaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_ivaFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltartotal_ivaFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltariva_porcentajeFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldiva_porcentajeFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltariva_porcentajeFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltartotalFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotalFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltartotalFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarcon_monto_objeto_ivaFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_monto_objeto_ivaFacturaProveedor.setBorderPainted(true);this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_monto_objeto_ivaFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarcon_monto_objeto_ivaFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarnumero_retencionFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_retencionFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarnumero_retencionFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarnumero_serieFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_serieFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarnumero_serieFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarnumero_autorizacionFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_autorizacionFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarnumero_autorizacionFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarfecha_validezFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_validezFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarfecha_validezFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_fuente1FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_fuente1FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarret_fuente1_porcentajeFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_porcentajeFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarret_fuente1_porcentajeFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarret_fuente1_baseFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_baseFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarret_fuente1_baseFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarret_fuente1_retenidoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_retenidoFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarret_fuente1_retenidoFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_fuente2FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_fuente2FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarret_fuente2_porcentajeFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_porcentajeFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarret_fuente2_porcentajeFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarret_fuente2_baseFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_baseFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarret_fuente2_baseFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarret_fuente2_retenidoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_retenidoFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarret_fuente2_retenidoFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_iva1FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_iva1FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarret_iva_bien_porcentajeFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_porcentajeFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarret_iva_bien_porcentajeFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarret_iva_bien_baseFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_baseFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarret_iva_bien_baseFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarret_iva_bien_retenidoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_retenidoFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarret_iva_bien_retenidoFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_iva2FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_tipo_retencion_iva2FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarret_iva_servicio_porcentajeFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_porcentajeFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarret_iva_servicio_porcentajeFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarret_iva_servicio_baseFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_baseFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarret_iva_servicio_baseFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarret_iva_servicio_retenidoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_retenidoFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarret_iva_servicio_retenidoFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltaranexo_numero_autorizacionFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numero_autorizacionFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltaranexo_numero_autorizacionFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltaranexo_numeso_serieFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numeso_serieFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltaranexo_numeso_serieFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltaranexo_fecha_validezFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jDateChooseranexo_fecha_validezFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltaranexo_fecha_validezFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_tipo_tributarioFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_tipo_tributarioFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltaranexo_factura_inicioFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_inicioFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltaranexo_factura_inicioFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltaranexo_factura_finFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_finFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltaranexo_factura_finFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_responsable_fondoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_responsable_fondoFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarsecuencialFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldsecuencialFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarsecuencialFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_gastoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_gastoFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltargasto_valorFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valorFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltargasto_valorFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_gasto2FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_gasto2FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltargasto_valor2FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valor2FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltargasto_valor2FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltargasto_nombreFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_nombreFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltargasto_nombreFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltargasto_nombre2FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_nombre2FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltargasto_nombre2FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_credito_finFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_credito_finFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_credito_fin2FacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_credito_fin2FacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_creditoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_cuenta_contable_creditoFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltardescripcionFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextAreadescripcionFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltardescripcionFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_tipo_movimientoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_tipo_movimientoFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_tipo_movimiento_moduloFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_tipo_movimiento_moduloFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarid_tipo_transaccion_moduloFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarid_tipo_transaccion_moduloFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarnumero_mayorFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_mayorFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarnumero_mayorFacturaProveedor);}
		if(this.facturaproveedorConstantesFunciones.resaltarcodigo_asientoFacturaProveedor!=null && this.jInternalFrameDetalleFormFacturaProveedor!=null) {this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldcodigo_asientoFacturaProveedor.setBorder(this.facturaproveedorConstantesFunciones.resaltarcodigo_asientoFacturaProveedor);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioFacturaProveedor() throws Exception {		
		if(this.jInternalFrameDetalleFormFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
	
		//this.jInternalFrameDetalleFormFacturaProveedor.jLabelidFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostraridFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelidFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostraridFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_empresaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_empresaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_empresaFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_sucursalFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_sucursalFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_sucursalFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_ejercicioFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_ejercicioFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_ejercicioFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_periodoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_periodoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_periodoFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_anioFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_anioFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_anioFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_mesFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_mesFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_mesFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_moduloFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_moduloFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_moduloFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_plantilla_facturaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_plantilla_facturaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_plantilla_facturaFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_plantilla_facturaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_plantilla_facturaFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_documentoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_tipo_documentoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_documentoFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldplazoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarplazoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelplazoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarplazoFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_facturaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_facturaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_facturaFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_facturaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_facturaFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_facturaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarnumero_facturaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelnumero_facturaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarnumero_facturaFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_transaccionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_transaccionFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_transaccionFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_emisionFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarfecha_emisionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelfecha_emisionFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarfecha_emisionFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_clienteFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_clienteFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_clienteFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_clienteFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_clienteFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldrucFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarrucFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelrucFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarrucFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_empleado_solicitaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_empleado_solicitaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_empleado_solicitaFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleado_solicitaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_empleado_solicitaFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_venceFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarfecha_venceFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelfecha_venceFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarfecha_venceFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_monedaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_monedaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_monedaFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_empleadoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_empleadoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_empleadoFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleadoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_empleadoFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_activosFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarcon_activosFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelcon_activosFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarcon_activosFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_riseFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarcon_riseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelcon_riseFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarcon_riseFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_sitiosFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarcon_sitiosFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelcon_sitiosFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarcon_sitiosFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextAreadetalleFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrardetalleFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPaneldetalleFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrardetalleFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes12FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarvalor_bienes12FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelvalor_bienes12FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarvalor_bienes12FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios12FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarvalor_servicios12FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelvalor_servicios12FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarvalor_servicios12FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor12FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrartotal_valor12FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPaneltotal_valor12FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrartotal_valor12FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes0FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarvalor_bienes0FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelvalor_bienes0FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarvalor_bienes0FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios0FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarvalor_servicios0FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelvalor_servicios0FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarvalor_servicios0FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor0FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrartotal_valor0FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPaneltotal_valor0FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrartotal_valor0FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_iceFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarbienes_iceFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelbienes_iceFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarbienes_iceFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_iceFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarservicios_iceFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelservicios_iceFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarservicios_iceFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_iceFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrartotal_iceFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPaneltotal_iceFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrartotal_iceFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_ivaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarbienes_ivaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelbienes_ivaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarbienes_ivaFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_ivaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarservicios_ivaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelservicios_ivaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarservicios_ivaFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_ivaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrartotal_ivaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPaneltotal_ivaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrartotal_ivaFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldiva_porcentajeFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrariva_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPaneliva_porcentajeFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrariva_porcentajeFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotalFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrartotalFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPaneltotalFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrartotalFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_monto_objeto_ivaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarcon_monto_objeto_ivaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelcon_monto_objeto_ivaFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarcon_monto_objeto_ivaFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_retencionFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarnumero_retencionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelnumero_retencionFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarnumero_retencionFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_serieFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarnumero_serieFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelnumero_serieFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarnumero_serieFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_autorizacionFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarnumero_autorizacionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelnumero_autorizacionFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarnumero_autorizacionFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_validezFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarfecha_validezFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelfecha_validezFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarfecha_validezFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_retencion_fuente1FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_tipo_retencion_fuente1FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_retencion_fuente1FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_porcentajeFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_fuente1_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelret_fuente1_porcentajeFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_fuente1_porcentajeFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_baseFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_fuente1_baseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelret_fuente1_baseFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_fuente1_baseFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_retenidoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_fuente1_retenidoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelret_fuente1_retenidoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_fuente1_retenidoFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_retencion_fuente2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_tipo_retencion_fuente2FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_retencion_fuente2FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_porcentajeFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_fuente2_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelret_fuente2_porcentajeFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_fuente2_porcentajeFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_baseFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_fuente2_baseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelret_fuente2_baseFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_fuente2_baseFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_retenidoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_fuente2_retenidoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelret_fuente2_retenidoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_fuente2_retenidoFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_retencion_iva1FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_tipo_retencion_iva1FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_retencion_iva1FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_porcentajeFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_iva_bien_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelret_iva_bien_porcentajeFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_iva_bien_porcentajeFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_baseFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_iva_bien_baseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelret_iva_bien_baseFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_iva_bien_baseFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_retenidoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_iva_bien_retenidoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelret_iva_bien_retenidoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_iva_bien_retenidoFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_retencion_iva2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_tipo_retencion_iva2FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_retencion_iva2FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_porcentajeFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_iva_servicio_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelret_iva_servicio_porcentajeFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_iva_servicio_porcentajeFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_baseFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_iva_servicio_baseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelret_iva_servicio_baseFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_iva_servicio_baseFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_retenidoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_iva_servicio_retenidoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelret_iva_servicio_retenidoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarret_iva_servicio_retenidoFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numero_autorizacionFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostraranexo_numero_autorizacionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelanexo_numero_autorizacionFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostraranexo_numero_autorizacionFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numeso_serieFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostraranexo_numeso_serieFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelanexo_numeso_serieFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostraranexo_numeso_serieFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jDateChooseranexo_fecha_validezFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostraranexo_fecha_validezFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelanexo_fecha_validezFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostraranexo_fecha_validezFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_tributarioFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_tipo_tributarioFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_tributarioFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_inicioFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostraranexo_factura_inicioFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelanexo_factura_inicioFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostraranexo_factura_inicioFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_finFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostraranexo_factura_finFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelanexo_factura_finFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostraranexo_factura_finFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_responsable_fondoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_responsable_fondoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_responsable_fondoFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldsecuencialFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarsecuencialFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelsecuencialFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarsecuencialFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_gastoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_cuenta_contable_gastoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_gastoFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_gastoFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valorFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrargasto_valorFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelgasto_valorFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrargasto_valorFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_gasto2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_cuenta_contable_gasto2FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_gasto2FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valor2FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrargasto_valor2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelgasto_valor2FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrargasto_valor2FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_nombreFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrargasto_nombreFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelgasto_nombreFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrargasto_nombreFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_nombre2FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrargasto_nombre2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelgasto_nombre2FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrargasto_nombre2FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_credito_finFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_cuenta_contable_credito_finFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_credito_finFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_credito_finFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_credito_fin2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_cuenta_contable_credito_fin2FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_credito_fin2FacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_credito_fin2FacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_creditoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_cuenta_contable_creditoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_creditoFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_cuenta_contable_creditoFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextAreadescripcionFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrardescripcionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPaneldescripcionFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrardescripcionFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_movimientoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_tipo_movimientoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_movimientoFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_movimiento_moduloFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_tipo_movimiento_moduloFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_movimiento_moduloFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_transaccion_moduloFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelid_tipo_transaccion_moduloFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarid_tipo_transaccion_moduloFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_mayorFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarnumero_mayorFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelnumero_mayorFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarnumero_mayorFacturaProveedor);
		//this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldcodigo_asientoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarcodigo_asientoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jPanelcodigo_asientoFacturaProveedor.setVisible(this.facturaproveedorConstantesFunciones.mostrarcodigo_asientoFacturaProveedor);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioFacturaProveedor() throws Exception {
		if(this.jInternalFrameDetalleFormFacturaProveedor==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormFacturaProveedor!=null) {
	
		this.jInternalFrameDetalleFormFacturaProveedor.jLabelidFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activaridFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empresaFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_empresaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_sucursalFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_sucursalFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_ejercicioFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_ejercicioFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_periodoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_periodoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_anioFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_anioFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_mesFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_mesFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_moduloFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_moduloFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_plantilla_facturaFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_plantilla_facturaFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_plantilla_facturaFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_plantilla_facturaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_documentoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_tipo_documentoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldplazoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarplazoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_facturaFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_facturaFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_facturaFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_facturaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_facturaFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarnumero_facturaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_transaccionFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_transaccionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_emisionFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarfecha_emisionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_clienteFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_clienteFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_clienteFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_clienteFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldrucFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarrucFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleado_solicitaFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_empleado_solicitaFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleado_solicitaFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_empleado_solicitaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_venceFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarfecha_venceFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_monedaFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_monedaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_empleadoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_empleadoFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_empleadoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_empleadoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_activosFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarcon_activosFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_riseFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarcon_riseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_sitiosFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarcon_sitiosFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextAreadetalleFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activardetalleFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes12FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarvalor_bienes12FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios12FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarvalor_servicios12FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor12FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activartotal_valor12FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_bienes0FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarvalor_bienes0FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldvalor_servicios0FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarvalor_servicios0FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_valor0FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activartotal_valor0FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_iceFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarbienes_iceFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_iceFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarservicios_iceFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_iceFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activartotal_iceFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldbienes_ivaFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarbienes_ivaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldservicios_ivaFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarservicios_ivaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotal_ivaFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activartotal_ivaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldiva_porcentajeFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activariva_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldtotalFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activartotalFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jCheckBoxcon_monto_objeto_ivaFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarcon_monto_objeto_ivaFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_retencionFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarnumero_retencionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_serieFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarnumero_serieFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_autorizacionFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarnumero_autorizacionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jDateChooserfecha_validezFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarfecha_validezFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente1FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_fuente1FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_porcentajeFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarret_fuente1_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_baseFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarret_fuente1_baseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente1_retenidoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarret_fuente1_retenidoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_fuente2FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_fuente2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_porcentajeFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarret_fuente2_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_baseFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarret_fuente2_baseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_fuente2_retenidoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarret_fuente2_retenidoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva1FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_iva1FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_porcentajeFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarret_iva_bien_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_baseFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarret_iva_bien_baseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_bien_retenidoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarret_iva_bien_retenidoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_retencion_iva2FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_tipo_retencion_iva2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_porcentajeFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarret_iva_servicio_porcentajeFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_baseFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarret_iva_servicio_baseFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldret_iva_servicio_retenidoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarret_iva_servicio_retenidoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numero_autorizacionFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activaranexo_numero_autorizacionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_numeso_serieFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activaranexo_numeso_serieFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jDateChooseranexo_fecha_validezFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activaranexo_fecha_validezFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_tributarioFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_tipo_tributarioFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_inicioFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activaranexo_factura_inicioFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldanexo_factura_finFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activaranexo_factura_finFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_bienesFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_fiscal_bienesFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_responsable_fondoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_responsable_fondoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_fiscal_serviciosFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldsecuencialFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarsecuencialFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gastoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_gastoFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_gastoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_gastoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valorFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activargasto_valorFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_gasto2FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_gasto2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_valor2FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activargasto_valor2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_nombreFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activargasto_nombreFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldgasto_nombre2FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activargasto_nombre2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_finFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_finFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_finFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_finFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_credito_fin2FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_fin2FacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_credito_fin2FacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_credito_fin2FacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_cuenta_contable_creditoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_creditoFacturaProveedor);
			this.jInternalFrameDetalleFormFacturaProveedor.jButtonid_cuenta_contable_creditoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_cuenta_contable_creditoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextAreadescripcionFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activardescripcionFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimientoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_tipo_movimientoFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_movimiento_moduloFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_tipo_movimiento_moduloFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jComboBoxid_tipo_transaccion_moduloFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarid_tipo_transaccion_moduloFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldnumero_mayorFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarnumero_mayorFacturaProveedor);
		this.jInternalFrameDetalleFormFacturaProveedor.jTextFieldcodigo_asientoFacturaProveedor.setEnabled(this.facturaproveedorConstantesFunciones.activarcodigo_asientoFacturaProveedor);
		}
	}
	
		
}